
serwerFTP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c83c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a4  0800ca0c  0800ca0c  0001ca0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800ccb0  0800ccb0  0001ccb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800ccb4  0800ccb4  0001ccb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000094  20000000  0800ccb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000b364  20000094  0800cd4c  00020094  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000b3f8  0800cd4c  0002b3f8  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
  9 .debug_info   00060025  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000bda5  00000000  00000000  000800e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001b8f1  00000000  00000000  0008be8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001f60  00000000  00000000  000a7780  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00002d68  00000000  00000000  000a96e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00016d24  00000000  00000000  000ac448  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000bfdf  00000000  00000000  000c316c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000cf14b  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006000  00000000  00000000  000cf1c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000094 	.word	0x20000094
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c9f4 	.word	0x0800c9f4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000098 	.word	0x20000098
 800020c:	0800c9f4 	.word	0x0800c9f4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80002b0:	b508      	push	{r3, lr}
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80002b2:	2003      	movs	r0, #3
 80002b4:	f000 f824 	bl	8000300 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80002b8:	2000      	movs	r0, #0
 80002ba:	f00b f96b 	bl	800b594 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80002be:	f00b f906 	bl	800b4ce <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 80002c2:	2000      	movs	r0, #0
 80002c4:	bd08      	pop	{r3, pc}
	...

080002c8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80002c8:	4a02      	ldr	r2, [pc, #8]	; (80002d4 <HAL_IncTick+0xc>)
 80002ca:	6813      	ldr	r3, [r2, #0]
 80002cc:	3301      	adds	r3, #1
 80002ce:	6013      	str	r3, [r2, #0]
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	20003fc4 	.word	0x20003fc4

080002d8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80002d8:	4b01      	ldr	r3, [pc, #4]	; (80002e0 <HAL_GetTick+0x8>)
 80002da:	6818      	ldr	r0, [r3, #0]
}
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop
 80002e0:	20003fc4 	.word	0x20003fc4

080002e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80002e4:	b513      	push	{r0, r1, r4, lr}
 80002e6:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 80002e8:	f7ff fff6 	bl	80002d8 <HAL_GetTick>
 80002ec:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80002ee:	f7ff fff3 	bl	80002d8 <HAL_GetTick>
 80002f2:	9b01      	ldr	r3, [sp, #4]
 80002f4:	1b00      	subs	r0, r0, r4
 80002f6:	4298      	cmp	r0, r3
 80002f8:	d3f9      	bcc.n	80002ee <HAL_Delay+0xa>
  {
  }
}
 80002fa:	b002      	add	sp, #8
 80002fc:	bd10      	pop	{r4, pc}
	...

08000300 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000300:	4a07      	ldr	r2, [pc, #28]	; (8000320 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000302:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000304:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000306:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800030a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800030e:	041b      	lsls	r3, r3, #16
 8000310:	0c1b      	lsrs	r3, r3, #16
 8000312:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000316:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800031a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800031c:	60d3      	str	r3, [r2, #12]
 800031e:	4770      	bx	lr
 8000320:	e000ed00 	.word	0xe000ed00

08000324 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000324:	4b19      	ldr	r3, [pc, #100]	; (800038c <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000326:	b530      	push	{r4, r5, lr}
 8000328:	68dc      	ldr	r4, [r3, #12]
 800032a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800032e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000332:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000334:	2b04      	cmp	r3, #4
 8000336:	bf28      	it	cs
 8000338:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800033a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800033c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000340:	bf8c      	ite	hi
 8000342:	3c03      	subhi	r4, #3
 8000344:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000346:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) < 0)
 800034a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800034c:	f103 33ff 	add.w	r3, r3, #4294967295
 8000350:	ea01 0103 	and.w	r1, r1, r3
 8000354:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000358:	fa05 f404 	lsl.w	r4, r5, r4
 800035c:	f104 34ff 	add.w	r4, r4, #4294967295
 8000360:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000364:	ea42 0201 	orr.w	r2, r2, r1
 8000368:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) < 0)
 800036c:	da05      	bge.n	800037a <HAL_NVIC_SetPriority+0x56>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800036e:	f000 000f 	and.w	r0, r0, #15
 8000372:	b2d2      	uxtb	r2, r2
 8000374:	4b06      	ldr	r3, [pc, #24]	; (8000390 <HAL_NVIC_SetPriority+0x6c>)
 8000376:	541a      	strb	r2, [r3, r0]
 8000378:	bd30      	pop	{r4, r5, pc}
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800037a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800037e:	b2d2      	uxtb	r2, r2
 8000380:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000384:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 8000388:	bd30      	pop	{r4, r5, pc}
 800038a:	bf00      	nop
 800038c:	e000ed00 	.word	0xe000ed00
 8000390:	e000ed14 	.word	0xe000ed14

08000394 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000394:	0942      	lsrs	r2, r0, #5
 8000396:	2301      	movs	r3, #1
 8000398:	f000 001f 	and.w	r0, r0, #31
 800039c:	fa03 f000 	lsl.w	r0, r3, r0
 80003a0:	4b01      	ldr	r3, [pc, #4]	; (80003a8 <HAL_NVIC_EnableIRQ+0x14>)
 80003a2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80003a6:	4770      	bx	lr
 80003a8:	e000e100 	.word	0xe000e100

080003ac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003ac:	3801      	subs	r0, #1
 80003ae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80003b2:	d20a      	bcs.n	80003ca <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003b4:	4b06      	ldr	r3, [pc, #24]	; (80003d0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003b6:	21f0      	movs	r1, #240	; 0xf0
 80003b8:	4a06      	ldr	r2, [pc, #24]	; (80003d4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003ba:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003bc:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003be:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003c2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003c4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003c6:	601a      	str	r2, [r3, #0]
 80003c8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80003ca:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop
 80003d0:	e000e010 	.word	0xe000e010
 80003d4:	e000ed00 	.word	0xe000ed00

080003d8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80003d8:	4b04      	ldr	r3, [pc, #16]	; (80003ec <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80003da:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80003dc:	681a      	ldr	r2, [r3, #0]
 80003de:	bf0c      	ite	eq
 80003e0:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80003e4:	f022 0204 	bicne.w	r2, r2, #4
 80003e8:	601a      	str	r2, [r3, #0]
 80003ea:	4770      	bx	lr
 80003ec:	e000e010 	.word	0xe000e010

080003f0 <ETH_FlushTransmitFIFO>:
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
  __IO uint32_t tmpreg = 0;
 80003f0:	2300      	movs	r3, #0
{
 80003f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80003f4:	f241 0418 	movw	r4, #4120	; 0x1018
  __IO uint32_t tmpreg = 0;
 80003f8:	9301      	str	r3, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80003fa:	6803      	ldr	r3, [r0, #0]
{
 80003fc:	4605      	mov	r5, r0
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80003fe:	2001      	movs	r0, #1
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8000400:	591a      	ldr	r2, [r3, r4]
 8000402:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000406:	511a      	str	r2, [r3, r4]
  tmpreg = (heth->Instance)->DMAOMR;
 8000408:	591b      	ldr	r3, [r3, r4]
 800040a:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800040c:	f7ff ff6a 	bl	80002e4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8000410:	682b      	ldr	r3, [r5, #0]
 8000412:	9a01      	ldr	r2, [sp, #4]
 8000414:	511a      	str	r2, [r3, r4]
}
 8000416:	b003      	add	sp, #12
 8000418:	bd30      	pop	{r4, r5, pc}
	...

0800041c <ETH_MACDMAConfig>:
{
 800041c:	b570      	push	{r4, r5, r6, lr}
 800041e:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8000420:	b129      	cbz	r1, 800042e <ETH_MACDMAConfig+0x12>
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8000422:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000426:	60c3      	str	r3, [r0, #12]
    (heth->Init).Speed = ETH_SPEED_100M;
 8000428:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800042c:	6083      	str	r3, [r0, #8]
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800042e:	69e3      	ldr	r3, [r4, #28]
  tmpreg = (heth->Instance)->MACCR;
 8000430:	6822      	ldr	r2, [r4, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8000432:	2b00      	cmp	r3, #0
                       macinit.LoopbackMode |
 8000434:	68e0      	ldr	r0, [r4, #12]
 8000436:	68a3      	ldr	r3, [r4, #8]
  tmpreg = (heth->Instance)->MACCR;
 8000438:	6815      	ldr	r5, [r2, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800043a:	bf08      	it	eq
 800043c:	f44f 6180 	moveq.w	r1, #1024	; 0x400
                       macinit.LoopbackMode |
 8000440:	ea43 0300 	orr.w	r3, r3, r0
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8000444:	482e      	ldr	r0, [pc, #184]	; (8000500 <ETH_MACDMAConfig+0xe4>)
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8000446:	bf18      	it	ne
 8000448:	2100      	movne	r1, #0
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 800044a:	4028      	ands	r0, r5
 800044c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000450:	4303      	orrs	r3, r0
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000452:	2001      	movs	r0, #1
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8000454:	430b      	orrs	r3, r1
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8000456:	6013      	str	r3, [r2, #0]
  tmpreg = (heth->Instance)->MACCR;
 8000458:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800045a:	f7ff ff43 	bl	80002e4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 800045e:	6823      	ldr	r3, [r4, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000460:	2240      	movs	r2, #64	; 0x40
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000462:	2001      	movs	r0, #1
  (heth->Instance)->MACCR = tmpreg; 
 8000464:	601d      	str	r5, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000466:	605a      	str	r2, [r3, #4]
   tmpreg = (heth->Instance)->MACFFR;
 8000468:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800046a:	f7ff ff3b 	bl	80002e4 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 800046e:	6823      	ldr	r3, [r4, #0]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000470:	2001      	movs	r0, #1
   (heth->Instance)->MACFFR = tmpreg;
 8000472:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8000474:	2500      	movs	r5, #0
 8000476:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8000478:	60dd      	str	r5, [r3, #12]
   tmpreg = (heth->Instance)->MACFCR;
 800047a:	699a      	ldr	r2, [r3, #24]
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800047c:	f022 02be 	bic.w	r2, r2, #190	; 0xbe
 8000480:	0412      	lsls	r2, r2, #16
 8000482:	0c12      	lsrs	r2, r2, #16
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8000484:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8000488:	619a      	str	r2, [r3, #24]
   tmpreg = (heth->Instance)->MACFCR;
 800048a:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800048c:	f7ff ff2a 	bl	80002e4 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8000490:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000492:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg;
 8000494:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8000496:	61dd      	str	r5, [r3, #28]
    tmpreg = (heth->Instance)->MACVLANTR;
 8000498:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800049a:	f7ff ff23 	bl	80002e4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 800049e:	6822      	ldr	r2, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80004a0:	2001      	movs	r0, #1
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80004a2:	4b18      	ldr	r3, [pc, #96]	; (8000504 <ETH_MACDMAConfig+0xe8>)
    (heth->Instance)->MACVLANTR = tmpreg;
 80004a4:	61d5      	str	r5, [r2, #28]
    tmpreg = (heth->Instance)->DMAOMR;
 80004a6:	f241 0518 	movw	r5, #4120	; 0x1018
 80004aa:	5951      	ldr	r1, [r2, r5]
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80004ac:	400b      	ands	r3, r1
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80004ae:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 80004b2:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 80004b6:	5153      	str	r3, [r2, r5]
    tmpreg = (heth->Instance)->DMAOMR;
 80004b8:	5956      	ldr	r6, [r2, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80004ba:	f7ff ff13 	bl	80002e4 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 80004be:	6823      	ldr	r3, [r4, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80004c0:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80004c2:	4a11      	ldr	r2, [pc, #68]	; (8000508 <ETH_MACDMAConfig+0xec>)
    (heth->Instance)->DMAOMR = tmpreg;
 80004c4:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80004c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80004ca:	601a      	str	r2, [r3, #0]
     tmpreg = (heth->Instance)->DMABMR;
 80004cc:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80004ce:	f7ff ff09 	bl	80002e4 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80004d2:	6822      	ldr	r2, [r4, #0]
 80004d4:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 80004d8:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80004da:	69a3      	ldr	r3, [r4, #24]
 80004dc:	2b01      	cmp	r3, #1
 80004de:	d107      	bne.n	80004f0 <ETH_MACDMAConfig+0xd4>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80004e0:	f241 011c 	movw	r1, #4124	; 0x101c
 80004e4:	5853      	ldr	r3, [r2, r1]
 80004e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004ee:	5053      	str	r3, [r2, r1]
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80004f0:	6963      	ldr	r3, [r4, #20]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80004f2:	4a06      	ldr	r2, [pc, #24]	; (800050c <ETH_MACDMAConfig+0xf0>)
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80004f4:	8899      	ldrh	r1, [r3, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80004f6:	6011      	str	r1, [r2, #0]
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 80004f8:	681a      	ldr	r2, [r3, #0]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80004fa:	4b05      	ldr	r3, [pc, #20]	; (8000510 <ETH_MACDMAConfig+0xf4>)
 80004fc:	601a      	str	r2, [r3, #0]
 80004fe:	bd70      	pop	{r4, r5, r6, pc}
 8000500:	ff20810f 	.word	0xff20810f
 8000504:	f8de3f23 	.word	0xf8de3f23
 8000508:	02c12080 	.word	0x02c12080
 800050c:	40028040 	.word	0x40028040
 8000510:	40028044 	.word	0x40028044

08000514 <HAL_ETH_DMATxDescListInit>:
{
 8000514:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 8000516:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 800051a:	2c01      	cmp	r4, #1
 800051c:	f04f 0402 	mov.w	r4, #2
 8000520:	d033      	beq.n	800058a <HAL_ETH_DMATxDescListInit+0x76>
 8000522:	2501      	movs	r5, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8000524:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8000528:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
 800052c:	f101 0420 	add.w	r4, r1, #32
  __HAL_LOCK(heth);
 8000530:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8000534:	f240 5ef4 	movw	lr, #1524	; 0x5f4
  for(i=0; i < TxBuffCount; i++)
 8000538:	2500      	movs	r5, #0
    if(i < (TxBuffCount-1))
 800053a:	f103 3cff 	add.w	ip, r3, #4294967295
  heth->TxDesc = DMATxDescTab;
 800053e:	62c1      	str	r1, [r0, #44]	; 0x2c
  for(i=0; i < TxBuffCount; i++)
 8000540:	429d      	cmp	r5, r3
 8000542:	d10b      	bne.n	800055c <HAL_ETH_DMATxDescListInit+0x48>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8000544:	6802      	ldr	r2, [r0, #0]
 8000546:	f241 0310 	movw	r3, #4112	; 0x1010
 800054a:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 800054c:	2301      	movs	r3, #1
 800054e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000552:	2300      	movs	r3, #0
 8000554:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8000558:	4618      	mov	r0, r3
 800055a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800055c:	fb0e 2605 	mla	r6, lr, r5, r2
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8000560:	f844 7c20 	str.w	r7, [r4, #-32]
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8000564:	f844 6c18 	str.w	r6, [r4, #-24]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000568:	69c6      	ldr	r6, [r0, #28]
 800056a:	b92e      	cbnz	r6, 8000578 <HAL_ETH_DMATxDescListInit+0x64>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800056c:	f854 6c20 	ldr.w	r6, [r4, #-32]
 8000570:	f446 0640 	orr.w	r6, r6, #12582912	; 0xc00000
 8000574:	f844 6c20 	str.w	r6, [r4, #-32]
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8000578:	4565      	cmp	r5, ip
 800057a:	bf2c      	ite	cs
 800057c:	460e      	movcs	r6, r1
 800057e:	4626      	movcc	r6, r4
  for(i=0; i < TxBuffCount; i++)
 8000580:	3501      	adds	r5, #1
 8000582:	3420      	adds	r4, #32
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8000584:	f844 6c34 	str.w	r6, [r4, #-52]
 8000588:	e7da      	b.n	8000540 <HAL_ETH_DMATxDescListInit+0x2c>
  __HAL_LOCK(heth);
 800058a:	4620      	mov	r0, r4
}
 800058c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800058e <HAL_ETH_DMARxDescListInit>:
{
 800058e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(heth);
 8000592:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8000596:	2c01      	cmp	r4, #1
 8000598:	f04f 0402 	mov.w	r4, #2
 800059c:	d030      	beq.n	8000600 <HAL_ETH_DMARxDescListInit+0x72>
 800059e:	2501      	movs	r5, #1
  heth->State = HAL_ETH_STATE_BUSY;
 80005a0:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80005a4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80005a8:	f101 0420 	add.w	r4, r1, #32
  __HAL_LOCK(heth);
 80005ac:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80005b0:	f244 57f4 	movw	r7, #17908	; 0x45f4
  for(i=0; i < RxBuffCount; i++)
 80005b4:	2500      	movs	r5, #0
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80005b6:	f240 5ef4 	movw	lr, #1524	; 0x5f4
    if(i < (RxBuffCount-1))
 80005ba:	f103 3cff 	add.w	ip, r3, #4294967295
  heth->RxDesc = DMARxDescTab; 
 80005be:	6281      	str	r1, [r0, #40]	; 0x28
  for(i=0; i < RxBuffCount; i++)
 80005c0:	429d      	cmp	r5, r3
 80005c2:	d10c      	bne.n	80005de <HAL_ETH_DMARxDescListInit+0x50>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80005c4:	6802      	ldr	r2, [r0, #0]
 80005c6:	f241 030c 	movw	r3, #4108	; 0x100c
 80005ca:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 80005cc:	2301      	movs	r3, #1
 80005ce:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80005d2:	2300      	movs	r3, #0
 80005d4:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 80005d8:	4618      	mov	r0, r3
 80005da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80005de:	fb0e 2805 	mla	r8, lr, r5, r2
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80005e2:	f844 6c20 	str.w	r6, [r4, #-32]
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80005e6:	f844 8c18 	str.w	r8, [r4, #-24]
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 80005ea:	4565      	cmp	r5, ip
 80005ec:	bf2c      	ite	cs
 80005ee:	4688      	movcs	r8, r1
 80005f0:	46a0      	movcc	r8, r4
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80005f2:	f844 7c1c 	str.w	r7, [r4, #-28]
  for(i=0; i < RxBuffCount; i++)
 80005f6:	3501      	adds	r5, #1
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 80005f8:	f844 8c14 	str.w	r8, [r4, #-20]
 80005fc:	3420      	adds	r4, #32
 80005fe:	e7df      	b.n	80005c0 <HAL_ETH_DMARxDescListInit+0x32>
  __HAL_LOCK(heth);
 8000600:	4620      	mov	r0, r4
}
 8000602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08000608 <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 8000608:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800060c:	2b01      	cmp	r3, #1
 800060e:	f04f 0302 	mov.w	r3, #2
{
 8000612:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 8000614:	d066      	beq.n	80006e4 <HAL_ETH_TransmitFrame+0xdc>
 8000616:	2201      	movs	r2, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8000618:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 800061c:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  if (FrameLength == 0) 
 8000620:	b929      	cbnz	r1, 800062e <HAL_ETH_TransmitFrame+0x26>
    heth->State = HAL_ETH_STATE_READY;
 8000622:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000626:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
    return HAL_ERROR;
 800062a:	4610      	mov	r0, r2
 800062c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800062e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000630:	681c      	ldr	r4, [r3, #0]
 8000632:	2c00      	cmp	r4, #0
 8000634:	da06      	bge.n	8000644 <HAL_ETH_TransmitFrame+0x3c>
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8000636:	2312      	movs	r3, #18
 8000638:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800063c:	2300      	movs	r3, #0
 800063e:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 8000642:	e7f2      	b.n	800062a <HAL_ETH_TransmitFrame+0x22>
  if (FrameLength > ETH_TX_BUF_SIZE)
 8000644:	f240 54f4 	movw	r4, #1524	; 0x5f4
 8000648:	42a1      	cmp	r1, r4
 800064a:	d92c      	bls.n	80006a6 <HAL_ETH_TransmitFrame+0x9e>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800064c:	fbb1 f2f4 	udiv	r2, r1, r4
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8000650:	fb04 1412 	mls	r4, r4, r2, r1
 8000654:	b32c      	cbz	r4, 80006a2 <HAL_ETH_TransmitFrame+0x9a>
      bufcount++;
 8000656:	3201      	adds	r2, #1
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8000658:	4c23      	ldr	r4, [pc, #140]	; (80006e8 <HAL_ETH_TransmitFrame+0xe0>)
 800065a:	f201 51f4 	addw	r1, r1, #1524	; 0x5f4
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800065e:	f240 56f4 	movw	r6, #1524	; 0x5f4
      if (i == (bufcount-1))
 8000662:	1e57      	subs	r7, r2, #1
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8000664:	fb04 1102 	mla	r1, r4, r2, r1
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8000668:	2400      	movs	r4, #0
 800066a:	f3c1 010c 	ubfx	r1, r1, #0, #13
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800066e:	681d      	ldr	r5, [r3, #0]
 8000670:	f025 5540 	bic.w	r5, r5, #805306368	; 0x30000000
 8000674:	601d      	str	r5, [r3, #0]
      if (i == 0) 
 8000676:	b91c      	cbnz	r4, 8000680 <HAL_ETH_TransmitFrame+0x78>
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8000678:	681d      	ldr	r5, [r3, #0]
 800067a:	f045 5580 	orr.w	r5, r5, #268435456	; 0x10000000
 800067e:	601d      	str	r5, [r3, #0]
      if (i == (bufcount-1))
 8000680:	42a7      	cmp	r7, r4
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8000682:	605e      	str	r6, [r3, #4]
      if (i == (bufcount-1))
 8000684:	d104      	bne.n	8000690 <HAL_ETH_TransmitFrame+0x88>
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8000686:	681d      	ldr	r5, [r3, #0]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8000688:	6059      	str	r1, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800068a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800068e:	601d      	str	r5, [r3, #0]
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000690:	681d      	ldr	r5, [r3, #0]
    for (i=0; i< bufcount; i++)
 8000692:	3401      	adds	r4, #1
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000694:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    for (i=0; i< bufcount; i++)
 8000698:	4294      	cmp	r4, r2
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800069a:	601d      	str	r5, [r3, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800069c:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< bufcount; i++)
 800069e:	d1e6      	bne.n	800066e <HAL_ETH_TransmitFrame+0x66>
 80006a0:	e00d      	b.n	80006be <HAL_ETH_TransmitFrame+0xb6>
  if (bufcount == 1)
 80006a2:	2a01      	cmp	r2, #1
 80006a4:	d1d8      	bne.n	8000658 <HAL_ETH_TransmitFrame+0x50>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80006a6:	681a      	ldr	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80006a8:	f3c1 010c 	ubfx	r1, r1, #0, #13
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80006ac:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80006b0:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80006b2:	601a      	str	r2, [r3, #0]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80006ba:	601a      	str	r2, [r3, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80006bc:	68db      	ldr	r3, [r3, #12]
 80006be:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80006c0:	f241 0214 	movw	r2, #4116	; 0x1014
 80006c4:	6803      	ldr	r3, [r0, #0]
 80006c6:	5899      	ldr	r1, [r3, r2]
 80006c8:	0749      	lsls	r1, r1, #29
 80006ca:	d505      	bpl.n	80006d8 <HAL_ETH_TransmitFrame+0xd0>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80006cc:	2104      	movs	r1, #4
 80006ce:	5099      	str	r1, [r3, r2]
    (heth->Instance)->DMATPDR = 0;
 80006d0:	2100      	movs	r1, #0
 80006d2:	f241 0204 	movw	r2, #4100	; 0x1004
 80006d6:	5099      	str	r1, [r3, r2]
  heth->State = HAL_ETH_STATE_READY;
 80006d8:	2301      	movs	r3, #1
 80006da:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80006de:	2300      	movs	r3, #0
 80006e0:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  __HAL_LOCK(heth);
 80006e4:	4618      	mov	r0, r3
}
 80006e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006e8:	fffffa0c 	.word	0xfffffa0c

080006ec <HAL_ETH_GetReceivedFrame_IT>:
  __HAL_LOCK(heth);
 80006ec:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	f04f 0302 	mov.w	r3, #2
{
 80006f6:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(heth);
 80006f8:	d03b      	beq.n	8000772 <HAL_ETH_GetReceivedFrame_IT+0x86>
 80006fa:	2201      	movs	r2, #1
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80006fc:	2405      	movs	r4, #5
  heth->State = HAL_ETH_STATE_BUSY;
 80006fe:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      heth->RxFrameInfos.SegCount = 1;   
 8000702:	4611      	mov	r1, r2
  __HAL_LOCK(heth);
 8000704:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8000708:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800070a:	681a      	ldr	r2, [r3, #0]
 800070c:	2a00      	cmp	r2, #0
 800070e:	db01      	blt.n	8000714 <HAL_ETH_GetReceivedFrame_IT+0x28>
 8000710:	3c01      	subs	r4, #1
 8000712:	d106      	bne.n	8000722 <HAL_ETH_GetReceivedFrame_IT+0x36>
  heth->State = HAL_ETH_STATE_READY;
 8000714:	2301      	movs	r3, #1
  __HAL_UNLOCK(heth);
 8000716:	2200      	movs	r2, #0
  heth->State = HAL_ETH_STATE_READY;
 8000718:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800071c:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  return HAL_ERROR;
 8000720:	e027      	b.n	8000772 <HAL_ETH_GetReceivedFrame_IT+0x86>
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8000722:	681a      	ldr	r2, [r3, #0]
 8000724:	68dd      	ldr	r5, [r3, #12]
 8000726:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800072a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800072e:	d103      	bne.n	8000738 <HAL_ETH_GetReceivedFrame_IT+0x4c>
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8000730:	6303      	str	r3, [r0, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 8000732:	6381      	str	r1, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8000734:	6285      	str	r5, [r0, #40]	; 0x28
 8000736:	e7e7      	b.n	8000708 <HAL_ETH_GetReceivedFrame_IT+0x1c>
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	f412 7f40 	tst.w	r2, #768	; 0x300
 800073e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000740:	d102      	bne.n	8000748 <HAL_ETH_GetReceivedFrame_IT+0x5c>
      (heth->RxFrameInfos.SegCount)++;
 8000742:	3201      	adds	r2, #1
 8000744:	6382      	str	r2, [r0, #56]	; 0x38
 8000746:	e7f5      	b.n	8000734 <HAL_ETH_GetReceivedFrame_IT+0x48>
      (heth->RxFrameInfos.SegCount)++;
 8000748:	3201      	adds	r2, #1
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 800074a:	6343      	str	r3, [r0, #52]	; 0x34
      if ((heth->RxFrameInfos.SegCount) == 1)
 800074c:	2a01      	cmp	r2, #1
      (heth->RxFrameInfos.SegCount)++;
 800074e:	6382      	str	r2, [r0, #56]	; 0x38
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8000750:	bf08      	it	eq
 8000752:	6303      	streq	r3, [r0, #48]	; 0x30
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	f3c3 430d 	ubfx	r3, r3, #16, #14
 800075a:	3b04      	subs	r3, #4
 800075c:	63c3      	str	r3, [r0, #60]	; 0x3c
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800075e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000760:	689b      	ldr	r3, [r3, #8]
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8000762:	6285      	str	r5, [r0, #40]	; 0x28
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8000764:	6403      	str	r3, [r0, #64]	; 0x40
      heth->State = HAL_ETH_STATE_READY;
 8000766:	2301      	movs	r3, #1
 8000768:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800076c:	2300      	movs	r3, #0
 800076e:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
}
 8000772:	4618      	mov	r0, r3
 8000774:	bd30      	pop	{r4, r5, pc}

08000776 <HAL_ETH_TxCpltCallback>:
 8000776:	4770      	bx	lr

08000778 <HAL_ETH_ErrorCallback>:
{
 8000778:	4770      	bx	lr

0800077a <HAL_ETH_IRQHandler>:
{
 800077a:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 800077c:	6802      	ldr	r2, [r0, #0]
 800077e:	f241 0614 	movw	r6, #4116	; 0x1014
{
 8000782:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8000784:	5995      	ldr	r5, [r2, r6]
 8000786:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800078a:	d021      	beq.n	80007d0 <HAL_ETH_IRQHandler+0x56>
    HAL_ETH_RxCpltCallback(heth);
 800078c:	f00a fc76 	bl	800b07c <HAL_ETH_RxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8000790:	6823      	ldr	r3, [r4, #0]
 8000792:	2240      	movs	r2, #64	; 0x40
 8000794:	519a      	str	r2, [r3, r6]
    heth->State = HAL_ETH_STATE_READY;
 8000796:	2301      	movs	r3, #1
 8000798:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800079c:	2300      	movs	r3, #0
 800079e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 80007a2:	6823      	ldr	r3, [r4, #0]
 80007a4:	f241 0514 	movw	r5, #4116	; 0x1014
 80007a8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007ac:	515a      	str	r2, [r3, r5]
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 80007ae:	595b      	ldr	r3, [r3, r5]
 80007b0:	041b      	lsls	r3, r3, #16
 80007b2:	d50c      	bpl.n	80007ce <HAL_ETH_IRQHandler+0x54>
    HAL_ETH_ErrorCallback(heth);
 80007b4:	4620      	mov	r0, r4
 80007b6:	f7ff ffdf 	bl	8000778 <HAL_ETH_ErrorCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 80007ba:	6823      	ldr	r3, [r4, #0]
 80007bc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80007c0:	515a      	str	r2, [r3, r5]
    heth->State = HAL_ETH_STATE_READY;
 80007c2:	2301      	movs	r3, #1
 80007c4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 80007c8:	2300      	movs	r3, #0
 80007ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80007ce:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 80007d0:	5993      	ldr	r3, [r2, r6]
 80007d2:	07da      	lsls	r2, r3, #31
 80007d4:	d5e5      	bpl.n	80007a2 <HAL_ETH_IRQHandler+0x28>
    HAL_ETH_TxCpltCallback(heth);
 80007d6:	f7ff ffce 	bl	8000776 <HAL_ETH_TxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 80007da:	2301      	movs	r3, #1
 80007dc:	6822      	ldr	r2, [r4, #0]
 80007de:	5193      	str	r3, [r2, r6]
    heth->State = HAL_ETH_STATE_READY;
 80007e0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 80007e4:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 80007e8:	e7db      	b.n	80007a2 <HAL_ETH_IRQHandler+0x28>

080007ea <HAL_ETH_ReadPHYRegister>:
{
 80007ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80007ec:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
{
 80007f0:	4605      	mov	r5, r0
 80007f2:	4616      	mov	r6, r2
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80007f4:	2b82      	cmp	r3, #130	; 0x82
 80007f6:	d030      	beq.n	800085a <HAL_ETH_ReadPHYRegister+0x70>
  tmpreg = heth->Instance->MACMIIAR;
 80007f8:	6802      	ldr	r2, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80007fa:	2382      	movs	r3, #130	; 0x82
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80007fc:	0189      	lsls	r1, r1, #6
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80007fe:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg = heth->Instance->MACMIIAR;
 8000802:	6913      	ldr	r3, [r2, #16]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8000804:	f401 64f8 	and.w	r4, r1, #1984	; 0x7c0
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8000808:	f003 011c 	and.w	r1, r3, #28
 800080c:	4321      	orrs	r1, r4
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800080e:	8a04      	ldrh	r4, [r0, #16]
 8000810:	02e4      	lsls	r4, r4, #11
 8000812:	b2a4      	uxth	r4, r4
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8000814:	430c      	orrs	r4, r1
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8000816:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg;
 800081a:	6114      	str	r4, [r2, #16]
  tickstart = HAL_GetTick();
 800081c:	f7ff fd5c 	bl	80002d8 <HAL_GetTick>
 8000820:	4607      	mov	r7, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000822:	f014 0001 	ands.w	r0, r4, #1
 8000826:	d107      	bne.n	8000838 <HAL_ETH_ReadPHYRegister+0x4e>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8000828:	682b      	ldr	r3, [r5, #0]
 800082a:	695b      	ldr	r3, [r3, #20]
 800082c:	b29b      	uxth	r3, r3
 800082e:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 8000830:	2301      	movs	r3, #1
 8000832:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8000836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8000838:	f7ff fd4e 	bl	80002d8 <HAL_GetTick>
 800083c:	1bc0      	subs	r0, r0, r7
 800083e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000842:	d307      	bcc.n	8000854 <HAL_ETH_ReadPHYRegister+0x6a>
      heth->State= HAL_ETH_STATE_READY;
 8000844:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 8000846:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 8000848:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800084c:	2300      	movs	r3, #0
 800084e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8000852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpreg = heth->Instance->MACMIIAR;
 8000854:	682b      	ldr	r3, [r5, #0]
 8000856:	691c      	ldr	r4, [r3, #16]
 8000858:	e7e3      	b.n	8000822 <HAL_ETH_ReadPHYRegister+0x38>
    return HAL_BUSY;
 800085a:	2002      	movs	r0, #2
}
 800085c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800085e <HAL_ETH_WritePHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800085e:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000862:	2b42      	cmp	r3, #66	; 0x42
{
 8000864:	b570      	push	{r4, r5, r6, lr}
 8000866:	4605      	mov	r5, r0
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000868:	d02e      	beq.n	80008c8 <HAL_ETH_WritePHYRegister+0x6a>
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800086a:	2342      	movs	r3, #66	; 0x42
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800086c:	018c      	lsls	r4, r1, #6
 800086e:	b292      	uxth	r2, r2
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8000870:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000874:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
  tmpreg = heth->Instance->MACMIIAR;
 8000878:	6803      	ldr	r3, [r0, #0]
 800087a:	f044 0403 	orr.w	r4, r4, #3
 800087e:	6918      	ldr	r0, [r3, #16]
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8000880:	f000 001c 	and.w	r0, r0, #28
 8000884:	4320      	orrs	r0, r4
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000886:	8a2c      	ldrh	r4, [r5, #16]
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8000888:	615a      	str	r2, [r3, #20]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800088a:	02e4      	lsls	r4, r4, #11
 800088c:	b2a4      	uxth	r4, r4
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 800088e:	4304      	orrs	r4, r0
  heth->Instance->MACMIIAR = tmpreg;
 8000890:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 8000892:	f7ff fd21 	bl	80002d8 <HAL_GetTick>
 8000896:	4606      	mov	r6, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000898:	f014 0001 	ands.w	r0, r4, #1
 800089c:	d103      	bne.n	80008a6 <HAL_ETH_WritePHYRegister+0x48>
  heth->State = HAL_ETH_STATE_READY;
 800089e:	2301      	movs	r3, #1
 80008a0:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 80008a4:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80008a6:	f7ff fd17 	bl	80002d8 <HAL_GetTick>
 80008aa:	1b80      	subs	r0, r0, r6
 80008ac:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80008b0:	d307      	bcc.n	80008c2 <HAL_ETH_WritePHYRegister+0x64>
      heth->State= HAL_ETH_STATE_READY;
 80008b2:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 80008b4:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 80008b6:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80008ba:	2300      	movs	r3, #0
 80008bc:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
 80008c0:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg = heth->Instance->MACMIIAR;
 80008c2:	682b      	ldr	r3, [r5, #0]
 80008c4:	691c      	ldr	r4, [r3, #16]
 80008c6:	e7e7      	b.n	8000898 <HAL_ETH_WritePHYRegister+0x3a>
    return HAL_BUSY;
 80008c8:	2002      	movs	r0, #2
}
 80008ca:	bd70      	pop	{r4, r5, r6, pc}

080008cc <HAL_ETH_Init>:
  uint32_t tempreg = 0, phyreg = 0;
 80008cc:	2300      	movs	r3, #0
{
 80008ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(heth == NULL)
 80008d0:	4604      	mov	r4, r0
  uint32_t tempreg = 0, phyreg = 0;
 80008d2:	9300      	str	r3, [sp, #0]
  if(heth == NULL)
 80008d4:	2800      	cmp	r0, #0
 80008d6:	f000 80dc 	beq.w	8000a92 <HAL_ETH_Init+0x1c6>
  if(heth->State == HAL_ETH_STATE_RESET)
 80008da:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80008de:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80008e2:	b91b      	cbnz	r3, 80008ec <HAL_ETH_Init+0x20>
    heth->Lock = HAL_UNLOCKED;
 80008e4:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 80008e8:	f00a fb62 	bl	800afb0 <HAL_ETH_MspInit>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ec:	4b6a      	ldr	r3, [pc, #424]	; (8000a98 <HAL_ETH_Init+0x1cc>)
 80008ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80008f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80008f4:	645a      	str	r2, [r3, #68]	; 0x44
 80008f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008fc:	9301      	str	r3, [sp, #4]
 80008fe:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000900:	4b66      	ldr	r3, [pc, #408]	; (8000a9c <HAL_ETH_Init+0x1d0>)
 8000902:	685a      	ldr	r2, [r3, #4]
 8000904:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000908:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800090a:	685a      	ldr	r2, [r3, #4]
 800090c:	6a21      	ldr	r1, [r4, #32]
 800090e:	430a      	orrs	r2, r1
 8000910:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000912:	6823      	ldr	r3, [r4, #0]
 8000914:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	f042 0201 	orr.w	r2, r2, #1
 800091e:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000920:	f7ff fcda 	bl	80002d8 <HAL_GetTick>
 8000924:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000926:	6823      	ldr	r3, [r4, #0]
 8000928:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800092c:	6812      	ldr	r2, [r2, #0]
 800092e:	07d0      	lsls	r0, r2, #31
 8000930:	d41d      	bmi.n	800096e <HAL_ETH_Init+0xa2>
  tempreg = (heth->Instance)->MACMIIAR;
 8000932:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 8000934:	f001 f8c6 	bl	8001ac4 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000)&&(hclk < 35000000))
 8000938:	4b59      	ldr	r3, [pc, #356]	; (8000aa0 <HAL_ETH_Init+0x1d4>)
 800093a:	4a5a      	ldr	r2, [pc, #360]	; (8000aa4 <HAL_ETH_Init+0x1d8>)
  tempreg &= ETH_MACMIIAR_CR_MASK;
 800093c:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000)&&(hclk < 35000000))
 8000940:	4403      	add	r3, r0
 8000942:	4293      	cmp	r3, r2
 8000944:	d822      	bhi.n	800098c <HAL_ETH_Init+0xc0>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000946:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 800094a:	6823      	ldr	r3, [r4, #0]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800094c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000950:	2100      	movs	r1, #0
 8000952:	4620      	mov	r0, r4
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8000954:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000956:	f7ff ff82 	bl	800085e <HAL_ETH_WritePHYRegister>
 800095a:	4605      	mov	r5, r0
 800095c:	b368      	cbz	r0, 80009ba <HAL_ETH_Init+0xee>
      heth->State = HAL_ETH_STATE_READY;
 800095e:	2501      	movs	r5, #1
      ETH_MACDMAConfig(heth, err);
 8000960:	2101      	movs	r1, #1
 8000962:	4620      	mov	r0, r4
 8000964:	f7ff fd5a 	bl	800041c <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8000968:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 800096c:	e00b      	b.n	8000986 <HAL_ETH_Init+0xba>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800096e:	f7ff fcb3 	bl	80002d8 <HAL_GetTick>
 8000972:	1b40      	subs	r0, r0, r5
 8000974:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8000978:	d9d5      	bls.n	8000926 <HAL_ETH_Init+0x5a>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800097a:	2503      	movs	r5, #3
      __HAL_UNLOCK(heth);
 800097c:	2300      	movs	r3, #0
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800097e:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000982:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8000986:	4628      	mov	r0, r5
 8000988:	b003      	add	sp, #12
 800098a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((hclk >= 35000000)&&(hclk < 60000000))
 800098c:	4b46      	ldr	r3, [pc, #280]	; (8000aa8 <HAL_ETH_Init+0x1dc>)
 800098e:	4a47      	ldr	r2, [pc, #284]	; (8000aac <HAL_ETH_Init+0x1e0>)
 8000990:	4403      	add	r3, r0
 8000992:	4293      	cmp	r3, r2
 8000994:	d802      	bhi.n	800099c <HAL_ETH_Init+0xd0>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000996:	f045 050c 	orr.w	r5, r5, #12
 800099a:	e7d6      	b.n	800094a <HAL_ETH_Init+0x7e>
  else if((hclk >= 60000000)&&(hclk < 100000000))
 800099c:	4b44      	ldr	r3, [pc, #272]	; (8000ab0 <HAL_ETH_Init+0x1e4>)
 800099e:	4a45      	ldr	r2, [pc, #276]	; (8000ab4 <HAL_ETH_Init+0x1e8>)
 80009a0:	4403      	add	r3, r0
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d9d1      	bls.n	800094a <HAL_ETH_Init+0x7e>
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80009a6:	4b44      	ldr	r3, [pc, #272]	; (8000ab8 <HAL_ETH_Init+0x1ec>)
 80009a8:	4a44      	ldr	r2, [pc, #272]	; (8000abc <HAL_ETH_Init+0x1f0>)
 80009aa:	4403      	add	r3, r0
 80009ac:	4293      	cmp	r3, r2
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80009ae:	bf94      	ite	ls
 80009b0:	f045 0504 	orrls.w	r5, r5, #4
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80009b4:	f045 0510 	orrhi.w	r5, r5, #16
 80009b8:	e7c7      	b.n	800094a <HAL_ETH_Init+0x7e>
  HAL_Delay(PHY_RESET_DELAY);
 80009ba:	20ff      	movs	r0, #255	; 0xff
 80009bc:	f7ff fc92 	bl	80002e4 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80009c0:	6863      	ldr	r3, [r4, #4]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d053      	beq.n	8000a6e <HAL_ETH_Init+0x1a2>
    tickstart = HAL_GetTick();
 80009c6:	f7ff fc87 	bl	80002d8 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80009ca:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80009ce:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80009d0:	466a      	mov	r2, sp
 80009d2:	2101      	movs	r1, #1
 80009d4:	4620      	mov	r0, r4
 80009d6:	f7ff ff08 	bl	80007ea <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80009da:	f7ff fc7d 	bl	80002d8 <HAL_GetTick>
 80009de:	1b80      	subs	r0, r0, r6
 80009e0:	42b8      	cmp	r0, r7
 80009e2:	d90b      	bls.n	80009fc <HAL_ETH_Init+0x130>
        ETH_MACDMAConfig(heth, err);
 80009e4:	2101      	movs	r1, #1
 80009e6:	4620      	mov	r0, r4
 80009e8:	f7ff fd18 	bl	800041c <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 80009ec:	2301      	movs	r3, #1
        return HAL_TIMEOUT;
 80009ee:	2503      	movs	r5, #3
        heth->State= HAL_ETH_STATE_READY;
 80009f0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 80009f4:	2300      	movs	r3, #0
 80009f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 80009fa:	e7c4      	b.n	8000986 <HAL_ETH_Init+0xba>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80009fc:	9b00      	ldr	r3, [sp, #0]
 80009fe:	0759      	lsls	r1, r3, #29
 8000a00:	d5e6      	bpl.n	80009d0 <HAL_ETH_Init+0x104>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000a02:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a06:	2100      	movs	r1, #0
 8000a08:	4620      	mov	r0, r4
 8000a0a:	f7ff ff28 	bl	800085e <HAL_ETH_WritePHYRegister>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	d1a5      	bne.n	800095e <HAL_ETH_Init+0x92>
    tickstart = HAL_GetTick();
 8000a12:	f7ff fc61 	bl	80002d8 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000a16:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000a1a:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000a1c:	466a      	mov	r2, sp
 8000a1e:	2101      	movs	r1, #1
 8000a20:	4620      	mov	r0, r4
 8000a22:	f7ff fee2 	bl	80007ea <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000a26:	f7ff fc57 	bl	80002d8 <HAL_GetTick>
 8000a2a:	1b80      	subs	r0, r0, r6
 8000a2c:	42b8      	cmp	r0, r7
 8000a2e:	d8d9      	bhi.n	80009e4 <HAL_ETH_Init+0x118>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000a30:	9b00      	ldr	r3, [sp, #0]
 8000a32:	069a      	lsls	r2, r3, #26
 8000a34:	d5f2      	bpl.n	8000a1c <HAL_ETH_Init+0x150>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000a36:	466a      	mov	r2, sp
 8000a38:	2110      	movs	r1, #16
 8000a3a:	4620      	mov	r0, r4
 8000a3c:	f7ff fed5 	bl	80007ea <HAL_ETH_ReadPHYRegister>
 8000a40:	2800      	cmp	r0, #0
 8000a42:	d18c      	bne.n	800095e <HAL_ETH_Init+0x92>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000a44:	9b00      	ldr	r3, [sp, #0]
 8000a46:	f013 0204 	ands.w	r2, r3, #4
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000a4a:	bf18      	it	ne
 8000a4c:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000a50:	079b      	lsls	r3, r3, #30
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000a52:	bf4c      	ite	mi
 8000a54:	2300      	movmi	r3, #0
      (heth->Init).Speed = ETH_SPEED_100M;
 8000a56:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000a5a:	60e2      	str	r2, [r4, #12]
      (heth->Init).Speed = ETH_SPEED_100M;
 8000a5c:	60a3      	str	r3, [r4, #8]
  ETH_MACDMAConfig(heth, err);
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4620      	mov	r0, r4
 8000a62:	f7ff fcdb 	bl	800041c <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8000a66:	2301      	movs	r3, #1
 8000a68:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8000a6c:	e78b      	b.n	8000986 <HAL_ETH_Init+0xba>
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8000a6e:	68a3      	ldr	r3, [r4, #8]
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8000a70:	4629      	mov	r1, r5
 8000a72:	68e2      	ldr	r2, [r4, #12]
 8000a74:	4620      	mov	r0, r4
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8000a76:	085b      	lsrs	r3, r3, #1
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8000a78:	ea43 02d2 	orr.w	r2, r3, r2, lsr #3
 8000a7c:	b292      	uxth	r2, r2
 8000a7e:	f7ff feee 	bl	800085e <HAL_ETH_WritePHYRegister>
 8000a82:	2800      	cmp	r0, #0
 8000a84:	f47f af6b 	bne.w	800095e <HAL_ETH_Init+0x92>
    HAL_Delay(PHY_CONFIG_DELAY);
 8000a88:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000a8c:	f7ff fc2a 	bl	80002e4 <HAL_Delay>
 8000a90:	e7e5      	b.n	8000a5e <HAL_ETH_Init+0x192>
    return HAL_ERROR;
 8000a92:	2501      	movs	r5, #1
 8000a94:	e777      	b.n	8000986 <HAL_ETH_Init+0xba>
 8000a96:	bf00      	nop
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40013800 	.word	0x40013800
 8000aa0:	feced300 	.word	0xfeced300
 8000aa4:	00e4e1bf 	.word	0x00e4e1bf
 8000aa8:	fde9f140 	.word	0xfde9f140
 8000aac:	017d783f 	.word	0x017d783f
 8000ab0:	fc6c7900 	.word	0xfc6c7900
 8000ab4:	026259ff 	.word	0x026259ff
 8000ab8:	fa0a1f00 	.word	0xfa0a1f00
 8000abc:	02faf07f 	.word	0x02faf07f

08000ac0 <HAL_ETH_Start>:
  __HAL_LOCK(heth);
 8000ac0:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000ac4:	2b01      	cmp	r3, #1
{  
 8000ac6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000ac8:	4605      	mov	r5, r0
 8000aca:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(heth);
 8000ace:	d033      	beq.n	8000b38 <HAL_ETH_Start+0x78>
  __IO uint32_t tmpreg = 0;
 8000ad0:	2400      	movs	r4, #0
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000ad2:	682b      	ldr	r3, [r5, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 8000ad4:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
  __HAL_LOCK(heth);
 8000ad8:	2601      	movs	r6, #1
  __IO uint32_t tmpreg = 0;
 8000ada:	9401      	str	r4, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000adc:	681a      	ldr	r2, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000ade:	4630      	mov	r0, r6
  __HAL_LOCK(heth);
 8000ae0:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000ae4:	f042 0208 	orr.w	r2, r2, #8
 8000ae8:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000aee:	f7ff fbf9 	bl	80002e4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8000af2:	9a01      	ldr	r2, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000af4:	4630      	mov	r0, r6
  (heth->Instance)->MACCR = tmpreg;
 8000af6:	682b      	ldr	r3, [r5, #0]
 8000af8:	601a      	str	r2, [r3, #0]
  __IO uint32_t tmpreg = 0;
 8000afa:	9400      	str	r4, [sp, #0]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	f042 0204 	orr.w	r2, r2, #4
 8000b02:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	9300      	str	r3, [sp, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000b08:	f7ff fbec 	bl	80002e4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8000b0c:	682b      	ldr	r3, [r5, #0]
  ETH_FlushTransmitFIFO(heth);
 8000b0e:	4628      	mov	r0, r5
  (heth->Instance)->MACCR = tmpreg;
 8000b10:	9a00      	ldr	r2, [sp, #0]
 8000b12:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
 8000b14:	f7ff fc6c 	bl	80003f0 <ETH_FlushTransmitFIFO>
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8000b18:	682a      	ldr	r2, [r5, #0]
 8000b1a:	f241 0318 	movw	r3, #4120	; 0x1018
  return HAL_OK;
 8000b1e:	4620      	mov	r0, r4
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8000b20:	58d1      	ldr	r1, [r2, r3]
 8000b22:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8000b26:	50d1      	str	r1, [r2, r3]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8000b28:	58d1      	ldr	r1, [r2, r3]
 8000b2a:	f041 0102 	orr.w	r1, r1, #2
 8000b2e:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8000b30:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000b34:	f885 4045 	strb.w	r4, [r5, #69]	; 0x45
}
 8000b38:	b002      	add	sp, #8
 8000b3a:	bd70      	pop	{r4, r5, r6, pc}

08000b3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b40:	680b      	ldr	r3, [r1, #0]
{
 8000b42:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000d08 <HAL_GPIO_Init+0x1cc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b48:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000b4a:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b4c:	4a6c      	ldr	r2, [pc, #432]	; (8000d00 <HAL_GPIO_Init+0x1c4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000b4e:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8000d0c <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 8000b52:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b56:	9c01      	ldr	r4, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 8000b58:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b5c:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000b60:	45b6      	cmp	lr, r6
 8000b62:	f040 80b3 	bne.w	8000ccc <HAL_GPIO_Init+0x190>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b66:	684c      	ldr	r4, [r1, #4]
 8000b68:	f024 0710 	bic.w	r7, r4, #16
 8000b6c:	2f02      	cmp	r7, #2
 8000b6e:	d116      	bne.n	8000b9e <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 8000b70:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000b74:	f003 0b07 	and.w	fp, r3, #7
 8000b78:	f04f 0c0f 	mov.w	ip, #15
 8000b7c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8000b80:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8000b84:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000b88:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000b8c:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000b90:	690d      	ldr	r5, [r1, #16]
 8000b92:	fa05 f50b 	lsl.w	r5, r5, fp
 8000b96:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8000b9a:	f8ca 5020 	str.w	r5, [sl, #32]
 8000b9e:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000ba2:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000ba4:	f8d0 b000 	ldr.w	fp, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000ba8:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000bac:	fa05 f50a 	lsl.w	r5, r5, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bb0:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000bb2:	fa0c fc0a 	lsl.w	ip, ip, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000bb6:	43ed      	mvns	r5, r5
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bb8:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000bba:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000bbe:	ea4c 0c0b 	orr.w	ip, ip, fp
      GPIOx->MODER = temp;
 8000bc2:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bc6:	d811      	bhi.n	8000bec <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000bc8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000bca:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8000bce:	68cf      	ldr	r7, [r1, #12]
 8000bd0:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000bd4:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000bd8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000bda:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bdc:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000be0:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000be4:	409f      	lsls	r7, r3
 8000be6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000bea:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000bec:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000bee:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000bf0:	688f      	ldr	r7, [r1, #8]
 8000bf2:	fa07 f70a 	lsl.w	r7, r7, sl
 8000bf6:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000bf8:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bfa:	00e5      	lsls	r5, r4, #3
 8000bfc:	d566      	bpl.n	8000ccc <HAL_GPIO_Init+0x190>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfe:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8000c02:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000c06:	f003 0e03 	and.w	lr, r3, #3
 8000c0a:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0e:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 8000c12:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000c16:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1a:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
 8000c1e:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8000c22:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8000c26:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 8000c2a:	9503      	str	r5, [sp, #12]
 8000c2c:	9d03      	ldr	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000c2e:	fa0c f50e 	lsl.w	r5, ip, lr
        temp = SYSCFG->EXTICR[position >> 2];
 8000c32:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000c36:	ea2a 0c05 	bic.w	ip, sl, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000c3a:	4d32      	ldr	r5, [pc, #200]	; (8000d04 <HAL_GPIO_Init+0x1c8>)
 8000c3c:	42a8      	cmp	r0, r5
 8000c3e:	d04c      	beq.n	8000cda <HAL_GPIO_Init+0x19e>
 8000c40:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c44:	42a8      	cmp	r0, r5
 8000c46:	d04a      	beq.n	8000cde <HAL_GPIO_Init+0x1a2>
 8000c48:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c4c:	42a8      	cmp	r0, r5
 8000c4e:	d048      	beq.n	8000ce2 <HAL_GPIO_Init+0x1a6>
 8000c50:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c54:	42a8      	cmp	r0, r5
 8000c56:	d046      	beq.n	8000ce6 <HAL_GPIO_Init+0x1aa>
 8000c58:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c5c:	42a8      	cmp	r0, r5
 8000c5e:	d044      	beq.n	8000cea <HAL_GPIO_Init+0x1ae>
 8000c60:	4548      	cmp	r0, r9
 8000c62:	d044      	beq.n	8000cee <HAL_GPIO_Init+0x1b2>
 8000c64:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000c68:	42a8      	cmp	r0, r5
 8000c6a:	d042      	beq.n	8000cf2 <HAL_GPIO_Init+0x1b6>
 8000c6c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c70:	42a8      	cmp	r0, r5
 8000c72:	d040      	beq.n	8000cf6 <HAL_GPIO_Init+0x1ba>
 8000c74:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c78:	42a8      	cmp	r0, r5
 8000c7a:	d03e      	beq.n	8000cfa <HAL_GPIO_Init+0x1be>
 8000c7c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c80:	42a8      	cmp	r0, r5
 8000c82:	bf14      	ite	ne
 8000c84:	250a      	movne	r5, #10
 8000c86:	2509      	moveq	r5, #9
 8000c88:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c8c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000c90:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8000c94:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8000c96:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
 8000c9a:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000c9c:	bf0c      	ite	eq
 8000c9e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000ca0:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ca2:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 8000ca6:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000ca8:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8000caa:	bf0c      	ite	eq
 8000cac:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000cae:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cb0:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8000cb4:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000cb6:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000cb8:	bf0c      	ite	eq
 8000cba:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000cbc:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cbe:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8000cc0:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000cc2:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8000cc4:	bf54      	ite	pl
 8000cc6:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000cc8:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000cca:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000ccc:	3301      	adds	r3, #1
 8000cce:	2b10      	cmp	r3, #16
 8000cd0:	f47f af3f 	bne.w	8000b52 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000cd4:	b005      	add	sp, #20
 8000cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000cda:	2500      	movs	r5, #0
 8000cdc:	e7d4      	b.n	8000c88 <HAL_GPIO_Init+0x14c>
 8000cde:	2501      	movs	r5, #1
 8000ce0:	e7d2      	b.n	8000c88 <HAL_GPIO_Init+0x14c>
 8000ce2:	2502      	movs	r5, #2
 8000ce4:	e7d0      	b.n	8000c88 <HAL_GPIO_Init+0x14c>
 8000ce6:	2503      	movs	r5, #3
 8000ce8:	e7ce      	b.n	8000c88 <HAL_GPIO_Init+0x14c>
 8000cea:	2504      	movs	r5, #4
 8000cec:	e7cc      	b.n	8000c88 <HAL_GPIO_Init+0x14c>
 8000cee:	2505      	movs	r5, #5
 8000cf0:	e7ca      	b.n	8000c88 <HAL_GPIO_Init+0x14c>
 8000cf2:	2506      	movs	r5, #6
 8000cf4:	e7c8      	b.n	8000c88 <HAL_GPIO_Init+0x14c>
 8000cf6:	2507      	movs	r5, #7
 8000cf8:	e7c6      	b.n	8000c88 <HAL_GPIO_Init+0x14c>
 8000cfa:	2508      	movs	r5, #8
 8000cfc:	e7c4      	b.n	8000c88 <HAL_GPIO_Init+0x14c>
 8000cfe:	bf00      	nop
 8000d00:	40013c00 	.word	0x40013c00
 8000d04:	40020000 	.word	0x40020000
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	40021400 	.word	0x40021400

08000d10 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d10:	b10a      	cbz	r2, 8000d16 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000d12:	6181      	str	r1, [r0, #24]
 8000d14:	4770      	bx	lr
 8000d16:	0409      	lsls	r1, r1, #16
 8000d18:	e7fb      	b.n	8000d12 <HAL_GPIO_WritePin+0x2>

08000d1a <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000d1a:	6943      	ldr	r3, [r0, #20]
 8000d1c:	4059      	eors	r1, r3
 8000d1e:	6141      	str	r1, [r0, #20]
 8000d20:	4770      	bx	lr

08000d22 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8000d22:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8000d26:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;
  
  __HAL_LOCK(hhcd); 
 8000d28:	f890 0290 	ldrb.w	r0, [r0, #656]	; 0x290
{
 8000d2c:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
  __HAL_LOCK(hhcd); 
 8000d30:	2801      	cmp	r0, #1
{
 8000d32:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
 8000d36:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
  __HAL_LOCK(hhcd); 
 8000d3a:	d021      	beq.n	8000d80 <HAL_HCD_HC_Init+0x5e>
 8000d3c:	2001      	movs	r0, #1
  
  hhcd->hc[ch_num].dev_addr = dev_address;
  hhcd->hc[ch_num].max_packet = mps;
  hhcd->hc[ch_num].ch_num = ch_num;
  hhcd->hc[ch_num].ep_type = ep_type;
  hhcd->hc[ch_num].ep_num = epnum & 0x7F;
 8000d3e:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
  hhcd->hc[ch_num].ep_is_in = ((epnum & 0x80) == 0x80);
 8000d42:	09d5      	lsrs	r5, r2, #7
  __HAL_LOCK(hhcd); 
 8000d44:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290
  hhcd->hc[ch_num].dev_addr = dev_address;
 8000d48:	2028      	movs	r0, #40	; 0x28
 8000d4a:	fb00 4001 	mla	r0, r0, r1, r4
 8000d4e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hhcd->hc[ch_num].max_packet = mps;
 8000d52:	f8a0 e040 	strh.w	lr, [r0, #64]	; 0x40
  hhcd->hc[ch_num].ch_num = ch_num;
 8000d56:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 8000d5a:	f880 703f 	strb.w	r7, [r0, #63]	; 0x3f
  hhcd->hc[ch_num].ep_num = epnum & 0x7F;
 8000d5e:	f880 c03a 	strb.w	ip, [r0, #58]	; 0x3a
  hhcd->hc[ch_num].ep_is_in = ((epnum & 0x80) == 0x80);
 8000d62:	f880 503b 	strb.w	r5, [r0, #59]	; 0x3b
  hhcd->hc[ch_num].speed = speed;
 8000d66:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c

  status =  USB_HC_Init(hhcd->Instance, 
 8000d6a:	6820      	ldr	r0, [r4, #0]
 8000d6c:	e88d 40c0 	stmia.w	sp, {r6, r7, lr}
 8000d70:	f001 fe5a 	bl	8002a28 <USB_HC_Init>
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd); 
 8000d74:	2300      	movs	r3, #0
 8000d76:	f884 3290 	strb.w	r3, [r4, #656]	; 0x290
  
  return status;
}
 8000d7a:	b004      	add	sp, #16
 8000d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hhcd); 
 8000d80:	2002      	movs	r0, #2
 8000d82:	e7fa      	b.n	8000d7a <HAL_HCD_HC_Init+0x58>

08000d84 <HAL_HCD_HC_Halt>:
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  __HAL_LOCK(hhcd);   
 8000d84:	f890 3290 	ldrb.w	r3, [r0, #656]	; 0x290
 8000d88:	2b01      	cmp	r3, #1
{
 8000d8a:	b510      	push	{r4, lr}
 8000d8c:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);   
 8000d8e:	d009      	beq.n	8000da4 <HAL_HCD_HC_Halt+0x20>
 8000d90:	2301      	movs	r3, #1
 8000d92:	f880 3290 	strb.w	r3, [r0, #656]	; 0x290
  USB_HC_Halt(hhcd->Instance, ch_num);   
 8000d96:	6800      	ldr	r0, [r0, #0]
 8000d98:	f001 feb8 	bl	8002b0c <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8000d9c:	2000      	movs	r0, #0
 8000d9e:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290
  
  return status;
 8000da2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);   
 8000da4:	2002      	movs	r0, #2
}
 8000da6:	bd10      	pop	{r4, pc}

08000da8 <HAL_HCD_Init>:
{ 
 8000da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(hhcd == NULL)
 8000dac:	4607      	mov	r7, r0
{ 
 8000dae:	b08a      	sub	sp, #40	; 0x28
  if(hhcd == NULL)
 8000db0:	b3a0      	cbz	r0, 8000e1c <HAL_HCD_Init+0x74>
  hhcd->State = HAL_HCD_STATE_BUSY;
 8000db2:	2303      	movs	r3, #3
 __HAL_HCD_DISABLE(hhcd);
 8000db4:	463c      	mov	r4, r7
 USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000db6:	466d      	mov	r5, sp
 8000db8:	f107 0804 	add.w	r8, r7, #4
  hhcd->State = HAL_HCD_STATE_BUSY;
 8000dbc:	f880 3291 	strb.w	r3, [r0, #657]	; 0x291
 USB_SetCurrentMode(hhcd->Instance , USB_OTG_HOST_MODE);
 8000dc0:	463e      	mov	r6, r7
  HAL_HCD_MspInit(hhcd);
 8000dc2:	f00a fccd 	bl	800b760 <HAL_HCD_MspInit>
 __HAL_HCD_DISABLE(hhcd);
 8000dc6:	f854 0b10 	ldr.w	r0, [r4], #16
 8000dca:	f001 fd0a 	bl	80027e2 <USB_DisableGlobalInt>
 USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000dce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dd6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000dda:	e885 0003 	stmia.w	r5, {r0, r1}
 8000dde:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000de2:	6838      	ldr	r0, [r7, #0]
 USB_HostInit(hhcd->Instance, hhcd->Init);
 8000de4:	466d      	mov	r5, sp
 USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000de6:	f001 fcbb 	bl	8002760 <USB_CoreInit>
 USB_SetCurrentMode(hhcd->Instance , USB_OTG_HOST_MODE);
 8000dea:	f856 0b10 	ldr.w	r0, [r6], #16
 8000dee:	2101      	movs	r1, #1
 8000df0:	f001 fcfd 	bl	80027ee <USB_SetCurrentMode>
 USB_HostInit(hhcd->Instance, hhcd->Init);
 8000df4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000df6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000df8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000dfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dfc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e00:	e885 0003 	stmia.w	r5, {r0, r1}
 8000e04:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000e08:	6838      	ldr	r0, [r7, #0]
 8000e0a:	f001 fd99 	bl	8002940 <USB_HostInit>
 hhcd->State= HAL_HCD_STATE_READY;
 8000e0e:	2301      	movs	r3, #1
 return HAL_OK;
 8000e10:	2000      	movs	r0, #0
 hhcd->State= HAL_HCD_STATE_READY;
 8000e12:	f887 3291 	strb.w	r3, [r7, #657]	; 0x291
}
 8000e16:	b00a      	add	sp, #40	; 0x28
 8000e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8000e1c:	2001      	movs	r0, #1
 8000e1e:	e7fa      	b.n	8000e16 <HAL_HCD_Init+0x6e>

08000e20 <HAL_HCD_HC_SubmitRequest>:
                                            uint8_t ep_type,  
                                            uint8_t token, 
                                            uint8_t* pbuff, 
                                            uint16_t length,
                                            uint8_t do_ping) 
{
 8000e20:	b5f0      	push	{r4, r5, r6, r7, lr}
  hhcd->hc[ch_num].ep_is_in = direction;
 8000e22:	2628      	movs	r6, #40	; 0x28
{
 8000e24:	f89d e014 	ldrb.w	lr, [sp, #20]
 8000e28:	9d06      	ldr	r5, [sp, #24]
  hhcd->hc[ch_num].ep_is_in = direction;
 8000e2a:	fb06 0601 	mla	r6, r6, r1, r0
{
 8000e2e:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 8000e32:	f89d 7020 	ldrb.w	r7, [sp, #32]
  hhcd->hc[ch_num].ep_is_in = direction;
 8000e36:	f886 203b 	strb.w	r2, [r6, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type; 
 8000e3a:	f886 303f 	strb.w	r3, [r6, #63]	; 0x3f
  
  if(token == 0)
 8000e3e:	f1be 0f00 	cmp.w	lr, #0
 8000e42:	d10e      	bne.n	8000e62 <HAL_HCD_HC_SubmitRequest+0x42>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8000e44:	f04f 0e03 	mov.w	lr, #3
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
  }
  
  /* Manage Data Toggle */
  switch(ep_type)
 8000e48:	2b02      	cmp	r3, #2
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8000e4a:	f886 e042 	strb.w	lr, [r6, #66]	; 0x42
  switch(ep_type)
 8000e4e:	d04a      	beq.n	8000ee6 <HAL_HCD_HC_SubmitRequest+0xc6>
 8000e50:	4573      	cmp	r3, lr
 8000e52:	d055      	beq.n	8000f00 <HAL_HCD_HC_SubmitRequest+0xe0>
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d12f      	bne.n	8000eb8 <HAL_HCD_HC_SubmitRequest+0x98>
      }
    }
    break;
    
  case EP_TYPE_ISOC: 
    hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000e58:	2328      	movs	r3, #40	; 0x28
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	fb03 0301 	mla	r3, r3, r1, r0
 8000e60:	e055      	b.n	8000f0e <HAL_HCD_HC_SubmitRequest+0xee>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000e62:	f04f 0c02 	mov.w	ip, #2
 8000e66:	f886 c042 	strb.w	ip, [r6, #66]	; 0x42
  switch(ep_type)
 8000e6a:	2b03      	cmp	r3, #3
 8000e6c:	d824      	bhi.n	8000eb8 <HAL_HCD_HC_SubmitRequest+0x98>
 8000e6e:	a601      	add	r6, pc, #4	; (adr r6, 8000e74 <HAL_HCD_HC_SubmitRequest+0x54>)
 8000e70:	f856 f023 	ldr.w	pc, [r6, r3, lsl #2]
 8000e74:	08000e85 	.word	0x08000e85
 8000e78:	08000e59 	.word	0x08000e59
 8000e7c:	08000ee7 	.word	0x08000ee7
 8000e80:	08000f01 	.word	0x08000f01
    if((token == 1) && (direction == 0)) /*send data */
 8000e84:	f1be 0f01 	cmp.w	lr, #1
 8000e88:	d116      	bne.n	8000eb8 <HAL_HCD_HC_SubmitRequest+0x98>
 8000e8a:	b9aa      	cbnz	r2, 8000eb8 <HAL_HCD_HC_SubmitRequest+0x98>
      if ( length == 0 )
 8000e8c:	b924      	cbnz	r4, 8000e98 <HAL_HCD_HC_SubmitRequest+0x78>
        hhcd->hc[ch_num].toggle_out = 1;
 8000e8e:	2328      	movs	r3, #40	; 0x28
 8000e90:	fb03 0301 	mla	r3, r3, r1, r0
 8000e94:	f883 e051 	strb.w	lr, [r3, #81]	; 0x51
      if ( hhcd->hc[ch_num].toggle_out == 0)
 8000e98:	2328      	movs	r3, #40	; 0x28
 8000e9a:	fb03 0201 	mla	r2, r3, r1, r0
 8000e9e:	f892 6051 	ldrb.w	r6, [r2, #81]	; 0x51
 8000ea2:	b9f6      	cbnz	r6, 8000ee2 <HAL_HCD_HC_SubmitRequest+0xc2>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1 ;
 8000ea4:	f882 6042 	strb.w	r6, [r2, #66]	; 0x42
      if(hhcd->hc[ch_num].urb_state  != URB_NOTREADY)
 8000ea8:	fb03 0301 	mla	r3, r3, r1, r0
 8000eac:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 8000eb0:	2a02      	cmp	r2, #2
 8000eb2:	d001      	beq.n	8000eb8 <HAL_HCD_HC_SubmitRequest+0x98>
        hhcd->hc[ch_num].do_ping = do_ping;
 8000eb4:	f883 703d 	strb.w	r7, [r3, #61]	; 0x3d
    break;      
  }
  
  hhcd->hc[ch_num].xfer_buff = pbuff;
 8000eb8:	2628      	movs	r6, #40	; 0x28
  hhcd->hc[ch_num].xfer_len  = length;
  hhcd->hc[ch_num].urb_state =   URB_IDLE;  
 8000eba:	2200      	movs	r2, #0
  hhcd->hc[ch_num].xfer_buff = pbuff;
 8000ebc:	fb06 0301 	mla	r3, r6, r1, r0
  hhcd->hc[ch_num].xfer_count = 0 ;
  hhcd->hc[ch_num].ch_num = ch_num;
 8000ec0:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  hhcd->hc[ch_num].state = HC_IDLE;
  
  return USB_HC_StartXfer(hhcd->Instance, &(hhcd->hc[ch_num]), hhcd->Init.dma_enable);
 8000ec4:	4619      	mov	r1, r3
  hhcd->hc[ch_num].xfer_buff = pbuff;
 8000ec6:	645d      	str	r5, [r3, #68]	; 0x44
  hhcd->hc[ch_num].xfer_len  = length;
 8000ec8:	649c      	str	r4, [r3, #72]	; 0x48
  return USB_HC_StartXfer(hhcd->Instance, &(hhcd->hc[ch_num]), hhcd->Init.dma_enable);
 8000eca:	3138      	adds	r1, #56	; 0x38
  hhcd->hc[ch_num].urb_state =   URB_IDLE;  
 8000ecc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  hhcd->hc[ch_num].xfer_count = 0 ;
 8000ed0:	64da      	str	r2, [r3, #76]	; 0x4c
  hhcd->hc[ch_num].state = HC_IDLE;
 8000ed2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  return USB_HC_StartXfer(hhcd->Instance, &(hhcd->hc[ch_num]), hhcd->Init.dma_enable);
 8000ed6:	7c02      	ldrb	r2, [r0, #16]
 8000ed8:	6800      	ldr	r0, [r0, #0]
}
 8000eda:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  return USB_HC_StartXfer(hhcd->Instance, &(hhcd->hc[ch_num]), hhcd->Init.dma_enable);
 8000ede:	f001 be71 	b.w	8002bc4 <USB_HC_StartXfer>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1 ;
 8000ee2:	2602      	movs	r6, #2
 8000ee4:	e7de      	b.n	8000ea4 <HAL_HCD_HC_SubmitRequest+0x84>
 8000ee6:	2328      	movs	r3, #40	; 0x28
      if ( hhcd->hc[ch_num].toggle_out == 0)
 8000ee8:	fb03 0301 	mla	r3, r3, r1, r0
    if(direction == 0)
 8000eec:	b992      	cbnz	r2, 8000f14 <HAL_HCD_HC_SubmitRequest+0xf4>
      if ( hhcd->hc[ch_num].toggle_out == 0)
 8000eee:	f893 6051 	ldrb.w	r6, [r3, #81]	; 0x51
 8000ef2:	b91e      	cbnz	r6, 8000efc <HAL_HCD_HC_SubmitRequest+0xdc>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1 ;
 8000ef4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      if(hhcd->hc[ch_num].urb_state  != URB_NOTREADY)
 8000ef8:	2328      	movs	r3, #40	; 0x28
 8000efa:	e7d5      	b.n	8000ea8 <HAL_HCD_HC_SubmitRequest+0x88>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1 ;
 8000efc:	2202      	movs	r2, #2
 8000efe:	e7f9      	b.n	8000ef4 <HAL_HCD_HC_SubmitRequest+0xd4>
 8000f00:	2328      	movs	r3, #40	; 0x28
      if ( hhcd->hc[ch_num].toggle_out == 0)
 8000f02:	fb03 0301 	mla	r3, r3, r1, r0
    if(direction == 0)
 8000f06:	b92a      	cbnz	r2, 8000f14 <HAL_HCD_HC_SubmitRequest+0xf4>
      if ( hhcd->hc[ch_num].toggle_out == 0)
 8000f08:	f893 6051 	ldrb.w	r6, [r3, #81]	; 0x51
 8000f0c:	b936      	cbnz	r6, 8000f1c <HAL_HCD_HC_SubmitRequest+0xfc>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000f0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    break;      
 8000f12:	e7d1      	b.n	8000eb8 <HAL_HCD_HC_SubmitRequest+0x98>
      if( hhcd->hc[ch_num].toggle_in == 0)
 8000f14:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8000f18:	2a00      	cmp	r2, #0
 8000f1a:	d0f8      	beq.n	8000f0e <HAL_HCD_HC_SubmitRequest+0xee>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000f1c:	2202      	movs	r2, #2
 8000f1e:	e7f6      	b.n	8000f0e <HAL_HCD_HC_SubmitRequest+0xee>

08000f20 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8000f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000f24:	6806      	ldr	r6, [r0, #0]
{
 8000f26:	b087      	sub	sp, #28
 8000f28:	4604      	mov	r4, r0
  uint32_t i = 0 , interrupt = 0;
  
  /* ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8000f2a:	4630      	mov	r0, r6
 8000f2c:	f001 fcac 	bl	8002888 <USB_GetMode>
 8000f30:	2801      	cmp	r0, #1
 8000f32:	f040 80e7 	bne.w	8001104 <HAL_HCD_IRQHandler+0x1e4>
  {
    /* avoid spurious interrupt */
    if(__HAL_HCD_IS_INVALID_INTERRUPT(hhcd)) 
 8000f36:	6820      	ldr	r0, [r4, #0]
 8000f38:	f001 fca2 	bl	8002880 <USB_ReadInterrupts>
 8000f3c:	2800      	cmp	r0, #0
 8000f3e:	f000 80e1 	beq.w	8001104 <HAL_HCD_IRQHandler+0x1e4>
    {
      return;
    }
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8000f42:	6820      	ldr	r0, [r4, #0]
 8000f44:	f001 fc9c 	bl	8002880 <USB_ReadInterrupts>
 8000f48:	0280      	lsls	r0, r0, #10
 8000f4a:	d503      	bpl.n	8000f54 <HAL_HCD_IRQHandler+0x34>
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000f4c:	6823      	ldr	r3, [r4, #0]
 8000f4e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000f52:	615a      	str	r2, [r3, #20]
    }
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8000f54:	6820      	ldr	r0, [r4, #0]
 8000f56:	f001 fc93 	bl	8002880 <USB_ReadInterrupts>
 8000f5a:	02c1      	lsls	r1, r0, #11
 8000f5c:	d503      	bpl.n	8000f66 <HAL_HCD_IRQHandler+0x46>
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8000f5e:	6823      	ldr	r3, [r4, #0]
 8000f60:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000f64:	615a      	str	r2, [r3, #20]
    }

    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8000f66:	6820      	ldr	r0, [r4, #0]
 8000f68:	f001 fc8a 	bl	8002880 <USB_ReadInterrupts>
 8000f6c:	0142      	lsls	r2, r0, #5
 8000f6e:	d503      	bpl.n	8000f78 <HAL_HCD_IRQHandler+0x58>
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8000f70:	6823      	ldr	r3, [r4, #0]
 8000f72:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000f76:	615a      	str	r2, [r3, #20]
    }   
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8000f78:	6820      	ldr	r0, [r4, #0]
 8000f7a:	f001 fc81 	bl	8002880 <USB_ReadInterrupts>
 8000f7e:	0783      	lsls	r3, r0, #30
 8000f80:	d502      	bpl.n	8000f88 <HAL_HCD_IRQHandler+0x68>
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8000f82:	6823      	ldr	r3, [r4, #0]
 8000f84:	2202      	movs	r2, #2
 8000f86:	615a      	str	r2, [r3, #20]
    }     
    
    /* Handle Host Disconnect Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8000f88:	6820      	ldr	r0, [r4, #0]
 8000f8a:	f001 fc79 	bl	8002880 <USB_ReadInterrupts>
 8000f8e:	0087      	lsls	r7, r0, #2
 8000f90:	d510      	bpl.n	8000fb4 <HAL_HCD_IRQHandler+0x94>
    {
      
      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8000f92:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
        USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
       
      /* Handle Host Port Interrupts */
      HAL_HCD_Disconnect_Callback(hhcd);
 8000f96:	4620      	mov	r0, r4
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8000f98:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8000f9c:	f8c6 3440 	str.w	r3, [r6, #1088]	; 0x440
      HAL_HCD_Disconnect_Callback(hhcd);
 8000fa0:	f00a fc26 	bl	800b7f0 <HAL_HCD_Disconnect_Callback>
       USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	6820      	ldr	r0, [r4, #0]
 8000fa8:	f001 fc72 	bl	8002890 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8000fac:	6823      	ldr	r3, [r4, #0]
 8000fae:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000fb2:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Host Port Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8000fb4:	6820      	ldr	r0, [r4, #0]
 8000fb6:	f001 fc63 	bl	8002880 <USB_ReadInterrupts>
 8000fba:	01c5      	lsls	r5, r0, #7
 8000fbc:	d540      	bpl.n	8001040 <HAL_HCD_IRQHandler+0x120>
  * @param  hhcd: HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler  (HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;  
 8000fbe:	6825      	ldr	r5, [r4, #0]
  __IO uint32_t hprt0, hprt0_dup;
  
  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8000fc0:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8000fc4:	9304      	str	r3, [sp, #16]
  hprt0_dup = USBx_HPRT0;
 8000fc6:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8000fca:	9305      	str	r3, [sp, #20]
  
  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8000fcc:	9b05      	ldr	r3, [sp, #20]
 8000fce:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8000fd2:	9305      	str	r3, [sp, #20]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  /* Check whether Port Connect detected */
  if((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8000fd4:	9b04      	ldr	r3, [sp, #16]
 8000fd6:	0798      	lsls	r0, r3, #30
 8000fd8:	d50d      	bpl.n	8000ff6 <HAL_HCD_IRQHandler+0xd6>
  {  
    if((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8000fda:	9b04      	ldr	r3, [sp, #16]
 8000fdc:	07d9      	lsls	r1, r3, #31
 8000fde:	d506      	bpl.n	8000fee <HAL_HCD_IRQHandler+0xce>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8000fe0:	69ab      	ldr	r3, [r5, #24]
      HAL_HCD_Connect_Callback(hhcd);
 8000fe2:	4620      	mov	r0, r4
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8000fe4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8000fe8:	61ab      	str	r3, [r5, #24]
      HAL_HCD_Connect_Callback(hhcd);
 8000fea:	f00a fbfd 	bl	800b7e8 <HAL_HCD_Connect_Callback>
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8000fee:	9b05      	ldr	r3, [sp, #20]
 8000ff0:	f043 0302 	orr.w	r3, r3, #2
 8000ff4:	9305      	str	r3, [sp, #20]
    
  }
  
  /* Check whether Port Enable Changed */
  if((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8000ff6:	9b04      	ldr	r3, [sp, #16]
 8000ff8:	071a      	lsls	r2, r3, #28
 8000ffa:	d517      	bpl.n	800102c <HAL_HCD_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8000ffc:	9b05      	ldr	r3, [sp, #20]
 8000ffe:	f043 0308 	orr.w	r3, r3, #8
 8001002:	9305      	str	r3, [sp, #20]
    
    if((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8001004:	9b04      	ldr	r3, [sp, #16]
 8001006:	075b      	lsls	r3, r3, #29
 8001008:	f140 8087 	bpl.w	800111a <HAL_HCD_IRQHandler+0x1fa>
    {    
      if(hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800100c:	69a1      	ldr	r1, [r4, #24]
 800100e:	2902      	cmp	r1, #2
 8001010:	d17b      	bne.n	800110a <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8001012:	9b04      	ldr	r3, [sp, #16]
        {
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_6_MHZ );
        }
        else
        {
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 8001014:	6820      	ldr	r0, [r4, #0]
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8001016:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800101a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 800101e:	bf18      	it	ne
 8001020:	2101      	movne	r1, #1
 8001022:	f001 fc35 	bl	8002890 <USB_InitFSLSPClkSel>
        if(hhcd->Init.speed == HCD_SPEED_FULL)
        {
          USBx_HOST->HFIR = (uint32_t)60000;
        }
      }
      HAL_HCD_Connect_Callback(hhcd);
 8001026:	4620      	mov	r0, r4
 8001028:	f00a fbde 	bl	800b7e8 <HAL_HCD_Connect_Callback>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT); 
    }    
  }
  
  /* Check For an overcurrent */
  if((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800102c:	9b04      	ldr	r3, [sp, #16]
 800102e:	069f      	lsls	r7, r3, #26
 8001030:	d503      	bpl.n	800103a <HAL_HCD_IRQHandler+0x11a>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8001032:	9b05      	ldr	r3, [sp, #20]
 8001034:	f043 0320 	orr.w	r3, r3, #32
 8001038:	9305      	str	r3, [sp, #20]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800103a:	9b05      	ldr	r3, [sp, #20]
 800103c:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001040:	6820      	ldr	r0, [r4, #0]
 8001042:	f001 fc1d 	bl	8002880 <USB_ReadInterrupts>
 8001046:	0705      	lsls	r5, r0, #28
 8001048:	d505      	bpl.n	8001056 <HAL_HCD_IRQHandler+0x136>
      HAL_HCD_SOF_Callback(hhcd);
 800104a:	4620      	mov	r0, r4
 800104c:	f00a fbc8 	bl	800b7e0 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001050:	6823      	ldr	r3, [r4, #0]
 8001052:	2208      	movs	r2, #8
 8001054:	615a      	str	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001056:	6820      	ldr	r0, [r4, #0]
 8001058:	f001 fc12 	bl	8002880 <USB_ReadInterrupts>
 800105c:	0180      	lsls	r0, r0, #6
 800105e:	d513      	bpl.n	8001088 <HAL_HCD_IRQHandler+0x168>
 8001060:	f506 68a0 	add.w	r8, r6, #1280	; 0x500
      for (i = 0; i < hhcd->Init.Host_channels ; i++)
 8001064:	f04f 0b00 	mov.w	fp, #0
        if (interrupt & (1 << i))
 8001068:	f04f 0a01 	mov.w	sl, #1
    if(hhcd->hc[chnum].state == HC_XFRC)
 800106c:	2728      	movs	r7, #40	; 0x28
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800106e:	f04f 0902 	mov.w	r9, #2
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001072:	6820      	ldr	r0, [r4, #0]
 8001074:	f001 fd45 	bl	8002b02 <USB_HC_ReadInterrupt>
 8001078:	9001      	str	r0, [sp, #4]
      for (i = 0; i < hhcd->Init.Host_channels ; i++)
 800107a:	68a3      	ldr	r3, [r4, #8]
 800107c:	459b      	cmp	fp, r3
 800107e:	d358      	bcc.n	8001132 <HAL_HCD_IRQHandler+0x212>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001080:	6823      	ldr	r3, [r4, #0]
 8001082:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001086:	615a      	str	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL))
 8001088:	6820      	ldr	r0, [r4, #0]
 800108a:	f001 fbf9 	bl	8002880 <USB_ReadInterrupts>
 800108e:	06c3      	lsls	r3, r0, #27
 8001090:	d538      	bpl.n	8001104 <HAL_HCD_IRQHandler+0x1e4>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001092:	6825      	ldr	r5, [r4, #0]
 8001094:	69ab      	ldr	r3, [r5, #24]
 8001096:	f023 0310 	bic.w	r3, r3, #16
 800109a:	61ab      	str	r3, [r5, #24]
  temp = hhcd->Instance->GRXSTSP ;
 800109c:	6a2f      	ldr	r7, [r5, #32]
  pktsts = (temp &  USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800109e:	f3c7 4343 	ubfx	r3, r7, #17, #4
  switch (pktsts)
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d129      	bne.n	80010fa <HAL_HCD_IRQHandler+0x1da>
  pktcnt = (temp &  USB_OTG_GRXSTSP_BCNT) >> 4;
 80010a6:	f3c7 180a 	ubfx	r8, r7, #4, #11
    if ((pktcnt > 0) && (hhcd->hc[channelnum].xfer_buff != (void  *)0))
 80010aa:	f1b8 0f00 	cmp.w	r8, #0
 80010ae:	d024      	beq.n	80010fa <HAL_HCD_IRQHandler+0x1da>
  channelnum = temp &  USB_OTG_GRXSTSP_EPNUM;  
 80010b0:	f007 070f 	and.w	r7, r7, #15
    if ((pktcnt > 0) && (hhcd->hc[channelnum].xfer_buff != (void  *)0))
 80010b4:	2628      	movs	r6, #40	; 0x28
 80010b6:	fb06 4607 	mla	r6, r6, r7, r4
 80010ba:	6c71      	ldr	r1, [r6, #68]	; 0x44
 80010bc:	b1e9      	cbz	r1, 80010fa <HAL_HCD_IRQHandler+0x1da>
      USB_ReadPacket(hhcd->Instance, hhcd->hc[channelnum].xfer_buff, pktcnt);
 80010be:	4642      	mov	r2, r8
 80010c0:	4628      	mov	r0, r5
 80010c2:	f001 fbcd 	bl	8002860 <USB_ReadPacket>
      hhcd->hc[channelnum].xfer_buff += pktcnt;           
 80010c6:	6c73      	ldr	r3, [r6, #68]	; 0x44
      if((USBx_HC(channelnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0)
 80010c8:	f505 65a0 	add.w	r5, r5, #1280	; 0x500
      hhcd->hc[channelnum].xfer_buff += pktcnt;           
 80010cc:	4443      	add	r3, r8
      if((USBx_HC(channelnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0)
 80010ce:	eb05 1547 	add.w	r5, r5, r7, lsl #5
      hhcd->hc[channelnum].xfer_buff += pktcnt;           
 80010d2:	6473      	str	r3, [r6, #68]	; 0x44
      hhcd->hc[channelnum].xfer_count  += pktcnt;
 80010d4:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
      if((USBx_HC(channelnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0)
 80010d6:	692a      	ldr	r2, [r5, #16]
      hhcd->hc[channelnum].xfer_count  += pktcnt;
 80010d8:	4443      	add	r3, r8
 80010da:	64f3      	str	r3, [r6, #76]	; 0x4c
      if((USBx_HC(channelnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0)
 80010dc:	4bb4      	ldr	r3, [pc, #720]	; (80013b0 <HAL_HCD_IRQHandler+0x490>)
 80010de:	4013      	ands	r3, r2
 80010e0:	b15b      	cbz	r3, 80010fa <HAL_HCD_IRQHandler+0x1da>
        tmpreg = USBx_HC(channelnum)->HCCHAR;
 80010e2:	682b      	ldr	r3, [r5, #0]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80010e4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
        USBx_HC(channelnum)->HCCHAR = tmpreg;
 80010ec:	602b      	str	r3, [r5, #0]
        hhcd->hc[channelnum].toggle_in ^= 1;
 80010ee:	f896 3050 	ldrb.w	r3, [r6, #80]	; 0x50
 80010f2:	f083 0301 	eor.w	r3, r3, #1
 80010f6:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80010fa:	6822      	ldr	r2, [r4, #0]
 80010fc:	6993      	ldr	r3, [r2, #24]
 80010fe:	f043 0310 	orr.w	r3, r3, #16
 8001102:	6193      	str	r3, [r2, #24]
}
 8001104:	b007      	add	sp, #28
 8001106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(hhcd->Init.speed == HCD_SPEED_FULL)
 800110a:	68e3      	ldr	r3, [r4, #12]
 800110c:	2b03      	cmp	r3, #3
 800110e:	d18a      	bne.n	8001026 <HAL_HCD_IRQHandler+0x106>
          USBx_HOST->HFIR = (uint32_t)60000;
 8001110:	f64e 2260 	movw	r2, #60000	; 0xea60
 8001114:	f8c5 2404 	str.w	r2, [r5, #1028]	; 0x404
 8001118:	e785      	b.n	8001026 <HAL_HCD_IRQHandler+0x106>
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 800111a:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT); 
 800111e:	6822      	ldr	r2, [r4, #0]
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8001120:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001124:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT); 
 8001128:	6993      	ldr	r3, [r2, #24]
 800112a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800112e:	6193      	str	r3, [r2, #24]
 8001130:	e77c      	b.n	800102c <HAL_HCD_IRQHandler+0x10c>
        if (interrupt & (1 << i))
 8001132:	fa0a f30b 	lsl.w	r3, sl, fp
 8001136:	9a01      	ldr	r2, [sp, #4]
 8001138:	4213      	tst	r3, r2
 800113a:	f000 808a 	beq.w	8001252 <HAL_HCD_IRQHandler+0x332>
          if ((USBx_HC(i)->HCCHAR) &  USB_OTG_HCCHAR_EPDIR)
 800113e:	f8d8 3000 	ldr.w	r3, [r8]
 8001142:	fa5f f58b 	uxtb.w	r5, fp
 8001146:	6820      	ldr	r0, [r4, #0]
 8001148:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800114c:	f000 8104 	beq.w	8001358 <HAL_HCD_IRQHandler+0x438>
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_AHBERR)
 8001150:	016a      	lsls	r2, r5, #5
 8001152:	f500 63a0 	add.w	r3, r0, #1280	; 0x500
 8001156:	18d6      	adds	r6, r2, r3
 8001158:	68b1      	ldr	r1, [r6, #8]
 800115a:	0749      	lsls	r1, r1, #29
 800115c:	d513      	bpl.n	8001186 <HAL_HCD_IRQHandler+0x266>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800115e:	2104      	movs	r1, #4
 8001160:	60b1      	str	r1, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8001162:	68f1      	ldr	r1, [r6, #12]
 8001164:	f041 0102 	orr.w	r1, r1, #2
 8001168:	60f1      	str	r1, [r6, #12]
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_FRMOR)
 800116a:	68b1      	ldr	r1, [r6, #8]
 800116c:	0589      	lsls	r1, r1, #22
 800116e:	d542      	bpl.n	80011f6 <HAL_HCD_IRQHandler+0x2d6>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001170:	68f3      	ldr	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 8001172:	4629      	mov	r1, r5
 8001174:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001176:	f043 0302 	orr.w	r3, r3, #2
 800117a:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 800117c:	f001 fcc6 	bl	8002b0c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001180:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001184:	e0c4      	b.n	8001310 <HAL_HCD_IRQHandler+0x3f0>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_ACK)
 8001186:	68b1      	ldr	r1, [r6, #8]
 8001188:	0689      	lsls	r1, r1, #26
 800118a:	d502      	bpl.n	8001192 <HAL_HCD_IRQHandler+0x272>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800118c:	2120      	movs	r1, #32
 800118e:	60b1      	str	r1, [r6, #8]
 8001190:	e7eb      	b.n	800116a <HAL_HCD_IRQHandler+0x24a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_STALL)  
 8001192:	68b1      	ldr	r1, [r6, #8]
 8001194:	0709      	lsls	r1, r1, #28
 8001196:	d515      	bpl.n	80011c4 <HAL_HCD_IRQHandler+0x2a4>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8001198:	68f1      	ldr	r1, [r6, #12]
    hhcd->hc[chnum].state = HC_STALL;
 800119a:	f04f 0e05 	mov.w	lr, #5
 800119e:	9303      	str	r3, [sp, #12]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80011a0:	f041 0102 	orr.w	r1, r1, #2
 80011a4:	9202      	str	r2, [sp, #8]
 80011a6:	60f1      	str	r1, [r6, #12]
    hhcd->hc[chnum].state = HC_STALL;
 80011a8:	fb07 4105 	mla	r1, r7, r5, r4
 80011ac:	f881 e05d 	strb.w	lr, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80011b0:	2110      	movs	r1, #16
 80011b2:	60b1      	str	r1, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);    
 80011b4:	2108      	movs	r1, #8
 80011b6:	60b1      	str	r1, [r6, #8]
    USB_HC_Halt(hhcd->Instance, chnum);    
 80011b8:	4629      	mov	r1, r5
 80011ba:	f001 fca7 	bl	8002b0c <USB_HC_Halt>
 80011be:	9a02      	ldr	r2, [sp, #8]
 80011c0:	9b03      	ldr	r3, [sp, #12]
 80011c2:	e7d2      	b.n	800116a <HAL_HCD_IRQHandler+0x24a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_DTERR)
 80011c4:	68b1      	ldr	r1, [r6, #8]
 80011c6:	0549      	lsls	r1, r1, #21
 80011c8:	d5cf      	bpl.n	800116a <HAL_HCD_IRQHandler+0x24a>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80011ca:	68f1      	ldr	r1, [r6, #12]
 80011cc:	9303      	str	r3, [sp, #12]
 80011ce:	f041 0102 	orr.w	r1, r1, #2
 80011d2:	9202      	str	r2, [sp, #8]
 80011d4:	60f1      	str	r1, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 80011d6:	4629      	mov	r1, r5
 80011d8:	f001 fc98 	bl	8002b0c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);    
 80011dc:	2110      	movs	r1, #16
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80011de:	2008      	movs	r0, #8
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80011e0:	9b03      	ldr	r3, [sp, #12]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);    
 80011e2:	60b1      	str	r1, [r6, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80011e4:	fb07 4105 	mla	r1, r7, r5, r4
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80011e8:	9a02      	ldr	r2, [sp, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80011ea:	f881 005d 	strb.w	r0, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80011ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011f2:	60b1      	str	r1, [r6, #8]
 80011f4:	e7b9      	b.n	800116a <HAL_HCD_IRQHandler+0x24a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_XFRC)
 80011f6:	68b1      	ldr	r1, [r6, #8]
 80011f8:	07c8      	lsls	r0, r1, #31
 80011fa:	d53d      	bpl.n	8001278 <HAL_HCD_IRQHandler+0x358>
    if (hhcd->Init.dma_enable)
 80011fc:	6921      	ldr	r1, [r4, #16]
 80011fe:	b149      	cbz	r1, 8001214 <HAL_HCD_IRQHandler+0x2f4>
                               (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001200:	6930      	ldr	r0, [r6, #16]
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 8001202:	fb07 4e05 	mla	lr, r7, r5, r4
                               (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001206:	f3c0 0012 	ubfx	r0, r0, #0, #19
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 800120a:	f8de 1048 	ldr.w	r1, [lr, #72]	; 0x48
 800120e:	1a09      	subs	r1, r1, r0
 8001210:	f8ce 104c 	str.w	r1, [lr, #76]	; 0x4c
    hhcd->hc[chnum].state = HC_XFRC;
 8001214:	fb07 4105 	mla	r1, r7, r5, r4
    hhcd->hc[chnum].ErrCnt = 0;
 8001218:	2000      	movs	r0, #0
    hhcd->hc[chnum].state = HC_XFRC;
 800121a:	f881 a05d 	strb.w	sl, [r1, #93]	; 0x5d
    hhcd->hc[chnum].ErrCnt = 0;
 800121e:	6588      	str	r0, [r1, #88]	; 0x58
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8001220:	f8c6 a008 	str.w	sl, [r6, #8]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 8001224:	f891 003f 	ldrb.w	r0, [r1, #63]	; 0x3f
 8001228:	f010 0ffd 	tst.w	r0, #253	; 0xfd
 800122c:	d116      	bne.n	800125c <HAL_HCD_IRQHandler+0x33c>
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 800122e:	68f3      	ldr	r3, [r6, #12]
      USB_HC_Halt(hhcd->Instance, chnum); 
 8001230:	4629      	mov	r1, r5
 8001232:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001234:	f043 0302 	orr.w	r3, r3, #2
 8001238:	60f3      	str	r3, [r6, #12]
      USB_HC_Halt(hhcd->Instance, chnum); 
 800123a:	f001 fc67 	bl	8002b0c <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800123e:	2310      	movs	r3, #16
 8001240:	60b3      	str	r3, [r6, #8]
    hhcd->hc[chnum].toggle_in ^= 1;
 8001242:	fb07 4505 	mla	r5, r7, r5, r4
 8001246:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
 800124a:	f083 0301 	eor.w	r3, r3, #1
 800124e:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
      for (i = 0; i < hhcd->Init.Host_channels ; i++)
 8001252:	f10b 0b01 	add.w	fp, fp, #1
 8001256:	f108 0820 	add.w	r8, r8, #32
 800125a:	e70e      	b.n	800107a <HAL_HCD_IRQHandler+0x15a>
    else if(hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800125c:	2803      	cmp	r0, #3
 800125e:	d1f0      	bne.n	8001242 <HAL_HCD_IRQHandler+0x322>
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001260:	58d0      	ldr	r0, [r2, r3]
 8001262:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 8001266:	50d0      	str	r0, [r2, r3]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001268:	2201      	movs	r2, #1
      hhcd->hc[chnum].urb_state = URB_DONE; 
 800126a:	f881 a05c 	strb.w	sl, [r1, #92]	; 0x5c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800126e:	4620      	mov	r0, r4
 8001270:	4629      	mov	r1, r5
 8001272:	f00a fac1 	bl	800b7f8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001276:	e7e4      	b.n	8001242 <HAL_HCD_IRQHandler+0x322>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_CHH)
 8001278:	68b1      	ldr	r1, [r6, #8]
 800127a:	0789      	lsls	r1, r1, #30
 800127c:	d534      	bpl.n	80012e8 <HAL_HCD_IRQHandler+0x3c8>
    __HAL_HCD_MASK_HALT_HC_INT(chnum); 
 800127e:	68f1      	ldr	r1, [r6, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 8001280:	fb07 4005 	mla	r0, r7, r5, r4
    __HAL_HCD_MASK_HALT_HC_INT(chnum); 
 8001284:	f021 0102 	bic.w	r1, r1, #2
 8001288:	60f1      	str	r1, [r6, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 800128a:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
 800128e:	2901      	cmp	r1, #1
 8001290:	d10c      	bne.n	80012ac <HAL_HCD_IRQHandler+0x38c>
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8001292:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);  
 8001296:	fb07 4305 	mla	r3, r7, r5, r4
 800129a:	4629      	mov	r1, r5
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800129c:	f8c6 9008 	str.w	r9, [r6, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);  
 80012a0:	4620      	mov	r0, r4
 80012a2:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 80012a6:	f00a faa7 	bl	800b7f8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80012aa:	e7d2      	b.n	8001252 <HAL_HCD_IRQHandler+0x332>
    else if (hhcd->hc[chnum].state == HC_STALL) 
 80012ac:	2905      	cmp	r1, #5
 80012ae:	d0f0      	beq.n	8001292 <HAL_HCD_IRQHandler+0x372>
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 80012b0:	2906      	cmp	r1, #6
 80012b2:	d001      	beq.n	80012b8 <HAL_HCD_IRQHandler+0x398>
 80012b4:	2908      	cmp	r1, #8
 80012b6:	d1ee      	bne.n	8001296 <HAL_HCD_IRQHandler+0x376>
      if(hhcd->hc[chnum].ErrCnt++ > 3)
 80012b8:	fb07 4105 	mla	r1, r7, r5, r4
 80012bc:	6d88      	ldr	r0, [r1, #88]	; 0x58
 80012be:	2803      	cmp	r0, #3
 80012c0:	f100 0e01 	add.w	lr, r0, #1
        hhcd->hc[chnum].ErrCnt = 0;
 80012c4:	bf88      	it	hi
 80012c6:	2000      	movhi	r0, #0
      if(hhcd->hc[chnum].ErrCnt++ > 3)
 80012c8:	f8c1 e058 	str.w	lr, [r1, #88]	; 0x58
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80012cc:	bf91      	iteee	ls
 80012ce:	f881 905c 	strbls.w	r9, [r1, #92]	; 0x5c
        hhcd->hc[chnum].ErrCnt = 0;
 80012d2:	6588      	strhi	r0, [r1, #88]	; 0x58
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80012d4:	2004      	movhi	r0, #4
 80012d6:	f881 005c 	strbhi.w	r0, [r1, #92]	; 0x5c
      tmpreg = USBx_HC(chnum)->HCCHAR;
 80012da:	58d1      	ldr	r1, [r2, r3]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80012dc:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80012e0:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
      USBx_HC(chnum)->HCCHAR = tmpreg;    
 80012e4:	50d1      	str	r1, [r2, r3]
 80012e6:	e7d6      	b.n	8001296 <HAL_HCD_IRQHandler+0x376>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_TXERR)
 80012e8:	68b1      	ldr	r1, [r6, #8]
 80012ea:	0608      	lsls	r0, r1, #24
 80012ec:	d512      	bpl.n	8001314 <HAL_HCD_IRQHandler+0x3f4>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 80012ee:	68f3      	ldr	r3, [r6, #12]
     USB_HC_Halt(hhcd->Instance, chnum);     
 80012f0:	4629      	mov	r1, r5
 80012f2:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 80012f4:	f043 0302 	orr.w	r3, r3, #2
 80012f8:	60f3      	str	r3, [r6, #12]
     hhcd->hc[chnum].ErrCnt++;
 80012fa:	fb07 4305 	mla	r3, r7, r5, r4
 80012fe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001300:	3201      	adds	r2, #1
 8001302:	659a      	str	r2, [r3, #88]	; 0x58
     hhcd->hc[chnum].state = HC_XACTERR;
 8001304:	2206      	movs	r2, #6
 8001306:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
     USB_HC_Halt(hhcd->Instance, chnum);     
 800130a:	f001 fbff 	bl	8002b0c <USB_HC_Halt>
     __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800130e:	2380      	movs	r3, #128	; 0x80
 8001310:	60b3      	str	r3, [r6, #8]
 8001312:	e79e      	b.n	8001252 <HAL_HCD_IRQHandler+0x332>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NAK)
 8001314:	68b1      	ldr	r1, [r6, #8]
 8001316:	06c9      	lsls	r1, r1, #27
 8001318:	d59b      	bpl.n	8001252 <HAL_HCD_IRQHandler+0x332>
    if(hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800131a:	fb07 4105 	mla	r1, r7, r5, r4
 800131e:	f891 103f 	ldrb.w	r1, [r1, #63]	; 0x3f
 8001322:	2903      	cmp	r1, #3
 8001324:	d10e      	bne.n	8001344 <HAL_HCD_IRQHandler+0x424>
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001326:	68f3      	ldr	r3, [r6, #12]
      USB_HC_Halt(hhcd->Instance, chnum);  
 8001328:	4629      	mov	r1, r5
 800132a:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 800132c:	f043 0302 	orr.w	r3, r3, #2
 8001330:	60f3      	str	r3, [r6, #12]
      USB_HC_Halt(hhcd->Instance, chnum);  
 8001332:	f001 fbeb 	bl	8002b0c <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_NAK;
 8001336:	fb07 4505 	mla	r5, r7, r5, r4
 800133a:	2303      	movs	r3, #3
 800133c:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001340:	2310      	movs	r3, #16
 8001342:	e7e5      	b.n	8001310 <HAL_HCD_IRQHandler+0x3f0>
    else if  ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 8001344:	f011 0ffd 	tst.w	r1, #253	; 0xfd
 8001348:	d1f5      	bne.n	8001336 <HAL_HCD_IRQHandler+0x416>
      tmpreg = USBx_HC(chnum)->HCCHAR;
 800134a:	58d1      	ldr	r1, [r2, r3]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800134c:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001350:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
      USBx_HC(chnum)->HCCHAR = tmpreg;
 8001354:	50d1      	str	r1, [r2, r3]
 8001356:	e7ee      	b.n	8001336 <HAL_HCD_IRQHandler+0x416>
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_AHBERR)
 8001358:	ea4f 1e45 	mov.w	lr, r5, lsl #5
 800135c:	f500 61a0 	add.w	r1, r0, #1280	; 0x500
 8001360:	eb0e 0601 	add.w	r6, lr, r1
 8001364:	68b3      	ldr	r3, [r6, #8]
 8001366:	075a      	lsls	r2, r3, #29
 8001368:	d506      	bpl.n	8001378 <HAL_HCD_IRQHandler+0x458>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800136a:	2304      	movs	r3, #4
 800136c:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 800136e:	68f3      	ldr	r3, [r6, #12]
 8001370:	f043 0302 	orr.w	r3, r3, #2
 8001374:	60f3      	str	r3, [r6, #12]
 8001376:	e76c      	b.n	8001252 <HAL_HCD_IRQHandler+0x332>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_ACK)
 8001378:	68b2      	ldr	r2, [r6, #8]
 800137a:	f012 0220 	ands.w	r2, r2, #32
 800137e:	d019      	beq.n	80013b4 <HAL_HCD_IRQHandler+0x494>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001380:	2320      	movs	r3, #32
 8001382:	60b3      	str	r3, [r6, #8]
    if( hhcd->hc[chnum].do_ping == 1)
 8001384:	fb07 4305 	mla	r3, r7, r5, r4
 8001388:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 800138c:	2a01      	cmp	r2, #1
 800138e:	f47f af60 	bne.w	8001252 <HAL_HCD_IRQHandler+0x332>
      hhcd->hc[chnum].state = HC_NYET;     
 8001392:	2204      	movs	r2, #4
      USB_HC_Halt(hhcd->Instance, chnum); 
 8001394:	4629      	mov	r1, r5
      hhcd->hc[chnum].state = HC_NYET;     
 8001396:	9302      	str	r3, [sp, #8]
 8001398:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 800139c:	68f2      	ldr	r2, [r6, #12]
 800139e:	f042 0202 	orr.w	r2, r2, #2
 80013a2:	60f2      	str	r2, [r6, #12]
      USB_HC_Halt(hhcd->Instance, chnum); 
 80013a4:	f001 fbb2 	bl	8002b0c <USB_HC_Halt>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80013a8:	9b02      	ldr	r3, [sp, #8]
 80013aa:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
 80013ae:	e750      	b.n	8001252 <HAL_HCD_IRQHandler+0x332>
 80013b0:	1ff80000 	.word	0x1ff80000
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NYET)
 80013b4:	68b3      	ldr	r3, [r6, #8]
 80013b6:	065b      	lsls	r3, r3, #25
 80013b8:	d50e      	bpl.n	80013d8 <HAL_HCD_IRQHandler+0x4b8>
    hhcd->hc[chnum].state = HC_NYET;
 80013ba:	fb07 4305 	mla	r3, r7, r5, r4
 80013be:	2104      	movs	r1, #4
    hhcd->hc[chnum].ErrCnt= 0;    
 80013c0:	659a      	str	r2, [r3, #88]	; 0x58
    hhcd->hc[chnum].state = HC_NYET;
 80013c2:	f883 105d 	strb.w	r1, [r3, #93]	; 0x5d
    USB_HC_Halt(hhcd->Instance, chnum);      
 80013c6:	4629      	mov	r1, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 80013c8:	68f3      	ldr	r3, [r6, #12]
 80013ca:	f043 0302 	orr.w	r3, r3, #2
 80013ce:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 80013d0:	f001 fb9c 	bl	8002b0c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80013d4:	2340      	movs	r3, #64	; 0x40
 80013d6:	e79b      	b.n	8001310 <HAL_HCD_IRQHandler+0x3f0>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_FRMOR)
 80013d8:	68b2      	ldr	r2, [r6, #8]
 80013da:	f412 7200 	ands.w	r2, r2, #512	; 0x200
 80013de:	d005      	beq.n	80013ec <HAL_HCD_IRQHandler+0x4cc>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 80013e0:	68f3      	ldr	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 80013e2:	4629      	mov	r1, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 80013e4:	f043 0302 	orr.w	r3, r3, #2
 80013e8:	60f3      	str	r3, [r6, #12]
 80013ea:	e6c7      	b.n	800117c <HAL_HCD_IRQHandler+0x25c>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_XFRC)
 80013ec:	68b3      	ldr	r3, [r6, #8]
 80013ee:	07db      	lsls	r3, r3, #31
 80013f0:	d510      	bpl.n	8001414 <HAL_HCD_IRQHandler+0x4f4>
      hhcd->hc[chnum].ErrCnt = 0;  
 80013f2:	fb07 4305 	mla	r3, r7, r5, r4
    USB_HC_Halt(hhcd->Instance, chnum);   
 80013f6:	4629      	mov	r1, r5
      hhcd->hc[chnum].ErrCnt = 0;  
 80013f8:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80013fa:	68f2      	ldr	r2, [r6, #12]
      hhcd->hc[chnum].ErrCnt = 0;  
 80013fc:	9302      	str	r3, [sp, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80013fe:	f042 0202 	orr.w	r2, r2, #2
 8001402:	60f2      	str	r2, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 8001404:	f001 fb82 	bl	8002b0c <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_XFRC;
 8001408:	9b02      	ldr	r3, [sp, #8]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800140a:	f8c6 a008 	str.w	sl, [r6, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800140e:	f883 a05d 	strb.w	sl, [r3, #93]	; 0x5d
 8001412:	e71e      	b.n	8001252 <HAL_HCD_IRQHandler+0x332>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_STALL)  
 8001414:	68b3      	ldr	r3, [r6, #8]
 8001416:	071b      	lsls	r3, r3, #28
 8001418:	d50e      	bpl.n	8001438 <HAL_HCD_IRQHandler+0x518>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);  
 800141a:	2308      	movs	r3, #8
    USB_HC_Halt(hhcd->Instance, chnum);   
 800141c:	4629      	mov	r1, r5
    hhcd->hc[chnum].state = HC_STALL;    
 800141e:	fb07 4505 	mla	r5, r7, r5, r4
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);  
 8001422:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8001424:	68f3      	ldr	r3, [r6, #12]
 8001426:	f043 0302 	orr.w	r3, r3, #2
 800142a:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 800142c:	f001 fb6e 	bl	8002b0c <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_STALL;    
 8001430:	2305      	movs	r3, #5
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001432:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
 8001436:	e70c      	b.n	8001252 <HAL_HCD_IRQHandler+0x332>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NAK)
 8001438:	68b3      	ldr	r3, [r6, #8]
 800143a:	06da      	lsls	r2, r3, #27
 800143c:	d510      	bpl.n	8001460 <HAL_HCD_IRQHandler+0x540>
    hhcd->hc[chnum].ErrCnt = 0;  
 800143e:	fb07 4305 	mla	r3, r7, r5, r4
 8001442:	2200      	movs	r2, #0
    USB_HC_Halt(hhcd->Instance, chnum);   
 8001444:	4629      	mov	r1, r5
    hhcd->hc[chnum].ErrCnt = 0;  
 8001446:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001448:	68f2      	ldr	r2, [r6, #12]
    hhcd->hc[chnum].ErrCnt = 0;  
 800144a:	9302      	str	r3, [sp, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 800144c:	f042 0202 	orr.w	r2, r2, #2
 8001450:	60f2      	str	r2, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 8001452:	f001 fb5b 	bl	8002b0c <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_NAK;
 8001456:	2203      	movs	r2, #3
 8001458:	9b02      	ldr	r3, [sp, #8]
 800145a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800145e:	e76f      	b.n	8001340 <HAL_HCD_IRQHandler+0x420>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_TXERR)
 8001460:	68b3      	ldr	r3, [r6, #8]
 8001462:	061b      	lsls	r3, r3, #24
 8001464:	d50c      	bpl.n	8001480 <HAL_HCD_IRQHandler+0x560>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001466:	68f3      	ldr	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 8001468:	4629      	mov	r1, r5
    hhcd->hc[chnum].state = HC_XACTERR;  
 800146a:	fb07 4505 	mla	r5, r7, r5, r4
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 800146e:	f043 0302 	orr.w	r3, r3, #2
 8001472:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 8001474:	f001 fb4a 	bl	8002b0c <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_XACTERR;  
 8001478:	2306      	movs	r3, #6
 800147a:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
 800147e:	e746      	b.n	800130e <HAL_HCD_IRQHandler+0x3ee>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_DTERR)
 8001480:	68b2      	ldr	r2, [r6, #8]
 8001482:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
 8001486:	d00f      	beq.n	80014a8 <HAL_HCD_IRQHandler+0x588>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001488:	68f3      	ldr	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 800148a:	4629      	mov	r1, r5
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800148c:	fb07 4505 	mla	r5, r7, r5, r4
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001490:	f043 0302 	orr.w	r3, r3, #2
 8001494:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 8001496:	f001 fb39 	bl	8002b0c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800149a:	2310      	movs	r3, #16
 800149c:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);    
 800149e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014a2:	60b3      	str	r3, [r6, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80014a4:	2308      	movs	r3, #8
 80014a6:	e7c4      	b.n	8001432 <HAL_HCD_IRQHandler+0x512>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_CHH)
 80014a8:	68b3      	ldr	r3, [r6, #8]
 80014aa:	0798      	lsls	r0, r3, #30
 80014ac:	f57f aed1 	bpl.w	8001252 <HAL_HCD_IRQHandler+0x332>
    __HAL_HCD_MASK_HALT_HC_INT(chnum); 
 80014b0:	68f3      	ldr	r3, [r6, #12]
 80014b2:	f023 0302 	bic.w	r3, r3, #2
 80014b6:	60f3      	str	r3, [r6, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 80014b8:	fb07 4305 	mla	r3, r7, r5, r4
 80014bc:	f893 005d 	ldrb.w	r0, [r3, #93]	; 0x5d
 80014c0:	2801      	cmp	r0, #1
 80014c2:	d10d      	bne.n	80014e0 <HAL_HCD_IRQHandler+0x5c0>
      if (hhcd->hc[chnum].ep_type == EP_TYPE_BULK)
 80014c4:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
      hhcd->hc[chnum].urb_state  = URB_DONE;
 80014c8:	f883 005c 	strb.w	r0, [r3, #92]	; 0x5c
      if (hhcd->hc[chnum].ep_type == EP_TYPE_BULK)
 80014cc:	2a02      	cmp	r2, #2
 80014ce:	f47f aee2 	bne.w	8001296 <HAL_HCD_IRQHandler+0x376>
        hhcd->hc[chnum].toggle_out ^= 1; 
 80014d2:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 80014d6:	f082 0201 	eor.w	r2, r2, #1
 80014da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80014de:	e6da      	b.n	8001296 <HAL_HCD_IRQHandler+0x376>
    else if (hhcd->hc[chnum].state == HC_NAK) 
 80014e0:	2803      	cmp	r0, #3
 80014e2:	d102      	bne.n	80014ea <HAL_HCD_IRQHandler+0x5ca>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80014e4:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
 80014e8:	e6d5      	b.n	8001296 <HAL_HCD_IRQHandler+0x376>
    else if (hhcd->hc[chnum].state == HC_NYET) 
 80014ea:	2804      	cmp	r0, #4
 80014ec:	d104      	bne.n	80014f8 <HAL_HCD_IRQHandler+0x5d8>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80014ee:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
      hhcd->hc[chnum].do_ping = 0;
 80014f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80014f6:	e6ce      	b.n	8001296 <HAL_HCD_IRQHandler+0x376>
    else if (hhcd->hc[chnum].state == HC_STALL) 
 80014f8:	2805      	cmp	r0, #5
 80014fa:	d102      	bne.n	8001502 <HAL_HCD_IRQHandler+0x5e2>
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80014fc:	f883 005c 	strb.w	r0, [r3, #92]	; 0x5c
 8001500:	e6c9      	b.n	8001296 <HAL_HCD_IRQHandler+0x376>
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001502:	2806      	cmp	r0, #6
 8001504:	d002      	beq.n	800150c <HAL_HCD_IRQHandler+0x5ec>
 8001506:	2808      	cmp	r0, #8
 8001508:	f47f aec5 	bne.w	8001296 <HAL_HCD_IRQHandler+0x376>
      if(hhcd->hc[chnum].ErrCnt++ > 3)
 800150c:	fb07 4305 	mla	r3, r7, r5, r4
 8001510:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001512:	2a03      	cmp	r2, #3
 8001514:	f102 0001 	add.w	r0, r2, #1
        hhcd->hc[chnum].ErrCnt = 0;
 8001518:	bf88      	it	hi
 800151a:	2200      	movhi	r2, #0
      if(hhcd->hc[chnum].ErrCnt++ > 3)
 800151c:	6598      	str	r0, [r3, #88]	; 0x58
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800151e:	bf91      	iteee	ls
 8001520:	f883 905c 	strbls.w	r9, [r3, #92]	; 0x5c
        hhcd->hc[chnum].ErrCnt = 0;
 8001524:	659a      	strhi	r2, [r3, #88]	; 0x58
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8001526:	2204      	movhi	r2, #4
 8001528:	f883 205c 	strbhi.w	r2, [r3, #92]	; 0x5c
      tmpreg = USBx_HC(chnum)->HCCHAR;
 800152c:	f85e 3001 	ldr.w	r3, [lr, r1]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001530:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001534:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
      USBx_HC(chnum)->HCCHAR = tmpreg;   
 8001538:	f84e 3001 	str.w	r3, [lr, r1]
 800153c:	e6ab      	b.n	8001296 <HAL_HCD_IRQHandler+0x376>
 800153e:	bf00      	nop

08001540 <HAL_HCD_Start>:
{ 
 8001540:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hhcd); 
 8001542:	f890 3290 	ldrb.w	r3, [r0, #656]	; 0x290
{ 
 8001546:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd); 
 8001548:	2b01      	cmp	r3, #1
 800154a:	d00d      	beq.n	8001568 <HAL_HCD_Start+0x28>
 800154c:	2501      	movs	r5, #1
 800154e:	f880 5290 	strb.w	r5, [r0, #656]	; 0x290
  __HAL_HCD_ENABLE(hhcd);
 8001552:	6800      	ldr	r0, [r0, #0]
 8001554:	f001 f93f 	bl	80027d6 <USB_EnableGlobalInt>
  USB_DriveVbus(hhcd->Instance, 1);  
 8001558:	4629      	mov	r1, r5
 800155a:	6820      	ldr	r0, [r4, #0]
 800155c:	f001 f9d1 	bl	8002902 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd); 
 8001560:	2000      	movs	r0, #0
 8001562:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290
  return HAL_OK;
 8001566:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hhcd); 
 8001568:	2002      	movs	r0, #2
}
 800156a:	bd38      	pop	{r3, r4, r5, pc}

0800156c <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd); 
 800156c:	f890 3290 	ldrb.w	r3, [r0, #656]	; 0x290
 8001570:	2b01      	cmp	r3, #1
{ 
 8001572:	b510      	push	{r4, lr}
 8001574:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd); 
 8001576:	d009      	beq.n	800158c <HAL_HCD_Stop+0x20>
 8001578:	2301      	movs	r3, #1
 800157a:	f880 3290 	strb.w	r3, [r0, #656]	; 0x290
  USB_StopHost(hhcd->Instance);
 800157e:	6800      	ldr	r0, [r0, #0]
 8001580:	f001 fbd2 	bl	8002d28 <USB_StopHost>
  __HAL_UNLOCK(hhcd); 
 8001584:	2000      	movs	r0, #0
 8001586:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290
  return HAL_OK;
 800158a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd); 
 800158c:	2002      	movs	r0, #2
}
 800158e:	bd10      	pop	{r4, pc}

08001590 <HAL_HCD_ResetPort>:
  return (USB_ResetPort(hhcd->Instance));
 8001590:	6800      	ldr	r0, [r0, #0]
 8001592:	f001 b99a 	b.w	80028ca <USB_ResetPort>

08001596 <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 8001596:	2328      	movs	r3, #40	; 0x28
 8001598:	fb03 0101 	mla	r1, r3, r1, r0
}
 800159c:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
 80015a0:	4770      	bx	lr

080015a2 <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count; 
 80015a2:	2328      	movs	r3, #40	; 0x28
 80015a4:	fb03 0101 	mla	r1, r3, r1, r0
}
 80015a8:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 80015aa:	4770      	bx	lr

080015ac <HAL_HCD_GetCurrentFrame>:
  return (USB_GetCurrentFrame(hhcd->Instance));
 80015ac:	6800      	ldr	r0, [r0, #0]
 80015ae:	f001 ba36 	b.w	8002a1e <USB_GetCurrentFrame>

080015b2 <HAL_HCD_GetCurrentSpeed>:
  return (USB_GetHostSpeed(hhcd->Instance));
 80015b2:	6800      	ldr	r0, [r0, #0]
 80015b4:	f001 ba2a 	b.w	8002a0c <USB_GetHostSpeed>

080015b8 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 80015b8:	4b19      	ldr	r3, [pc, #100]	; (8001620 <HAL_PWREx_EnableOverDrive+0x68>)
{
 80015ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 80015bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80015be:	4c19      	ldr	r4, [pc, #100]	; (8001624 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80015c0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80015c4:	641a      	str	r2, [r3, #64]	; 0x40
 80015c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015cc:	9301      	str	r3, [sp, #4]
 80015ce:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80015d0:	6823      	ldr	r3, [r4, #0]
 80015d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015d6:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015d8:	f7fe fe7e 	bl	80002d8 <HAL_GetTick>
 80015dc:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80015de:	6863      	ldr	r3, [r4, #4]
 80015e0:	03da      	lsls	r2, r3, #15
 80015e2:	d50c      	bpl.n	80015fe <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80015e4:	6823      	ldr	r3, [r4, #0]
 80015e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ea:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015ec:	f7fe fe74 	bl	80002d8 <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80015f0:	4c0c      	ldr	r4, [pc, #48]	; (8001624 <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 80015f2:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80015f4:	6863      	ldr	r3, [r4, #4]
 80015f6:	039b      	lsls	r3, r3, #14
 80015f8:	d50a      	bpl.n	8001610 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80015fa:	2000      	movs	r0, #0
 80015fc:	e006      	b.n	800160c <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80015fe:	f7fe fe6b 	bl	80002d8 <HAL_GetTick>
 8001602:	1b40      	subs	r0, r0, r5
 8001604:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001608:	d9e9      	bls.n	80015de <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 800160a:	2003      	movs	r0, #3
}
 800160c:	b003      	add	sp, #12
 800160e:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001610:	f7fe fe62 	bl	80002d8 <HAL_GetTick>
 8001614:	1b40      	subs	r0, r0, r5
 8001616:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800161a:	d9eb      	bls.n	80015f4 <HAL_PWREx_EnableOverDrive+0x3c>
 800161c:	e7f5      	b.n	800160a <HAL_PWREx_EnableOverDrive+0x52>
 800161e:	bf00      	nop
 8001620:	40023800 	.word	0x40023800
 8001624:	40007000 	.word	0x40007000

08001628 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001628:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800162c:	4604      	mov	r4, r0
 800162e:	b918      	cbnz	r0, 8001638 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001630:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8001632:	b002      	add	sp, #8
 8001634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001638:	6803      	ldr	r3, [r0, #0]
 800163a:	07d8      	lsls	r0, r3, #31
 800163c:	d410      	bmi.n	8001660 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800163e:	6823      	ldr	r3, [r4, #0]
 8001640:	0799      	lsls	r1, r3, #30
 8001642:	d45e      	bmi.n	8001702 <HAL_RCC_OscConfig+0xda>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001644:	6823      	ldr	r3, [r4, #0]
 8001646:	0719      	lsls	r1, r3, #28
 8001648:	f100 80a3 	bmi.w	8001792 <HAL_RCC_OscConfig+0x16a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800164c:	6823      	ldr	r3, [r4, #0]
 800164e:	075a      	lsls	r2, r3, #29
 8001650:	f100 80c4 	bmi.w	80017dc <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001654:	69a2      	ldr	r2, [r4, #24]
 8001656:	2a00      	cmp	r2, #0
 8001658:	f040 812e 	bne.w	80018b8 <HAL_RCC_OscConfig+0x290>
  return HAL_OK;
 800165c:	2000      	movs	r0, #0
 800165e:	e7e8      	b.n	8001632 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001660:	4b93      	ldr	r3, [pc, #588]	; (80018b0 <HAL_RCC_OscConfig+0x288>)
 8001662:	689a      	ldr	r2, [r3, #8]
 8001664:	f002 020c 	and.w	r2, r2, #12
 8001668:	2a04      	cmp	r2, #4
 800166a:	d007      	beq.n	800167c <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800166c:	689a      	ldr	r2, [r3, #8]
 800166e:	f002 020c 	and.w	r2, r2, #12
 8001672:	2a08      	cmp	r2, #8
 8001674:	d10a      	bne.n	800168c <HAL_RCC_OscConfig+0x64>
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	025a      	lsls	r2, r3, #9
 800167a:	d507      	bpl.n	800168c <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800167c:	4b8c      	ldr	r3, [pc, #560]	; (80018b0 <HAL_RCC_OscConfig+0x288>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	039b      	lsls	r3, r3, #14
 8001682:	d5dc      	bpl.n	800163e <HAL_RCC_OscConfig+0x16>
 8001684:	6863      	ldr	r3, [r4, #4]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d1d9      	bne.n	800163e <HAL_RCC_OscConfig+0x16>
 800168a:	e7d1      	b.n	8001630 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800168c:	6863      	ldr	r3, [r4, #4]
 800168e:	4d88      	ldr	r5, [pc, #544]	; (80018b0 <HAL_RCC_OscConfig+0x288>)
 8001690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001694:	d111      	bne.n	80016ba <HAL_RCC_OscConfig+0x92>
 8001696:	682b      	ldr	r3, [r5, #0]
 8001698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800169c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800169e:	f7fe fe1b 	bl	80002d8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016a2:	4d83      	ldr	r5, [pc, #524]	; (80018b0 <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 80016a4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016a6:	682b      	ldr	r3, [r5, #0]
 80016a8:	039f      	lsls	r7, r3, #14
 80016aa:	d4c8      	bmi.n	800163e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016ac:	f7fe fe14 	bl	80002d8 <HAL_GetTick>
 80016b0:	1b80      	subs	r0, r0, r6
 80016b2:	2864      	cmp	r0, #100	; 0x64
 80016b4:	d9f7      	bls.n	80016a6 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 80016b6:	2003      	movs	r0, #3
 80016b8:	e7bb      	b.n	8001632 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016ba:	b99b      	cbnz	r3, 80016e4 <HAL_RCC_OscConfig+0xbc>
 80016bc:	682b      	ldr	r3, [r5, #0]
 80016be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016c2:	602b      	str	r3, [r5, #0]
 80016c4:	682b      	ldr	r3, [r5, #0]
 80016c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ca:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80016cc:	f7fe fe04 	bl	80002d8 <HAL_GetTick>
 80016d0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016d2:	682b      	ldr	r3, [r5, #0]
 80016d4:	0398      	lsls	r0, r3, #14
 80016d6:	d5b2      	bpl.n	800163e <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016d8:	f7fe fdfe 	bl	80002d8 <HAL_GetTick>
 80016dc:	1b80      	subs	r0, r0, r6
 80016de:	2864      	cmp	r0, #100	; 0x64
 80016e0:	d9f7      	bls.n	80016d2 <HAL_RCC_OscConfig+0xaa>
 80016e2:	e7e8      	b.n	80016b6 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016e8:	682b      	ldr	r3, [r5, #0]
 80016ea:	d103      	bne.n	80016f4 <HAL_RCC_OscConfig+0xcc>
 80016ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016f0:	602b      	str	r3, [r5, #0]
 80016f2:	e7d0      	b.n	8001696 <HAL_RCC_OscConfig+0x6e>
 80016f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016f8:	602b      	str	r3, [r5, #0]
 80016fa:	682b      	ldr	r3, [r5, #0]
 80016fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001700:	e7cc      	b.n	800169c <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001702:	4b6b      	ldr	r3, [pc, #428]	; (80018b0 <HAL_RCC_OscConfig+0x288>)
 8001704:	689a      	ldr	r2, [r3, #8]
 8001706:	f012 0f0c 	tst.w	r2, #12
 800170a:	d007      	beq.n	800171c <HAL_RCC_OscConfig+0xf4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800170c:	689a      	ldr	r2, [r3, #8]
 800170e:	f002 020c 	and.w	r2, r2, #12
 8001712:	2a08      	cmp	r2, #8
 8001714:	d111      	bne.n	800173a <HAL_RCC_OscConfig+0x112>
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	0259      	lsls	r1, r3, #9
 800171a:	d40e      	bmi.n	800173a <HAL_RCC_OscConfig+0x112>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800171c:	4b64      	ldr	r3, [pc, #400]	; (80018b0 <HAL_RCC_OscConfig+0x288>)
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	0792      	lsls	r2, r2, #30
 8001722:	d502      	bpl.n	800172a <HAL_RCC_OscConfig+0x102>
 8001724:	68e2      	ldr	r2, [r4, #12]
 8001726:	2a01      	cmp	r2, #1
 8001728:	d182      	bne.n	8001630 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	6921      	ldr	r1, [r4, #16]
 800172e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001732:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001736:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001738:	e784      	b.n	8001644 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800173a:	68e3      	ldr	r3, [r4, #12]
 800173c:	4d5c      	ldr	r5, [pc, #368]	; (80018b0 <HAL_RCC_OscConfig+0x288>)
 800173e:	b1bb      	cbz	r3, 8001770 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 8001740:	682b      	ldr	r3, [r5, #0]
 8001742:	f043 0301 	orr.w	r3, r3, #1
 8001746:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001748:	f7fe fdc6 	bl	80002d8 <HAL_GetTick>
 800174c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800174e:	682b      	ldr	r3, [r5, #0]
 8001750:	079f      	lsls	r7, r3, #30
 8001752:	d507      	bpl.n	8001764 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001754:	682b      	ldr	r3, [r5, #0]
 8001756:	6922      	ldr	r2, [r4, #16]
 8001758:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800175c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001760:	602b      	str	r3, [r5, #0]
 8001762:	e76f      	b.n	8001644 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001764:	f7fe fdb8 	bl	80002d8 <HAL_GetTick>
 8001768:	1b80      	subs	r0, r0, r6
 800176a:	2802      	cmp	r0, #2
 800176c:	d9ef      	bls.n	800174e <HAL_RCC_OscConfig+0x126>
 800176e:	e7a2      	b.n	80016b6 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8001770:	682b      	ldr	r3, [r5, #0]
 8001772:	f023 0301 	bic.w	r3, r3, #1
 8001776:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001778:	f7fe fdae 	bl	80002d8 <HAL_GetTick>
 800177c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800177e:	682b      	ldr	r3, [r5, #0]
 8001780:	0798      	lsls	r0, r3, #30
 8001782:	f57f af5f 	bpl.w	8001644 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001786:	f7fe fda7 	bl	80002d8 <HAL_GetTick>
 800178a:	1b80      	subs	r0, r0, r6
 800178c:	2802      	cmp	r0, #2
 800178e:	d9f6      	bls.n	800177e <HAL_RCC_OscConfig+0x156>
 8001790:	e791      	b.n	80016b6 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001792:	6963      	ldr	r3, [r4, #20]
 8001794:	4d46      	ldr	r5, [pc, #280]	; (80018b0 <HAL_RCC_OscConfig+0x288>)
 8001796:	b183      	cbz	r3, 80017ba <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 8001798:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800179a:	f043 0301 	orr.w	r3, r3, #1
 800179e:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80017a0:	f7fe fd9a 	bl	80002d8 <HAL_GetTick>
 80017a4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017a6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80017a8:	079b      	lsls	r3, r3, #30
 80017aa:	f53f af4f 	bmi.w	800164c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017ae:	f7fe fd93 	bl	80002d8 <HAL_GetTick>
 80017b2:	1b80      	subs	r0, r0, r6
 80017b4:	2802      	cmp	r0, #2
 80017b6:	d9f6      	bls.n	80017a6 <HAL_RCC_OscConfig+0x17e>
 80017b8:	e77d      	b.n	80016b6 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 80017ba:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80017bc:	f023 0301 	bic.w	r3, r3, #1
 80017c0:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80017c2:	f7fe fd89 	bl	80002d8 <HAL_GetTick>
 80017c6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017c8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80017ca:	079f      	lsls	r7, r3, #30
 80017cc:	f57f af3e 	bpl.w	800164c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017d0:	f7fe fd82 	bl	80002d8 <HAL_GetTick>
 80017d4:	1b80      	subs	r0, r0, r6
 80017d6:	2802      	cmp	r0, #2
 80017d8:	d9f6      	bls.n	80017c8 <HAL_RCC_OscConfig+0x1a0>
 80017da:	e76c      	b.n	80016b6 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017dc:	4b34      	ldr	r3, [pc, #208]	; (80018b0 <HAL_RCC_OscConfig+0x288>)
 80017de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017e0:	00d0      	lsls	r0, r2, #3
 80017e2:	d427      	bmi.n	8001834 <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 80017e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 80017e6:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80017e8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80017ec:	641a      	str	r2, [r3, #64]	; 0x40
 80017ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f4:	9301      	str	r3, [sp, #4]
 80017f6:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017f8:	4d2e      	ldr	r5, [pc, #184]	; (80018b4 <HAL_RCC_OscConfig+0x28c>)
 80017fa:	682b      	ldr	r3, [r5, #0]
 80017fc:	05d9      	lsls	r1, r3, #23
 80017fe:	d51b      	bpl.n	8001838 <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001800:	68a3      	ldr	r3, [r4, #8]
 8001802:	4d2b      	ldr	r5, [pc, #172]	; (80018b0 <HAL_RCC_OscConfig+0x288>)
 8001804:	2b01      	cmp	r3, #1
 8001806:	d127      	bne.n	8001858 <HAL_RCC_OscConfig+0x230>
 8001808:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800180a:	f043 0301 	orr.w	r3, r3, #1
 800180e:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001810:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001814:	f7fe fd60 	bl	80002d8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001818:	4f25      	ldr	r7, [pc, #148]	; (80018b0 <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 800181a:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800181c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800181e:	079b      	lsls	r3, r3, #30
 8001820:	d53f      	bpl.n	80018a2 <HAL_RCC_OscConfig+0x27a>
    if(pwrclkchanged == SET)
 8001822:	2e00      	cmp	r6, #0
 8001824:	f43f af16 	beq.w	8001654 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001828:	4a21      	ldr	r2, [pc, #132]	; (80018b0 <HAL_RCC_OscConfig+0x288>)
 800182a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800182c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001830:	6413      	str	r3, [r2, #64]	; 0x40
 8001832:	e70f      	b.n	8001654 <HAL_RCC_OscConfig+0x2c>
  FlagStatus pwrclkchanged = RESET;
 8001834:	2600      	movs	r6, #0
 8001836:	e7df      	b.n	80017f8 <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 8001838:	682b      	ldr	r3, [r5, #0]
 800183a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800183e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001840:	f7fe fd4a 	bl	80002d8 <HAL_GetTick>
 8001844:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001846:	682b      	ldr	r3, [r5, #0]
 8001848:	05da      	lsls	r2, r3, #23
 800184a:	d4d9      	bmi.n	8001800 <HAL_RCC_OscConfig+0x1d8>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800184c:	f7fe fd44 	bl	80002d8 <HAL_GetTick>
 8001850:	1bc0      	subs	r0, r0, r7
 8001852:	2864      	cmp	r0, #100	; 0x64
 8001854:	d9f7      	bls.n	8001846 <HAL_RCC_OscConfig+0x21e>
 8001856:	e72e      	b.n	80016b6 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001858:	b9ab      	cbnz	r3, 8001886 <HAL_RCC_OscConfig+0x25e>
 800185a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800185c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001860:	f023 0301 	bic.w	r3, r3, #1
 8001864:	672b      	str	r3, [r5, #112]	; 0x70
 8001866:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001868:	f023 0304 	bic.w	r3, r3, #4
 800186c:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800186e:	f7fe fd33 	bl	80002d8 <HAL_GetTick>
 8001872:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001874:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001876:	0798      	lsls	r0, r3, #30
 8001878:	d5d3      	bpl.n	8001822 <HAL_RCC_OscConfig+0x1fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800187a:	f7fe fd2d 	bl	80002d8 <HAL_GetTick>
 800187e:	1bc0      	subs	r0, r0, r7
 8001880:	4540      	cmp	r0, r8
 8001882:	d9f7      	bls.n	8001874 <HAL_RCC_OscConfig+0x24c>
 8001884:	e717      	b.n	80016b6 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001886:	2b05      	cmp	r3, #5
 8001888:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800188a:	d103      	bne.n	8001894 <HAL_RCC_OscConfig+0x26c>
 800188c:	f043 0304 	orr.w	r3, r3, #4
 8001890:	672b      	str	r3, [r5, #112]	; 0x70
 8001892:	e7b9      	b.n	8001808 <HAL_RCC_OscConfig+0x1e0>
 8001894:	f023 0301 	bic.w	r3, r3, #1
 8001898:	672b      	str	r3, [r5, #112]	; 0x70
 800189a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800189c:	f023 0304 	bic.w	r3, r3, #4
 80018a0:	e7b5      	b.n	800180e <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018a2:	f7fe fd19 	bl	80002d8 <HAL_GetTick>
 80018a6:	eba0 0008 	sub.w	r0, r0, r8
 80018aa:	42a8      	cmp	r0, r5
 80018ac:	d9b6      	bls.n	800181c <HAL_RCC_OscConfig+0x1f4>
 80018ae:	e702      	b.n	80016b6 <HAL_RCC_OscConfig+0x8e>
 80018b0:	40023800 	.word	0x40023800
 80018b4:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018b8:	4d24      	ldr	r5, [pc, #144]	; (800194c <HAL_RCC_OscConfig+0x324>)
 80018ba:	68ab      	ldr	r3, [r5, #8]
 80018bc:	f003 030c 	and.w	r3, r3, #12
 80018c0:	2b08      	cmp	r3, #8
 80018c2:	f43f aeb5 	beq.w	8001630 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 80018c6:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018c8:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80018ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018ce:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018d0:	d12e      	bne.n	8001930 <HAL_RCC_OscConfig+0x308>
        tickstart = HAL_GetTick();
 80018d2:	f7fe fd01 	bl	80002d8 <HAL_GetTick>
 80018d6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018d8:	682b      	ldr	r3, [r5, #0]
 80018da:	0199      	lsls	r1, r3, #6
 80018dc:	d422      	bmi.n	8001924 <HAL_RCC_OscConfig+0x2fc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018de:	6a22      	ldr	r2, [r4, #32]
 80018e0:	69e3      	ldr	r3, [r4, #28]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80018e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80018ea:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80018ee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80018f0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80018f4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018f6:	4c15      	ldr	r4, [pc, #84]	; (800194c <HAL_RCC_OscConfig+0x324>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018f8:	0852      	lsrs	r2, r2, #1
 80018fa:	3a01      	subs	r2, #1
 80018fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001900:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001902:	682b      	ldr	r3, [r5, #0]
 8001904:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001908:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800190a:	f7fe fce5 	bl	80002d8 <HAL_GetTick>
 800190e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001910:	6823      	ldr	r3, [r4, #0]
 8001912:	019a      	lsls	r2, r3, #6
 8001914:	f53f aea2 	bmi.w	800165c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001918:	f7fe fcde 	bl	80002d8 <HAL_GetTick>
 800191c:	1b40      	subs	r0, r0, r5
 800191e:	2802      	cmp	r0, #2
 8001920:	d9f6      	bls.n	8001910 <HAL_RCC_OscConfig+0x2e8>
 8001922:	e6c8      	b.n	80016b6 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001924:	f7fe fcd8 	bl	80002d8 <HAL_GetTick>
 8001928:	1b80      	subs	r0, r0, r6
 800192a:	2802      	cmp	r0, #2
 800192c:	d9d4      	bls.n	80018d8 <HAL_RCC_OscConfig+0x2b0>
 800192e:	e6c2      	b.n	80016b6 <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
 8001930:	f7fe fcd2 	bl	80002d8 <HAL_GetTick>
 8001934:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001936:	682b      	ldr	r3, [r5, #0]
 8001938:	019b      	lsls	r3, r3, #6
 800193a:	f57f ae8f 	bpl.w	800165c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800193e:	f7fe fccb 	bl	80002d8 <HAL_GetTick>
 8001942:	1b00      	subs	r0, r0, r4
 8001944:	2802      	cmp	r0, #2
 8001946:	d9f6      	bls.n	8001936 <HAL_RCC_OscConfig+0x30e>
 8001948:	e6b5      	b.n	80016b6 <HAL_RCC_OscConfig+0x8e>
 800194a:	bf00      	nop
 800194c:	40023800 	.word	0x40023800

08001950 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001950:	4b11      	ldr	r3, [pc, #68]	; (8001998 <HAL_RCC_GetSysClockFreq+0x48>)
 8001952:	689a      	ldr	r2, [r3, #8]
 8001954:	f002 020c 	and.w	r2, r2, #12
 8001958:	2a04      	cmp	r2, #4
 800195a:	d003      	beq.n	8001964 <HAL_RCC_GetSysClockFreq+0x14>
 800195c:	2a08      	cmp	r2, #8
 800195e:	d003      	beq.n	8001968 <HAL_RCC_GetSysClockFreq+0x18>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001960:	480e      	ldr	r0, [pc, #56]	; (800199c <HAL_RCC_GetSysClockFreq+0x4c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001962:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8001964:	480e      	ldr	r0, [pc, #56]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x50>)
 8001966:	4770      	bx	lr
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001968:	685a      	ldr	r2, [r3, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800196a:	6859      	ldr	r1, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800196c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos));
 8001970:	685b      	ldr	r3, [r3, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001972:	0249      	lsls	r1, r1, #9
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos));
 8001974:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001978:	bf4c      	ite	mi
 800197a:	4809      	ldrmi	r0, [pc, #36]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x50>)
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos));
 800197c:	4807      	ldrpl	r0, [pc, #28]	; (800199c <HAL_RCC_GetSysClockFreq+0x4c>)
 800197e:	fbb0 f0f2 	udiv	r0, r0, r2
 8001982:	4358      	muls	r0, r3
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8001984:	4b04      	ldr	r3, [pc, #16]	; (8001998 <HAL_RCC_GetSysClockFreq+0x48>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800198c:	3301      	adds	r3, #1
 800198e:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001990:	fbb0 f0f3 	udiv	r0, r0, r3
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	40023800 	.word	0x40023800
 800199c:	00f42400 	.word	0x00f42400
 80019a0:	007a1200 	.word	0x007a1200

080019a4 <HAL_RCC_ClockConfig>:
{
 80019a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019a8:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80019aa:	4604      	mov	r4, r0
 80019ac:	b910      	cbnz	r0, 80019b4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80019ae:	2001      	movs	r0, #1
 80019b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019b4:	4a3f      	ldr	r2, [pc, #252]	; (8001ab4 <HAL_RCC_ClockConfig+0x110>)
 80019b6:	6813      	ldr	r3, [r2, #0]
 80019b8:	f003 030f 	and.w	r3, r3, #15
 80019bc:	428b      	cmp	r3, r1
 80019be:	d328      	bcc.n	8001a12 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019c0:	6822      	ldr	r2, [r4, #0]
 80019c2:	0796      	lsls	r6, r2, #30
 80019c4:	d430      	bmi.n	8001a28 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019c6:	07d0      	lsls	r0, r2, #31
 80019c8:	d436      	bmi.n	8001a38 <HAL_RCC_ClockConfig+0x94>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019ca:	4a3a      	ldr	r2, [pc, #232]	; (8001ab4 <HAL_RCC_ClockConfig+0x110>)
 80019cc:	6813      	ldr	r3, [r2, #0]
 80019ce:	f003 030f 	and.w	r3, r3, #15
 80019d2:	429d      	cmp	r5, r3
 80019d4:	d35a      	bcc.n	8001a8c <HAL_RCC_ClockConfig+0xe8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019d6:	6822      	ldr	r2, [r4, #0]
 80019d8:	0751      	lsls	r1, r2, #29
 80019da:	d462      	bmi.n	8001aa2 <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019dc:	0713      	lsls	r3, r2, #28
 80019de:	d507      	bpl.n	80019f0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019e0:	4a35      	ldr	r2, [pc, #212]	; (8001ab8 <HAL_RCC_ClockConfig+0x114>)
 80019e2:	6921      	ldr	r1, [r4, #16]
 80019e4:	6893      	ldr	r3, [r2, #8]
 80019e6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80019ea:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80019ee:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019f0:	f7ff ffae 	bl	8001950 <HAL_RCC_GetSysClockFreq>
 80019f4:	4b30      	ldr	r3, [pc, #192]	; (8001ab8 <HAL_RCC_ClockConfig+0x114>)
 80019f6:	4a31      	ldr	r2, [pc, #196]	; (8001abc <HAL_RCC_ClockConfig+0x118>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80019fe:	5cd3      	ldrb	r3, [r2, r3]
 8001a00:	40d8      	lsrs	r0, r3
 8001a02:	4b2f      	ldr	r3, [pc, #188]	; (8001ac0 <HAL_RCC_ClockConfig+0x11c>)
 8001a04:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001a06:	2000      	movs	r0, #0
 8001a08:	f009 fdc4 	bl	800b594 <HAL_InitTick>
  return HAL_OK;
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a12:	6813      	ldr	r3, [r2, #0]
 8001a14:	f023 030f 	bic.w	r3, r3, #15
 8001a18:	430b      	orrs	r3, r1
 8001a1a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a1c:	6813      	ldr	r3, [r2, #0]
 8001a1e:	f003 030f 	and.w	r3, r3, #15
 8001a22:	4299      	cmp	r1, r3
 8001a24:	d1c3      	bne.n	80019ae <HAL_RCC_ClockConfig+0xa>
 8001a26:	e7cb      	b.n	80019c0 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a28:	4923      	ldr	r1, [pc, #140]	; (8001ab8 <HAL_RCC_ClockConfig+0x114>)
 8001a2a:	68a0      	ldr	r0, [r4, #8]
 8001a2c:	688b      	ldr	r3, [r1, #8]
 8001a2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a32:	4303      	orrs	r3, r0
 8001a34:	608b      	str	r3, [r1, #8]
 8001a36:	e7c6      	b.n	80019c6 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a38:	6861      	ldr	r1, [r4, #4]
 8001a3a:	4b1f      	ldr	r3, [pc, #124]	; (8001ab8 <HAL_RCC_ClockConfig+0x114>)
 8001a3c:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a3e:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a40:	d11c      	bne.n	8001a7c <HAL_RCC_ClockConfig+0xd8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a42:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a46:	d0b2      	beq.n	80019ae <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a48:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a4a:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a4e:	4e1a      	ldr	r6, [pc, #104]	; (8001ab8 <HAL_RCC_ClockConfig+0x114>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a50:	f022 0203 	bic.w	r2, r2, #3
 8001a54:	430a      	orrs	r2, r1
 8001a56:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001a58:	f7fe fc3e 	bl	80002d8 <HAL_GetTick>
 8001a5c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a5e:	68b3      	ldr	r3, [r6, #8]
 8001a60:	6862      	ldr	r2, [r4, #4]
 8001a62:	f003 030c 	and.w	r3, r3, #12
 8001a66:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001a6a:	d0ae      	beq.n	80019ca <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a6c:	f7fe fc34 	bl	80002d8 <HAL_GetTick>
 8001a70:	1bc0      	subs	r0, r0, r7
 8001a72:	4540      	cmp	r0, r8
 8001a74:	d9f3      	bls.n	8001a5e <HAL_RCC_ClockConfig+0xba>
        return HAL_TIMEOUT;
 8001a76:	2003      	movs	r0, #3
}
 8001a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a7c:	2902      	cmp	r1, #2
 8001a7e:	d102      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xe2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a80:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001a84:	e7df      	b.n	8001a46 <HAL_RCC_ClockConfig+0xa2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a86:	f012 0f02 	tst.w	r2, #2
 8001a8a:	e7dc      	b.n	8001a46 <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a8c:	6813      	ldr	r3, [r2, #0]
 8001a8e:	f023 030f 	bic.w	r3, r3, #15
 8001a92:	432b      	orrs	r3, r5
 8001a94:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a96:	6813      	ldr	r3, [r2, #0]
 8001a98:	f003 030f 	and.w	r3, r3, #15
 8001a9c:	429d      	cmp	r5, r3
 8001a9e:	d186      	bne.n	80019ae <HAL_RCC_ClockConfig+0xa>
 8001aa0:	e799      	b.n	80019d6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001aa2:	4905      	ldr	r1, [pc, #20]	; (8001ab8 <HAL_RCC_ClockConfig+0x114>)
 8001aa4:	68e0      	ldr	r0, [r4, #12]
 8001aa6:	688b      	ldr	r3, [r1, #8]
 8001aa8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001aac:	4303      	orrs	r3, r0
 8001aae:	608b      	str	r3, [r1, #8]
 8001ab0:	e794      	b.n	80019dc <HAL_RCC_ClockConfig+0x38>
 8001ab2:	bf00      	nop
 8001ab4:	40023c00 	.word	0x40023c00
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	0800cbd2 	.word	0x0800cbd2
 8001ac0:	2000002c 	.word	0x2000002c

08001ac4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001ac4:	4b01      	ldr	r3, [pc, #4]	; (8001acc <HAL_RCC_GetHCLKFreq+0x8>)
 8001ac6:	6818      	ldr	r0, [r3, #0]
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	2000002c 	.word	0x2000002c

08001ad0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ad0:	4b04      	ldr	r3, [pc, #16]	; (8001ae4 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001ad2:	4a05      	ldr	r2, [pc, #20]	; (8001ae8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001ada:	5cd3      	ldrb	r3, [r2, r3]
 8001adc:	4a03      	ldr	r2, [pc, #12]	; (8001aec <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001ade:	6810      	ldr	r0, [r2, #0]
}
 8001ae0:	40d8      	lsrs	r0, r3
 8001ae2:	4770      	bx	lr
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	0800cbe2 	.word	0x0800cbe2
 8001aec:	2000002c 	.word	0x2000002c

08001af0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001af0:	4b04      	ldr	r3, [pc, #16]	; (8001b04 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001af2:	4a05      	ldr	r2, [pc, #20]	; (8001b08 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001afa:	5cd3      	ldrb	r3, [r2, r3]
 8001afc:	4a03      	ldr	r2, [pc, #12]	; (8001b0c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001afe:	6810      	ldr	r0, [r2, #0]
} 
 8001b00:	40d8      	lsrs	r0, r3
 8001b02:	4770      	bx	lr
 8001b04:	40023800 	.word	0x40023800
 8001b08:	0800cbe2 	.word	0x0800cbe2
 8001b0c:	2000002c 	.word	0x2000002c

08001b10 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b10:	230f      	movs	r3, #15
 8001b12:	6003      	str	r3, [r0, #0]
   
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b14:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <HAL_RCC_GetClockConfig+0x34>)
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	f002 0203 	and.w	r2, r2, #3
 8001b1c:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001b1e:	689a      	ldr	r2, [r3, #8]
 8001b20:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001b24:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8001b26:	689a      	ldr	r2, [r3, #8]
 8001b28:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8001b2c:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	08db      	lsrs	r3, r3, #3
 8001b32:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001b36:	6103      	str	r3, [r0, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8001b38:	4b03      	ldr	r3, [pc, #12]	; (8001b48 <HAL_RCC_GetClockConfig+0x38>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 030f 	and.w	r3, r3, #15
 8001b40:	600b      	str	r3, [r1, #0]
 8001b42:	4770      	bx	lr
 8001b44:	40023800 	.word	0x40023800
 8001b48:	40023c00 	.word	0x40023c00

08001b4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001b50:	6802      	ldr	r2, [r0, #0]
{
 8001b52:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001b54:	f012 0601 	ands.w	r6, r2, #1
 8001b58:	d00b      	beq.n	8001b72 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001b5a:	4bb8      	ldr	r3, [pc, #736]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b5c:	6899      	ldr	r1, [r3, #8]
 8001b5e:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8001b62:	6099      	str	r1, [r3, #8]
 8001b64:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8001b66:	6899      	ldr	r1, [r3, #8]
 8001b68:	4331      	orrs	r1, r6
    
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001b6a:	fab6 f686 	clz	r6, r6
 8001b6e:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001b70:	6099      	str	r1, [r3, #8]
      plli2sused = 1; 
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001b72:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 8001b76:	d012      	beq.n	8001b9e <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001b78:	49b0      	ldr	r1, [pc, #704]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b7a:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8001b7c:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001b80:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001b84:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1; 
 8001b88:	bf08      	it	eq
 8001b8a:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001b8c:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001b90:	bf16      	itet	ne
 8001b92:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8001b96:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001b98:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001b9a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1; 
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001b9e:	02d1      	lsls	r1, r2, #11
 8001ba0:	d510      	bpl.n	8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001ba2:	48a6      	ldr	r0, [pc, #664]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ba4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001ba6:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001baa:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001bae:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001bb2:	ea43 0301 	orr.w	r3, r3, r1
 8001bb6:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001bba:	f000 8185 	beq.w	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1; 
 8001bbe:	2900      	cmp	r1, #0
 8001bc0:	bf08      	it	eq
 8001bc2:	2501      	moveq	r5, #1
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {    
      plli2sused = 1; 
 8001bc4:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8001bc8:	bf18      	it	ne
 8001bca:	2601      	movne	r6, #1
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001bcc:	0692      	lsls	r2, r2, #26
 8001bce:	d531      	bpl.n	8001c34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001bd0:	4b9a      	ldr	r3, [pc, #616]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001bd2:	4f9b      	ldr	r7, [pc, #620]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001bd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bd6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001bda:	641a      	str	r2, [r3, #64]	; 0x40
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be2:	9301      	str	r3, [sp, #4]
 8001be4:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bec:	603b      	str	r3, [r7, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bee:	f7fe fb73 	bl	80002d8 <HAL_GetTick>
 8001bf2:	4680      	mov	r8, r0
    
    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	05db      	lsls	r3, r3, #23
 8001bf8:	f140 8168 	bpl.w	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x380>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001bfc:	4f8f      	ldr	r7, [pc, #572]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001bfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c00:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001c04:	f040 816d 	bne.w	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x396>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c08:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c0a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001c0e:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001c12:	4a8a      	ldr	r2, [pc, #552]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c14:	f040 818b 	bne.w	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8001c18:	6891      	ldr	r1, [r2, #8]
 8001c1a:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8001c1e:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001c22:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8001c26:	4301      	orrs	r1, r0
 8001c28:	6091      	str	r1, [r2, #8]
 8001c2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c2e:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001c30:	430b      	orrs	r3, r1
 8001c32:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001c34:	6823      	ldr	r3, [r4, #0]
 8001c36:	06da      	lsls	r2, r3, #27
 8001c38:	d50c      	bpl.n	8001c54 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001c3a:	4a80      	ldr	r2, [pc, #512]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c3c:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001c40:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8001c44:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8001c48:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001c4c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001c4e:	4301      	orrs	r1, r0
 8001c50:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c54:	045f      	lsls	r7, r3, #17
 8001c56:	d508      	bpl.n	8001c6a <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c58:	4978      	ldr	r1, [pc, #480]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c5a:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8001c5c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001c60:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001c64:	4302      	orrs	r2, r0
 8001c66:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001c6a:	0418      	lsls	r0, r3, #16
 8001c6c:	d508      	bpl.n	8001c80 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001c6e:	4973      	ldr	r1, [pc, #460]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c70:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8001c72:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001c76:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8001c7a:	4302      	orrs	r2, r0
 8001c7c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001c80:	03d9      	lsls	r1, r3, #15
 8001c82:	d508      	bpl.n	8001c96 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001c84:	496d      	ldr	r1, [pc, #436]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c86:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001c88:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001c8c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001c90:	4302      	orrs	r2, r0
 8001c92:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001c96:	039a      	lsls	r2, r3, #14
 8001c98:	d508      	bpl.n	8001cac <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001c9a:	4968      	ldr	r1, [pc, #416]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c9c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8001c9e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001ca2:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8001ca6:	4302      	orrs	r2, r0
 8001ca8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001cac:	065f      	lsls	r7, r3, #25
 8001cae:	d508      	bpl.n	8001cc2 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001cb0:	4962      	ldr	r1, [pc, #392]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cb2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001cb4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001cb8:	f022 0203 	bic.w	r2, r2, #3
 8001cbc:	4302      	orrs	r2, r0
 8001cbe:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001cc2:	0618      	lsls	r0, r3, #24
 8001cc4:	d508      	bpl.n	8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001cc6:	495d      	ldr	r1, [pc, #372]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cc8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001cca:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001cce:	f022 020c 	bic.w	r2, r2, #12
 8001cd2:	4302      	orrs	r2, r0
 8001cd4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001cd8:	05d9      	lsls	r1, r3, #23
 8001cda:	d508      	bpl.n	8001cee <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001cdc:	4957      	ldr	r1, [pc, #348]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cde:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8001ce0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001ce4:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8001ce8:	4302      	orrs	r2, r0
 8001cea:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001cee:	059a      	lsls	r2, r3, #22
 8001cf0:	d508      	bpl.n	8001d04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001cf2:	4952      	ldr	r1, [pc, #328]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cf4:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001cf6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001cfa:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001cfe:	4302      	orrs	r2, r0
 8001d00:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001d04:	055f      	lsls	r7, r3, #21
 8001d06:	d508      	bpl.n	8001d1a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001d08:	494c      	ldr	r1, [pc, #304]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001d0c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001d10:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001d14:	4302      	orrs	r2, r0
 8001d16:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001d1a:	0518      	lsls	r0, r3, #20
 8001d1c:	d508      	bpl.n	8001d30 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001d1e:	4947      	ldr	r1, [pc, #284]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001d22:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001d26:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001d2a:	4302      	orrs	r2, r0
 8001d2c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001d30:	04d9      	lsls	r1, r3, #19
 8001d32:	d508      	bpl.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001d34:	4941      	ldr	r1, [pc, #260]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d36:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8001d38:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001d3c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001d40:	4302      	orrs	r2, r0
 8001d42:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001d46:	049a      	lsls	r2, r3, #18
 8001d48:	d508      	bpl.n	8001d5c <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001d4a:	493c      	ldr	r1, [pc, #240]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d4c:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001d4e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001d52:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001d56:	4302      	orrs	r2, r0
 8001d58:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001d5c:	025f      	lsls	r7, r3, #9
 8001d5e:	d508      	bpl.n	8001d72 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001d60:	4936      	ldr	r1, [pc, #216]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d62:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8001d64:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001d68:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001d6c:	4302      	orrs	r2, r0
 8001d6e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001d72:	0298      	lsls	r0, r3, #10
 8001d74:	d50c      	bpl.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001d76:	4831      	ldr	r0, [pc, #196]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d78:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8001d7a:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1; 
 8001d7e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001d82:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1; 
 8001d86:	bf08      	it	eq
 8001d88:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1; 
 8001d90:	f013 0f08 	tst.w	r3, #8
 8001d94:	bf18      	it	ne
 8001d96:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001d98:	0359      	lsls	r1, r3, #13
 8001d9a:	d508      	bpl.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001d9c:	4927      	ldr	r1, [pc, #156]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d9e:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8001da0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001da4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001da8:	4302      	orrs	r2, r0
 8001daa:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001dae:	021a      	lsls	r2, r3, #8
 8001db0:	d509      	bpl.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001db2:	4922      	ldr	r1, [pc, #136]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001db4:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8001db8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001dbc:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001dc0:	4302      	orrs	r2, r0
 8001dc2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }  
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001dc6:	2e01      	cmp	r6, #1
 8001dc8:	f000 80b5 	beq.w	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8001dcc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001dd0:	f000 80b1 	beq.w	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001dd4:	2d01      	cmp	r5, #1
 8001dd6:	d175      	bne.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x378>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 8001dd8:	4d18      	ldr	r5, [pc, #96]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001dda:	682b      	ldr	r3, [r5, #0]
 8001ddc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001de0:	602b      	str	r3, [r5, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001de2:	f7fe fa79 	bl	80002d8 <HAL_GetTick>
 8001de6:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001de8:	682b      	ldr	r3, [r5, #0]
 8001dea:	009f      	lsls	r7, r3, #2
 8001dec:	f100 8127 	bmi.w	800203e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001df0:	6821      	ldr	r1, [r4, #0]
 8001df2:	030e      	lsls	r6, r1, #12
 8001df4:	d501      	bpl.n	8001dfa <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 8001df6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001df8:	b11b      	cbz	r3, 8001e02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 8001dfa:	02cd      	lsls	r5, r1, #11
 8001dfc:	d522      	bpl.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001dfe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e00:	bb03      	cbnz	r3, 8001e44 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
    
      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001e02:	4a0e      	ldr	r2, [pc, #56]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e04:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001e08:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001e0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e10:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001e14:	4303      	orrs	r3, r0
 8001e16:	6960      	ldr	r0, [r4, #20]
 8001e18:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001e1c:	69a0      	ldr	r0, [r4, #24]
 8001e1e:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001e22:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001e26:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001e2a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001e2c:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8001e30:	3801      	subs	r0, #1
 8001e32:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001e36:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001e3a:	e003      	b.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	40007000 	.word	0x40007000
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001e44:	0288      	lsls	r0, r1, #10
 8001e46:	d515      	bpl.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8001e48:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001e4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e4e:	d111      	bne.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001e50:	4a82      	ldr	r2, [pc, #520]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8001e52:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001e56:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8001e5a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001e5e:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001e62:	4303      	orrs	r3, r0
 8001e64:	6960      	ldr	r0, [r4, #20]
 8001e66:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001e6a:	6a20      	ldr	r0, [r4, #32]
 8001e6c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001e70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }        

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) 
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001e74:	070a      	lsls	r2, r1, #28
 8001e76:	d519      	bpl.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
      
      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001e78:	4978      	ldr	r1, [pc, #480]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8001e7a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001e7e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8001e82:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8001e86:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	6962      	ldr	r2, [r4, #20]
 8001e8e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001e92:	69e2      	ldr	r2, [r4, #28]
 8001e94:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001e98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001e9c:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 8001ea0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001ea2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }    
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */  

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001eac:	4c6b      	ldr	r4, [pc, #428]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8001eae:	6823      	ldr	r3, [r4, #0]
 8001eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eb4:	6023      	str	r3, [r4, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001eb6:	f7fe fa0f 	bl	80002d8 <HAL_GetTick>
 8001eba:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001ebc:	6823      	ldr	r3, [r4, #0]
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	f140 80c4 	bpl.w	800204c <HAL_RCCEx_PeriphCLKConfig+0x500>
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001ec4:	2000      	movs	r0, #0
 8001ec6:	e009      	b.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x390>
      plli2sused = 1; 
 8001ec8:	2601      	movs	r6, #1
 8001eca:	e67b      	b.n	8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ecc:	f7fe fa04 	bl	80002d8 <HAL_GetTick>
 8001ed0:	eba0 0008 	sub.w	r0, r0, r8
 8001ed4:	2864      	cmp	r0, #100	; 0x64
 8001ed6:	f67f ae8d 	bls.w	8001bf4 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8001eda:	2003      	movs	r0, #3
}
 8001edc:	b003      	add	sp, #12
 8001ede:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ee2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001ee4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	f43f ae8d 	beq.w	8001c08 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001eee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ef0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ef2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ef6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001efa:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001efc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001efe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001f02:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8001f04:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001f06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f08:	07d8      	lsls	r0, r3, #31
 8001f0a:	f57f ae7d 	bpl.w	8001c08 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 8001f0e:	f7fe f9e3 	bl	80002d8 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f12:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001f16:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f1a:	0799      	lsls	r1, r3, #30
 8001f1c:	f53f ae74 	bmi.w	8001c08 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f20:	f7fe f9da 	bl	80002d8 <HAL_GetTick>
 8001f24:	eba0 0008 	sub.w	r0, r0, r8
 8001f28:	4548      	cmp	r0, r9
 8001f2a:	d9f5      	bls.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8001f2c:	e7d5      	b.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x38e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f2e:	6891      	ldr	r1, [r2, #8]
 8001f30:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001f34:	e678      	b.n	8001c28 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();  
 8001f36:	4e49      	ldr	r6, [pc, #292]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8001f38:	6833      	ldr	r3, [r6, #0]
 8001f3a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001f3e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001f40:	f7fe f9ca 	bl	80002d8 <HAL_GetTick>
 8001f44:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001f46:	6833      	ldr	r3, [r6, #0]
 8001f48:	011b      	lsls	r3, r3, #4
 8001f4a:	d472      	bmi.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001f4c:	6822      	ldr	r2, [r4, #0]
 8001f4e:	07d7      	lsls	r7, r2, #31
 8001f50:	d512      	bpl.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8001f52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001f54:	b983      	cbnz	r3, 8001f78 <HAL_RCCEx_PeriphCLKConfig+0x42c>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001f56:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001f5a:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001f5e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f62:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8001f66:	430b      	orrs	r3, r1
 8001f68:	6861      	ldr	r1, [r4, #4]
 8001f6a:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8001f6e:	68a1      	ldr	r1, [r4, #8]
 8001f70:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8001f74:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001f78:	0316      	lsls	r6, r2, #12
 8001f7a:	d503      	bpl.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x438>
 8001f7c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001f7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f82:	d005      	beq.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x444>
 8001f84:	02d0      	lsls	r0, r2, #11
 8001f86:	d51e      	bpl.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x47a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 8001f88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f8e:	d11a      	bne.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x47a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001f90:	4932      	ldr	r1, [pc, #200]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8001f92:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001f96:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001f9a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f9e:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001fa2:	4303      	orrs	r3, r0
 8001fa4:	6860      	ldr	r0, [r4, #4]
 8001fa6:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001faa:	68e0      	ldr	r0, [r4, #12]
 8001fac:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001fb0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 8001fb4:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8001fb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001fba:	f020 001f 	bic.w	r0, r0, #31
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	4303      	orrs	r3, r0
 8001fc2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001fc6:	01d1      	lsls	r1, r2, #7
 8001fc8:	d511      	bpl.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001fca:	4924      	ldr	r1, [pc, #144]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8001fcc:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001fd0:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001fd4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001fd8:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001fdc:	4303      	orrs	r3, r0
 8001fde:	6860      	ldr	r0, [r4, #4]
 8001fe0:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001fe4:	6920      	ldr	r0, [r4, #16]
 8001fe6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001fea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001fee:	0192      	lsls	r2, r2, #6
 8001ff0:	d50d      	bpl.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001ff2:	6923      	ldr	r3, [r4, #16]
 8001ff4:	6862      	ldr	r2, [r4, #4]
 8001ff6:	041b      	lsls	r3, r3, #16
 8001ff8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001ffc:	68e2      	ldr	r2, [r4, #12]
 8001ffe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002002:	68a2      	ldr	r2, [r4, #8]
 8002004:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002008:	4a14      	ldr	r2, [pc, #80]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800200a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800200e:	4e13      	ldr	r6, [pc, #76]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8002010:	6833      	ldr	r3, [r6, #0]
 8002012:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002016:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002018:	f7fe f95e 	bl	80002d8 <HAL_GetTick>
 800201c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800201e:	6833      	ldr	r3, [r6, #0]
 8002020:	011b      	lsls	r3, r3, #4
 8002022:	f53f aed7 	bmi.w	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x288>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002026:	f7fe f957 	bl	80002d8 <HAL_GetTick>
 800202a:	1bc0      	subs	r0, r0, r7
 800202c:	2864      	cmp	r0, #100	; 0x64
 800202e:	d9f6      	bls.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002030:	e753      	b.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x38e>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002032:	f7fe f951 	bl	80002d8 <HAL_GetTick>
 8002036:	1bc0      	subs	r0, r0, r7
 8002038:	2864      	cmp	r0, #100	; 0x64
 800203a:	d984      	bls.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800203c:	e74d      	b.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x38e>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800203e:	f7fe f94b 	bl	80002d8 <HAL_GetTick>
 8002042:	1b80      	subs	r0, r0, r6
 8002044:	2864      	cmp	r0, #100	; 0x64
 8002046:	f67f aecf 	bls.w	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
 800204a:	e746      	b.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x38e>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800204c:	f7fe f944 	bl	80002d8 <HAL_GetTick>
 8002050:	1b40      	subs	r0, r0, r5
 8002052:	2864      	cmp	r0, #100	; 0x64
 8002054:	f67f af32 	bls.w	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x370>
 8002058:	e73f      	b.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x38e>
 800205a:	bf00      	nop
 800205c:	40023800 	.word	0x40023800

08002060 <HAL_TIM_Base_MspInit>:
 8002060:	4770      	bx	lr

08002062 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002062:	6803      	ldr	r3, [r0, #0]
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
      
  /* Return function status */
  return HAL_OK;
}
 8002064:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002066:	68da      	ldr	r2, [r3, #12]
 8002068:	f042 0201 	orr.w	r2, r2, #1
 800206c:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	f042 0201 	orr.w	r2, r2, #1
 8002074:	601a      	str	r2, [r3, #0]
}
 8002076:	4770      	bx	lr

08002078 <HAL_TIM_OC_DelayElapsedCallback>:
 8002078:	4770      	bx	lr

0800207a <HAL_TIM_IC_CaptureCallback>:
 800207a:	4770      	bx	lr

0800207c <HAL_TIM_PWM_PulseFinishedCallback>:
 800207c:	4770      	bx	lr

0800207e <HAL_TIM_TriggerCallback>:
 800207e:	4770      	bx	lr

08002080 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002080:	6803      	ldr	r3, [r0, #0]
 8002082:	691a      	ldr	r2, [r3, #16]
 8002084:	0791      	lsls	r1, r2, #30
{
 8002086:	b510      	push	{r4, lr}
 8002088:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800208a:	d50f      	bpl.n	80020ac <HAL_TIM_IRQHandler+0x2c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800208c:	68da      	ldr	r2, [r3, #12]
 800208e:	0792      	lsls	r2, r2, #30
 8002090:	d50c      	bpl.n	80020ac <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002092:	f06f 0202 	mvn.w	r2, #2
 8002096:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002098:	2201      	movs	r2, #1
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 800209a:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800209c:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 800209e:	0799      	lsls	r1, r3, #30
 80020a0:	f000 8085 	beq.w	80021ae <HAL_TIM_IRQHandler+0x12e>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80020a4:	f7ff ffe9 	bl	800207a <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020a8:	2300      	movs	r3, #0
 80020aa:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020ac:	6823      	ldr	r3, [r4, #0]
 80020ae:	691a      	ldr	r2, [r3, #16]
 80020b0:	0752      	lsls	r2, r2, #29
 80020b2:	d510      	bpl.n	80020d6 <HAL_TIM_IRQHandler+0x56>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80020b4:	68da      	ldr	r2, [r3, #12]
 80020b6:	0750      	lsls	r0, r2, #29
 80020b8:	d50d      	bpl.n	80020d6 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020ba:	f06f 0204 	mvn.w	r2, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80020be:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020c2:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 80020c4:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020c6:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 80020c8:	f413 7f40 	tst.w	r3, #768	; 0x300
 80020cc:	d075      	beq.n	80021ba <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 80020ce:	f7ff ffd4 	bl	800207a <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020d2:	2300      	movs	r3, #0
 80020d4:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020d6:	6823      	ldr	r3, [r4, #0]
 80020d8:	691a      	ldr	r2, [r3, #16]
 80020da:	0711      	lsls	r1, r2, #28
 80020dc:	d50f      	bpl.n	80020fe <HAL_TIM_IRQHandler+0x7e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80020de:	68da      	ldr	r2, [r3, #12]
 80020e0:	0712      	lsls	r2, r2, #28
 80020e2:	d50c      	bpl.n	80020fe <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020e4:	f06f 0208 	mvn.w	r2, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80020e8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020ec:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 80020ee:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020f0:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 80020f2:	079b      	lsls	r3, r3, #30
 80020f4:	d067      	beq.n	80021c6 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80020f6:	f7ff ffc0 	bl	800207a <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020fa:	2300      	movs	r3, #0
 80020fc:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020fe:	6823      	ldr	r3, [r4, #0]
 8002100:	691a      	ldr	r2, [r3, #16]
 8002102:	06d0      	lsls	r0, r2, #27
 8002104:	d510      	bpl.n	8002128 <HAL_TIM_IRQHandler+0xa8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002106:	68da      	ldr	r2, [r3, #12]
 8002108:	06d1      	lsls	r1, r2, #27
 800210a:	d50d      	bpl.n	8002128 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800210c:	f06f 0210 	mvn.w	r2, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002110:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002112:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002114:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8002116:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002118:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 800211a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800211e:	d058      	beq.n	80021d2 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8002120:	f7ff ffab 	bl	800207a <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002124:	2300      	movs	r3, #0
 8002126:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002128:	6823      	ldr	r3, [r4, #0]
 800212a:	691a      	ldr	r2, [r3, #16]
 800212c:	07d2      	lsls	r2, r2, #31
 800212e:	d508      	bpl.n	8002142 <HAL_TIM_IRQHandler+0xc2>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002130:	68da      	ldr	r2, [r3, #12]
 8002132:	07d0      	lsls	r0, r2, #31
 8002134:	d505      	bpl.n	8002142 <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002136:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800213a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800213c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800213e:	f009 f9bb 	bl	800b4b8 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002142:	6823      	ldr	r3, [r4, #0]
 8002144:	691a      	ldr	r2, [r3, #16]
 8002146:	0611      	lsls	r1, r2, #24
 8002148:	d508      	bpl.n	800215c <HAL_TIM_IRQHandler+0xdc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800214a:	68da      	ldr	r2, [r3, #12]
 800214c:	0612      	lsls	r2, r2, #24
 800214e:	d505      	bpl.n	800215c <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002150:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8002154:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002156:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002158:	f000 f8c5 	bl	80022e6 <HAL_TIMEx_BreakCallback>
    }
  }
  
    /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800215c:	6823      	ldr	r3, [r4, #0]
 800215e:	691a      	ldr	r2, [r3, #16]
 8002160:	05d0      	lsls	r0, r2, #23
 8002162:	d508      	bpl.n	8002176 <HAL_TIM_IRQHandler+0xf6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002164:	68da      	ldr	r2, [r3, #12]
 8002166:	0611      	lsls	r1, r2, #24
 8002168:	d505      	bpl.n	8002176 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800216a:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800216e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002170:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002172:	f000 f8b8 	bl	80022e6 <HAL_TIMEx_BreakCallback>
    }
  }

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002176:	6823      	ldr	r3, [r4, #0]
 8002178:	691a      	ldr	r2, [r3, #16]
 800217a:	0652      	lsls	r2, r2, #25
 800217c:	d508      	bpl.n	8002190 <HAL_TIM_IRQHandler+0x110>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800217e:	68da      	ldr	r2, [r3, #12]
 8002180:	0650      	lsls	r0, r2, #25
 8002182:	d505      	bpl.n	8002190 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002184:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8002188:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800218a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800218c:	f7ff ff77 	bl	800207e <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002190:	6823      	ldr	r3, [r4, #0]
 8002192:	691a      	ldr	r2, [r3, #16]
 8002194:	0691      	lsls	r1, r2, #26
 8002196:	d522      	bpl.n	80021de <HAL_TIM_IRQHandler+0x15e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002198:	68da      	ldr	r2, [r3, #12]
 800219a:	0692      	lsls	r2, r2, #26
 800219c:	d51f      	bpl.n	80021de <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800219e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80021a2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021a4:	611a      	str	r2, [r3, #16]
    }
  }
}
 80021a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 80021aa:	f000 b89b 	b.w	80022e4 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ae:	f7ff ff63 	bl	8002078 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021b2:	4620      	mov	r0, r4
 80021b4:	f7ff ff62 	bl	800207c <HAL_TIM_PWM_PulseFinishedCallback>
 80021b8:	e776      	b.n	80020a8 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ba:	f7ff ff5d 	bl	8002078 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021be:	4620      	mov	r0, r4
 80021c0:	f7ff ff5c 	bl	800207c <HAL_TIM_PWM_PulseFinishedCallback>
 80021c4:	e785      	b.n	80020d2 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021c6:	f7ff ff57 	bl	8002078 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80021ca:	4620      	mov	r0, r4
 80021cc:	f7ff ff56 	bl	800207c <HAL_TIM_PWM_PulseFinishedCallback>
 80021d0:	e793      	b.n	80020fa <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021d2:	f7ff ff51 	bl	8002078 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021d6:	4620      	mov	r0, r4
 80021d8:	f7ff ff50 	bl	800207c <HAL_TIM_PWM_PulseFinishedCallback>
 80021dc:	e7a2      	b.n	8002124 <HAL_TIM_IRQHandler+0xa4>
 80021de:	bd10      	pop	{r4, pc}

080021e0 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80021e0:	4a30      	ldr	r2, [pc, #192]	; (80022a4 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 80021e2:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80021e4:	4290      	cmp	r0, r2
 80021e6:	d012      	beq.n	800220e <TIM_Base_SetConfig+0x2e>
 80021e8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80021ec:	d00f      	beq.n	800220e <TIM_Base_SetConfig+0x2e>
 80021ee:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80021f2:	4290      	cmp	r0, r2
 80021f4:	d00b      	beq.n	800220e <TIM_Base_SetConfig+0x2e>
 80021f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021fa:	4290      	cmp	r0, r2
 80021fc:	d007      	beq.n	800220e <TIM_Base_SetConfig+0x2e>
 80021fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002202:	4290      	cmp	r0, r2
 8002204:	d003      	beq.n	800220e <TIM_Base_SetConfig+0x2e>
 8002206:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800220a:	4290      	cmp	r0, r2
 800220c:	d11d      	bne.n	800224a <TIM_Base_SetConfig+0x6a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800220e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002214:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002216:	4a23      	ldr	r2, [pc, #140]	; (80022a4 <TIM_Base_SetConfig+0xc4>)
 8002218:	4290      	cmp	r0, r2
 800221a:	d104      	bne.n	8002226 <TIM_Base_SetConfig+0x46>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800221c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002220:	68ca      	ldr	r2, [r1, #12]
 8002222:	4313      	orrs	r3, r2
 8002224:	e028      	b.n	8002278 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002226:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800222a:	d0f7      	beq.n	800221c <TIM_Base_SetConfig+0x3c>
 800222c:	4a1e      	ldr	r2, [pc, #120]	; (80022a8 <TIM_Base_SetConfig+0xc8>)
 800222e:	4290      	cmp	r0, r2
 8002230:	d0f4      	beq.n	800221c <TIM_Base_SetConfig+0x3c>
 8002232:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002236:	4290      	cmp	r0, r2
 8002238:	d0f0      	beq.n	800221c <TIM_Base_SetConfig+0x3c>
 800223a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800223e:	4290      	cmp	r0, r2
 8002240:	d0ec      	beq.n	800221c <TIM_Base_SetConfig+0x3c>
 8002242:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002246:	4290      	cmp	r0, r2
 8002248:	d0e8      	beq.n	800221c <TIM_Base_SetConfig+0x3c>
 800224a:	4a18      	ldr	r2, [pc, #96]	; (80022ac <TIM_Base_SetConfig+0xcc>)
 800224c:	4290      	cmp	r0, r2
 800224e:	d0e5      	beq.n	800221c <TIM_Base_SetConfig+0x3c>
 8002250:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002254:	4290      	cmp	r0, r2
 8002256:	d0e1      	beq.n	800221c <TIM_Base_SetConfig+0x3c>
 8002258:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800225c:	4290      	cmp	r0, r2
 800225e:	d0dd      	beq.n	800221c <TIM_Base_SetConfig+0x3c>
 8002260:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002264:	4290      	cmp	r0, r2
 8002266:	d0d9      	beq.n	800221c <TIM_Base_SetConfig+0x3c>
 8002268:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800226c:	4290      	cmp	r0, r2
 800226e:	d0d5      	beq.n	800221c <TIM_Base_SetConfig+0x3c>
 8002270:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002274:	4290      	cmp	r0, r2
 8002276:	d0d1      	beq.n	800221c <TIM_Base_SetConfig+0x3c>
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002278:	694a      	ldr	r2, [r1, #20]
 800227a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800227e:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002280:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002282:	688b      	ldr	r3, [r1, #8]
 8002284:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002286:	680b      	ldr	r3, [r1, #0]
 8002288:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 800228a:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <TIM_Base_SetConfig+0xc4>)
 800228c:	4298      	cmp	r0, r3
 800228e:	d006      	beq.n	800229e <TIM_Base_SetConfig+0xbe>
 8002290:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002294:	4298      	cmp	r0, r3
 8002296:	d002      	beq.n	800229e <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002298:	2301      	movs	r3, #1
 800229a:	6143      	str	r3, [r0, #20]
}
 800229c:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 800229e:	690b      	ldr	r3, [r1, #16]
 80022a0:	6303      	str	r3, [r0, #48]	; 0x30
 80022a2:	e7f9      	b.n	8002298 <TIM_Base_SetConfig+0xb8>
 80022a4:	40010000 	.word	0x40010000
 80022a8:	40000400 	.word	0x40000400
 80022ac:	40014000 	.word	0x40014000

080022b0 <HAL_TIM_Base_Init>:
{ 
 80022b0:	b510      	push	{r4, lr}
  if(htim == NULL)
 80022b2:	4604      	mov	r4, r0
 80022b4:	b1a0      	cbz	r0, 80022e0 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80022b6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80022ba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80022be:	b91b      	cbnz	r3, 80022c8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80022c0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80022c4:	f7ff fecc 	bl	8002060 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80022c8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80022ca:	6820      	ldr	r0, [r4, #0]
 80022cc:	1d21      	adds	r1, r4, #4
  htim->State= HAL_TIM_STATE_BUSY;
 80022ce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80022d2:	f7ff ff85 	bl	80021e0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80022d6:	2301      	movs	r3, #1
  return HAL_OK;
 80022d8:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80022da:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80022de:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80022e0:	2001      	movs	r0, #1
}
 80022e2:	bd10      	pop	{r4, pc}

080022e4 <HAL_TIMEx_CommutationCallback>:
 80022e4:	4770      	bx	lr

080022e6 <HAL_TIMEx_BreakCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022e6:	4770      	bx	lr

080022e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80022e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022ec:	9d06      	ldr	r5, [sp, #24]
 80022ee:	4604      	mov	r4, r0
 80022f0:	460f      	mov	r7, r1
 80022f2:	4616      	mov	r6, r2
 80022f4:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022f6:	6821      	ldr	r1, [r4, #0]
 80022f8:	69ca      	ldr	r2, [r1, #28]
 80022fa:	ea37 0302 	bics.w	r3, r7, r2
 80022fe:	bf0c      	ite	eq
 8002300:	2201      	moveq	r2, #1
 8002302:	2200      	movne	r2, #0
 8002304:	42b2      	cmp	r2, r6
 8002306:	d002      	beq.n	800230e <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002308:	2000      	movs	r0, #0
}
 800230a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 800230e:	1c6b      	adds	r3, r5, #1
 8002310:	d0f2      	beq.n	80022f8 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8002312:	b99d      	cbnz	r5, 800233c <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002314:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8002316:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800231e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002320:	689a      	ldr	r2, [r3, #8]
 8002322:	f022 0201 	bic.w	r2, r2, #1
 8002326:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8002328:	2320      	movs	r3, #32
 800232a:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 800232e:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8002332:	2300      	movs	r3, #0
 8002334:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8002338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 800233c:	f7fd ffcc 	bl	80002d8 <HAL_GetTick>
 8002340:	eba0 0008 	sub.w	r0, r0, r8
 8002344:	4285      	cmp	r5, r0
 8002346:	d8d6      	bhi.n	80022f6 <UART_WaitOnFlagUntilTimeout+0xe>
 8002348:	e7e4      	b.n	8002314 <UART_WaitOnFlagUntilTimeout+0x2c>
	...

0800234c <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart: uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800234c:	b538      	push	{r3, r4, r5, lr}
 800234e:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002350:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002352:	69c3      	ldr	r3, [r0, #28]
 8002354:	6921      	ldr	r1, [r4, #16]
 8002356:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002358:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800235a:	430a      	orrs	r2, r1
 800235c:	6961      	ldr	r1, [r4, #20]
 800235e:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002360:	4993      	ldr	r1, [pc, #588]	; (80025b0 <UART_SetConfig+0x264>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002362:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002364:	4001      	ands	r1, r0
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002366:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002368:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800236a:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800236c:	602a      	str	r2, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800236e:	686a      	ldr	r2, [r5, #4]
 8002370:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002374:	430a      	orrs	r2, r1
 8002376:	606a      	str	r2, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002378:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800237a:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800237c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800237e:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8002382:	430a      	orrs	r2, r1
 8002384:	60aa      	str	r2, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002386:	4a8b      	ldr	r2, [pc, #556]	; (80025b4 <UART_SetConfig+0x268>)
 8002388:	4295      	cmp	r5, r2
 800238a:	d119      	bne.n	80023c0 <UART_SetConfig+0x74>
 800238c:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8002390:	4989      	ldr	r1, [pc, #548]	; (80025b8 <UART_SetConfig+0x26c>)
 8002392:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002396:	f002 0203 	and.w	r2, r2, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800239a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800239e:	5c8a      	ldrb	r2, [r1, r2]
 80023a0:	f040 80b3 	bne.w	800250a <UART_SetConfig+0x1be>
  {
    switch (clocksource)
 80023a4:	2a08      	cmp	r2, #8
 80023a6:	f200 80ad 	bhi.w	8002504 <UART_SetConfig+0x1b8>
 80023aa:	e8df f012 	tbh	[pc, r2, lsl #1]
 80023ae:	0026      	.short	0x0026
 80023b0:	00e9007b 	.word	0x00e9007b
 80023b4:	00f500ab 	.word	0x00f500ab
 80023b8:	00ab00ab 	.word	0x00ab00ab
 80023bc:	00fb00ab 	.word	0x00fb00ab
  UART_GETCLOCKSOURCE(huart, clocksource);
 80023c0:	4a7e      	ldr	r2, [pc, #504]	; (80025bc <UART_SetConfig+0x270>)
 80023c2:	4295      	cmp	r5, r2
 80023c4:	d107      	bne.n	80023d6 <UART_SetConfig+0x8a>
 80023c6:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 80023ca:	497d      	ldr	r1, [pc, #500]	; (80025c0 <UART_SetConfig+0x274>)
 80023cc:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80023d0:	f002 020c 	and.w	r2, r2, #12
 80023d4:	e7e1      	b.n	800239a <UART_SetConfig+0x4e>
 80023d6:	4a7b      	ldr	r2, [pc, #492]	; (80025c4 <UART_SetConfig+0x278>)
 80023d8:	4295      	cmp	r5, r2
 80023da:	d12b      	bne.n	8002434 <UART_SetConfig+0xe8>
 80023dc:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
 80023e0:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80023e4:	f002 0230 	and.w	r2, r2, #48	; 0x30
 80023e8:	2a10      	cmp	r2, #16
 80023ea:	f000 80d2 	beq.w	8002592 <UART_SetConfig+0x246>
 80023ee:	d816      	bhi.n	800241e <UART_SetConfig+0xd2>
 80023f0:	b9da      	cbnz	r2, 800242a <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023f6:	f040 809f 	bne.w	8002538 <UART_SetConfig+0x1ec>
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80023fa:	f7ff fb69 	bl	8001ad0 <HAL_RCC_GetPCLK1Freq>
      break;
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80023fe:	6861      	ldr	r1, [r4, #4]
 8002400:	084a      	lsrs	r2, r1, #1
 8002402:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8002406:	fbb3 f3f1 	udiv	r3, r3, r1
 800240a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800240c:	2000      	movs	r0, #0
    default:
        ret = HAL_ERROR;
      break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 800240e:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002412:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8002416:	6821      	ldr	r1, [r4, #0]
 8002418:	4313      	orrs	r3, r2
 800241a:	60cb      	str	r3, [r1, #12]
 800241c:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800241e:	2a20      	cmp	r2, #32
 8002420:	f000 80ab 	beq.w	800257a <UART_SetConfig+0x22e>
 8002424:	2a30      	cmp	r2, #48	; 0x30
 8002426:	f000 80ba 	beq.w	800259e <UART_SetConfig+0x252>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800242a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800242e:	d069      	beq.n	8002504 <UART_SetConfig+0x1b8>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
      break;
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8002430:	2001      	movs	r0, #1
    }
  }

  return ret;

}
 8002432:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002434:	4a64      	ldr	r2, [pc, #400]	; (80025c8 <UART_SetConfig+0x27c>)
 8002436:	4295      	cmp	r5, r2
 8002438:	d10e      	bne.n	8002458 <UART_SetConfig+0x10c>
 800243a:	f502 32f6 	add.w	r2, r2, #125952	; 0x1ec00
 800243e:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002442:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8002446:	2a40      	cmp	r2, #64	; 0x40
 8002448:	f000 80a3 	beq.w	8002592 <UART_SetConfig+0x246>
 800244c:	d9d0      	bls.n	80023f0 <UART_SetConfig+0xa4>
 800244e:	2a80      	cmp	r2, #128	; 0x80
 8002450:	f000 8093 	beq.w	800257a <UART_SetConfig+0x22e>
 8002454:	2ac0      	cmp	r2, #192	; 0xc0
 8002456:	e7e6      	b.n	8002426 <UART_SetConfig+0xda>
 8002458:	4a5c      	ldr	r2, [pc, #368]	; (80025cc <UART_SetConfig+0x280>)
 800245a:	4295      	cmp	r5, r2
 800245c:	d110      	bne.n	8002480 <UART_SetConfig+0x134>
 800245e:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
 8002462:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002466:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800246a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800246e:	f000 8090 	beq.w	8002592 <UART_SetConfig+0x246>
 8002472:	d9bd      	bls.n	80023f0 <UART_SetConfig+0xa4>
 8002474:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8002478:	d07f      	beq.n	800257a <UART_SetConfig+0x22e>
 800247a:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800247e:	e7d2      	b.n	8002426 <UART_SetConfig+0xda>
 8002480:	4a53      	ldr	r2, [pc, #332]	; (80025d0 <UART_SetConfig+0x284>)
 8002482:	4295      	cmp	r5, r2
 8002484:	d117      	bne.n	80024b6 <UART_SetConfig+0x16a>
 8002486:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
 800248a:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800248e:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8002492:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002496:	d07c      	beq.n	8002592 <UART_SetConfig+0x246>
 8002498:	d807      	bhi.n	80024aa <UART_SetConfig+0x15e>
 800249a:	2a00      	cmp	r2, #0
 800249c:	d1c5      	bne.n	800242a <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800249e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024a2:	d154      	bne.n	800254e <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80024a4:	f7ff fb24 	bl	8001af0 <HAL_RCC_GetPCLK2Freq>
 80024a8:	e7a9      	b.n	80023fe <UART_SetConfig+0xb2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80024aa:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80024ae:	d064      	beq.n	800257a <UART_SetConfig+0x22e>
 80024b0:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 80024b4:	e7b7      	b.n	8002426 <UART_SetConfig+0xda>
 80024b6:	4a47      	ldr	r2, [pc, #284]	; (80025d4 <UART_SetConfig+0x288>)
 80024b8:	4295      	cmp	r5, r2
 80024ba:	d10f      	bne.n	80024dc <UART_SetConfig+0x190>
 80024bc:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 80024c0:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80024c4:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 80024c8:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80024cc:	d061      	beq.n	8002592 <UART_SetConfig+0x246>
 80024ce:	d98f      	bls.n	80023f0 <UART_SetConfig+0xa4>
 80024d0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80024d4:	d051      	beq.n	800257a <UART_SetConfig+0x22e>
 80024d6:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 80024da:	e7a4      	b.n	8002426 <UART_SetConfig+0xda>
 80024dc:	4a3e      	ldr	r2, [pc, #248]	; (80025d8 <UART_SetConfig+0x28c>)
 80024de:	4295      	cmp	r5, r2
 80024e0:	d1a3      	bne.n	800242a <UART_SetConfig+0xde>
 80024e2:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00
 80024e6:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80024ea:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 80024ee:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80024f2:	d04e      	beq.n	8002592 <UART_SetConfig+0x246>
 80024f4:	f67f af7c 	bls.w	80023f0 <UART_SetConfig+0xa4>
 80024f8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80024fc:	d03d      	beq.n	800257a <UART_SetConfig+0x22e>
 80024fe:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 8002502:	e790      	b.n	8002426 <UART_SetConfig+0xda>
        ret = HAL_ERROR;
 8002504:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8002506:	2300      	movs	r3, #0
 8002508:	e781      	b.n	800240e <UART_SetConfig+0xc2>
    switch (clocksource)
 800250a:	2a08      	cmp	r2, #8
 800250c:	d890      	bhi.n	8002430 <UART_SetConfig+0xe4>
 800250e:	a301      	add	r3, pc, #4	; (adr r3, 8002514 <UART_SetConfig+0x1c8>)
 8002510:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8002514:	08002539 	.word	0x08002539
 8002518:	0800254f 	.word	0x0800254f
 800251c:	08002555 	.word	0x08002555
 8002520:	08002431 	.word	0x08002431
 8002524:	0800256b 	.word	0x0800256b
 8002528:	08002431 	.word	0x08002431
 800252c:	08002431 	.word	0x08002431
 8002530:	08002431 	.word	0x08002431
 8002534:	08002571 	.word	0x08002571
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002538:	f7ff faca 	bl	8001ad0 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800253c:	6863      	ldr	r3, [r4, #4]
 800253e:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002542:	fbb0 f0f3 	udiv	r0, r0, r3
 8002546:	b280      	uxth	r0, r0
 8002548:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800254a:	2000      	movs	r0, #0
      break;
 800254c:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800254e:	f7ff facf 	bl	8001af0 <HAL_RCC_GetPCLK2Freq>
 8002552:	e7f3      	b.n	800253c <UART_SetConfig+0x1f0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002554:	6862      	ldr	r2, [r4, #4]
 8002556:	0853      	lsrs	r3, r2, #1
 8002558:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800255c:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002560:	fbb3 f3f2 	udiv	r3, r3, r2
 8002564:	b29b      	uxth	r3, r3
 8002566:	60eb      	str	r3, [r5, #12]
 8002568:	e7ef      	b.n	800254a <UART_SetConfig+0x1fe>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800256a:	f7ff f9f1 	bl	8001950 <HAL_RCC_GetSysClockFreq>
 800256e:	e7e5      	b.n	800253c <UART_SetConfig+0x1f0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002570:	6862      	ldr	r2, [r4, #4]
 8002572:	0853      	lsrs	r3, r2, #1
 8002574:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002578:	e7f2      	b.n	8002560 <UART_SetConfig+0x214>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800257a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800257e:	d1e9      	bne.n	8002554 <UART_SetConfig+0x208>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002580:	6860      	ldr	r0, [r4, #4]
 8002582:	0843      	lsrs	r3, r0, #1
 8002584:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8002588:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800258c:	fbb3 f3f0 	udiv	r3, r3, r0
 8002590:	e73b      	b.n	800240a <UART_SetConfig+0xbe>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002592:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002596:	d1e8      	bne.n	800256a <UART_SetConfig+0x21e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002598:	f7ff f9da 	bl	8001950 <HAL_RCC_GetSysClockFreq>
 800259c:	e72f      	b.n	80023fe <UART_SetConfig+0xb2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800259e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025a2:	d1e5      	bne.n	8002570 <UART_SetConfig+0x224>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80025a4:	6860      	ldr	r0, [r4, #4]
 80025a6:	0843      	lsrs	r3, r0, #1
 80025a8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80025ac:	e7ee      	b.n	800258c <UART_SetConfig+0x240>
 80025ae:	bf00      	nop
 80025b0:	efff69f3 	.word	0xefff69f3
 80025b4:	40011000 	.word	0x40011000
 80025b8:	0800ca50 	.word	0x0800ca50
 80025bc:	40004400 	.word	0x40004400
 80025c0:	0800ca54 	.word	0x0800ca54
 80025c4:	40004800 	.word	0x40004800
 80025c8:	40004c00 	.word	0x40004c00
 80025cc:	40005000 	.word	0x40005000
 80025d0:	40011400 	.word	0x40011400
 80025d4:	40007800 	.word	0x40007800
 80025d8:	40007c00 	.word	0x40007c00

080025dc <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80025dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80025de:	07da      	lsls	r2, r3, #31
{
 80025e0:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80025e2:	d506      	bpl.n	80025f2 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80025e4:	6801      	ldr	r1, [r0, #0]
 80025e6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80025e8:	684a      	ldr	r2, [r1, #4]
 80025ea:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80025ee:	4322      	orrs	r2, r4
 80025f0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80025f2:	079c      	lsls	r4, r3, #30
 80025f4:	d506      	bpl.n	8002604 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80025f6:	6801      	ldr	r1, [r0, #0]
 80025f8:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80025fa:	684a      	ldr	r2, [r1, #4]
 80025fc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002600:	4322      	orrs	r2, r4
 8002602:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002604:	0759      	lsls	r1, r3, #29
 8002606:	d506      	bpl.n	8002616 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002608:	6801      	ldr	r1, [r0, #0]
 800260a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800260c:	684a      	ldr	r2, [r1, #4]
 800260e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002612:	4322      	orrs	r2, r4
 8002614:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002616:	071a      	lsls	r2, r3, #28
 8002618:	d506      	bpl.n	8002628 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800261a:	6801      	ldr	r1, [r0, #0]
 800261c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800261e:	684a      	ldr	r2, [r1, #4]
 8002620:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002624:	4322      	orrs	r2, r4
 8002626:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002628:	06dc      	lsls	r4, r3, #27
 800262a:	d506      	bpl.n	800263a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800262c:	6801      	ldr	r1, [r0, #0]
 800262e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002630:	688a      	ldr	r2, [r1, #8]
 8002632:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002636:	4322      	orrs	r2, r4
 8002638:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800263a:	0699      	lsls	r1, r3, #26
 800263c:	d506      	bpl.n	800264c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800263e:	6801      	ldr	r1, [r0, #0]
 8002640:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002642:	688a      	ldr	r2, [r1, #8]
 8002644:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002648:	4322      	orrs	r2, r4
 800264a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800264c:	065a      	lsls	r2, r3, #25
 800264e:	d510      	bpl.n	8002672 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002650:	6801      	ldr	r1, [r0, #0]
 8002652:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002654:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002656:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800265a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800265e:	ea42 0204 	orr.w	r2, r2, r4
 8002662:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002664:	d105      	bne.n	8002672 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002666:	684a      	ldr	r2, [r1, #4]
 8002668:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800266a:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800266e:	4322      	orrs	r2, r4
 8002670:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002672:	061b      	lsls	r3, r3, #24
 8002674:	d506      	bpl.n	8002684 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002676:	6802      	ldr	r2, [r0, #0]
 8002678:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800267a:	6853      	ldr	r3, [r2, #4]
 800267c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002680:	430b      	orrs	r3, r1
 8002682:	6053      	str	r3, [r2, #4]
 8002684:	bd10      	pop	{r4, pc}

08002686 <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart: uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002686:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002688:	2500      	movs	r5, #0
{
 800268a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800268c:	66c5      	str	r5, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800268e:	f7fd fe23 	bl	80002d8 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002692:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8002694:	4603      	mov	r3, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002696:	6812      	ldr	r2, [r2, #0]
 8002698:	0712      	lsls	r2, r2, #28
 800269a:	d409      	bmi.n	80026b0 <UART_CheckIdleState+0x2a>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 800269c:	2320      	movs	r3, #32
  huart->RxState= HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800269e:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 80026a0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 80026a4:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState= HAL_UART_STATE_READY;
 80026a8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  return HAL_OK;
}
 80026ac:	b003      	add	sp, #12
 80026ae:	bd30      	pop	{r4, r5, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80026b0:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 80026b4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80026b8:	4620      	mov	r0, r4
 80026ba:	9200      	str	r2, [sp, #0]
 80026bc:	462a      	mov	r2, r5
 80026be:	f7ff fe13 	bl	80022e8 <UART_WaitOnFlagUntilTimeout>
 80026c2:	2800      	cmp	r0, #0
 80026c4:	d0ea      	beq.n	800269c <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80026c6:	2003      	movs	r0, #3
 80026c8:	e7f0      	b.n	80026ac <UART_CheckIdleState+0x26>

080026ca <HAL_UART_Init>:
{
 80026ca:	b510      	push	{r4, lr}
  if(huart == NULL)
 80026cc:	4604      	mov	r4, r0
 80026ce:	b360      	cbz	r0, 800272a <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 80026d0:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80026d4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80026d8:	b91b      	cbnz	r3, 80026e2 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80026da:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 80026de:	f008 ff27 	bl	800b530 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80026e2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80026e4:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026e6:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 80026e8:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 80026ec:	6813      	ldr	r3, [r2, #0]
 80026ee:	f023 0301 	bic.w	r3, r3, #1
 80026f2:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026f4:	f7ff fe2a 	bl	800234c <UART_SetConfig>
 80026f8:	2801      	cmp	r0, #1
 80026fa:	d016      	beq.n	800272a <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80026fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80026fe:	b113      	cbz	r3, 8002706 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8002700:	4620      	mov	r0, r4
 8002702:	f7ff ff6b 	bl	80025dc <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002706:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8002708:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800270a:	685a      	ldr	r2, [r3, #4]
 800270c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002710:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002712:	689a      	ldr	r2, [r3, #8]
 8002714:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002718:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	f042 0201 	orr.w	r2, r2, #1
}
 8002720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8002724:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8002726:	f7ff bfae 	b.w	8002686 <UART_CheckIdleState>
}
 800272a:	2001      	movs	r0, #1
 800272c:	bd10      	pop	{r4, pc}
	...

08002730 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx : Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002730:	4b0a      	ldr	r3, [pc, #40]	; (800275c <USB_CoreReset+0x2c>)
  uint32_t count = 0;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000)
 8002732:	3b01      	subs	r3, #1
 8002734:	d101      	bne.n	800273a <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 8002736:	2003      	movs	r0, #3
 8002738:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0);
 800273a:	6902      	ldr	r2, [r0, #16]
 800273c:	2a00      	cmp	r2, #0
 800273e:	daf8      	bge.n	8002732 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002740:	6903      	ldr	r3, [r0, #16]
 8002742:	4a06      	ldr	r2, [pc, #24]	; (800275c <USB_CoreReset+0x2c>)
 8002744:	f043 0301 	orr.w	r3, r3, #1
 8002748:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000)
 800274a:	3a01      	subs	r2, #1
 800274c:	d0f3      	beq.n	8002736 <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800274e:	6903      	ldr	r3, [r0, #16]
 8002750:	f013 0301 	ands.w	r3, r3, #1
 8002754:	d1f9      	bne.n	800274a <USB_CoreReset+0x1a>

  return HAL_OK;
 8002756:	4618      	mov	r0, r3
}
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	00030d41 	.word	0x00030d41

08002760 <USB_CoreInit>:
{
 8002760:	b084      	sub	sp, #16
 8002762:	b538      	push	{r3, r4, r5, lr}
 8002764:	ad05      	add	r5, sp, #20
 8002766:	4604      	mov	r4, r0
 8002768:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800276c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800276e:	2b01      	cmp	r3, #1
 8002770:	d127      	bne.n	80027c2 <USB_CoreInit+0x62>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002772:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002774:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002778:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800277a:	68c3      	ldr	r3, [r0, #12]
 800277c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002780:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002784:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002786:	68c3      	ldr	r3, [r0, #12]
 8002788:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800278c:	60c3      	str	r3, [r0, #12]
    if(cfg.use_external_vbus == 1)
 800278e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002790:	2b01      	cmp	r3, #1
 8002792:	d103      	bne.n	800279c <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002794:	68c3      	ldr	r3, [r0, #12]
 8002796:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800279a:	60c3      	str	r3, [r0, #12]
    USB_CoreReset(USBx);
 800279c:	4620      	mov	r0, r4
 800279e:	f7ff ffc7 	bl	8002730 <USB_CoreReset>
  if(cfg.dma_enable == ENABLE)
 80027a2:	9b08      	ldr	r3, [sp, #32]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d107      	bne.n	80027b8 <USB_CoreInit+0x58>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80027a8:	68a3      	ldr	r3, [r4, #8]
 80027aa:	f043 0306 	orr.w	r3, r3, #6
 80027ae:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80027b0:	68a3      	ldr	r3, [r4, #8]
 80027b2:	f043 0320 	orr.w	r3, r3, #32
 80027b6:	60a3      	str	r3, [r4, #8]
}
 80027b8:	2000      	movs	r0, #0
 80027ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80027be:	b004      	add	sp, #16
 80027c0:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80027c2:	68c3      	ldr	r3, [r0, #12]
 80027c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027c8:	60c3      	str	r3, [r0, #12]
    USB_CoreReset(USBx);
 80027ca:	f7ff ffb1 	bl	8002730 <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 80027ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027d2:	63a3      	str	r3, [r4, #56]	; 0x38
 80027d4:	e7e5      	b.n	80027a2 <USB_CoreInit+0x42>

080027d6 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80027d6:	6883      	ldr	r3, [r0, #8]
 80027d8:	f043 0301 	orr.w	r3, r3, #1
 80027dc:	6083      	str	r3, [r0, #8]
}
 80027de:	2000      	movs	r0, #0
 80027e0:	4770      	bx	lr

080027e2 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80027e2:	6883      	ldr	r3, [r0, #8]
 80027e4:	f023 0301 	bic.w	r3, r3, #1
 80027e8:	6083      	str	r3, [r0, #8]
}
 80027ea:	2000      	movs	r0, #0
 80027ec:	4770      	bx	lr

080027ee <USB_SetCurrentMode>:
{
 80027ee:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80027f0:	68c3      	ldr	r3, [r0, #12]
  if ( mode == USB_OTG_HOST_MODE)
 80027f2:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80027f4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80027f8:	60c3      	str	r3, [r0, #12]
  if ( mode == USB_OTG_HOST_MODE)
 80027fa:	d108      	bne.n	800280e <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80027fc:	68c3      	ldr	r3, [r0, #12]
 80027fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002802:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50);
 8002804:	2032      	movs	r0, #50	; 0x32
 8002806:	f7fd fd6d 	bl	80002e4 <HAL_Delay>
}
 800280a:	2000      	movs	r0, #0
 800280c:	bd08      	pop	{r3, pc}
  else if ( mode == USB_OTG_DEVICE_MODE)
 800280e:	2900      	cmp	r1, #0
 8002810:	d1f8      	bne.n	8002804 <USB_SetCurrentMode+0x16>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002812:	68c3      	ldr	r3, [r0, #12]
 8002814:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002818:	e7f3      	b.n	8002802 <USB_SetCurrentMode+0x14>
	...

0800281c <USB_FlushTxFifo>:
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6));
 800281c:	0189      	lsls	r1, r1, #6
 800281e:	4a07      	ldr	r2, [pc, #28]	; (800283c <USB_FlushTxFifo+0x20>)
 8002820:	f041 0120 	orr.w	r1, r1, #32
 8002824:	6101      	str	r1, [r0, #16]
    if (++count > 200000)
 8002826:	3a01      	subs	r2, #1
 8002828:	d005      	beq.n	8002836 <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800282a:	6903      	ldr	r3, [r0, #16]
 800282c:	f013 0320 	ands.w	r3, r3, #32
 8002830:	d1f9      	bne.n	8002826 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8002832:	4618      	mov	r0, r3
 8002834:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002836:	2003      	movs	r0, #3
}
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	00030d41 	.word	0x00030d41

08002840 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002840:	2310      	movs	r3, #16
 8002842:	4a06      	ldr	r2, [pc, #24]	; (800285c <USB_FlushRxFifo+0x1c>)
 8002844:	6103      	str	r3, [r0, #16]
    if (++count > 200000)
 8002846:	3a01      	subs	r2, #1
 8002848:	d005      	beq.n	8002856 <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800284a:	6903      	ldr	r3, [r0, #16]
 800284c:	f013 0310 	ands.w	r3, r3, #16
 8002850:	d1f9      	bne.n	8002846 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8002852:	4618      	mov	r0, r3
 8002854:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002856:	2003      	movs	r0, #3
}
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	00030d41 	.word	0x00030d41

08002860 <USB_ReadPacket>:
  uint32_t count32b = (len + 3) / 4;
 8002860:	3203      	adds	r2, #3
  for ( i = 0; i < count32b; i++, dest += 4 )
 8002862:	2300      	movs	r3, #0
    *(__packed uint32_t *)dest = USBx_DFIFO(0);
 8002864:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  uint32_t count32b = (len + 3) / 4;
 8002868:	1092      	asrs	r2, r2, #2
{
 800286a:	b510      	push	{r4, lr}
  for ( i = 0; i < count32b; i++, dest += 4 )
 800286c:	4293      	cmp	r3, r2
 800286e:	d102      	bne.n	8002876 <USB_ReadPacket+0x16>
}
 8002870:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8002874:	bd10      	pop	{r4, pc}
    *(__packed uint32_t *)dest = USBx_DFIFO(0);
 8002876:	6804      	ldr	r4, [r0, #0]
 8002878:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
  for ( i = 0; i < count32b; i++, dest += 4 )
 800287c:	3301      	adds	r3, #1
 800287e:	e7f5      	b.n	800286c <USB_ReadPacket+0xc>

08002880 <USB_ReadInterrupts>:
  v = USBx->GINTSTS;
 8002880:	6942      	ldr	r2, [r0, #20]
  v &= USBx->GINTMSK;
 8002882:	6980      	ldr	r0, [r0, #24]
}
 8002884:	4010      	ands	r0, r2
 8002886:	4770      	bx	lr

08002888 <USB_GetMode>:
  return ((USBx->GINTSTS ) & 0x1);
 8002888:	6940      	ldr	r0, [r0, #20]
}
 800288a:	f000 0001 	and.w	r0, r0, #1
 800288e:	4770      	bx	lr

08002890 <USB_InitFSLSPClkSel>:
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx , uint8_t freq)
{
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8002890:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (freq & USB_OTG_HCFG_FSLSPCS);

  if (freq ==  HCFG_48_MHZ)
 8002894:	2901      	cmp	r1, #1
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8002896:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 800289a:	f023 0303 	bic.w	r3, r3, #3
{
 800289e:	b510      	push	{r4, lr}
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80028a0:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (freq & USB_OTG_HCFG_FSLSPCS);
 80028a4:	f001 0303 	and.w	r3, r1, #3
 80028a8:	f8d0 4400 	ldr.w	r4, [r0, #1024]	; 0x400
 80028ac:	ea43 0304 	orr.w	r3, r3, r4
 80028b0:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  if (freq ==  HCFG_48_MHZ)
 80028b4:	d104      	bne.n	80028c0 <USB_InitFSLSPClkSel+0x30>
  {
    USBx_HOST->HFIR = (uint32_t)48000;
 80028b6:	f64b 3380 	movw	r3, #48000	; 0xbb80
  }
  else if (freq ==  HCFG_6_MHZ)
  {
    USBx_HOST->HFIR = (uint32_t)6000;
 80028ba:	6053      	str	r3, [r2, #4]
  }
  return HAL_OK;
}
 80028bc:	2000      	movs	r0, #0
 80028be:	bd10      	pop	{r4, pc}
  else if (freq ==  HCFG_6_MHZ)
 80028c0:	2902      	cmp	r1, #2
 80028c2:	d1fb      	bne.n	80028bc <USB_InitFSLSPClkSel+0x2c>
    USBx_HOST->HFIR = (uint32_t)6000;
 80028c4:	f241 7370 	movw	r3, #6000	; 0x1770
 80028c8:	e7f7      	b.n	80028ba <USB_InitFSLSPClkSel+0x2a>

080028ca <USB_ResetPort>:
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
  __IO uint32_t hprt0;

  hprt0 = USBx_HPRT0;
 80028ca:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
{
 80028ce:	b513      	push	{r0, r1, r4, lr}
  hprt0 = USBx_HPRT0;
 80028d0:	9301      	str	r3, [sp, #4]
{
 80028d2:	4604      	mov	r4, r0

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80028d4:	9b01      	ldr	r3, [sp, #4]
 80028d6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80028da:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80028dc:	9b01      	ldr	r3, [sp, #4]
 80028de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028e2:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay (100);                                /* See Note #1 */
 80028e6:	2064      	movs	r0, #100	; 0x64
 80028e8:	f7fd fcfc 	bl	80002e4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80028ec:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay (10);
 80028ee:	200a      	movs	r0, #10
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80028f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028f4:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay (10);
 80028f8:	f7fd fcf4 	bl	80002e4 <HAL_Delay>

  return HAL_OK;
}
 80028fc:	2000      	movs	r0, #0
 80028fe:	b002      	add	sp, #8
 8002900:	bd10      	pop	{r4, pc}

08002902 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus (USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8002902:	b082      	sub	sp, #8
  __IO uint32_t hprt0;

  hprt0 = USBx_HPRT0;
 8002904:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8002908:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800290a:	9b01      	ldr	r3, [sp, #4]
 800290c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002910:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0 ) && (state == 1 ))
 8002912:	9b01      	ldr	r3, [sp, #4]
 8002914:	04da      	lsls	r2, r3, #19
 8002916:	d406      	bmi.n	8002926 <USB_DriveVbus+0x24>
 8002918:	2901      	cmp	r1, #1
 800291a:	d104      	bne.n	8002926 <USB_DriveVbus+0x24>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800291c:	9b01      	ldr	r3, [sp, #4]
 800291e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002922:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0 ))
 8002926:	9b01      	ldr	r3, [sp, #4]
 8002928:	04db      	lsls	r3, r3, #19
 800292a:	d505      	bpl.n	8002938 <USB_DriveVbus+0x36>
 800292c:	b921      	cbnz	r1, 8002938 <USB_DriveVbus+0x36>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800292e:	9b01      	ldr	r3, [sp, #4]
 8002930:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002934:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK;
}
 8002938:	2000      	movs	r0, #0
 800293a:	b002      	add	sp, #8
 800293c:	4770      	bx	lr
	...

08002940 <USB_HostInit>:
{
 8002940:	b084      	sub	sp, #16
 8002942:	b538      	push	{r3, r4, r5, lr}
 8002944:	4604      	mov	r4, r0
 8002946:	a805      	add	r0, sp, #20
 8002948:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  USBx_PCGCCTL = 0;
 800294c:	2300      	movs	r3, #0
 800294e:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8002952:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002954:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002958:	63a3      	str	r3, [r4, #56]	; 0x38
  if((cfg.speed == USB_OTG_SPEED_FULL)&&
 800295a:	9b07      	ldr	r3, [sp, #28]
 800295c:	2b03      	cmp	r3, #3
    USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800295e:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
  if((cfg.speed == USB_OTG_SPEED_FULL)&&
 8002962:	d13c      	bne.n	80029de <USB_HostInit+0x9e>
 8002964:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 8002968:	d039      	beq.n	80029de <USB_HostInit+0x9e>
    USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800296a:	f043 0304 	orr.w	r3, r3, #4
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800296e:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  USB_FlushTxFifo(USBx, 0x10 ); /* all Tx FIFOs */
 8002972:	2110      	movs	r1, #16
 8002974:	4620      	mov	r0, r4
 8002976:	f7ff ff51 	bl	800281c <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 800297a:	4620      	mov	r0, r4
 800297c:	f7ff ff60 	bl	8002840 <USB_FlushRxFifo>
  for (i = 0; i < cfg.Host_channels; i++)
 8002980:	2300      	movs	r3, #0
 8002982:	9906      	ldr	r1, [sp, #24]
 8002984:	f504 62a0 	add.w	r2, r4, #1280	; 0x500
    USBx_HC(i)->HCINT = 0xFFFFFFFF;
 8002988:	f04f 30ff 	mov.w	r0, #4294967295
    USBx_HC(i)->HCINTMSK = 0;
 800298c:	461d      	mov	r5, r3
  for (i = 0; i < cfg.Host_channels; i++)
 800298e:	428b      	cmp	r3, r1
 8002990:	d128      	bne.n	80029e4 <USB_HostInit+0xa4>
  USB_DriveVbus(USBx, 1);
 8002992:	2101      	movs	r1, #1
 8002994:	4620      	mov	r0, r4
 8002996:	f7ff ffb4 	bl	8002902 <USB_DriveVbus>
  HAL_Delay(200);
 800299a:	20c8      	movs	r0, #200	; 0xc8
 800299c:	f7fd fca2 	bl	80002e4 <HAL_Delay>
  USBx->GINTMSK = 0;
 80029a0:	2300      	movs	r3, #0
  if(USBx == USB_OTG_FS)
 80029a2:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
  USBx->GINTMSK = 0;
 80029a6:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xFFFFFFFF;
 80029a8:	f04f 33ff 	mov.w	r3, #4294967295
 80029ac:	6163      	str	r3, [r4, #20]
  if(USBx == USB_OTG_FS)
 80029ae:	d11e      	bne.n	80029ee <USB_HostInit+0xae>
    USBx->GRXFSIZ  = (uint32_t )0x80;
 80029b0:	2380      	movs	r3, #128	; 0x80
 80029b2:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x60 << 16)& USB_OTG_NPTXFD) | 0x80);
 80029b4:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 80029b8:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t )(((0x40 << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0);
 80029ba:	4b11      	ldr	r3, [pc, #68]	; (8002a00 <USB_HostInit+0xc0>)
    USBx->HPTXFSIZ = (uint32_t )(((0xE0 << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0x300);
 80029bc:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  if (cfg.dma_enable == DISABLE)
 80029c0:	9b08      	ldr	r3, [sp, #32]
 80029c2:	b91b      	cbnz	r3, 80029cc <USB_HostInit+0x8c>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80029c4:	69a3      	ldr	r3, [r4, #24]
 80029c6:	f043 0310 	orr.w	r3, r3, #16
 80029ca:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM |\
 80029cc:	69a2      	ldr	r2, [r4, #24]
}
 80029ce:	2000      	movs	r0, #0
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM |\
 80029d0:	4b0c      	ldr	r3, [pc, #48]	; (8002a04 <USB_HostInit+0xc4>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	61a3      	str	r3, [r4, #24]
}
 80029d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80029da:	b004      	add	sp, #16
 80029dc:	4770      	bx	lr
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80029de:	f023 0304 	bic.w	r3, r3, #4
 80029e2:	e7c4      	b.n	800296e <USB_HostInit+0x2e>
    USBx_HC(i)->HCINT = 0xFFFFFFFF;
 80029e4:	6090      	str	r0, [r2, #8]
  for (i = 0; i < cfg.Host_channels; i++)
 80029e6:	3301      	adds	r3, #1
    USBx_HC(i)->HCINTMSK = 0;
 80029e8:	60d5      	str	r5, [r2, #12]
 80029ea:	3220      	adds	r2, #32
 80029ec:	e7cf      	b.n	800298e <USB_HostInit+0x4e>
    USBx->GRXFSIZ  = (uint32_t )0x200;
 80029ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029f2:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x100 << 16)& USB_OTG_NPTXFD) | 0x200);
 80029f4:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 80029f8:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t )(((0xE0 << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0x300);
 80029fa:	4b03      	ldr	r3, [pc, #12]	; (8002a08 <USB_HostInit+0xc8>)
 80029fc:	e7de      	b.n	80029bc <USB_HostInit+0x7c>
 80029fe:	bf00      	nop
 8002a00:	004000e0 	.word	0x004000e0
 8002a04:	a3200008 	.word	0xa3200008
 8002a08:	00e00300 	.word	0x00e00300

08002a0c <USB_GetHostSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed (USB_OTG_GlobalTypeDef *USBx)
{
 8002a0c:	b082      	sub	sp, #8
  __IO uint32_t hprt0;

  hprt0 = USBx_HPRT0;
 8002a0e:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8002a12:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8002a14:	9801      	ldr	r0, [sp, #4]
}
 8002a16:	f3c0 4041 	ubfx	r0, r0, #17, #2
 8002a1a:	b002      	add	sp, #8
 8002a1c:	4770      	bx	lr

08002a1e <USB_GetCurrentFrame>:
  * @param  USBx : Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame (USB_OTG_GlobalTypeDef *USBx)
{
  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8002a1e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8002a22:	6880      	ldr	r0, [r0, #8]
}
 8002a24:	b280      	uxth	r0, r0
 8002a26:	4770      	bx	lr

08002a28 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8002a28:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC(ch_num)->HCINT = 0xFFFFFFFF;
 8002a2a:	f500 64a0 	add.w	r4, r0, #1280	; 0x500
 8002a2e:	f04f 36ff 	mov.w	r6, #4294967295
{
 8002a32:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8002a36:	b257      	sxtb	r7, r2
  USBx_HC(ch_num)->HCINT = 0xFFFFFFFF;
 8002a38:	eb04 1441 	add.w	r4, r4, r1, lsl #5
 8002a3c:	60a6      	str	r6, [r4, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8002a3e:	2d03      	cmp	r5, #3
 8002a40:	d819      	bhi.n	8002a76 <USB_HC_Init+0x4e>
 8002a42:	e8df f005 	tbb	[pc, r5]
 8002a46:	5502      	.short	0x5502
 8002a48:	1302      	.short	0x1302
  {
  case EP_TYPE_CTRL:
  case EP_TYPE_BULK:

    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 8002a4a:	f240 469d 	movw	r6, #1181	; 0x49d
                                USB_OTG_HCINTMSK_TXERRM |\
                                USB_OTG_HCINTMSK_DTERRM |\
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_NAKM ;

    if (epnum & 0x80)
 8002a4e:	2f00      	cmp	r7, #0
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 8002a50:	60e6      	str	r6, [r4, #12]
    if (epnum & 0x80)
 8002a52:	da03      	bge.n	8002a5c <USB_HC_Init+0x34>
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_FRMORM ;

    if (epnum & 0x80)
    {
      USBx_HC(ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8002a54:	68e6      	ldr	r6, [r4, #12]
 8002a56:	f446 7680 	orr.w	r6, r6, #256	; 0x100
 8002a5a:	e005      	b.n	8002a68 <USB_HC_Init+0x40>
      if(USBx != USB_OTG_FS)
 8002a5c:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8002a60:	d009      	beq.n	8002a76 <USB_HC_Init+0x4e>
        USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8002a62:	68e6      	ldr	r6, [r4, #12]
 8002a64:	f046 0660 	orr.w	r6, r6, #96	; 0x60
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_FRMORM ;

    if (epnum & 0x80)
    {
      USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8002a68:	60e6      	str	r6, [r4, #12]
 8002a6a:	e004      	b.n	8002a76 <USB_HC_Init+0x4e>
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 8002a6c:	f240 669d 	movw	r6, #1693	; 0x69d
    if (epnum & 0x80)
 8002a70:	2f00      	cmp	r7, #0
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 8002a72:	60e6      	str	r6, [r4, #12]
    if (epnum & 0x80)
 8002a74:	dbee      	blt.n	8002a54 <USB_HC_Init+0x2c>
    }
    break;
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= (1 << ch_num);
 8002a76:	2601      	movs	r6, #1
 8002a78:	f8d0 c418 	ldr.w	ip, [r0, #1048]	; 0x418

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;

  /* Program the HCCHAR register */
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22) & USB_OTG_HCCHAR_DAD)  |\
 8002a7c:	059b      	lsls	r3, r3, #22
                             (((epnum & 0x7F)<< 11) & USB_OTG_HCCHAR_EPNUM)|\
                             ((((epnum & 0x80) == 0x80)<< 15) & USB_OTG_HCCHAR_EPDIR)|\
 8002a7e:	2f00      	cmp	r7, #0
  USBx_HOST->HAINTMSK |= (1 << ch_num);
 8002a80:	fa06 f101 	lsl.w	r1, r6, r1
                             (((epnum & 0x7F)<< 11) & USB_OTG_HCCHAR_EPNUM)|\
 8002a84:	ea4f 22c2 	mov.w	r2, r2, lsl #11
                             ((((epnum & 0x80) == 0x80)<< 15) & USB_OTG_HCCHAR_EPDIR)|\
 8002a88:	bfb4      	ite	lt
 8002a8a:	f44f 4600 	movlt.w	r6, #32768	; 0x8000
 8002a8e:	2600      	movge	r6, #0
  USBx_HOST->HAINTMSK |= (1 << ch_num);
 8002a90:	ea41 010c 	orr.w	r1, r1, ip
                             (((epnum & 0x7F)<< 11) & USB_OTG_HCCHAR_EPNUM)|\
 8002a94:	f402 42f0 	and.w	r2, r2, #30720	; 0x7800
  USBx_HOST->HAINTMSK |= (1 << ch_num);
 8002a98:	f500 6e80 	add.w	lr, r0, #1024	; 0x400
 8002a9c:	f8c0 1418 	str.w	r1, [r0, #1048]	; 0x418
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8002aa0:	6981      	ldr	r1, [r0, #24]
 8002aa2:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8002aa6:	6181      	str	r1, [r0, #24]
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22) & USB_OTG_HCCHAR_DAD)  |\
 8002aa8:	f003 51fe 	and.w	r1, r3, #532676608	; 0x1fc00000
                             (((speed == HPRT0_PRTSPD_LOW_SPEED)<< 17) & USB_OTG_HCCHAR_LSDEV)|\
 8002aac:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8002ab0:	2b02      	cmp	r3, #2
                             ((ep_type << 18) & USB_OTG_HCCHAR_EPTYP)|\
                             (mps & USB_OTG_HCCHAR_MPSIZ));
 8002ab2:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8002ab6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                             (((speed == HPRT0_PRTSPD_LOW_SPEED)<< 17) & USB_OTG_HCCHAR_LSDEV)|\
 8002aba:	bf0c      	ite	eq
 8002abc:	f44f 3000 	moveq.w	r0, #131072	; 0x20000
 8002ac0:	2000      	movne	r0, #0

  if (ep_type == EP_TYPE_INTR)
 8002ac2:	2d03      	cmp	r5, #3
                             ((ep_type << 18) & USB_OTG_HCCHAR_EPTYP)|\
 8002ac4:	ea43 0301 	orr.w	r3, r3, r1
 8002ac8:	ea43 0302 	orr.w	r3, r3, r2
 8002acc:	ea4f 4285 	mov.w	r2, r5, lsl #18
 8002ad0:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8002ad4:	ea43 0302 	orr.w	r3, r3, r2
 8002ad8:	ea43 0306 	orr.w	r3, r3, r6
 8002adc:	ea43 0300 	orr.w	r3, r3, r0
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22) & USB_OTG_HCCHAR_DAD)  |\
 8002ae0:	6023      	str	r3, [r4, #0]
  if (ep_type == EP_TYPE_INTR)
 8002ae2:	d103      	bne.n	8002aec <USB_HC_Init+0xc4>
  {
    USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8002ae4:	6823      	ldr	r3, [r4, #0]
 8002ae6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002aea:	6023      	str	r3, [r4, #0]
  }

  return HAL_OK;
}
 8002aec:	2000      	movs	r0, #0
 8002aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 8002af0:	f240 2625 	movw	r6, #549	; 0x225
    if (epnum & 0x80)
 8002af4:	2f00      	cmp	r7, #0
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 8002af6:	60e6      	str	r6, [r4, #12]
    if (epnum & 0x80)
 8002af8:	dabd      	bge.n	8002a76 <USB_HC_Init+0x4e>
      USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8002afa:	68e6      	ldr	r6, [r4, #12]
 8002afc:	f446 76c0 	orr.w	r6, r6, #384	; 0x180
 8002b00:	e7b2      	b.n	8002a68 <USB_HC_Init+0x40>

08002b02 <USB_HC_ReadInterrupt>:
  * @param  USBx : Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx_HOST->HAINT) & 0xFFFF);
 8002b02:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8002b06:	6940      	ldr	r0, [r0, #20]
}
 8002b08:	b280      	uxth	r0, r0
 8002b0a:	4770      	bx	lr

08002b0c <USB_HC_Halt>:
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx , uint8_t hc_num)
{
  uint32_t count = 0;

  /* Check for space in the request queue to issue the halt. */
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) ||
 8002b0c:	f500 63a0 	add.w	r3, r0, #1280	; 0x500
 8002b10:	eb03 1141 	add.w	r1, r3, r1, lsl #5
 8002b14:	680b      	ldr	r3, [r1, #0]
 8002b16:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
 8002b1a:	d004      	beq.n	8002b26 <USB_HC_Halt+0x1a>
     (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_BULK)))
 8002b1c:	680b      	ldr	r3, [r1, #0]
 8002b1e:	f3c3 4381 	ubfx	r3, r3, #18, #2
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) ||
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d11c      	bne.n	8002b60 <USB_HC_Halt+0x54>
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8002b26:	680b      	ldr	r3, [r1, #0]
 8002b28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002b2c:	600b      	str	r3, [r1, #0]

    if ((USBx->HNPTXSTS & 0xFFFF) == 0)
 8002b2e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d130      	bne.n	8002b98 <USB_HC_Halt+0x8c>
    {
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002b36:	680b      	ldr	r3, [r1, #0]
 8002b38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b3c:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002b3e:	680b      	ldr	r3, [r1, #0]
 8002b40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b44:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8002b46:	680b      	ldr	r3, [r1, #0]
 8002b48:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002b4c:	600b      	str	r3, [r1, #0]
 8002b4e:	f240 33e9 	movw	r3, #1001	; 0x3e9
      do
      {
        if (++count > 1000)
 8002b52:	3b01      	subs	r3, #1
 8002b54:	d002      	beq.n	8002b5c <USB_HC_Halt+0x50>
        {
          break;
        }
      }
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002b56:	680a      	ldr	r2, [r1, #0]
 8002b58:	2a00      	cmp	r2, #0
 8002b5a:	dbfa      	blt.n	8002b52 <USB_HC_Halt+0x46>
       USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
 8002b5c:	2000      	movs	r0, #0
 8002b5e:	4770      	bx	lr
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8002b60:	680b      	ldr	r3, [r1, #0]
 8002b62:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002b66:	600b      	str	r3, [r1, #0]
    if ((USBx_HOST->HPTXSTS & 0xFFFF) == 0)
 8002b68:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	b99b      	cbnz	r3, 8002b98 <USB_HC_Halt+0x8c>
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002b70:	680b      	ldr	r3, [r1, #0]
 8002b72:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b76:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002b78:	680b      	ldr	r3, [r1, #0]
 8002b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b7e:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8002b80:	680b      	ldr	r3, [r1, #0]
 8002b82:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002b86:	600b      	str	r3, [r1, #0]
 8002b88:	f240 33e9 	movw	r3, #1001	; 0x3e9
        if (++count > 1000)
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	d0e5      	beq.n	8002b5c <USB_HC_Halt+0x50>
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002b90:	680a      	ldr	r2, [r1, #0]
 8002b92:	2a00      	cmp	r2, #0
 8002b94:	dbfa      	blt.n	8002b8c <USB_HC_Halt+0x80>
 8002b96:	e7e1      	b.n	8002b5c <USB_HC_Halt+0x50>
       USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002b98:	680b      	ldr	r3, [r1, #0]
 8002b9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b9e:	600b      	str	r3, [r1, #0]
 8002ba0:	e7dc      	b.n	8002b5c <USB_HC_Halt+0x50>
	...

08002ba4 <USB_DoPing>:
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx , uint8_t ch_num)
{
  uint8_t  num_packets = 1;
  uint32_t tmpreg = 0;

  USBx_HC(ch_num)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |\
 8002ba4:	f500 60a0 	add.w	r0, r0, #1280	; 0x500
 8002ba8:	4b05      	ldr	r3, [pc, #20]	; (8002bc0 <USB_DoPing+0x1c>)
 8002baa:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
  tmpreg |= USB_OTG_HCCHAR_CHENA;
  USBx_HC(ch_num)->HCCHAR = tmpreg;

  return HAL_OK;
}
 8002bae:	2000      	movs	r0, #0
  USBx_HC(ch_num)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |\
 8002bb0:	610b      	str	r3, [r1, #16]
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002bb2:	680b      	ldr	r3, [r1, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002bb4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002bb8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002bbc:	600b      	str	r3, [r1, #0]
}
 8002bbe:	4770      	bx	lr
 8002bc0:	80080000 	.word	0x80080000

08002bc4 <USB_HC_StartXfer>:
  if((USBx != USB_OTG_FS) && (hc->speed == USB_OTG_SPEED_HIGH))
 8002bc4:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
{
 8002bc8:	460b      	mov	r3, r1
 8002bca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bce:	4604      	mov	r4, r0
  if((USBx != USB_OTG_FS) && (hc->speed == USB_OTG_SPEED_HIGH))
 8002bd0:	d016      	beq.n	8002c00 <USB_HC_StartXfer+0x3c>
 8002bd2:	790d      	ldrb	r5, [r1, #4]
 8002bd4:	b9a5      	cbnz	r5, 8002c00 <USB_HC_StartXfer+0x3c>
 8002bd6:	7849      	ldrb	r1, [r1, #1]
    if((dma == 0) && (hc->do_ping == 1))
 8002bd8:	b93a      	cbnz	r2, 8002bea <USB_HC_StartXfer+0x26>
 8002bda:	795d      	ldrb	r5, [r3, #5]
 8002bdc:	2d01      	cmp	r5, #1
 8002bde:	d10f      	bne.n	8002c00 <USB_HC_StartXfer+0x3c>
      USB_DoPing(USBx, hc->ch_num);
 8002be0:	f7ff ffe0 	bl	8002ba4 <USB_DoPing>
}
 8002be4:	2000      	movs	r0, #0
 8002be6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(dma == 1)
 8002bea:	2a01      	cmp	r2, #1
 8002bec:	d108      	bne.n	8002c00 <USB_HC_StartXfer+0x3c>
      USBx_HC(hc->ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8002bee:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8002bf2:	f8d1 050c 	ldr.w	r0, [r1, #1292]	; 0x50c
 8002bf6:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 8002bfa:	f8c1 050c 	str.w	r0, [r1, #1292]	; 0x50c
      hc->do_ping = 0;
 8002bfe:	715d      	strb	r5, [r3, #5]
  if (hc->xfer_len > 0)
 8002c00:	6919      	ldr	r1, [r3, #16]
 8002c02:	2900      	cmp	r1, #0
 8002c04:	d060      	beq.n	8002cc8 <USB_HC_StartXfer+0x104>
    num_packets = (hc->xfer_len + hc->max_packet - 1) / hc->max_packet;
 8002c06:	8918      	ldrh	r0, [r3, #8]
 8002c08:	3901      	subs	r1, #1
 8002c0a:	4401      	add	r1, r0
 8002c0c:	fbb1 f1f0 	udiv	r1, r1, r0
 8002c10:	b289      	uxth	r1, r1
    if (num_packets > max_hc_pkt_count)
 8002c12:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8002c16:	d903      	bls.n	8002c20 <USB_HC_StartXfer+0x5c>
      hc->xfer_len = num_packets * hc->max_packet;
 8002c18:	0200      	lsls	r0, r0, #8
      num_packets = max_hc_pkt_count;
 8002c1a:	f44f 7180 	mov.w	r1, #256	; 0x100
      hc->xfer_len = num_packets * hc->max_packet;
 8002c1e:	6118      	str	r0, [r3, #16]
  if (hc->ep_is_in)
 8002c20:	78df      	ldrb	r7, [r3, #3]
 8002c22:	b117      	cbz	r7, 8002c2a <USB_HC_StartXfer+0x66>
    hc->xfer_len = num_packets * hc->max_packet;
 8002c24:	8918      	ldrh	r0, [r3, #8]
 8002c26:	4348      	muls	r0, r1
 8002c28:	6118      	str	r0, [r3, #16]
      (((hc->data_pid) << 29) & USB_OTG_HCTSIZ_DPID);
 8002c2a:	f893 e00a 	ldrb.w	lr, [r3, #10]
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 8002c2e:	6918      	ldr	r0, [r3, #16]
      (((hc->data_pid) << 29) & USB_OTG_HCTSIZ_DPID);
 8002c30:	ea4f 7e4e 	mov.w	lr, lr, lsl #29
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 8002c34:	785e      	ldrb	r6, [r3, #1]
 8002c36:	f3c0 0812 	ubfx	r8, r0, #0, #19
      (((hc->data_pid) << 29) & USB_OTG_HCTSIZ_DPID);
 8002c3a:	f00e 4ec0 	and.w	lr, lr, #1610612736	; 0x60000000
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 8002c3e:	eb04 1546 	add.w	r5, r4, r6, lsl #5
    ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |\
 8002c42:	ea4e 0e08 	orr.w	lr, lr, r8
 8002c46:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8002d24 <USB_HC_StartXfer+0x160>
 8002c4a:	ea08 41c1 	and.w	r1, r8, r1, lsl #19
 8002c4e:	ea4e 0101 	orr.w	r1, lr, r1
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 8002c52:	f8c5 1510 	str.w	r1, [r5, #1296]	; 0x510
  if (dma)
 8002c56:	b112      	cbz	r2, 8002c5e <USB_HC_StartXfer+0x9a>
    USBx_HC(hc->ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8002c58:	68d9      	ldr	r1, [r3, #12]
 8002c5a:	f8c5 1514 	str.w	r1, [r5, #1300]	; 0x514
  is_oddframe = (USBx_HOST->HFNUM & 0x01) ? 0 : 1;
 8002c5e:	f504 6e80 	add.w	lr, r4, #1024	; 0x400
 8002c62:	f8de 1008 	ldr.w	r1, [lr, #8]
  USBx_HC(hc->ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8002c66:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
  USBx_HC(hc->ch_num)->HCCHAR |= (is_oddframe << 29);
 8002c6a:	43c9      	mvns	r1, r1
  USBx_HC(hc->ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8002c6c:	f02c 5c00 	bic.w	ip, ip, #536870912	; 0x20000000
  USBx_HC(hc->ch_num)->HCCHAR |= (is_oddframe << 29);
 8002c70:	0749      	lsls	r1, r1, #29
  USBx_HC(hc->ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8002c72:	f8c5 c500 	str.w	ip, [r5, #1280]	; 0x500
  USBx_HC(hc->ch_num)->HCCHAR |= (is_oddframe << 29);
 8002c76:	f001 5100 	and.w	r1, r1, #536870912	; 0x20000000
 8002c7a:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
 8002c7e:	ea41 010c 	orr.w	r1, r1, ip
 8002c82:	f8c5 1500 	str.w	r1, [r5, #1280]	; 0x500
  tmpreg = USBx_HC(hc->ch_num)->HCCHAR;
 8002c86:	4926      	ldr	r1, [pc, #152]	; (8002d20 <USB_HC_StartXfer+0x15c>)
 8002c88:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
 8002c8c:	f8c1 c000 	str.w	ip, [r1]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c90:	f8d1 c000 	ldr.w	ip, [r1]
 8002c94:	f02c 4c80 	bic.w	ip, ip, #1073741824	; 0x40000000
 8002c98:	f8c1 c000 	str.w	ip, [r1]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c9c:	f8d1 c000 	ldr.w	ip, [r1]
 8002ca0:	f04c 4c00 	orr.w	ip, ip, #2147483648	; 0x80000000
 8002ca4:	f8c1 c000 	str.w	ip, [r1]
  USBx_HC(hc->ch_num)->HCCHAR = tmpreg;
 8002ca8:	6809      	ldr	r1, [r1, #0]
 8002caa:	f8c5 1500 	str.w	r1, [r5, #1280]	; 0x500
  if (dma == 0) /* Slave mode */
 8002cae:	2a00      	cmp	r2, #0
 8002cb0:	d198      	bne.n	8002be4 <USB_HC_StartXfer+0x20>
    if((hc->ep_is_in == 0) && (hc->xfer_len > 0))
 8002cb2:	2f00      	cmp	r7, #0
 8002cb4:	d196      	bne.n	8002be4 <USB_HC_StartXfer+0x20>
 8002cb6:	2800      	cmp	r0, #0
 8002cb8:	d094      	beq.n	8002be4 <USB_HC_StartXfer+0x20>
      switch(hc->ep_type)
 8002cba:	79da      	ldrb	r2, [r3, #7]
 8002cbc:	2a03      	cmp	r2, #3
 8002cbe:	d810      	bhi.n	8002ce2 <USB_HC_StartXfer+0x11e>
 8002cc0:	e8df f002 	tbb	[pc, r2]
 8002cc4:	22042204 	.word	0x22042204
    num_packets = 1;
 8002cc8:	2101      	movs	r1, #1
 8002cca:	e7a9      	b.n	8002c20 <USB_HC_StartXfer+0x5c>
        if(len_words > (USBx->HNPTXSTS & 0xFFFF))
 8002ccc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        len_words = (hc->xfer_len + 3) / 4;
 8002cce:	1cc1      	adds	r1, r0, #3
        if(len_words > (USBx->HNPTXSTS & 0xFFFF))
 8002cd0:	b292      	uxth	r2, r2
 8002cd2:	f3c1 018f 	ubfx	r1, r1, #2, #16
 8002cd6:	4291      	cmp	r1, r2
 8002cd8:	d903      	bls.n	8002ce2 <USB_HC_StartXfer+0x11e>
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8002cda:	69a2      	ldr	r2, [r4, #24]
 8002cdc:	f042 0220 	orr.w	r2, r2, #32
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8002ce0:	61a2      	str	r2, [r4, #24]
      USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, hc->xfer_len, 0);
 8002ce2:	68da      	ldr	r2, [r3, #12]
    count32b =  (len + 3) / 4;
 8002ce4:	b280      	uxth	r0, r0
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8002ce6:	f44f 637e 	mov.w	r3, #4064	; 0xfe0
    count32b =  (len + 3) / 4;
 8002cea:	3003      	adds	r0, #3
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8002cec:	fb03 5506 	mla	r5, r3, r6, r5
    for (i = 0; i < count32b; i++, src += 4)
 8002cf0:	2300      	movs	r3, #0
    count32b =  (len + 3) / 4;
 8002cf2:	1080      	asrs	r0, r0, #2
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8002cf4:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
    for (i = 0; i < count32b; i++, src += 4)
 8002cf8:	4298      	cmp	r0, r3
 8002cfa:	f43f af73 	beq.w	8002be4 <USB_HC_StartXfer+0x20>
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8002cfe:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    for (i = 0; i < count32b; i++, src += 4)
 8002d02:	3301      	adds	r3, #1
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8002d04:	6029      	str	r1, [r5, #0]
 8002d06:	e7f7      	b.n	8002cf8 <USB_HC_StartXfer+0x134>
        if(len_words > (USBx_HOST->HPTXSTS & 0xFFFF)) /* split the transfer */
 8002d08:	f8de 2010 	ldr.w	r2, [lr, #16]
        len_words = (hc->xfer_len + 3) / 4;
 8002d0c:	1cc1      	adds	r1, r0, #3
        if(len_words > (USBx_HOST->HPTXSTS & 0xFFFF)) /* split the transfer */
 8002d0e:	b292      	uxth	r2, r2
 8002d10:	f3c1 018f 	ubfx	r1, r1, #2, #16
 8002d14:	4291      	cmp	r1, r2
 8002d16:	d9e4      	bls.n	8002ce2 <USB_HC_StartXfer+0x11e>
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8002d18:	69a2      	ldr	r2, [r4, #24]
 8002d1a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002d1e:	e7df      	b.n	8002ce0 <USB_HC_StartXfer+0x11c>
 8002d20:	200000b0 	.word	0x200000b0
 8002d24:	1ff80000 	.word	0x1ff80000

08002d28 <USB_StopHost>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002d28:	6883      	ldr	r3, [r0, #8]
  uint32_t value;

  USB_DisableGlobalInt(USBx);

    /* Flush FIFO */
  USB_FlushTxFifo(USBx, 0x10);
 8002d2a:	2110      	movs	r1, #16
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002d2c:	f023 0301 	bic.w	r3, r3, #1
{
 8002d30:	b510      	push	{r4, lr}
 8002d32:	4604      	mov	r4, r0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002d34:	6083      	str	r3, [r0, #8]
  USB_FlushTxFifo(USBx, 0x10);
 8002d36:	f7ff fd71 	bl	800281c <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 8002d3a:	4620      	mov	r0, r4
 8002d3c:	f7ff fd80 	bl	8002840 <USB_FlushRxFifo>
 8002d40:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
 8002d44:	f504 60e0 	add.w	r0, r4, #1792	; 0x700
 8002d48:	461a      	mov	r2, r3

  /* Flush out any leftover queued requests. */
  for (i = 0; i <= 15; i++)
  {

    value = USBx_HC(i)->HCCHAR ;
 8002d4a:	6811      	ldr	r1, [r2, #0]
 8002d4c:	f021 2180 	bic.w	r1, r1, #2147516416	; 0x80008000
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8002d50:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 8002d54:	f842 1b20 	str.w	r1, [r2], #32
  for (i = 0; i <= 15; i++)
 8002d58:	4290      	cmp	r0, r2
 8002d5a:	d1f6      	bne.n	8002d4a <USB_StopHost+0x22>
 8002d5c:	2000      	movs	r0, #0
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0; i <= 15; i++)
  {
    value = USBx_HC(i)->HCCHAR ;
 8002d5e:	6819      	ldr	r1, [r3, #0]
 8002d60:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000

    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8002d64:	f041 4140 	orr.w	r1, r1, #3221225472	; 0xc0000000

    USBx_HC(i)->HCCHAR = value;
 8002d68:	6019      	str	r1, [r3, #0]
    do
    {
      if (++count > 1000)
 8002d6a:	3001      	adds	r0, #1
 8002d6c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002d70:	d802      	bhi.n	8002d78 <USB_StopHost+0x50>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002d72:	6819      	ldr	r1, [r3, #0]
 8002d74:	2900      	cmp	r1, #0
 8002d76:	dbf8      	blt.n	8002d6a <USB_StopHost+0x42>
 8002d78:	3320      	adds	r3, #32
  for (i = 0; i <= 15; i++)
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d1ef      	bne.n	8002d5e <USB_StopHost+0x36>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFF;
 8002d7e:	f04f 33ff 	mov.w	r3, #4294967295
  USBx->GINTSTS = 0xFFFFFFFF;
  USB_EnableGlobalInt(USBx);
  return HAL_OK;
}
 8002d82:	2000      	movs	r0, #0
  USBx_HOST->HAINT = 0xFFFFFFFF;
 8002d84:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFF;
 8002d88:	6163      	str	r3, [r4, #20]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002d8a:	68a3      	ldr	r3, [r4, #8]
 8002d8c:	f043 0301 	orr.w	r3, r3, #1
 8002d90:	60a3      	str	r3, [r4, #8]
}
 8002d92:	bd10      	pop	{r4, pc}

08002d94 <USBH_MSC_SOFProcess>:
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{

  return USBH_OK;
}
 8002d94:	2000      	movs	r0, #0
 8002d96:	4770      	bx	lr

08002d98 <USBH_MSC_Process>:
{
 8002d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8002d9a:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
{
 8002d9e:	4606      	mov	r6, r0
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8002da0:	69dc      	ldr	r4, [r3, #28]
  switch (MSC_Handle->state)
 8002da2:	7b22      	ldrb	r2, [r4, #12]
 8002da4:	b122      	cbz	r2, 8002db0 <USBH_MSC_Process+0x18>
  USBH_StatusTypeDef error = USBH_BUSY ;
 8002da6:	f112 30ff 	adds.w	r0, r2, #4294967295
 8002daa:	bf18      	it	ne
 8002dac:	2001      	movne	r0, #1
 8002dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(MSC_Handle->current_lun < MSC_Handle->max_lun)
 8002db0:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
 8002db4:	2701      	movs	r7, #1
 8002db6:	6823      	ldr	r3, [r4, #0]
 8002db8:	4299      	cmp	r1, r3
 8002dba:	f080 80c9 	bcs.w	8002f50 <USBH_MSC_Process+0x1b8>
      MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8002dbe:	2534      	movs	r5, #52	; 0x34
 8002dc0:	fb05 4301 	mla	r3, r5, r1, r4
 8002dc4:	f883 7091 	strb.w	r7, [r3, #145]	; 0x91
      switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8002dc8:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8002dcc:	2b08      	cmp	r3, #8
 8002dce:	d81f      	bhi.n	8002e10 <USBH_MSC_Process+0x78>
 8002dd0:	e8df f003 	tbb	[pc, r3]
 8002dd4:	702f1e05 	.word	0x702f1e05
 8002dd8:	1e1e850e 	.word	0x1e1e850e
 8002ddc:	ba          	.byte	0xba
 8002ddd:	00          	.byte	0x00
        MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8002dde:	2304      	movs	r3, #4
 8002de0:	fb05 4501 	mla	r5, r5, r1, r4
 8002de4:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
        MSC_Handle->timer = phost->Timer;
 8002de8:	f8d0 33b8 	ldr.w	r3, [r0, #952]	; 0x3b8
 8002dec:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
        scsi_status = USBH_MSC_SCSI_Inquiry(phost, MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8002df0:	2534      	movs	r5, #52	; 0x34
 8002df2:	4630      	mov	r0, r6
 8002df4:	fb05 4201 	mla	r2, r5, r1, r4
 8002df8:	b2c9      	uxtb	r1, r1
 8002dfa:	329f      	adds	r2, #159	; 0x9f
 8002dfc:	f000 fc1b 	bl	8003636 <USBH_MSC_SCSI_Inquiry>
        if( scsi_status == USBH_OK)
 8002e00:	b970      	cbnz	r0, 8002e20 <USBH_MSC_Process+0x88>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;        
 8002e02:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 8002e06:	fb05 4403 	mla	r4, r5, r3, r4
 8002e0a:	2302      	movs	r3, #2
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;         
 8002e0c:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
 8002e10:	2200      	movs	r2, #0
 8002e12:	2104      	movs	r1, #4
 8002e14:	f8d6 03c8 	ldr.w	r0, [r6, #968]	; 0x3c8
 8002e18:	f001 fb34 	bl	8004484 <osMessagePut>
  USBH_StatusTypeDef error = USBH_BUSY ;
 8002e1c:	2001      	movs	r0, #1
 8002e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if( scsi_status == USBH_FAIL)
 8002e20:	2802      	cmp	r0, #2
 8002e22:	f040 8089 	bne.w	8002f38 <USBH_MSC_Process+0x1a0>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;         
 8002e26:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 8002e2a:	fb05 4403 	mla	r4, r5, r3, r4
 8002e2e:	2305      	movs	r3, #5
 8002e30:	e7ec      	b.n	8002e0c <USBH_MSC_Process+0x74>
        ready_status = USBH_MSC_SCSI_TestUnitReady(phost, MSC_Handle->current_lun);
 8002e32:	b2c9      	uxtb	r1, r1
 8002e34:	f000 fb9a 	bl	800356c <USBH_MSC_SCSI_TestUnitReady>
        if( ready_status == USBH_OK)
 8002e38:	b9a8      	cbnz	r0, 8002e66 <USBH_MSC_Process+0xce>
          if( MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8002e3a:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 8002e3e:	2234      	movs	r2, #52	; 0x34
 8002e40:	fb02 4103 	mla	r1, r2, r3, r4
 8002e44:	f891 0092 	ldrb.w	r0, [r1, #146]	; 0x92
 8002e48:	b100      	cbz	r0, 8002e4c <USBH_MSC_Process+0xb4>
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1;
 8002e4a:	2001      	movs	r0, #1
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8002e4c:	fb02 4403 	mla	r4, r2, r3, r4
 8002e50:	2303      	movs	r3, #3
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0;
 8002e52:	f881 00c1 	strb.w	r0, [r1, #193]	; 0xc1
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8002e56:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
            MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8002e60:	f884 3092 	strb.w	r3, [r4, #146]	; 0x92
 8002e64:	e7d4      	b.n	8002e10 <USBH_MSC_Process+0x78>
        if( ready_status == USBH_FAIL)
 8002e66:	2802      	cmp	r0, #2
 8002e68:	d116      	bne.n	8002e98 <USBH_MSC_Process+0x100>
          if( MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8002e6a:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 8002e6e:	2234      	movs	r2, #52	; 0x34
 8002e70:	fb02 4103 	mla	r1, r2, r3, r4
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE; 
 8002e74:	fb02 4403 	mla	r4, r2, r3, r4
 8002e78:	2305      	movs	r3, #5
          if( MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8002e7a:	f891 0092 	ldrb.w	r0, [r1, #146]	; 0x92
 8002e7e:	2802      	cmp	r0, #2
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1;
 8002e80:	bf14      	ite	ne
 8002e82:	2001      	movne	r0, #1
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0;
 8002e84:	2000      	moveq	r0, #0
 8002e86:	f881 00c1 	strb.w	r0, [r1, #193]	; 0xc1
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE; 
 8002e8a:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
            MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
            MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8002e94:	2302      	movs	r3, #2
 8002e96:	e7e3      	b.n	8002e60 <USBH_MSC_Process+0xc8>
        else if(ready_status == USBH_UNRECOVERED_ERROR)
 8002e98:	2804      	cmp	r0, #4
 8002e9a:	d1b9      	bne.n	8002e10 <USBH_MSC_Process+0x78>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8002e9c:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 8002ea0:	2234      	movs	r2, #52	; 0x34
 8002ea2:	fb02 4403 	mla	r4, r2, r3, r4
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;   
 8002eac:	2302      	movs	r3, #2
 8002eae:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
 8002eb2:	e7ad      	b.n	8002e10 <USBH_MSC_Process+0x78>
        scsi_status = USBH_MSC_SCSI_ReadCapacity(phost,MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8002eb4:	fb05 4201 	mla	r2, r5, r1, r4
 8002eb8:	b2c9      	uxtb	r1, r1
 8002eba:	3294      	adds	r2, #148	; 0x94
 8002ebc:	f000 fb7c 	bl	80035b8 <USBH_MSC_SCSI_ReadCapacity>
        if(scsi_status == USBH_OK)
 8002ec0:	2800      	cmp	r0, #0
 8002ec2:	d1ad      	bne.n	8002e20 <USBH_MSC_Process+0x88>
          if(MSC_Handle->unit[MSC_Handle->current_lun].state_changed == 1)
 8002ec4:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8002ec8:	2201      	movs	r2, #1
 8002eca:	fb05 4503 	mla	r5, r5, r3, r4
          MSC_Handle->current_lun++;
 8002ece:	4413      	add	r3, r2
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8002ed0:	f885 2090 	strb.w	r2, [r5, #144]	; 0x90
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8002ed4:	f885 0091 	strb.w	r0, [r5, #145]	; 0x91
          MSC_Handle->current_lun++;
 8002ed8:	f8a4 30f8 	strh.w	r3, [r4, #248]	; 0xf8
 8002edc:	e798      	b.n	8002e10 <USBH_MSC_Process+0x78>
        scsi_status = USBH_MSC_SCSI_RequestSense(phost,  MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8002ede:	fb05 4201 	mla	r2, r5, r1, r4
 8002ee2:	b2c9      	uxtb	r1, r1
 8002ee4:	329c      	adds	r2, #156	; 0x9c
 8002ee6:	f000 fc10 	bl	800370a <USBH_MSC_SCSI_RequestSense>
        if( scsi_status == USBH_OK)
 8002eea:	b9e8      	cbnz	r0, 8002f28 <USBH_MSC_Process+0x190>
          if((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8002eec:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 8002ef0:	fb05 4503 	mla	r5, r5, r3, r4
 8002ef4:	f895 209c 	ldrb.w	r2, [r5, #156]	; 0x9c
 8002ef8:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 8002efc:	2a02      	cmp	r2, #2
 8002efe:	d10b      	bne.n	8002f18 <USBH_MSC_Process+0x180>
            if((phost->Timer - MSC_Handle->timer) < 10000)
 8002f00:	f8d4 00fc 	ldr.w	r0, [r4, #252]	; 0xfc
 8002f04:	f8d6 13b8 	ldr.w	r1, [r6, #952]	; 0x3b8
 8002f08:	1a09      	subs	r1, r1, r0
 8002f0a:	f242 700f 	movw	r0, #9999	; 0x270f
 8002f0e:	4281      	cmp	r1, r0
 8002f10:	d802      	bhi.n	8002f18 <USBH_MSC_Process+0x180>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8002f12:	f885 2090 	strb.w	r2, [r5, #144]	; 0x90
              break;
 8002f16:	e77b      	b.n	8002e10 <USBH_MSC_Process+0x78>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8002f18:	2234      	movs	r2, #52	; 0x34
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	fb02 4203 	mla	r2, r2, r3, r4
          MSC_Handle->current_lun++;
 8002f20:	440b      	add	r3, r1
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8002f22:	f882 1090 	strb.w	r1, [r2, #144]	; 0x90
 8002f26:	e7d7      	b.n	8002ed8 <USBH_MSC_Process+0x140>
        if( scsi_status == USBH_FAIL)
 8002f28:	2802      	cmp	r0, #2
 8002f2a:	d105      	bne.n	8002f38 <USBH_MSC_Process+0x1a0>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR; 
 8002f2c:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 8002f30:	fb05 4403 	mla	r4, r5, r3, r4
 8002f34:	2308      	movs	r3, #8
 8002f36:	e769      	b.n	8002e0c <USBH_MSC_Process+0x74>
        else if(scsi_status == USBH_UNRECOVERED_ERROR)
 8002f38:	2804      	cmp	r0, #4
 8002f3a:	f47f af69 	bne.w	8002e10 <USBH_MSC_Process+0x78>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8002f3e:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 8002f42:	fb05 4403 	mla	r4, r5, r3, r4
 8002f46:	e7ae      	b.n	8002ea6 <USBH_MSC_Process+0x10e>
        MSC_Handle->current_lun++;
 8002f48:	3101      	adds	r1, #1
 8002f4a:	f8a4 10f8 	strh.w	r1, [r4, #248]	; 0xf8
        break;  
 8002f4e:	e75f      	b.n	8002e10 <USBH_MSC_Process+0x78>
      MSC_Handle->current_lun = 0;
 8002f50:	f8a4 20f8 	strh.w	r2, [r4, #248]	; 0xf8
    osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
 8002f54:	2104      	movs	r1, #4
    MSC_Handle->state = MSC_IDLE;
 8002f56:	7327      	strb	r7, [r4, #12]
    osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
 8002f58:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8002f5c:	f001 fa92 	bl	8004484 <osMessagePut>
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);     
 8002f60:	f8d6 33c4 	ldr.w	r3, [r6, #964]	; 0x3c4
 8002f64:	2102      	movs	r1, #2
 8002f66:	4630      	mov	r0, r6
 8002f68:	4798      	blx	r3
 8002f6a:	e757      	b.n	8002e1c <USBH_MSC_Process+0x84>

08002f6c <USBH_MSC_ClassRequest>:
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;  
 8002f6c:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
{   
 8002f70:	4602      	mov	r2, r0
 8002f72:	b570      	push	{r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;  
 8002f74:	69dc      	ldr	r4, [r3, #28]
  switch (MSC_Handle->req_state)
 8002f76:	7ba3      	ldrb	r3, [r4, #14]
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d002      	beq.n	8002f82 <USBH_MSC_ClassRequest+0x16>
 8002f7c:	2b03      	cmp	r3, #3
 8002f7e:	d020      	beq.n	8002fc2 <USBH_MSC_ClassRequest+0x56>
 8002f80:	bb2b      	cbnz	r3, 8002fce <USBH_MSC_ClassRequest+0x62>
    status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, (uint8_t *)&MSC_Handle->max_lun);
 8002f82:	4621      	mov	r1, r4
 8002f84:	4610      	mov	r0, r2
 8002f86:	f000 f9c7 	bl	8003318 <USBH_MSC_BOT_REQ_GetMaxLUN>
    if(status == USBH_NOT_SUPPORTED)
 8002f8a:	2803      	cmp	r0, #3
 8002f8c:	d10e      	bne.n	8002fac <USBH_MSC_ClassRequest+0x40>
      MSC_Handle->max_lun = 0;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	6023      	str	r3, [r4, #0]
      MSC_Handle->max_lun = (uint8_t )(MSC_Handle->max_lun) + 1;
 8002f92:	7822      	ldrb	r2, [r4, #0]
      for(i = 0; i < MSC_Handle->max_lun; i++)
 8002f94:	2300      	movs	r3, #0
        MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8002f96:	2034      	movs	r0, #52	; 0x34
 8002f98:	2502      	movs	r5, #2
      MSC_Handle->max_lun = (uint8_t )(MSC_Handle->max_lun) + 1;
 8002f9a:	3201      	adds	r2, #1
        MSC_Handle->unit[i].state_changed = 0;
 8002f9c:	461e      	mov	r6, r3
      MSC_Handle->max_lun = (uint8_t )(MSC_Handle->max_lun) + 1;
 8002f9e:	6022      	str	r2, [r4, #0]
 8002fa0:	1c59      	adds	r1, r3, #1
      for(i = 0; i < MSC_Handle->max_lun; i++)
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d804      	bhi.n	8002fb2 <USBH_MSC_ClassRequest+0x46>
 8002fa8:	2000      	movs	r0, #0
 8002faa:	bd70      	pop	{r4, r5, r6, pc}
    if(status == USBH_OK)
 8002fac:	2800      	cmp	r0, #0
 8002fae:	d0f0      	beq.n	8002f92 <USBH_MSC_ClassRequest+0x26>
}
 8002fb0:	bd70      	pop	{r4, r5, r6, pc}
        MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8002fb2:	fb00 4303 	mla	r3, r0, r3, r4
 8002fb6:	f883 5092 	strb.w	r5, [r3, #146]	; 0x92
        MSC_Handle->unit[i].state_changed = 0;
 8002fba:	f883 60c1 	strb.w	r6, [r3, #193]	; 0xc1
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	e7ee      	b.n	8002fa0 <USBH_MSC_ClassRequest+0x34>
    if(USBH_ClrFeature(phost, 0x00) == USBH_OK)
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	f001 f8d6 	bl	8004174 <USBH_ClrFeature>
 8002fc8:	b908      	cbnz	r0, 8002fce <USBH_MSC_ClassRequest+0x62>
      MSC_Handle->req_state = MSC_Handle->prev_req_state; 
 8002fca:	7be3      	ldrb	r3, [r4, #15]
 8002fcc:	73a3      	strb	r3, [r4, #14]
  USBH_StatusTypeDef status = USBH_BUSY;
 8002fce:	2001      	movs	r0, #1
 8002fd0:	e7ee      	b.n	8002fb0 <USBH_MSC_ClassRequest+0x44>

08002fd2 <USBH_MSC_InterfaceDeInit>:
{
 8002fd2:	b538      	push	{r3, r4, r5, lr}
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8002fd4:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
{
 8002fd8:	4604      	mov	r4, r0
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8002fda:	69dd      	ldr	r5, [r3, #28]
  if ( MSC_Handle->OutPipe)
 8002fdc:	7969      	ldrb	r1, [r5, #5]
 8002fde:	b139      	cbz	r1, 8002ff0 <USBH_MSC_InterfaceDeInit+0x1e>
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8002fe0:	f001 f945 	bl	800426e <USBH_ClosePipe>
    USBH_FreePipe  (phost, MSC_Handle->OutPipe);
 8002fe4:	7969      	ldrb	r1, [r5, #5]
 8002fe6:	4620      	mov	r0, r4
 8002fe8:	f001 f95e 	bl	80042a8 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0;     /* Reset the Channel as Free */
 8002fec:	2300      	movs	r3, #0
 8002fee:	716b      	strb	r3, [r5, #5]
  if ( MSC_Handle->InPipe)
 8002ff0:	7929      	ldrb	r1, [r5, #4]
 8002ff2:	b141      	cbz	r1, 8003006 <USBH_MSC_InterfaceDeInit+0x34>
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8002ff4:	4620      	mov	r0, r4
 8002ff6:	f001 f93a 	bl	800426e <USBH_ClosePipe>
    USBH_FreePipe  (phost, MSC_Handle->InPipe);
 8002ffa:	7929      	ldrb	r1, [r5, #4]
 8002ffc:	4620      	mov	r0, r4
 8002ffe:	f001 f953 	bl	80042a8 <USBH_FreePipe>
    MSC_Handle->InPipe = 0;     /* Reset the Channel as Free */
 8003002:	2300      	movs	r3, #0
 8003004:	712b      	strb	r3, [r5, #4]
  if(phost->pActiveClass->pData)
 8003006:	f8d4 3374 	ldr.w	r3, [r4, #884]	; 0x374
 800300a:	69d8      	ldr	r0, [r3, #28]
 800300c:	b128      	cbz	r0, 800301a <USBH_MSC_InterfaceDeInit+0x48>
    USBH_free (phost->pActiveClass->pData);
 800300e:	f008 fd95 	bl	800bb3c <free>
    phost->pActiveClass->pData = 0;
 8003012:	f8d4 3374 	ldr.w	r3, [r4, #884]	; 0x374
 8003016:	2200      	movs	r2, #0
 8003018:	61da      	str	r2, [r3, #28]
}
 800301a:	2000      	movs	r0, #0
 800301c:	bd38      	pop	{r3, r4, r5, pc}

0800301e <USBH_MSC_InterfaceInit>:
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800301e:	f8d0 1374 	ldr.w	r1, [r0, #884]	; 0x374
 8003022:	2350      	movs	r3, #80	; 0x50
 8003024:	2206      	movs	r2, #6
{	 
 8003026:	b5f0      	push	{r4, r5, r6, r7, lr}
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8003028:	7909      	ldrb	r1, [r1, #4]
{	 
 800302a:	b085      	sub	sp, #20
 800302c:	4605      	mov	r5, r0
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800302e:	f000 fcab 	bl	8003988 <USBH_FindInterface>
  if(interface == 0xFF) /* Not Valid Interface */
 8003032:	28ff      	cmp	r0, #255	; 0xff
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8003034:	4601      	mov	r1, r0
  if(interface == 0xFF) /* Not Valid Interface */
 8003036:	d06b      	beq.n	8003110 <USBH_MSC_InterfaceInit+0xf2>
    USBH_SelectInterface (phost, interface);
 8003038:	4628      	mov	r0, r5
    USBH_OpenPipe  (phost,
 800303a:	2702      	movs	r7, #2
    USBH_SelectInterface (phost, interface);
 800303c:	f000 fc9b 	bl	8003976 <USBH_SelectInterface>
    phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc (sizeof(MSC_HandleTypeDef));
 8003040:	f8d5 6374 	ldr.w	r6, [r5, #884]	; 0x374
 8003044:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003048:	f008 fd70 	bl	800bb2c <malloc>
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80)
 800304c:	231a      	movs	r3, #26
    phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc (sizeof(MSC_HandleTypeDef));
 800304e:	61f0      	str	r0, [r6, #28]
 8003050:	4604      	mov	r4, r0
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80)
 8003052:	f895 231f 	ldrb.w	r2, [r5, #799]	; 0x31f
    MSC_Handle->current_lun = 0;
 8003056:	2600      	movs	r6, #0
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80)
 8003058:	fb03 5002 	mla	r0, r3, r2, r5
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress & 0x80)
 800305c:	fb03 5302 	mla	r3, r3, r2, r5
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80)
 8003060:	f890 1348 	ldrb.w	r1, [r0, #840]	; 0x348
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress & 0x80)
 8003064:	f893 2350 	ldrb.w	r2, [r3, #848]	; 0x350
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80)
 8003068:	f011 0f80 	tst.w	r1, #128	; 0x80
 800306c:	f8b0 034a 	ldrh.w	r0, [r0, #842]	; 0x34a
 8003070:	f8b3 3352 	ldrh.w	r3, [r3, #850]	; 0x352
      MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 8003074:	bf19      	ittee	ne
 8003076:	71e1      	strbne	r1, [r4, #7]
      MSC_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 8003078:	8160      	strhne	r0, [r4, #10]
      MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 800307a:	71a1      	strbeq	r1, [r4, #6]
      MSC_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;      
 800307c:	8120      	strheq	r0, [r4, #8]
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress & 0x80)
 800307e:	f012 0f80 	tst.w	r2, #128	; 0x80
    MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8003082:	4628      	mov	r0, r5
    MSC_Handle->current_lun = 0;
 8003084:	f8a4 60f8 	strh.w	r6, [r4, #248]	; 0xf8
      MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 8003088:	bf08      	it	eq
 800308a:	71a2      	strbeq	r2, [r4, #6]
    MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800308c:	79a1      	ldrb	r1, [r4, #6]
      MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 800308e:	bf1a      	itte	ne
 8003090:	71e2      	strbne	r2, [r4, #7]
      MSC_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;      
 8003092:	8163      	strhne	r3, [r4, #10]
      MSC_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;      
 8003094:	8123      	strheq	r3, [r4, #8]
    MSC_Handle->rw_lun = 0;
 8003096:	f8a4 60fa 	strh.w	r6, [r4, #250]	; 0xfa
    MSC_Handle->state = MSC_INIT;
 800309a:	7326      	strb	r6, [r4, #12]
    MSC_Handle->error = MSC_OK;
 800309c:	7366      	strb	r6, [r4, #13]
    MSC_Handle->req_state = MSC_REQ_IDLE;
 800309e:	73a6      	strb	r6, [r4, #14]
    MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 80030a0:	f001 f8ea 	bl	8004278 <USBH_AllocPipe>
    MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 80030a4:	79e1      	ldrb	r1, [r4, #7]
    MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 80030a6:	7160      	strb	r0, [r4, #5]
    MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 80030a8:	4628      	mov	r0, r5
 80030aa:	f001 f8e5 	bl	8004278 <USBH_AllocPipe>
 80030ae:	7120      	strb	r0, [r4, #4]
    USBH_MSC_BOT_Init(phost);
 80030b0:	4628      	mov	r0, r5
 80030b2:	f000 f93d 	bl	8003330 <USBH_MSC_BOT_Init>
    USBH_memset(MSC_Handle->unit, 0, sizeof(MSC_Handle->unit));
 80030b6:	2268      	movs	r2, #104	; 0x68
 80030b8:	4631      	mov	r1, r6
 80030ba:	f104 0090 	add.w	r0, r4, #144	; 0x90
 80030be:	f008 fd5f 	bl	800bb80 <memset>
    USBH_OpenPipe  (phost,
 80030c2:	8920      	ldrh	r0, [r4, #8]
 80030c4:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 80030c8:	9002      	str	r0, [sp, #8]
 80030ca:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 80030ce:	79a2      	ldrb	r2, [r4, #6]
 80030d0:	7961      	ldrb	r1, [r4, #5]
 80030d2:	9000      	str	r0, [sp, #0]
 80030d4:	4628      	mov	r0, r5
 80030d6:	9701      	str	r7, [sp, #4]
 80030d8:	f001 f8ba 	bl	8004250 <USBH_OpenPipe>
    USBH_OpenPipe  (phost,
 80030dc:	8960      	ldrh	r0, [r4, #10]
 80030de:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 80030e2:	9002      	str	r0, [sp, #8]
 80030e4:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 80030e8:	79e2      	ldrb	r2, [r4, #7]
 80030ea:	7921      	ldrb	r1, [r4, #4]
 80030ec:	9000      	str	r0, [sp, #0]
 80030ee:	4628      	mov	r0, r5
 80030f0:	9701      	str	r7, [sp, #4]
 80030f2:	f001 f8ad 	bl	8004250 <USBH_OpenPipe>
    USBH_LL_SetToggle  (phost, MSC_Handle->InPipe,0);
 80030f6:	4632      	mov	r2, r6
 80030f8:	7921      	ldrb	r1, [r4, #4]
 80030fa:	4628      	mov	r0, r5
 80030fc:	f008 fc32 	bl	800b964 <USBH_LL_SetToggle>
    USBH_LL_SetToggle  (phost, MSC_Handle->OutPipe,0);
 8003100:	4632      	mov	r2, r6
 8003102:	7961      	ldrb	r1, [r4, #5]
 8003104:	4628      	mov	r0, r5
 8003106:	f008 fc2d 	bl	800b964 <USBH_LL_SetToggle>
    status = USBH_OK; 
 800310a:	4630      	mov	r0, r6
}
 800310c:	b005      	add	sp, #20
 800310e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = USBH_FAIL;      
 8003110:	2002      	movs	r0, #2
 8003112:	e7fb      	b.n	800310c <USBH_MSC_InterfaceInit+0xee>

08003114 <USBH_MSC_RdWrProcess>:
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003114:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
{
 8003118:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800311a:	69dc      	ldr	r4, [r3, #28]
  USBH_StatusTypeDef error = USBH_BUSY ;
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;  
  
  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800311c:	2734      	movs	r7, #52	; 0x34
{
 800311e:	4606      	mov	r6, r0
  switch (MSC_Handle->unit[lun].state)
 8003120:	fb07 4501 	mla	r5, r7, r1, r4
 8003124:	f895 3090 	ldrb.w	r3, [r5, #144]	; 0x90
 8003128:	2b06      	cmp	r3, #6
 800312a:	d010      	beq.n	800314e <USBH_MSC_RdWrProcess+0x3a>
 800312c:	2b07      	cmp	r3, #7
 800312e:	d021      	beq.n	8003174 <USBH_MSC_RdWrProcess+0x60>
 8003130:	2b05      	cmp	r3, #5
 8003132:	d135      	bne.n	80031a0 <USBH_MSC_RdWrProcess+0x8c>
    osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
#endif       
    break; 
  
  case MSC_REQUEST_SENSE:
    scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8003134:	fb07 4201 	mla	r2, r7, r1, r4
 8003138:	329c      	adds	r2, #156	; 0x9c
 800313a:	f000 fae6 	bl	800370a <USBH_MSC_SCSI_RequestSense>
    
    if( scsi_status == USBH_OK)
 800313e:	bb68      	cbnz	r0, 800319c <USBH_MSC_RdWrProcess+0x88>
    {
      USBH_UsrLog ("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
      USBH_UsrLog ("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
      USBH_UsrLog ("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
      MSC_Handle->unit[lun].state = MSC_IDLE;
 8003140:	2301      	movs	r3, #1
      MSC_Handle->unit[lun].error = MSC_ERROR;
 8003142:	2402      	movs	r4, #2
      MSC_Handle->unit[lun].state = MSC_IDLE;
 8003144:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
      MSC_Handle->unit[lun].error = MSC_ERROR;
 8003148:	f885 4091 	strb.w	r4, [r5, #145]	; 0x91
 800314c:	e009      	b.n	8003162 <USBH_MSC_RdWrProcess+0x4e>
    scsi_status = USBH_MSC_SCSI_Read(phost,lun, 0, NULL, 0) ;
 800314e:	2300      	movs	r3, #0
 8003150:	9300      	str	r3, [sp, #0]
 8003152:	461a      	mov	r2, r3
 8003154:	f000 fb66 	bl	8003824 <USBH_MSC_SCSI_Read>
    if(scsi_status == USBH_OK)
 8003158:	4604      	mov	r4, r0
 800315a:	b988      	cbnz	r0, 8003180 <USBH_MSC_RdWrProcess+0x6c>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800315c:	2301      	movs	r3, #1
 800315e:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
    {
      MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;  
          error = USBH_FAIL;
    }
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
 8003162:	2200      	movs	r2, #0
 8003164:	2104      	movs	r1, #4
 8003166:	f8d6 03c8 	ldr.w	r0, [r6, #968]	; 0x3c8
 800316a:	f001 f98b 	bl	8004484 <osMessagePut>
  default:
    break;  
    
  }
  return error;
}
 800316e:	4620      	mov	r0, r4
 8003170:	b003      	add	sp, #12
 8003172:	bdf0      	pop	{r4, r5, r6, r7, pc}
    scsi_status = USBH_MSC_SCSI_Write(phost,lun, 0, NULL, 0) ;
 8003174:	2300      	movs	r3, #0
 8003176:	9300      	str	r3, [sp, #0]
 8003178:	461a      	mov	r2, r3
 800317a:	f000 fb0f 	bl	800379c <USBH_MSC_SCSI_Write>
 800317e:	e7eb      	b.n	8003158 <USBH_MSC_RdWrProcess+0x44>
    else if( scsi_status == USBH_FAIL)
 8003180:	2802      	cmp	r0, #2
 8003182:	d104      	bne.n	800318e <USBH_MSC_RdWrProcess+0x7a>
      MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;  
 8003184:	2305      	movs	r3, #5
 8003186:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
  USBH_StatusTypeDef error = USBH_BUSY ;
 800318a:	2401      	movs	r4, #1
 800318c:	e7e9      	b.n	8003162 <USBH_MSC_RdWrProcess+0x4e>
    else if(scsi_status == USBH_UNRECOVERED_ERROR)
 800318e:	2804      	cmp	r0, #4
    if( scsi_status == USBH_FAIL)
 8003190:	d1fb      	bne.n	800318a <USBH_MSC_RdWrProcess+0x76>
      MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;  
 8003192:	2308      	movs	r3, #8
          error = USBH_FAIL;
 8003194:	2402      	movs	r4, #2
      MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;  
 8003196:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
 800319a:	e7e2      	b.n	8003162 <USBH_MSC_RdWrProcess+0x4e>
    if( scsi_status == USBH_FAIL)
 800319c:	2804      	cmp	r0, #4
 800319e:	e7f7      	b.n	8003190 <USBH_MSC_RdWrProcess+0x7c>
  USBH_StatusTypeDef error = USBH_BUSY ;
 80031a0:	2401      	movs	r4, #1
 80031a2:	e7e4      	b.n	800316e <USBH_MSC_RdWrProcess+0x5a>

080031a4 <USBH_MSC_UnitIsReady>:
  */
uint8_t  USBH_MSC_UnitIsReady (USBH_HandleTypeDef *phost, uint8_t lun)
{
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;  
  
  if(phost->gState == HOST_CLASS)
 80031a4:	7803      	ldrb	r3, [r0, #0]
 80031a6:	2b0a      	cmp	r3, #10
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;  
 80031a8:	bf01      	itttt	eq
 80031aa:	f8d0 3374 	ldreq.w	r3, [r0, #884]	; 0x374
  {
    return (MSC_Handle->unit[lun].error == MSC_OK);
 80031ae:	2234      	moveq	r2, #52	; 0x34
 80031b0:	69db      	ldreq	r3, [r3, #28]
 80031b2:	fb02 3101 	mlaeq	r1, r2, r1, r3
 80031b6:	bf03      	ittte	eq
 80031b8:	f891 0091 	ldrbeq.w	r0, [r1, #145]	; 0x91
 80031bc:	fab0 f080 	clzeq	r0, r0
 80031c0:	0940      	lsreq	r0, r0, #5
 80031c2:	2000      	movne	r0, #0
  }
  else
  {
    return 0;
  }
}
 80031c4:	4770      	bx	lr

080031c6 <USBH_MSC_GetLUNInfo>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;    
  if(phost->gState == HOST_CLASS)
 80031c6:	7803      	ldrb	r3, [r0, #0]
 80031c8:	2b0a      	cmp	r3, #10
{
 80031ca:	b510      	push	{r4, lr}
  if(phost->gState == HOST_CLASS)
 80031cc:	d111      	bne.n	80031f2 <USBH_MSC_GetLUNInfo+0x2c>
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;    
 80031ce:	f8d0 0374 	ldr.w	r0, [r0, #884]	; 0x374
  {
    USBH_memcpy(info,&MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 80031d2:	2490      	movs	r4, #144	; 0x90
 80031d4:	2334      	movs	r3, #52	; 0x34
 80031d6:	fb13 4301 	smlabb	r3, r3, r1, r4
 80031da:	69c1      	ldr	r1, [r0, #28]
 80031dc:	4419      	add	r1, r3
 80031de:	f101 0334 	add.w	r3, r1, #52	; 0x34
 80031e2:	f851 0b04 	ldr.w	r0, [r1], #4
 80031e6:	4299      	cmp	r1, r3
 80031e8:	f842 0b04 	str.w	r0, [r2], #4
 80031ec:	d1f9      	bne.n	80031e2 <USBH_MSC_GetLUNInfo+0x1c>
    return USBH_OK;
 80031ee:	2000      	movs	r0, #0
 80031f0:	bd10      	pop	{r4, pc}
  }
  else
  {
    return USBH_FAIL;
 80031f2:	2002      	movs	r0, #2
  }
}
 80031f4:	bd10      	pop	{r4, pc}

080031f6 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                     uint8_t lun,
                                     uint32_t address,
                                     uint8_t *pbuf,
                                     uint32_t length)
{
 80031f6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;   
  
  if ((phost->device.is_connected == 0) || 
 80031fa:	f890 531e 	ldrb.w	r5, [r0, #798]	; 0x31e
{
 80031fe:	4604      	mov	r4, r0
 8003200:	460f      	mov	r7, r1
 8003202:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  if ((phost->device.is_connected == 0) || 
 8003206:	b3bd      	cbz	r5, 8003278 <USBH_MSC_Read+0x82>
      (phost->gState != HOST_CLASS) || 
 8003208:	7805      	ldrb	r5, [r0, #0]
  if ((phost->device.is_connected == 0) || 
 800320a:	2d0a      	cmp	r5, #10
 800320c:	d134      	bne.n	8003278 <USBH_MSC_Read+0x82>
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;   
 800320e:	f8d0 5374 	ldr.w	r5, [r0, #884]	; 0x374
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8003212:	2634      	movs	r6, #52	; 0x34
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;   
 8003214:	69ed      	ldr	r5, [r5, #28]
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8003216:	fb06 5601 	mla	r6, r6, r1, r5
      (phost->gState != HOST_CLASS) || 
 800321a:	f896 e090 	ldrb.w	lr, [r6, #144]	; 0x90
 800321e:	f1be 0f01 	cmp.w	lr, #1
 8003222:	d129      	bne.n	8003278 <USBH_MSC_Read+0x82>
  {
    return  USBH_FAIL;
  }
  MSC_Handle->state = MSC_READ;
 8003224:	f04f 0e06 	mov.w	lr, #6
 8003228:	f885 e00c 	strb.w	lr, [r5, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800322c:	f886 e090 	strb.w	lr, [r6, #144]	; 0x90
  
  timeout = phost->Timer;
  
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
  {
    if(((phost->Timer - timeout) > (10000 * length)) || (phost->device.is_connected == 0))
 8003230:	f242 7610 	movw	r6, #10000	; 0x2710
  MSC_Handle->rw_lun = lun;
 8003234:	f8a5 10fa 	strh.w	r1, [r5, #250]	; 0xfa
  USBH_MSC_SCSI_Read(phost,
 8003238:	f8cd 8000 	str.w	r8, [sp]
 800323c:	f000 faf2 	bl	8003824 <USBH_MSC_SCSI_Read>
    if(((phost->Timer - timeout) > (10000 * length)) || (phost->device.is_connected == 0))
 8003240:	fb06 f608 	mul.w	r6, r6, r8
  timeout = phost->Timer;
 8003244:	f8d4 93b8 	ldr.w	r9, [r4, #952]	; 0x3b8
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8003248:	4639      	mov	r1, r7
 800324a:	4620      	mov	r0, r4
 800324c:	f7ff ff62 	bl	8003114 <USBH_MSC_RdWrProcess>
 8003250:	2801      	cmp	r0, #1
 8003252:	d005      	beq.n	8003260 <USBH_MSC_Read+0x6a>
    {
      MSC_Handle->state = MSC_IDLE;
      return USBH_FAIL;
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8003254:	2301      	movs	r3, #1
  return USBH_OK;
 8003256:	2000      	movs	r0, #0
  MSC_Handle->state = MSC_IDLE;
 8003258:	732b      	strb	r3, [r5, #12]
}
 800325a:	b003      	add	sp, #12
 800325c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(((phost->Timer - timeout) > (10000 * length)) || (phost->device.is_connected == 0))
 8003260:	f8d4 33b8 	ldr.w	r3, [r4, #952]	; 0x3b8
 8003264:	eba3 0309 	sub.w	r3, r3, r9
 8003268:	42b3      	cmp	r3, r6
 800326a:	d803      	bhi.n	8003274 <USBH_MSC_Read+0x7e>
 800326c:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1e9      	bne.n	8003248 <USBH_MSC_Read+0x52>
      MSC_Handle->state = MSC_IDLE;
 8003274:	2301      	movs	r3, #1
 8003276:	732b      	strb	r3, [r5, #12]
    return  USBH_FAIL;
 8003278:	2002      	movs	r0, #2
 800327a:	e7ee      	b.n	800325a <USBH_MSC_Read+0x64>

0800327c <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                     uint8_t lun,
                                     uint32_t address,
                                     uint8_t *pbuf,
                                     uint32_t length)
{
 800327c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;   
  
  if ((phost->device.is_connected == 0) || 
 8003280:	f890 531e 	ldrb.w	r5, [r0, #798]	; 0x31e
{
 8003284:	4604      	mov	r4, r0
 8003286:	460f      	mov	r7, r1
 8003288:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  if ((phost->device.is_connected == 0) || 
 800328c:	b3bd      	cbz	r5, 80032fe <USBH_MSC_Write+0x82>
      (phost->gState != HOST_CLASS) || 
 800328e:	7805      	ldrb	r5, [r0, #0]
  if ((phost->device.is_connected == 0) || 
 8003290:	2d0a      	cmp	r5, #10
 8003292:	d134      	bne.n	80032fe <USBH_MSC_Write+0x82>
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;   
 8003294:	f8d0 5374 	ldr.w	r5, [r0, #884]	; 0x374
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8003298:	2634      	movs	r6, #52	; 0x34
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;   
 800329a:	69ed      	ldr	r5, [r5, #28]
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800329c:	fb06 5601 	mla	r6, r6, r1, r5
      (phost->gState != HOST_CLASS) || 
 80032a0:	f896 e090 	ldrb.w	lr, [r6, #144]	; 0x90
 80032a4:	f1be 0f01 	cmp.w	lr, #1
 80032a8:	d129      	bne.n	80032fe <USBH_MSC_Write+0x82>
  {
    return  USBH_FAIL;
  }
  MSC_Handle->state = MSC_WRITE;
 80032aa:	f04f 0e07 	mov.w	lr, #7
 80032ae:	f885 e00c 	strb.w	lr, [r5, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 80032b2:	f886 e090 	strb.w	lr, [r6, #144]	; 0x90
                     length);
  
  timeout = phost->Timer;
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
  {
    if(((phost->Timer - timeout) >  (10000 * length)) || (phost->device.is_connected == 0))
 80032b6:	f242 7610 	movw	r6, #10000	; 0x2710
  MSC_Handle->rw_lun = lun;
 80032ba:	f8a5 10fa 	strh.w	r1, [r5, #250]	; 0xfa
  USBH_MSC_SCSI_Write(phost,
 80032be:	f8cd 8000 	str.w	r8, [sp]
 80032c2:	f000 fa6b 	bl	800379c <USBH_MSC_SCSI_Write>
    if(((phost->Timer - timeout) >  (10000 * length)) || (phost->device.is_connected == 0))
 80032c6:	fb06 f608 	mul.w	r6, r6, r8
  timeout = phost->Timer;
 80032ca:	f8d4 93b8 	ldr.w	r9, [r4, #952]	; 0x3b8
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80032ce:	4639      	mov	r1, r7
 80032d0:	4620      	mov	r0, r4
 80032d2:	f7ff ff1f 	bl	8003114 <USBH_MSC_RdWrProcess>
 80032d6:	2801      	cmp	r0, #1
 80032d8:	d005      	beq.n	80032e6 <USBH_MSC_Write+0x6a>
    {
      MSC_Handle->state = MSC_IDLE;
      return USBH_FAIL;
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80032da:	2301      	movs	r3, #1
  return USBH_OK;
 80032dc:	2000      	movs	r0, #0
  MSC_Handle->state = MSC_IDLE;
 80032de:	732b      	strb	r3, [r5, #12]
}
 80032e0:	b003      	add	sp, #12
 80032e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(((phost->Timer - timeout) >  (10000 * length)) || (phost->device.is_connected == 0))
 80032e6:	f8d4 33b8 	ldr.w	r3, [r4, #952]	; 0x3b8
 80032ea:	eba3 0309 	sub.w	r3, r3, r9
 80032ee:	42b3      	cmp	r3, r6
 80032f0:	d803      	bhi.n	80032fa <USBH_MSC_Write+0x7e>
 80032f2:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1e9      	bne.n	80032ce <USBH_MSC_Write+0x52>
      MSC_Handle->state = MSC_IDLE;
 80032fa:	2301      	movs	r3, #1
 80032fc:	732b      	strb	r3, [r5, #12]
    return  USBH_FAIL;
 80032fe:	2002      	movs	r0, #2
 8003300:	e7ee      	b.n	80032e0 <USBH_MSC_Write+0x64>

08003302 <USBH_MSC_BOT_REQ_Reset>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
  
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS | \
 8003302:	2221      	movs	r2, #33	; 0x21
 8003304:	7402      	strb	r2, [r0, #16]
                              USB_REQ_RECIPIENT_INTERFACE;
  
  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8003306:	22ff      	movs	r2, #255	; 0xff
 8003308:	7442      	strb	r2, [r0, #17]
  phost->Control.setup.b.wValue.w = 0;
 800330a:	2200      	movs	r2, #0
 800330c:	8242      	strh	r2, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0;
  phost->Control.setup.b.wLength.w = 0;           
  
  return USBH_CtlReq(phost, 0 , 0 );  
 800330e:	4611      	mov	r1, r2
  phost->Control.setup.b.wIndex.w = 0;
 8003310:	8282      	strh	r2, [r0, #20]
  phost->Control.setup.b.wLength.w = 0;           
 8003312:	82c2      	strh	r2, [r0, #22]
  return USBH_CtlReq(phost, 0 , 0 );  
 8003314:	f000 bd12 	b.w	8003d3c <USBH_CtlReq>

08003318 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8003318:	22a1      	movs	r2, #161	; 0xa1
 800331a:	7402      	strb	r2, [r0, #16]
                              USB_REQ_RECIPIENT_INTERFACE;
  
  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800331c:	22fe      	movs	r2, #254	; 0xfe
 800331e:	7442      	strb	r2, [r0, #17]
  phost->Control.setup.b.wValue.w = 0;
 8003320:	2200      	movs	r2, #0
 8003322:	8242      	strh	r2, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0;
 8003324:	8282      	strh	r2, [r0, #20]
  phost->Control.setup.b.wLength.w = 1;           
 8003326:	2201      	movs	r2, #1
 8003328:	82c2      	strh	r2, [r0, #22]
  
  return USBH_CtlReq(phost, Maxlun , 1 ); 
 800332a:	f000 bd07 	b.w	8003d3c <USBH_CtlReq>
	...

08003330 <USBH_MSC_BOT_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
  
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003330:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
  MSC_Handle->hbot.state = BOT_SEND_CBW;    
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;   
  
  return USBH_OK;
}
 8003334:	2000      	movs	r0, #0
  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8003336:	4a05      	ldr	r2, [pc, #20]	; (800334c <USBH_MSC_BOT_Init+0x1c>)
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003338:	69db      	ldr	r3, [r3, #28]
  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800333a:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800333c:	4a04      	ldr	r2, [pc, #16]	; (8003350 <USBH_MSC_BOT_Init+0x20>)
 800333e:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;    
 8003340:	2201      	movs	r2, #1
 8003342:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;   
 8003346:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
}
 800334a:	4770      	bx	lr
 800334c:	43425355 	.word	0x43425355
 8003350:	20304050 	.word	0x20304050

08003354 <USBH_MSC_BOT_Process>:
{
  USBH_StatusTypeDef   status = USBH_BUSY;
  USBH_StatusTypeDef   error  = USBH_BUSY;  
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003354:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
{
 8003358:	b573      	push	{r0, r1, r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800335a:	69dc      	ldr	r4, [r3, #28]
{
 800335c:	4606      	mov	r6, r0
  uint8_t toggle = 0;
  
  switch (MSC_Handle->hbot.state)
 800335e:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8003362:	3b01      	subs	r3, #1
 8003364:	2b0a      	cmp	r3, #10
 8003366:	d832      	bhi.n	80033ce <USBH_MSC_BOT_Process+0x7a>
 8003368:	e8df f013 	tbh	[pc, r3, lsl #1]
 800336c:	001b000b 	.word	0x001b000b
 8003370:	004a0040 	.word	0x004a0040
 8003374:	00750069 	.word	0x00750069
 8003378:	00a7009f 	.word	0x00a7009f
 800337c:	00dc00d1 	.word	0x00dc00d1
 8003380:	00f5      	.short	0x00f5
  {
  case BOT_SEND_CBW:
    MSC_Handle->hbot.cbw.field.LUN = lun;
    MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;    
 8003382:	2302      	movs	r3, #2
    USBH_BulkSendData (phost,
 8003384:	2501      	movs	r5, #1
    MSC_Handle->hbot.cbw.field.LUN = lun;
 8003386:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
    USBH_BulkSendData (phost,
 800338a:	221f      	movs	r2, #31
    MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;    
 800338c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    USBH_BulkSendData (phost,
 8003390:	f104 0154 	add.w	r1, r4, #84	; 0x54
 8003394:	7963      	ldrb	r3, [r4, #5]
 8003396:	9500      	str	r5, [sp, #0]
 8003398:	f000 ff32 	bl	8004200 <USBH_BulkSendData>
    
  default:      
    break;
  }
  return status;
}
 800339c:	4628      	mov	r0, r5
 800339e:	b002      	add	sp, #8
 80033a0:	bd70      	pop	{r4, r5, r6, pc}
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe); 
 80033a2:	7961      	ldrb	r1, [r4, #5]
 80033a4:	f008 fad4 	bl	800b950 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 80033a8:	2801      	cmp	r0, #1
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe); 
 80033aa:	4601      	mov	r1, r0
    if(URB_Status == USBH_URB_DONE)
 80033ac:	d113      	bne.n	80033d6 <USBH_MSC_BOT_Process+0x82>
      if ( MSC_Handle->hbot.cbw.field.DataTransferLength != 0 )
 80033ae:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80033b0:	b17b      	cbz	r3, 80033d2 <USBH_MSC_BOT_Process+0x7e>
        if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 80033b2:	f994 3060 	ldrsb.w	r3, [r4, #96]	; 0x60
 80033b6:	2b00      	cmp	r3, #0
          MSC_Handle->hbot.state = BOT_DATA_IN;
 80033b8:	bfb4      	ite	lt
 80033ba:	2303      	movlt	r3, #3
          MSC_Handle->hbot.state = BOT_DATA_OUT;
 80033bc:	2305      	movge	r3, #5
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80033be:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
 80033c2:	2200      	movs	r2, #0
 80033c4:	2102      	movs	r1, #2
 80033c6:	f8d6 03c8 	ldr.w	r0, [r6, #968]	; 0x3c8
 80033ca:	f001 f85b 	bl	8004484 <osMessagePut>
  USBH_StatusTypeDef   status = USBH_BUSY;
 80033ce:	2501      	movs	r5, #1
 80033d0:	e7e4      	b.n	800339c <USBH_MSC_BOT_Process+0x48>
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80033d2:	2307      	movs	r3, #7
 80033d4:	e7f3      	b.n	80033be <USBH_MSC_BOT_Process+0x6a>
    else if(URB_Status == USBH_URB_NOTREADY)
 80033d6:	2802      	cmp	r0, #2
 80033d8:	d163      	bne.n	80034a2 <USBH_MSC_BOT_Process+0x14e>
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80033da:	2501      	movs	r5, #1
    osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
 80033dc:	2200      	movs	r2, #0
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80033de:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
 80033e2:	f8d6 03c8 	ldr.w	r0, [r6, #968]	; 0x3c8
 80033e6:	f001 f84d 	bl	8004484 <osMessagePut>
 80033ea:	e7d7      	b.n	800339c <USBH_MSC_BOT_Process+0x48>
    USBH_BulkReceiveData (phost,
 80033ec:	7923      	ldrb	r3, [r4, #4]
 80033ee:	8962      	ldrh	r2, [r4, #10]
 80033f0:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80033f4:	f000 ff1c 	bl	8004230 <USBH_BulkReceiveData>
    MSC_Handle->hbot.state  = BOT_DATA_IN_WAIT;
 80033f8:	2304      	movs	r3, #4
      MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 80033fa:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 80033fe:	e7e6      	b.n	80033ce <USBH_MSC_BOT_Process+0x7a>
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe); 
 8003400:	7921      	ldrb	r1, [r4, #4]
 8003402:	f008 faa5 	bl	800b950 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE) 
 8003406:	2801      	cmp	r0, #1
 8003408:	d17c      	bne.n	8003504 <USBH_MSC_BOT_Process+0x1b0>
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800340a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800340c:	8962      	ldrh	r2, [r4, #10]
 800340e:	4293      	cmp	r3, r2
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8003410:	bf85      	ittet	hi
 8003412:	f8d4 108c 	ldrhi.w	r1, [r4, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;  
 8003416:	1a9b      	subhi	r3, r3, r2
        MSC_Handle->hbot.cbw.field.DataTransferLength = 0;
 8003418:	2300      	movls	r3, #0
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800341a:	1889      	addhi	r1, r1, r2
        MSC_Handle->hbot.cbw.field.DataTransferLength = 0;
 800341c:	65e3      	str	r3, [r4, #92]	; 0x5c
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > 0)
 800341e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8003420:	bf88      	it	hi
 8003422:	f8c4 108c 	strhi.w	r1, [r4, #140]	; 0x8c
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > 0)
 8003426:	b133      	cbz	r3, 8003436 <USBH_MSC_BOT_Process+0xe2>
        USBH_BulkReceiveData (phost,
 8003428:	7923      	ldrb	r3, [r4, #4]
 800342a:	4630      	mov	r0, r6
 800342c:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8003430:	f000 fefe 	bl	8004230 <USBH_BulkReceiveData>
 8003434:	e7cb      	b.n	80033ce <USBH_MSC_BOT_Process+0x7a>
        MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8003436:	2207      	movs	r2, #7
 8003438:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
 800343c:	e7c1      	b.n	80033c2 <USBH_MSC_BOT_Process+0x6e>
    USBH_BulkSendData (phost,
 800343e:	2501      	movs	r5, #1
 8003440:	7963      	ldrb	r3, [r4, #5]
 8003442:	8922      	ldrh	r2, [r4, #8]
 8003444:	9500      	str	r5, [sp, #0]
 8003446:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800344a:	f000 fed9 	bl	8004200 <USBH_BulkSendData>
    MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800344e:	2306      	movs	r3, #6
      MSC_Handle->hbot.state = BOT_SEND_CBW; 
 8003450:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8003454:	e7a2      	b.n	800339c <USBH_MSC_BOT_Process+0x48>
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);     
 8003456:	7961      	ldrb	r1, [r4, #5]
 8003458:	f008 fa7a 	bl	800b950 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 800345c:	2801      	cmp	r0, #1
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);     
 800345e:	4601      	mov	r1, r0
    if(URB_Status == USBH_URB_DONE)
 8003460:	d118      	bne.n	8003494 <USBH_MSC_BOT_Process+0x140>
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8003462:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003464:	8922      	ldrh	r2, [r4, #8]
 8003466:	4293      	cmp	r3, r2
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8003468:	bf85      	ittet	hi
 800346a:	f8d4 108c 	ldrhi.w	r1, [r4, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize; 
 800346e:	1a9b      	subhi	r3, r3, r2
        MSC_Handle->hbot.cbw.field.DataTransferLength = 0;
 8003470:	2300      	movls	r3, #0
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8003472:	1889      	addhi	r1, r1, r2
        MSC_Handle->hbot.cbw.field.DataTransferLength = 0;
 8003474:	65e3      	str	r3, [r4, #92]	; 0x5c
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > 0)
 8003476:	6de3      	ldr	r3, [r4, #92]	; 0x5c
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8003478:	bf88      	it	hi
 800347a:	f8c4 108c 	strhi.w	r1, [r4, #140]	; 0x8c
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > 0)
 800347e:	2b00      	cmp	r3, #0
 8003480:	d0a7      	beq.n	80033d2 <USBH_MSC_BOT_Process+0x7e>
        USBH_BulkSendData (phost,
 8003482:	2101      	movs	r1, #1
 8003484:	7963      	ldrb	r3, [r4, #5]
 8003486:	4630      	mov	r0, r6
 8003488:	9100      	str	r1, [sp, #0]
 800348a:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800348e:	f000 feb7 	bl	8004200 <USBH_BulkSendData>
 8003492:	e796      	b.n	80033c2 <USBH_MSC_BOT_Process+0x6e>
    else if(URB_Status == USBH_URB_NOTREADY)
 8003494:	2802      	cmp	r0, #2
 8003496:	d104      	bne.n	80034a2 <USBH_MSC_BOT_Process+0x14e>
      MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8003498:	2305      	movs	r3, #5
    osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
 800349a:	2200      	movs	r2, #0
      MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800349c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 80034a0:	e791      	b.n	80033c6 <USBH_MSC_BOT_Process+0x72>
    else if(URB_Status == USBH_URB_STALL)
 80034a2:	2905      	cmp	r1, #5
 80034a4:	d193      	bne.n	80033ce <USBH_MSC_BOT_Process+0x7a>
      MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 80034a6:	230a      	movs	r3, #10
 80034a8:	e789      	b.n	80033be <USBH_MSC_BOT_Process+0x6a>
    USBH_BulkReceiveData (phost,
 80034aa:	7923      	ldrb	r3, [r4, #4]
 80034ac:	220d      	movs	r2, #13
 80034ae:	f104 0178 	add.w	r1, r4, #120	; 0x78
 80034b2:	f000 febd 	bl	8004230 <USBH_BulkReceiveData>
    MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 80034b6:	2308      	movs	r3, #8
 80034b8:	e79f      	b.n	80033fa <USBH_MSC_BOT_Process+0xa6>
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe); 
 80034ba:	7921      	ldrb	r1, [r4, #4]
 80034bc:	f008 fa48 	bl	800b950 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 80034c0:	2801      	cmp	r0, #1
 80034c2:	d11f      	bne.n	8003504 <USBH_MSC_BOT_Process+0x1b0>
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80034c4:	f8d6 3374 	ldr.w	r3, [r6, #884]	; 0x374
      MSC_Handle->hbot.state = BOT_SEND_CBW;    
 80034c8:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;        
 80034cc:	f884 0052 	strb.w	r0, [r4, #82]	; 0x52
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
  
    /*Checking if the transfer length is different than 13*/    
    if(USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 80034d0:	4630      	mov	r0, r6
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80034d2:	69dc      	ldr	r4, [r3, #28]
    if(USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 80034d4:	7921      	ldrb	r1, [r4, #4]
 80034d6:	f008 f9f7 	bl	800b8c8 <USBH_LL_GetLastXferSize>
 80034da:	280d      	cmp	r0, #13
 80034dc:	d110      	bne.n	8003500 <USBH_MSC_BOT_Process+0x1ac>
    }
    else
    { /* CSW length is Correct */
      
      /* Check validity of the CSW Signature and CSWStatus */
      if(MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 80034de:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80034e0:	4b21      	ldr	r3, [pc, #132]	; (8003568 <USBH_MSC_BOT_Process+0x214>)
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d10c      	bne.n	8003500 <USBH_MSC_BOT_Process+0x1ac>
      {/* Check Condition 1. dCSWSignature is equal to 53425355h */
        
        if(MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 80034e6:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80034e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d108      	bne.n	8003500 <USBH_MSC_BOT_Process+0x1ac>
        {
          /* Check Condition 3. dCSWTag matches the dCBWTag from the 
          corresponding CBW */

          if(MSC_Handle->hbot.csw.field.Status == 0) 
 80034ee:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
        status = USBH_OK;
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	bf14      	ite	ne
 80034f6:	2502      	movne	r5, #2
 80034f8:	2500      	moveq	r5, #0
      osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
 80034fa:	2200      	movs	r2, #0
 80034fc:	2102      	movs	r1, #2
 80034fe:	e770      	b.n	80033e2 <USBH_MSC_BOT_Process+0x8e>
        status = USBH_FAIL;
 8003500:	2502      	movs	r5, #2
 8003502:	e7fa      	b.n	80034fa <USBH_MSC_BOT_Process+0x1a6>
    else if(URB_Status == USBH_URB_STALL)     
 8003504:	2805      	cmp	r0, #5
 8003506:	f47f af62 	bne.w	80033ce <USBH_MSC_BOT_Process+0x7a>
      MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800350a:	2309      	movs	r3, #9
 800350c:	e757      	b.n	80033be <USBH_MSC_BOT_Process+0x6a>
    status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800350e:	79e1      	ldrb	r1, [r4, #7]
 8003510:	f000 fe30 	bl	8004174 <USBH_ClrFeature>
    if (error == USBH_OK)
 8003514:	b908      	cbnz	r0, 800351a <USBH_MSC_BOT_Process+0x1c6>
      MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8003516:	2307      	movs	r3, #7
 8003518:	e76f      	b.n	80033fa <USBH_MSC_BOT_Process+0xa6>
    else if (error == USBH_UNRECOVERED_ERROR)
 800351a:	2804      	cmp	r0, #4
    else if (error == USBH_UNRECOVERED_ERROR)
 800351c:	f47f af57 	bne.w	80033ce <USBH_MSC_BOT_Process+0x7a>
      MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8003520:	230b      	movs	r3, #11
 8003522:	e76a      	b.n	80033fa <USBH_MSC_BOT_Process+0xa6>
    status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8003524:	79a1      	ldrb	r1, [r4, #6]
 8003526:	f000 fe25 	bl	8004174 <USBH_ClrFeature>
    if ( error == USBH_OK)
 800352a:	4605      	mov	r5, r0
 800352c:	b988      	cbnz	r0, 8003552 <USBH_MSC_BOT_Process+0x1fe>
      toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe); 
 800352e:	7961      	ldrb	r1, [r4, #5]
 8003530:	4630      	mov	r0, r6
 8003532:	f008 fa26 	bl	800b982 <USBH_LL_GetToggle>
      USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1- toggle);   
 8003536:	f1c0 0201 	rsb	r2, r0, #1
 800353a:	7961      	ldrb	r1, [r4, #5]
 800353c:	4630      	mov	r0, r6
 800353e:	b2d2      	uxtb	r2, r2
 8003540:	f008 fa10 	bl	800b964 <USBH_LL_SetToggle>
      USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0);  
 8003544:	462a      	mov	r2, r5
 8003546:	7921      	ldrb	r1, [r4, #4]
 8003548:	4630      	mov	r0, r6
 800354a:	f008 fa0b 	bl	800b964 <USBH_LL_SetToggle>
      MSC_Handle->hbot.state = BOT_ERROR_IN;        
 800354e:	2309      	movs	r3, #9
 8003550:	e753      	b.n	80033fa <USBH_MSC_BOT_Process+0xa6>
    else if (error == USBH_UNRECOVERED_ERROR)
 8003552:	2804      	cmp	r0, #4
 8003554:	e7e2      	b.n	800351c <USBH_MSC_BOT_Process+0x1c8>
    status = USBH_MSC_BOT_REQ_Reset(phost);
 8003556:	f7ff fed4 	bl	8003302 <USBH_MSC_BOT_REQ_Reset>
    if ( status == USBH_OK)
 800355a:	4605      	mov	r5, r0
 800355c:	2800      	cmp	r0, #0
 800355e:	f47f af1d 	bne.w	800339c <USBH_MSC_BOT_Process+0x48>
      MSC_Handle->hbot.state = BOT_SEND_CBW; 
 8003562:	2301      	movs	r3, #1
 8003564:	e774      	b.n	8003450 <USBH_MSC_BOT_Process+0xfc>
 8003566:	bf00      	nop
 8003568:	53425355 	.word	0x53425355

0800356c <USBH_MSC_SCSI_TestUnitReady>:
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady (USBH_HandleTypeDef *phost, 
                                                uint8_t lun)
{
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800356c:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
{
 8003570:	b570      	push	{r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003572:	69dc      	ldr	r4, [r3, #28]
  
  switch(MSC_Handle->hbot.cmd_state)
 8003574:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 8003578:	2d01      	cmp	r5, #1
 800357a:	d003      	beq.n	8003584 <USBH_MSC_SCSI_TestUnitReady+0x18>
 800357c:	2d02      	cmp	r5, #2
 800357e:	d017      	beq.n	80035b0 <USBH_MSC_SCSI_TestUnitReady+0x44>
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8003580:	2002      	movs	r0, #2
  default:
    break;
  }
  
  return error;
}
 8003582:	bd70      	pop	{r4, r5, r6, pc}
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;     
 8003584:	2600      	movs	r6, #0
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8003586:	230a      	movs	r3, #10
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8003588:	2210      	movs	r2, #16
 800358a:	f104 0063 	add.w	r0, r4, #99	; 0x63
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800358e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8003592:	4631      	mov	r1, r6
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;     
 8003594:	65e6      	str	r6, [r4, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8003596:	f884 6060 	strb.w	r6, [r4, #96]	; 0x60
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800359a:	f008 faf1 	bl	800bb80 <memset>
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800359e:	2302      	movs	r3, #2
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY; 
 80035a0:	f884 6063 	strb.w	r6, [r4, #99]	; 0x63
    error = USBH_BUSY; 
 80035a4:	4628      	mov	r0, r5
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 80035a6:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80035aa:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
    break;
 80035ae:	bd70      	pop	{r4, r5, r6, pc}
}
 80035b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    error = USBH_MSC_BOT_Process(phost, lun);
 80035b4:	f7ff bece 	b.w	8003354 <USBH_MSC_BOT_Process>

080035b8 <USBH_MSC_SCSI_ReadCapacity>:
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity (USBH_HandleTypeDef *phost, 
                                               uint8_t lun,
                                               SCSI_CapacityTypeDef *capacity)
{
  USBH_StatusTypeDef    error = USBH_BUSY ;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80035b8:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
{
 80035bc:	b570      	push	{r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80035be:	69dc      	ldr	r4, [r3, #28]
{
 80035c0:	4616      	mov	r6, r2
  
  switch(MSC_Handle->hbot.cmd_state)
 80035c2:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 80035c6:	2d01      	cmp	r5, #1
 80035c8:	d003      	beq.n	80035d2 <USBH_MSC_SCSI_ReadCapacity+0x1a>
 80035ca:	2d02      	cmp	r5, #2
 80035cc:	d01c      	beq.n	8003608 <USBH_MSC_SCSI_ReadCapacity+0x50>
  USBH_StatusTypeDef    error = USBH_BUSY ;
 80035ce:	2001      	movs	r0, #1
  default:
    break;
  }
  
  return error;
}
 80035d0:	bd70      	pop	{r4, r5, r6, pc}
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 80035d2:	2308      	movs	r3, #8
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80035d4:	2210      	movs	r2, #16
 80035d6:	2100      	movs	r1, #0
 80035d8:	f104 0063 	add.w	r0, r4, #99	; 0x63
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 80035dc:	65e3      	str	r3, [r4, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80035de:	2380      	movs	r3, #128	; 0x80
 80035e0:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80035e4:	230a      	movs	r3, #10
 80035e6:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80035ea:	f008 fac9 	bl	800bb80 <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10; 
 80035ee:	2325      	movs	r3, #37	; 0x25
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 80035f0:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10; 
 80035f4:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80035f8:	2302      	movs	r3, #2
 80035fa:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
    MSC_Handle->hbot.pbuf = (uint8_t *)MSC_Handle->hbot.data;
 80035fe:	f104 0310 	add.w	r3, r4, #16
 8003602:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8003606:	e7e2      	b.n	80035ce <USBH_MSC_SCSI_ReadCapacity+0x16>
    error = USBH_MSC_BOT_Process(phost, lun);
 8003608:	f7ff fea4 	bl	8003354 <USBH_MSC_BOT_Process>
    if(error == USBH_OK)
 800360c:	2800      	cmp	r0, #0
 800360e:	d1df      	bne.n	80035d0 <USBH_MSC_SCSI_ReadCapacity+0x18>
      capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | (MSC_Handle->hbot.pbuf[2] << 8) |\
 8003610:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
                           (MSC_Handle->hbot.pbuf[1] << 16) | (MSC_Handle->hbot.pbuf[0] << 24);
 8003614:	784b      	ldrb	r3, [r1, #1]
      capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | (MSC_Handle->hbot.pbuf[2] << 8) |\
 8003616:	788a      	ldrb	r2, [r1, #2]
                           (MSC_Handle->hbot.pbuf[1] << 16) | (MSC_Handle->hbot.pbuf[0] << 24);
 8003618:	041b      	lsls	r3, r3, #16
      capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | (MSC_Handle->hbot.pbuf[2] << 8) |\
 800361a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800361e:	78ca      	ldrb	r2, [r1, #3]
 8003620:	4313      	orrs	r3, r2
                           (MSC_Handle->hbot.pbuf[1] << 16) | (MSC_Handle->hbot.pbuf[0] << 24);
 8003622:	780a      	ldrb	r2, [r1, #0]
 8003624:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
      capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | (MSC_Handle->hbot.pbuf[2] << 8) |\
 8003628:	6033      	str	r3, [r6, #0]
      capacity->block_size = MSC_Handle->hbot.pbuf[7] | (MSC_Handle->hbot.pbuf[6] << 8); 
 800362a:	798a      	ldrb	r2, [r1, #6]
 800362c:	79cb      	ldrb	r3, [r1, #7]
 800362e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003632:	80b3      	strh	r3, [r6, #4]
 8003634:	bd70      	pop	{r4, r5, r6, pc}

08003636 <USBH_MSC_SCSI_Inquiry>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry (USBH_HandleTypeDef *phost, 
                                               uint8_t lun, 
                                               SCSI_StdInquiryDataTypeDef *inquiry)
{
 8003636:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003638:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
{
 800363c:	460f      	mov	r7, r1
 800363e:	4616      	mov	r6, r2
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003640:	69dc      	ldr	r4, [r3, #28]
  switch(MSC_Handle->hbot.cmd_state)
 8003642:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 8003646:	2d01      	cmp	r5, #1
 8003648:	d003      	beq.n	8003652 <USBH_MSC_SCSI_Inquiry+0x1c>
 800364a:	2d02      	cmp	r5, #2
 800364c:	d027      	beq.n	800369e <USBH_MSC_SCSI_Inquiry+0x68>
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800364e:	2502      	movs	r5, #2
 8003650:	e023      	b.n	800369a <USBH_MSC_SCSI_Inquiry+0x64>
  {
  case BOT_CMD_SEND:  
    
    /*Prepare the CBW and relevent field*/
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8003652:	2380      	movs	r3, #128	; 0x80
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8003654:	2224      	movs	r2, #36	; 0x24
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
    
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY; 
 8003656:	2112      	movs	r1, #18
    MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);    
 8003658:	017f      	lsls	r7, r7, #5
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800365a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800365e:	230a      	movs	r3, #10
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8003660:	65e2      	str	r2, [r4, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8003662:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8003666:	2300      	movs	r3, #0
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY; 
 8003668:	f884 1063 	strb.w	r1, [r4, #99]	; 0x63
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800366c:	f8c4 3067 	str.w	r3, [r4, #103]	; 0x67
 8003670:	f8a4 306b 	strh.w	r3, [r4, #107]	; 0x6b
    MSC_Handle->hbot.cbw.field.CB[2]  = 0;    
 8003674:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
    MSC_Handle->hbot.cbw.field.CB[3]  = 0;    
 8003678:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
    MSC_Handle->hbot.cbw.field.CB[4]  = 0x24;    
    MSC_Handle->hbot.cbw.field.CB[5]  = 0;    
 800367c:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
        
    MSC_Handle->hbot.state = BOT_SEND_CBW;

    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8003680:	2302      	movs	r3, #2
    MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);    
 8003682:	f884 7064 	strb.w	r7, [r4, #100]	; 0x64
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8003686:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
    MSC_Handle->hbot.pbuf = (uint8_t *)MSC_Handle->hbot.data;
 800368a:	f104 0310 	add.w	r3, r4, #16
    MSC_Handle->hbot.cbw.field.CB[4]  = 0x24;    
 800368e:	f884 2067 	strb.w	r2, [r4, #103]	; 0x67
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8003692:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
    MSC_Handle->hbot.pbuf = (uint8_t *)MSC_Handle->hbot.data;
 8003696:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  default:
    break;
  }
  
  return error;
}
 800369a:	4628      	mov	r0, r5
 800369c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    error = USBH_MSC_BOT_Process(phost, lun);
 800369e:	f7ff fe59 	bl	8003354 <USBH_MSC_BOT_Process>
    if(error == USBH_OK)
 80036a2:	4605      	mov	r5, r0
 80036a4:	2800      	cmp	r0, #0
 80036a6:	d1f8      	bne.n	800369a <USBH_MSC_SCSI_Inquiry+0x64>
      USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 80036a8:	4601      	mov	r1, r0
 80036aa:	2222      	movs	r2, #34	; 0x22
 80036ac:	4630      	mov	r0, r6
 80036ae:	f008 fa67 	bl	800bb80 <memset>
      inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1F;
 80036b2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	f003 031f 	and.w	r3, r3, #31
 80036bc:	7073      	strb	r3, [r6, #1]
      inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5;  
 80036be:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	095b      	lsrs	r3, r3, #5
 80036c6:	7033      	strb	r3, [r6, #0]
      inquiry->RemovableMedia = (MSC_Handle->hbot.pbuf[1] & 0x80)== 0x80;
 80036c8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80036cc:	785b      	ldrb	r3, [r3, #1]
 80036ce:	09db      	lsrs	r3, r3, #7
 80036d0:	70b3      	strb	r3, [r6, #2]
      USBH_memcpy (inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8);
 80036d2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80036d6:	f852 3f08 	ldr.w	r3, [r2, #8]!
 80036da:	f8c6 3003 	str.w	r3, [r6, #3]
 80036de:	6853      	ldr	r3, [r2, #4]
      USBH_memcpy (inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16);
 80036e0:	f106 020c 	add.w	r2, r6, #12
      USBH_memcpy (inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8);
 80036e4:	f8c6 3007 	str.w	r3, [r6, #7]
      USBH_memcpy (inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16);
 80036e8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80036ec:	3310      	adds	r3, #16
 80036ee:	f103 0110 	add.w	r1, r3, #16
 80036f2:	f853 0b04 	ldr.w	r0, [r3], #4
 80036f6:	428b      	cmp	r3, r1
 80036f8:	f842 0b04 	str.w	r0, [r2], #4
 80036fc:	d1f9      	bne.n	80036f2 <USBH_MSC_SCSI_Inquiry+0xbc>
      USBH_memcpy (inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4);    
 80036fe:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8003702:	6a1b      	ldr	r3, [r3, #32]
 8003704:	f8c6 301d 	str.w	r3, [r6, #29]
 8003708:	e7c7      	b.n	800369a <USBH_MSC_SCSI_Inquiry+0x64>

0800370a <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense (USBH_HandleTypeDef *phost, 
                                               uint8_t lun, 
                                               SCSI_SenseTypeDef *sense_data)
{
 800370a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800370c:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
{
 8003710:	460f      	mov	r7, r1
 8003712:	4616      	mov	r6, r2
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003714:	69dc      	ldr	r4, [r3, #28]
  
  switch(MSC_Handle->hbot.cmd_state)
 8003716:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 800371a:	2d01      	cmp	r5, #1
 800371c:	d003      	beq.n	8003726 <USBH_MSC_SCSI_RequestSense+0x1c>
 800371e:	2d02      	cmp	r5, #2
 8003720:	d029      	beq.n	8003776 <USBH_MSC_SCSI_RequestSense+0x6c>
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8003722:	2002      	movs	r0, #2
  default:
    break;
  }
  
  return error;
}
 8003724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8003726:	2380      	movs	r3, #128	; 0x80
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8003728:	260e      	movs	r6, #14
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800372a:	2210      	movs	r2, #16
 800372c:	2100      	movs	r1, #0
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800372e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8003732:	230a      	movs	r3, #10
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8003734:	65e6      	str	r6, [r4, #92]	; 0x5c
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8003736:	f104 0063 	add.w	r0, r4, #99	; 0x63
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800373a:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
    MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5); 
 800373e:	017f      	lsls	r7, r7, #5
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8003740:	f008 fa1e 	bl	800bb80 <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE; 
 8003744:	2303      	movs	r3, #3
    MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5); 
 8003746:	f884 7064 	strb.w	r7, [r4, #100]	; 0x64
    error = USBH_BUSY; 
 800374a:	4628      	mov	r0, r5
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE; 
 800374c:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
    MSC_Handle->hbot.cbw.field.CB[2]  = 0; 
 8003750:	2300      	movs	r3, #0
    MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8003752:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
    MSC_Handle->hbot.cbw.field.CB[2]  = 0; 
 8003756:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
    MSC_Handle->hbot.cbw.field.CB[3]  = 0; 
 800375a:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
    MSC_Handle->hbot.cbw.field.CB[5]  = 0;       
 800375e:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8003762:	2302      	movs	r3, #2
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8003764:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8003768:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
    MSC_Handle->hbot.pbuf = (uint8_t *)MSC_Handle->hbot.data;
 800376c:	f104 0310 	add.w	r3, r4, #16
 8003770:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    break;
 8003774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    error = USBH_MSC_BOT_Process(phost, lun);
 8003776:	f7ff fded 	bl	8003354 <USBH_MSC_BOT_Process>
    if(error == USBH_OK)
 800377a:	2800      	cmp	r0, #0
 800377c:	d1d2      	bne.n	8003724 <USBH_MSC_SCSI_RequestSense+0x1a>
      sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0F;  
 800377e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8003782:	789b      	ldrb	r3, [r3, #2]
 8003784:	f003 030f 	and.w	r3, r3, #15
 8003788:	7033      	strb	r3, [r6, #0]
      sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800378a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800378e:	7b1b      	ldrb	r3, [r3, #12]
 8003790:	7073      	strb	r3, [r6, #1]
      sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8003792:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8003796:	7b5b      	ldrb	r3, [r3, #13]
 8003798:	70b3      	strb	r3, [r6, #2]
 800379a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800379c <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                     uint8_t lun,
                                     uint32_t address,
                                     uint8_t *pbuf,
                                     uint32_t length)
{
 800379c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800379e:	461e      	mov	r6, r3
  USBH_StatusTypeDef    error = USBH_FAIL ;

  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80037a0:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
{
 80037a4:	9201      	str	r2, [sp, #4]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80037a6:	69dc      	ldr	r4, [r3, #28]
  
  switch(MSC_Handle->hbot.cmd_state)
 80037a8:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 80037ac:	2d01      	cmp	r5, #1
 80037ae:	d003      	beq.n	80037b8 <USBH_MSC_SCSI_Write+0x1c>
 80037b0:	2d02      	cmp	r5, #2
 80037b2:	d034      	beq.n	800381e <USBH_MSC_SCSI_Write+0x82>
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80037b4:	2002      	movs	r0, #2
 80037b6:	e030      	b.n	800381a <USBH_MSC_SCSI_Write+0x7e>
  {
  case BOT_CMD_SEND:  
    
    /*Prepare the CBW and relevent field*/
    MSC_Handle->hbot.cbw.field.DataTransferLength = length * 512;
 80037b8:	9a06      	ldr	r2, [sp, #24]
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80037ba:	230a      	movs	r3, #10
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80037bc:	2100      	movs	r1, #0
    
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80037be:	f104 0063 	add.w	r0, r4, #99	; 0x63
    MSC_Handle->hbot.cbw.field.DataTransferLength = length * 512;
 80037c2:	0252      	lsls	r2, r2, #9
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80037c4:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80037c8:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.DataTransferLength = length * 512;
 80037cc:	65e2      	str	r2, [r4, #92]	; 0x5c
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80037ce:	2210      	movs	r2, #16
 80037d0:	f008 f9d6 	bl	800bb80 <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10; 
 80037d4:	232a      	movs	r3, #42	; 0x2a

    
    MSC_Handle->hbot.state = BOT_SEND_CBW;
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
    MSC_Handle->hbot.pbuf = pbuf;
    error = USBH_BUSY; 
 80037d6:	4628      	mov	r0, r5
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 80037d8:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10; 
 80037dc:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
    MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t*)&address)[3]);
 80037e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    MSC_Handle->hbot.pbuf = pbuf;
 80037e4:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
    MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t*)&address)[3]);
 80037e8:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
    MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t*)&address)[2]);
 80037ec:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80037f0:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
    MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t*)&address)[1]);
 80037f4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80037f8:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
    MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t*)&address)[0]);
 80037fc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003800:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
    MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)&length)[1]) ; 
 8003804:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8003808:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
    MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)&length)[0]) ; 
 800380c:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8003810:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8003814:	2302      	movs	r3, #2
 8003816:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
  default:
    break;
  }
  
  return error;
}
 800381a:	b002      	add	sp, #8
 800381c:	bd70      	pop	{r4, r5, r6, pc}
    error = USBH_MSC_BOT_Process(phost, lun);
 800381e:	f7ff fd99 	bl	8003354 <USBH_MSC_BOT_Process>
    break;
 8003822:	e7fa      	b.n	800381a <USBH_MSC_SCSI_Write+0x7e>

08003824 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                     uint8_t lun,
                                     uint32_t address,
                                     uint8_t *pbuf,
                                     uint32_t length)
{
 8003824:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003826:	461e      	mov	r6, r3
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003828:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
{
 800382c:	9201      	str	r2, [sp, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800382e:	69dc      	ldr	r4, [r3, #28]
  
  switch(MSC_Handle->hbot.cmd_state)
 8003830:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 8003834:	2d01      	cmp	r5, #1
 8003836:	d003      	beq.n	8003840 <USBH_MSC_SCSI_Read+0x1c>
 8003838:	2d02      	cmp	r5, #2
 800383a:	d035      	beq.n	80038a8 <USBH_MSC_SCSI_Read+0x84>
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800383c:	2002      	movs	r0, #2
 800383e:	e031      	b.n	80038a4 <USBH_MSC_SCSI_Read+0x80>
  {
  case BOT_CMD_SEND:  
    
    /*Prepare the CBW and relevent field*/
    MSC_Handle->hbot.cbw.field.DataTransferLength = length * 512;
 8003840:	9a06      	ldr	r2, [sp, #24]
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8003842:	2380      	movs	r3, #128	; 0x80
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
    
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8003844:	2100      	movs	r1, #0
 8003846:	f104 0063 	add.w	r0, r4, #99	; 0x63
    MSC_Handle->hbot.cbw.field.DataTransferLength = length * 512;
 800384a:	0252      	lsls	r2, r2, #9
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800384c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8003850:	230a      	movs	r3, #10
    MSC_Handle->hbot.cbw.field.DataTransferLength = length * 512;
 8003852:	65e2      	str	r2, [r4, #92]	; 0x5c
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8003854:	2210      	movs	r2, #16
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8003856:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800385a:	f008 f991 	bl	800bb80 <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10; 
 800385e:	2328      	movs	r3, #40	; 0x28

    
    MSC_Handle->hbot.state = BOT_SEND_CBW;
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
    MSC_Handle->hbot.pbuf = pbuf;
    error = USBH_BUSY; 
 8003860:	4628      	mov	r0, r5
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8003862:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10; 
 8003866:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
    MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t*)&address)[3]);
 800386a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    MSC_Handle->hbot.pbuf = pbuf;
 800386e:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
    MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t*)&address)[3]);
 8003872:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
    MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t*)&address)[2]);
 8003876:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800387a:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
    MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t*)&address)[1]);
 800387e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003882:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
    MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t*)&address)[0]);
 8003886:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800388a:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
    MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)&length)[1]) ; 
 800388e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8003892:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
    MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)&length)[0]) ; 
 8003896:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800389a:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800389e:	2302      	movs	r3, #2
 80038a0:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
  default:
    break;
  }
  
  return error;
}
 80038a4:	b002      	add	sp, #8
 80038a6:	bd70      	pop	{r4, r5, r6, pc}
    error = USBH_MSC_BOT_Process(phost, lun);
 80038a8:	f7ff fd54 	bl	8003354 <USBH_MSC_BOT_Process>
    break;
 80038ac:	e7fa      	b.n	80038a4 <USBH_MSC_SCSI_Read+0x80>

080038ae <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80038ae:	f500 735f 	add.w	r3, r0, #892	; 0x37c
 80038b2:	f500 726e 	add.w	r2, r0, #952	; 0x3b8
  uint32_t i = 0;

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
  {
    phost->Pipes[i] = 0;
 80038b6:	2100      	movs	r1, #0
 80038b8:	f843 1b04 	str.w	r1, [r3], #4
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d1fb      	bne.n	80038b8 <DeInitStateMachine+0xa>
 80038c0:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 80038c4:	f500 7147 	add.w	r1, r0, #796	; 0x31c
  }
  
  for(i = 0; i< USBH_MAX_DATA_BUFFER; i++)
  {
    phost->device.Data[i] = 0;
 80038c8:	2300      	movs	r3, #0
 80038ca:	f802 3b01 	strb.w	r3, [r2], #1
  for(i = 0; i< USBH_MAX_DATA_BUFFER; i++)
 80038ce:	4291      	cmp	r1, r2
 80038d0:	d1fb      	bne.n	80038ca <DeInitStateMachine+0x1c>
  }
  
  phost->gState = HOST_IDLE;
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;
 80038d2:	2201      	movs	r2, #1
  phost->Timer = 0;  
  
  phost->Control.state = CTRL_SETUP;
  phost->Control.pipe_size = USBH_MPS_DEFAULT;  
 80038d4:	2140      	movs	r1, #64	; 0x40
  phost->gState = HOST_IDLE;
 80038d6:	7003      	strb	r3, [r0, #0]
  phost->EnumState = ENUM_IDLE;
 80038d8:	7043      	strb	r3, [r0, #1]
  phost->RequestState = CMD_SEND;
 80038da:	7082      	strb	r2, [r0, #2]
  phost->Timer = 0;  
 80038dc:	f8c0 33b8 	str.w	r3, [r0, #952]	; 0x3b8
  phost->Control.state = CTRL_SETUP;
 80038e0:	7602      	strb	r2, [r0, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;  
 80038e2:	7181      	strb	r1, [r0, #6]
  phost->Control.errorcount = 0;
 80038e4:	7643      	strb	r3, [r0, #25]
  
  phost->device.address = USBH_ADDRESS_DEFAULT;
 80038e6:	f880 331c 	strb.w	r3, [r0, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 80038ea:	f880 231d 	strb.w	r2, [r0, #797]	; 0x31d
  
  return USBH_OK;
}
 80038ee:	2000      	movs	r0, #0
 80038f0:	4770      	bx	lr
	...

080038f4 <USBH_Init>:
{
 80038f4:	b570      	push	{r4, r5, r6, lr}
 80038f6:	460c      	mov	r4, r1
 80038f8:	b088      	sub	sp, #32
  if(phost == NULL)
 80038fa:	4605      	mov	r5, r0
 80038fc:	b348      	cbz	r0, 8003952 <USBH_Init+0x5e>
  phost->pActiveClass = NULL;
 80038fe:	2300      	movs	r3, #0
  phost->id = id;
 8003900:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  phost->pActiveClass = NULL;
 8003904:	f8c0 3374 	str.w	r3, [r0, #884]	; 0x374
  phost->ClassNumber = 0;
 8003908:	f8c0 3378 	str.w	r3, [r0, #888]	; 0x378
  DeInitStateMachine(phost);
 800390c:	f7ff ffcf 	bl	80038ae <DeInitStateMachine>
  if(pUsrFunc != NULL)
 8003910:	b10c      	cbz	r4, 8003916 <USBH_Init+0x22>
    phost->pUser = pUsrFunc;
 8003912:	f8c5 43c4 	str.w	r4, [r5, #964]	; 0x3c4
  osMessageQDef(USBH_Queue, 10, uint16_t);
 8003916:	4c10      	ldr	r4, [pc, #64]	; (8003958 <USBH_Init+0x64>)
 8003918:	ab01      	add	r3, sp, #4
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0, USBH_PROCESS_STACK_SIZE);
 800391a:	ae03      	add	r6, sp, #12
  osMessageQDef(USBH_Queue, 10, uint16_t);
 800391c:	e894 0003 	ldmia.w	r4, {r0, r1}
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0, USBH_PROCESS_STACK_SIZE);
 8003920:	3408      	adds	r4, #8
  osMessageQDef(USBH_Queue, 10, uint16_t);
 8003922:	e883 0003 	stmia.w	r3, {r0, r1}
  phost->os_event = osMessageCreate (osMessageQ(USBH_Queue), NULL); 
 8003926:	2100      	movs	r1, #0
 8003928:	4618      	mov	r0, r3
 800392a:	f000 fda7 	bl	800447c <osMessageCreate>
 800392e:	f8c5 03c8 	str.w	r0, [r5, #968]	; 0x3c8
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0, USBH_PROCESS_STACK_SIZE);
 8003932:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003934:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003936:	6823      	ldr	r3, [r4, #0]
  phost->thread = osThreadCreate (osThread(USBH_Thread), phost);
 8003938:	4629      	mov	r1, r5
 800393a:	a803      	add	r0, sp, #12
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0, USBH_PROCESS_STACK_SIZE);
 800393c:	6033      	str	r3, [r6, #0]
  phost->thread = osThreadCreate (osThread(USBH_Thread), phost);
 800393e:	f000 fcf0 	bl	8004322 <osThreadCreate>
 8003942:	f8c5 03cc 	str.w	r0, [r5, #972]	; 0x3cc
  USBH_LL_Init(phost);
 8003946:	4628      	mov	r0, r5
 8003948:	f007 ff5a 	bl	800b800 <USBH_LL_Init>
  return USBH_OK;
 800394c:	2000      	movs	r0, #0
}
 800394e:	b008      	add	sp, #32
 8003950:	bd70      	pop	{r4, r5, r6, pc}
    return USBH_FAIL; 
 8003952:	2002      	movs	r0, #2
 8003954:	e7fb      	b.n	800394e <USBH_Init+0x5a>
 8003956:	bf00      	nop
 8003958:	0800ca0c 	.word	0x0800ca0c

0800395c <USBH_RegisterClass>:
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
  USBH_StatusTypeDef   status = USBH_OK;
  
  if(pclass != 0)
 800395c:	b149      	cbz	r1, 8003972 <USBH_RegisterClass+0x16>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800395e:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8003962:	b933      	cbnz	r3, 8003972 <USBH_RegisterClass+0x16>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8003964:	2201      	movs	r2, #1
 8003966:	f8c0 1370 	str.w	r1, [r0, #880]	; 0x370
 800396a:	f8c0 2378 	str.w	r2, [r0, #888]	; 0x378
      status = USBH_OK;
 800396e:	4618      	mov	r0, r3
 8003970:	4770      	bx	lr
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL; 
 8003972:	2002      	movs	r0, #2
  }
  
  return status;
}
 8003974:	4770      	bx	lr

08003976 <USBH_SelectInterface>:
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
  USBH_StatusTypeDef   status = USBH_OK;
  
  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8003976:	f890 3336 	ldrb.w	r3, [r0, #822]	; 0x336
 800397a:	428b      	cmp	r3, r1
  {
    phost->device.current_interface = interface;
 800397c:	bf86      	itte	hi
 800397e:	f880 131f 	strbhi.w	r1, [r0, #799]	; 0x31f
  USBH_StatusTypeDef   status = USBH_OK;
 8003982:	2000      	movhi	r0, #0
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );                 
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL; 
 8003984:	2002      	movls	r0, #2
  }
  return status;  
}
 8003986:	4770      	bx	lr

08003988 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8003988:	b530      	push	{r4, r5, lr}
 800398a:	2400      	movs	r4, #0
  pcfg = &phost->device.CfgDesc;  
  
  while (if_ix < USBH_MAX_NUM_INTERFACES)
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if(((pif->bInterfaceClass == Class) || (Class == 0xFF))&&
 800398c:	f890 5341 	ldrb.w	r5, [r0, #833]	; 0x341
 8003990:	428d      	cmp	r5, r1
 8003992:	d001      	beq.n	8003998 <USBH_FindInterface+0x10>
 8003994:	29ff      	cmp	r1, #255	; 0xff
 8003996:	d10d      	bne.n	80039b4 <USBH_FindInterface+0x2c>
 8003998:	f890 5342 	ldrb.w	r5, [r0, #834]	; 0x342
 800399c:	4295      	cmp	r5, r2
 800399e:	d001      	beq.n	80039a4 <USBH_FindInterface+0x1c>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFF))&&
 80039a0:	2aff      	cmp	r2, #255	; 0xff
 80039a2:	d107      	bne.n	80039b4 <USBH_FindInterface+0x2c>
 80039a4:	f890 5343 	ldrb.w	r5, [r0, #835]	; 0x343
 80039a8:	429d      	cmp	r5, r3
 80039aa:	d101      	bne.n	80039b0 <USBH_FindInterface+0x28>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFF)))
    {
      return  if_ix;
 80039ac:	b2e0      	uxtb	r0, r4
 80039ae:	bd30      	pop	{r4, r5, pc}
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFF)))
 80039b0:	2bff      	cmp	r3, #255	; 0xff
 80039b2:	d0fb      	beq.n	80039ac <USBH_FindInterface+0x24>
 80039b4:	3401      	adds	r4, #1
 80039b6:	301a      	adds	r0, #26
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80039b8:	2c02      	cmp	r4, #2
 80039ba:	d1e7      	bne.n	800398c <USBH_FindInterface+0x4>
    }
    if_ix++;
  }
  return 0xFF;
 80039bc:	20ff      	movs	r0, #255	; 0xff
}
 80039be:	bd30      	pop	{r4, r5, pc}

080039c0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 80039c0:	b510      	push	{r4, lr}
 80039c2:	4604      	mov	r4, r0
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80039c4:	f007 ff48 	bl	800b858 <USBH_LL_Start>
  
  /* Activate VBUS on the port */ 
  USBH_LL_DriverVBUS (phost, TRUE);
 80039c8:	2101      	movs	r1, #1
 80039ca:	4620      	mov	r0, r4
 80039cc:	f007 ffc4 	bl	800b958 <USBH_LL_DriverVBUS>
  
  return USBH_OK;  
}
 80039d0:	2000      	movs	r0, #0
 80039d2:	bd10      	pop	{r4, pc}

080039d4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80039d4:	b530      	push	{r4, r5, lr}
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80039d6:	2302      	movs	r3, #2
{
 80039d8:	b087      	sub	sp, #28
 80039da:	4604      	mov	r4, r0
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80039dc:	f88d 3017 	strb.w	r3, [sp, #23]
  uint8_t idx = 0;
  
  switch (phost->gState)
 80039e0:	7803      	ldrb	r3, [r0, #0]
 80039e2:	2b0a      	cmp	r3, #10
 80039e4:	d81d      	bhi.n	8003a22 <USBH_Process+0x4e>
 80039e6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80039ea:	000b      	.short	0x000b
 80039ec:	001f001c 	.word	0x001f001c
 80039f0:	001c0135 	.word	0x001c0135
 80039f4:	011c0050 	.word	0x011c0050
 80039f8:	00f300e9 	.word	0x00f300e9
 80039fc:	012d00fc 	.word	0x012d00fc
  {
  case HOST_IDLE :
    
    if (phost->device.is_connected)  
 8003a00:	f890 331e 	ldrb.w	r3, [r0, #798]	; 0x31e
 8003a04:	b16b      	cbz	r3, 8003a22 <USBH_Process+0x4e>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT; 
 8003a06:	2501      	movs	r5, #1
 8003a08:	7005      	strb	r5, [r0, #0]
      USBH_Delay(200); 
 8003a0a:	20c8      	movs	r0, #200	; 0xc8
 8003a0c:	f007 ffc7 	bl	800b99e <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8003a10:	4620      	mov	r0, r4
 8003a12:	f007 ff4b 	bl	800b8ac <USBH_LL_ResetPort>
#if (USBH_USE_OS == 1)
      osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
 8003a16:	2200      	movs	r2, #0
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   phost->Control.pipe_size);
    
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
 8003a18:	2101      	movs	r1, #1
 8003a1a:	f8d4 03c8 	ldr.w	r0, [r4, #968]	; 0x3c8
 8003a1e:	f000 fd31 	bl	8004484 <osMessagePut>
  case HOST_ABORT_STATE:
  default :
    break;
  }
 return USBH_OK;  
}
 8003a22:	2000      	movs	r0, #0
 8003a24:	b007      	add	sp, #28
 8003a26:	bd30      	pop	{r4, r5, pc}
    USBH_Delay(100); 
 8003a28:	2064      	movs	r0, #100	; 0x64
    USBH_OpenPipe (phost,
 8003a2a:	2500      	movs	r5, #0
    USBH_Delay(100); 
 8003a2c:	f007 ffb7 	bl	800b99e <USBH_Delay>
    phost->device.speed = USBH_LL_GetSpeed(phost);
 8003a30:	4620      	mov	r0, r4
 8003a32:	f007 ff2d 	bl	800b890 <USBH_LL_GetSpeed>
    phost->gState = HOST_ENUMERATION;
 8003a36:	2305      	movs	r3, #5
    phost->device.speed = USBH_LL_GetSpeed(phost);
 8003a38:	f884 031d 	strb.w	r0, [r4, #797]	; 0x31d
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00);
 8003a3c:	2100      	movs	r1, #0
    phost->gState = HOST_ENUMERATION;
 8003a3e:	7023      	strb	r3, [r4, #0]
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00);
 8003a40:	4620      	mov	r0, r4
 8003a42:	f000 fc19 	bl	8004278 <USBH_AllocPipe>
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80);    
 8003a46:	2180      	movs	r1, #128	; 0x80
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00);
 8003a48:	7160      	strb	r0, [r4, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80);    
 8003a4a:	4620      	mov	r0, r4
 8003a4c:	f000 fc14 	bl	8004278 <USBH_AllocPipe>
    USBH_OpenPipe (phost,
 8003a50:	79a2      	ldrb	r2, [r4, #6]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80);    
 8003a52:	4601      	mov	r1, r0
 8003a54:	7120      	strb	r0, [r4, #4]
    USBH_OpenPipe (phost,
 8003a56:	9202      	str	r2, [sp, #8]
 8003a58:	4620      	mov	r0, r4
 8003a5a:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 8003a5e:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8003a62:	9200      	str	r2, [sp, #0]
 8003a64:	2280      	movs	r2, #128	; 0x80
 8003a66:	9501      	str	r5, [sp, #4]
 8003a68:	f000 fbf2 	bl	8004250 <USBH_OpenPipe>
    USBH_OpenPipe (phost,
 8003a6c:	79a2      	ldrb	r2, [r4, #6]
 8003a6e:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8003a72:	4620      	mov	r0, r4
 8003a74:	9202      	str	r2, [sp, #8]
 8003a76:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 8003a7a:	7961      	ldrb	r1, [r4, #5]
 8003a7c:	9200      	str	r2, [sp, #0]
 8003a7e:	462a      	mov	r2, r5
 8003a80:	9501      	str	r5, [sp, #4]
 8003a82:	f000 fbe5 	bl	8004250 <USBH_OpenPipe>
    osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
 8003a86:	462a      	mov	r2, r5
 8003a88:	e7c6      	b.n	8003a18 <USBH_Process+0x44>
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
  USBH_StatusTypeDef Status = USBH_BUSY;  
  
  switch (phost->EnumState)
 8003a8a:	7843      	ldrb	r3, [r0, #1]
 8003a8c:	2b07      	cmp	r3, #7
 8003a8e:	d8c8      	bhi.n	8003a22 <USBH_Process+0x4e>
 8003a90:	e8df f003 	tbb	[pc, r3]
 8003a94:	42312904 	.word	0x42312904
 8003a98:	7667534a 	.word	0x7667534a
  {
  case ENUM_IDLE:  
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8) == USBH_OK)
 8003a9c:	2108      	movs	r1, #8
 8003a9e:	f000 fa36 	bl	8003f0e <USBH_Get_DevDesc>
 8003aa2:	4605      	mov	r5, r0
 8003aa4:	2800      	cmp	r0, #0
 8003aa6:	d1bc      	bne.n	8003a22 <USBH_Process+0x4e>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8003aa8:	2301      	movs	r3, #1
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8003aaa:	f894 2327 	ldrb.w	r2, [r4, #807]	; 0x327
      
      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 8003aae:	7921      	ldrb	r1, [r4, #4]
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8003ab0:	7063      	strb	r3, [r4, #1]
      USBH_OpenPipe (phost,
 8003ab2:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8003ab6:	71a2      	strb	r2, [r4, #6]
      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
      
      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 8003ab8:	9202      	str	r2, [sp, #8]
 8003aba:	4620      	mov	r0, r4
 8003abc:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 8003ac0:	9501      	str	r5, [sp, #4]
 8003ac2:	9200      	str	r2, [sp, #0]
 8003ac4:	2280      	movs	r2, #128	; 0x80
 8003ac6:	f000 fbc3 	bl	8004250 <USBH_OpenPipe>
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           phost->Control.pipe_size); 
      
      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8003aca:	79a2      	ldrb	r2, [r4, #6]
 8003acc:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8003ad0:	4620      	mov	r0, r4
 8003ad2:	9202      	str	r2, [sp, #8]
 8003ad4:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 8003ad8:	7961      	ldrb	r1, [r4, #5]
 8003ada:	9200      	str	r2, [sp, #0]
 8003adc:	462a      	mov	r2, r5
 8003ade:	9501      	str	r5, [sp, #4]
 8003ae0:	f000 fbb6 	bl	8004250 <USBH_OpenPipe>
 8003ae4:	e79d      	b.n	8003a22 <USBH_Process+0x4e>
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8003ae6:	2112      	movs	r1, #18
 8003ae8:	f000 fa11 	bl	8003f0e <USBH_Get_DevDesc>
 8003aec:	2800      	cmp	r0, #0
 8003aee:	d198      	bne.n	8003a22 <USBH_Process+0x4e>
      phost->EnumState = ENUM_SET_ADDR;
 8003af0:	2302      	movs	r3, #2
  case ENUM_GET_CFG_DESC:  
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost, 
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;        
 8003af2:	7063      	strb	r3, [r4, #1]
 8003af4:	e795      	b.n	8003a22 <USBH_Process+0x4e>
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8003af6:	2101      	movs	r1, #1
 8003af8:	f000 fb20 	bl	800413c <USBH_SetAddress>
 8003afc:	4605      	mov	r5, r0
 8003afe:	2800      	cmp	r0, #0
 8003b00:	d18f      	bne.n	8003a22 <USBH_Process+0x4e>
      USBH_Delay(2);
 8003b02:	2002      	movs	r0, #2
 8003b04:	f007 ff4b 	bl	800b99e <USBH_Delay>
      phost->EnumState = ENUM_GET_CFG_DESC;
 8003b08:	2203      	movs	r2, #3
      phost->device.address = USBH_DEVICE_ADDRESS;
 8003b0a:	2301      	movs	r3, #1
      USBH_OpenPipe (phost,
 8003b0c:	7921      	ldrb	r1, [r4, #4]
      phost->EnumState = ENUM_GET_CFG_DESC;
 8003b0e:	7062      	strb	r2, [r4, #1]
      phost->device.address = USBH_DEVICE_ADDRESS;
 8003b10:	f884 331c 	strb.w	r3, [r4, #796]	; 0x31c
      USBH_OpenPipe (phost,
 8003b14:	79a2      	ldrb	r2, [r4, #6]
 8003b16:	e7cf      	b.n	8003ab8 <USBH_Process+0xe4>
    if ( USBH_Get_CfgDesc(phost, 
 8003b18:	2109      	movs	r1, #9
 8003b1a:	f000 fa51 	bl	8003fc0 <USBH_Get_CfgDesc>
 8003b1e:	2800      	cmp	r0, #0
 8003b20:	f47f af7f 	bne.w	8003a22 <USBH_Process+0x4e>
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;        
 8003b24:	2304      	movs	r3, #4
 8003b26:	e7e4      	b.n	8003af2 <USBH_Process+0x11e>
    }
    break;
    
  case ENUM_GET_FULL_CFG_DESC:  
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost, 
 8003b28:	f8b0 1334 	ldrh.w	r1, [r0, #820]	; 0x334
 8003b2c:	f000 fa48 	bl	8003fc0 <USBH_Get_CfgDesc>
 8003b30:	2800      	cmp	r0, #0
 8003b32:	f47f af76 	bne.w	8003a22 <USBH_Process+0x4e>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;       
 8003b36:	2305      	movs	r3, #5
 8003b38:	e7db      	b.n	8003af2 <USBH_Process+0x11e>
    }
    break;
    
  case ENUM_GET_MFC_STRING_DESC:  
    if (phost->device.DevDesc.iManufacturer != 0)
 8003b3a:	f890 132e 	ldrb.w	r1, [r0, #814]	; 0x32e
 8003b3e:	b161      	cbz	r1, 8003b5a <USBH_Process+0x186>
    { /* Check that Manufacturer String is available */
      
      if ( USBH_Get_StringDesc(phost,
 8003b40:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 8003b44:	23ff      	movs	r3, #255	; 0xff
 8003b46:	f000 fad2 	bl	80040ee <USBH_Get_StringDesc>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	2800      	cmp	r0, #0
 8003b4e:	f47f af68 	bne.w	8003a22 <USBH_Process+0x4e>
                                phost->device.Data , 
                               0xff) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8003b52:	2306      	movs	r3, #6
 8003b54:	7063      	strb	r3, [r4, #1]
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
 8003b56:	2105      	movs	r1, #5
 8003b58:	e75f      	b.n	8003a1a <USBH_Process+0x46>
      }
    }
    else
    {
     USBH_UsrLog("Manufacturer : N/A");      
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC; 
 8003b5a:	2306      	movs	r3, #6
      }
    }
    else
    {
      USBH_UsrLog("Product : N/A");
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC; 
 8003b5c:	7063      	strb	r3, [r4, #1]
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
 8003b5e:	2200      	movs	r2, #0
 8003b60:	e7f9      	b.n	8003b56 <USBH_Process+0x182>
    if (phost->device.DevDesc.iProduct != 0)
 8003b62:	f890 132f 	ldrb.w	r1, [r0, #815]	; 0x32f
 8003b66:	b149      	cbz	r1, 8003b7c <USBH_Process+0x1a8>
      if ( USBH_Get_StringDesc(phost,
 8003b68:	23ff      	movs	r3, #255	; 0xff
 8003b6a:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 8003b6e:	f000 fabe 	bl	80040ee <USBH_Get_StringDesc>
 8003b72:	2800      	cmp	r0, #0
 8003b74:	f47f af55 	bne.w	8003a22 <USBH_Process+0x4e>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;        
 8003b78:	2307      	movs	r3, #7
 8003b7a:	e7ba      	b.n	8003af2 <USBH_Process+0x11e>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC; 
 8003b7c:	2307      	movs	r3, #7
 8003b7e:	e7ed      	b.n	8003b5c <USBH_Process+0x188>
#endif        
    } 
    break;
    
  case ENUM_GET_SERIALNUM_STRING_DESC:   
    if (phost->device.DevDesc.iSerialNumber != 0)
 8003b80:	f890 1330 	ldrb.w	r1, [r0, #816]	; 0x330
 8003b84:	b189      	cbz	r1, 8003baa <USBH_Process+0x1d6>
    { /* Check that Serial number string is available */    
      if ( USBH_Get_StringDesc(phost,
 8003b86:	23ff      	movs	r3, #255	; 0xff
 8003b88:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 8003b8c:	f000 faaf 	bl	80040ee <USBH_Get_StringDesc>
 8003b90:	2800      	cmp	r0, #0
 8003b92:	f47f af46 	bne.w	8003a22 <USBH_Process+0x4e>
      phost->device.current_interface = 0;
 8003b96:	2300      	movs	r3, #0
 8003b98:	f884 331f 	strb.w	r3, [r4, #799]	; 0x31f
      if(phost->device.DevDesc.bNumConfigurations == 1)
 8003b9c:	f894 3331 	ldrb.w	r3, [r4, #817]	; 0x331
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d109      	bne.n	8003bb8 <USBH_Process+0x1e4>
        phost->gState  = HOST_SET_CONFIGURATION;        
 8003ba4:	2308      	movs	r3, #8
        phost->gState  = HOST_CLASS;        
 8003ba6:	7023      	strb	r3, [r4, #0]
 8003ba8:	e73b      	b.n	8003a22 <USBH_Process+0x4e>
    else
    {
      USBH_UsrLog("Serial Number : N/A"); 
      Status = USBH_OK;
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
 8003baa:	460a      	mov	r2, r1
 8003bac:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8003bb0:	2105      	movs	r1, #5
 8003bb2:	f000 fc67 	bl	8004484 <osMessagePut>
 8003bb6:	e7ee      	b.n	8003b96 <USBH_Process+0x1c2>
        phost->gState  = HOST_INPUT; 
 8003bb8:	2307      	movs	r3, #7
 8003bba:	e7f4      	b.n	8003ba6 <USBH_Process+0x1d2>
      if(phost->pUser != NULL)
 8003bbc:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f43f af2e 	beq.w	8003a22 <USBH_Process+0x4e>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8003bc6:	2101      	movs	r1, #1
 8003bc8:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8003bca:	2308      	movs	r3, #8
        phost->gState  = HOST_ABORT_STATE;
 8003bcc:	7023      	strb	r3, [r4, #0]
 8003bce:	e7c6      	b.n	8003b5e <USBH_Process+0x18a>
    if (USBH_SetCfg(phost, phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8003bd0:	f890 1337 	ldrb.w	r1, [r0, #823]	; 0x337
 8003bd4:	f000 fac0 	bl	8004158 <USBH_SetCfg>
 8003bd8:	2800      	cmp	r0, #0
 8003bda:	f47f af22 	bne.w	8003a22 <USBH_Process+0x4e>
      phost->gState  = HOST_CHECK_CLASS;
 8003bde:	2309      	movs	r3, #9
 8003be0:	e7e1      	b.n	8003ba6 <USBH_Process+0x1d2>
    if(phost->ClassNumber == 0)
 8003be2:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d0b9      	beq.n	8003b5e <USBH_Process+0x18a>
      phost->pActiveClass = NULL;
 8003bea:	2300      	movs	r3, #0
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8003bec:	f890 2341 	ldrb.w	r2, [r0, #833]	; 0x341
      phost->pActiveClass = NULL;
 8003bf0:	f8c0 3374 	str.w	r3, [r0, #884]	; 0x374
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8003bf4:	f8d0 3370 	ldr.w	r3, [r0, #880]	; 0x370
 8003bf8:	7919      	ldrb	r1, [r3, #4]
 8003bfa:	4291      	cmp	r1, r2
          phost->pActiveClass = phost->pClass[idx];
 8003bfc:	bf08      	it	eq
 8003bfe:	f8c0 3374 	streq.w	r3, [r0, #884]	; 0x374
      if(phost->pActiveClass != NULL)
 8003c02:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
 8003c06:	b153      	cbz	r3, 8003c1e <USBH_Process+0x24a>
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	4798      	blx	r3
 8003c0c:	b938      	cbnz	r0, 8003c1e <USBH_Process+0x24a>
          phost->gState  = HOST_CLASS_REQUEST; 
 8003c0e:	2306      	movs	r3, #6
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);   
 8003c10:	2103      	movs	r1, #3
 8003c12:	4620      	mov	r0, r4
          phost->gState  = HOST_CLASS_REQUEST; 
 8003c14:	7023      	strb	r3, [r4, #0]
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);   
 8003c16:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8003c1a:	4798      	blx	r3
 8003c1c:	e79f      	b.n	8003b5e <USBH_Process+0x18a>
        phost->gState  = HOST_ABORT_STATE;
 8003c1e:	230c      	movs	r3, #12
 8003c20:	e7d4      	b.n	8003bcc <USBH_Process+0x1f8>
    if(phost->pActiveClass != NULL)
 8003c22:	f8d0 2374 	ldr.w	r2, [r0, #884]	; 0x374
 8003c26:	b152      	cbz	r2, 8003c3e <USBH_Process+0x26a>
      status = phost->pActiveClass->Requests(phost);
 8003c28:	6913      	ldr	r3, [r2, #16]
 8003c2a:	4798      	blx	r3
 8003c2c:	f88d 0017 	strb.w	r0, [sp, #23]
      if(status == USBH_OK)
 8003c30:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	f47f aef4 	bne.w	8003a22 <USBH_Process+0x4e>
        phost->gState  = HOST_CLASS;        
 8003c3a:	230a      	movs	r3, #10
 8003c3c:	e7b3      	b.n	8003ba6 <USBH_Process+0x1d2>
      phost->gState  = HOST_ABORT_STATE;
 8003c3e:	230c      	movs	r3, #12
 8003c40:	7003      	strb	r3, [r0, #0]
 8003c42:	e788      	b.n	8003b56 <USBH_Process+0x182>
    if(phost->pActiveClass != NULL)
 8003c44:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f43f aeea 	beq.w	8003a22 <USBH_Process+0x4e>
      phost->pActiveClass->BgndProcess(phost);
 8003c4e:	695b      	ldr	r3, [r3, #20]
 8003c50:	4798      	blx	r3
 8003c52:	e6e6      	b.n	8003a22 <USBH_Process+0x4e>
    DeInitStateMachine(phost);  
 8003c54:	f7ff fe2b 	bl	80038ae <DeInitStateMachine>
    if(phost->pActiveClass != NULL)
 8003c58:	f8d4 3374 	ldr.w	r3, [r4, #884]	; 0x374
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f43f aee0 	beq.w	8003a22 <USBH_Process+0x4e>
      phost->pActiveClass->DeInit(phost); 
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	4620      	mov	r0, r4
 8003c66:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	f8c4 3374 	str.w	r3, [r4, #884]	; 0x374
 return USBH_OK;  
 8003c6e:	e6d8      	b.n	8003a22 <USBH_Process+0x4e>

08003c70 <USBH_Process_OS>:
  * @brief  USB Host Thread task
  * @param  pvParameters not used
  * @retval None
  */
static void USBH_Process_OS(void const * argument)
{
 8003c70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003c72:	4604      	mov	r4, r0
  osEvent event;
  
  for(;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever );
 8003c74:	f04f 32ff 	mov.w	r2, #4294967295
 8003c78:	f8d4 13c8 	ldr.w	r1, [r4, #968]	; 0x3c8
 8003c7c:	a801      	add	r0, sp, #4
 8003c7e:	f000 fc29 	bl	80044d4 <osMessageGet>
    
    if( event.status == osEventMessage )
 8003c82:	9b01      	ldr	r3, [sp, #4]
 8003c84:	2b10      	cmp	r3, #16
 8003c86:	d1f5      	bne.n	8003c74 <USBH_Process_OS+0x4>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8003c88:	4620      	mov	r0, r4
 8003c8a:	f7ff fea3 	bl	80039d4 <USBH_Process>
 8003c8e:	e7f1      	b.n	8003c74 <USBH_Process_OS+0x4>

08003c90 <USBH_LL_SetTimer>:
  phost->Timer = time;
 8003c90:	f8c0 13b8 	str.w	r1, [r0, #952]	; 0x3b8
 8003c94:	4770      	bx	lr

08003c96 <USBH_LL_IncTimer>:
  phost->Timer ++;
 8003c96:	f8d0 23b8 	ldr.w	r2, [r0, #952]	; 0x3b8
 8003c9a:	3201      	adds	r2, #1
 8003c9c:	f8c0 23b8 	str.w	r2, [r0, #952]	; 0x3b8
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8003ca0:	7802      	ldrb	r2, [r0, #0]
 8003ca2:	2a0a      	cmp	r2, #10
 8003ca4:	d104      	bne.n	8003cb0 <USBH_LL_IncTimer+0x1a>
 8003ca6:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
 8003caa:	b10b      	cbz	r3, 8003cb0 <USBH_LL_IncTimer+0x1a>
    phost->pActiveClass->SOFProcess(phost);
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	4718      	bx	r3
 8003cb0:	4770      	bx	lr

08003cb2 <USBH_LL_Connect>:
  if(phost->gState == HOST_IDLE )
 8003cb2:	7803      	ldrb	r3, [r0, #0]
{
 8003cb4:	b510      	push	{r4, lr}
 8003cb6:	4604      	mov	r4, r0
  if(phost->gState == HOST_IDLE )
 8003cb8:	b97b      	cbnz	r3, 8003cda <USBH_LL_Connect+0x28>
    phost->device.is_connected = 1;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	f880 331e 	strb.w	r3, [r0, #798]	; 0x31e
    if(phost->pUser != NULL)
 8003cc0:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4
 8003cc4:	b10b      	cbz	r3, 8003cca <USBH_LL_Connect+0x18>
      phost->pUser(phost, HOST_USER_CONNECTION);
 8003cc6:	2104      	movs	r1, #4
 8003cc8:	4798      	blx	r3
  osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
 8003cca:	2200      	movs	r2, #0
 8003ccc:	2101      	movs	r1, #1
 8003cce:	f8d4 03c8 	ldr.w	r0, [r4, #968]	; 0x3c8
 8003cd2:	f000 fbd7 	bl	8004484 <osMessagePut>
}
 8003cd6:	2000      	movs	r0, #0
 8003cd8:	bd10      	pop	{r4, pc}
  else if(phost->gState == HOST_DEV_WAIT_FOR_ATTACHMENT )
 8003cda:	7803      	ldrb	r3, [r0, #0]
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d1f4      	bne.n	8003cca <USBH_LL_Connect+0x18>
    phost->gState = HOST_DEV_ATTACHED ;
 8003ce0:	2302      	movs	r3, #2
 8003ce2:	7003      	strb	r3, [r0, #0]
 8003ce4:	e7f1      	b.n	8003cca <USBH_LL_Connect+0x18>

08003ce6 <USBH_LL_Disconnect>:
{
 8003ce6:	b510      	push	{r4, lr}
 8003ce8:	4604      	mov	r4, r0
  USBH_LL_Stop(phost);  
 8003cea:	f007 fdc3 	bl	800b874 <USBH_LL_Stop>
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8003cee:	7921      	ldrb	r1, [r4, #4]
 8003cf0:	4620      	mov	r0, r4
 8003cf2:	f000 fad9 	bl	80042a8 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);  
 8003cf6:	7961      	ldrb	r1, [r4, #5]
 8003cf8:	4620      	mov	r0, r4
 8003cfa:	f000 fad5 	bl	80042a8 <USBH_FreePipe>
  phost->device.is_connected = 0; 
 8003cfe:	2300      	movs	r3, #0
 8003d00:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
  if(phost->pUser != NULL)
 8003d04:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8003d08:	b113      	cbz	r3, 8003d10 <USBH_LL_Disconnect+0x2a>
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8003d0a:	2105      	movs	r1, #5
 8003d0c:	4620      	mov	r0, r4
 8003d0e:	4798      	blx	r3
  USBH_LL_Start(phost);
 8003d10:	4620      	mov	r0, r4
 8003d12:	f007 fda1 	bl	800b858 <USBH_LL_Start>
  phost->gState = HOST_DEV_DISCONNECTED;
 8003d16:	2303      	movs	r3, #3
  osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
 8003d18:	2200      	movs	r2, #0
 8003d1a:	2101      	movs	r1, #1
  phost->gState = HOST_DEV_DISCONNECTED;
 8003d1c:	7023      	strb	r3, [r4, #0]
  osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
 8003d1e:	f8d4 03c8 	ldr.w	r0, [r4, #968]	; 0x3c8
 8003d22:	f000 fbaf 	bl	8004484 <osMessagePut>
}
 8003d26:	2000      	movs	r0, #0
 8003d28:	bd10      	pop	{r4, pc}

08003d2a <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange (USBH_HandleTypeDef *phost)
{
 8003d2a:	b508      	push	{r3, lr}
  osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	2102      	movs	r1, #2
 8003d30:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8003d34:	f000 fba6 	bl	8004484 <osMessagePut>
  return USBH_OK;
}
 8003d38:	2000      	movs	r0, #0
 8003d3a:	bd08      	pop	{r3, pc}

08003d3c <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost, 
                             uint8_t             *buff,
                             uint16_t            length)
{
 8003d3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
  
  switch (phost->RequestState)
 8003d3e:	7885      	ldrb	r5, [r0, #2]
{
 8003d40:	4604      	mov	r4, r0
  switch (phost->RequestState)
 8003d42:	2d01      	cmp	r5, #1
 8003d44:	d003      	beq.n	8003d4e <USBH_CtlReq+0x12>
 8003d46:	2d02      	cmp	r5, #2
 8003d48:	d00d      	beq.n	8003d66 <USBH_CtlReq+0x2a>
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
  uint8_t direction;  
  USBH_StatusTypeDef status = USBH_BUSY;
 8003d4a:	2001      	movs	r0, #1
  return status;
 8003d4c:	e04a      	b.n	8003de4 <USBH_CtlReq+0xa8>
    phost->RequestState = CMD_WAIT;
 8003d4e:	2302      	movs	r3, #2
    phost->Control.buff = buff; 
 8003d50:	6081      	str	r1, [r0, #8]
    phost->Control.length = length;
 8003d52:	8182      	strh	r2, [r0, #12]
    phost->Control.state = CTRL_SETUP;  
 8003d54:	7605      	strb	r5, [r0, #24]
    phost->RequestState = CMD_WAIT;
 8003d56:	7083      	strb	r3, [r0, #2]
    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
    { 
      phost->Control.state = CTRL_STATUS_OUT;
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8003d58:	2200      	movs	r2, #0
 8003d5a:	2103      	movs	r1, #3
 8003d5c:	f8d4 03c8 	ldr.w	r0, [r4, #968]	; 0x3c8
 8003d60:	f000 fb90 	bl	8004484 <osMessagePut>
 8003d64:	e7f1      	b.n	8003d4a <USBH_CtlReq+0xe>
  switch (phost->Control.state)
 8003d66:	7e03      	ldrb	r3, [r0, #24]
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	2b0a      	cmp	r3, #10
 8003d6c:	d8ed      	bhi.n	8003d4a <USBH_CtlReq+0xe>
 8003d6e:	e8df f003 	tbb	[pc, r3]
 8003d72:	0e06      	.short	0x0e06
 8003d74:	473b2b21 	.word	0x473b2b21
 8003d78:	95896f65 	.word	0x95896f65
 8003d7c:	a0          	.byte	0xa0
 8003d7d:	00          	.byte	0x00
    USBH_CtlSendSetup     (phost, 
 8003d7e:	7942      	ldrb	r2, [r0, #5]
 8003d80:	f100 0110 	add.w	r1, r0, #16
 8003d84:	f000 fa04 	bl	8004190 <USBH_CtlSendSetup>
    phost->Control.state = CTRL_SETUP_WAIT; 
 8003d88:	2302      	movs	r3, #2
                      0,
                      0,
                      phost->Control.pipe_out,
                      1);
     phost->Control.timer = phost->Timer;
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8003d8a:	7623      	strb	r3, [r4, #24]
 8003d8c:	e7dd      	b.n	8003d4a <USBH_CtlReq+0xe>
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out); 
 8003d8e:	7941      	ldrb	r1, [r0, #5]
 8003d90:	f007 fdde 	bl	800b950 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8003d94:	2801      	cmp	r0, #1
 8003d96:	f040 8088 	bne.w	8003eaa <USBH_CtlReq+0x16e>
      if (phost->Control.setup.b.wLength.w != 0 )
 8003d9a:	8ae2      	ldrh	r2, [r4, #22]
 8003d9c:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8003da0:	b122      	cbz	r2, 8003dac <USBH_CtlReq+0x70>
        if (direction == USB_D2H)
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	da3a      	bge.n	8003e1c <USBH_CtlReq+0xe0>
          phost->Control.state = CTRL_DATA_IN;
 8003da6:	2303      	movs	r3, #3
      phost->Control.state = CTRL_STATUS_OUT;
 8003da8:	7623      	strb	r3, [r4, #24]
 8003daa:	e7d5      	b.n	8003d58 <USBH_CtlReq+0x1c>
        if (direction == USB_D2H)
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	da2c      	bge.n	8003e0a <USBH_CtlReq+0xce>
      phost->Control.state = CTRL_STATUS_OUT;
 8003db0:	2309      	movs	r3, #9
 8003db2:	e7f9      	b.n	8003da8 <USBH_CtlReq+0x6c>
     phost->Control.timer = phost->Timer;
 8003db4:	f8d0 33b8 	ldr.w	r3, [r0, #952]	; 0x3b8
    USBH_CtlReceiveData(phost,
 8003db8:	8982      	ldrh	r2, [r0, #12]
     phost->Control.timer = phost->Timer;
 8003dba:	81c3      	strh	r3, [r0, #14]
    USBH_CtlReceiveData(phost,
 8003dbc:	6881      	ldr	r1, [r0, #8]
 8003dbe:	7903      	ldrb	r3, [r0, #4]
 8003dc0:	f000 fa0e 	bl	80041e0 <USBH_CtlReceiveData>
    phost->Control.state = CTRL_DATA_IN_WAIT;
 8003dc4:	2304      	movs	r3, #4
 8003dc6:	e7e0      	b.n	8003d8a <USBH_CtlReq+0x4e>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in); 
 8003dc8:	7901      	ldrb	r1, [r0, #4]
 8003dca:	f007 fdc1 	bl	800b950 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8003dce:	2801      	cmp	r0, #1
 8003dd0:	d0ee      	beq.n	8003db0 <USBH_CtlReq+0x74>
    if  (URB_Status == USBH_URB_STALL) 
 8003dd2:	2805      	cmp	r0, #5
 8003dd4:	d169      	bne.n	8003eaa <USBH_CtlReq+0x16e>
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	2103      	movs	r1, #3
 8003dda:	f8d4 03c8 	ldr.w	r0, [r4, #968]	; 0x3c8
 8003dde:	f000 fb51 	bl	8004484 <osMessagePut>
      status = USBH_NOT_SUPPORTED;
 8003de2:	2003      	movs	r0, #3
}
 8003de4:	b003      	add	sp, #12
 8003de6:	bd30      	pop	{r4, r5, pc}
    USBH_CtlSendData (phost,
 8003de8:	2501      	movs	r5, #1
 8003dea:	7943      	ldrb	r3, [r0, #5]
 8003dec:	8982      	ldrh	r2, [r0, #12]
 8003dee:	9500      	str	r5, [sp, #0]
 8003df0:	6881      	ldr	r1, [r0, #8]
 8003df2:	f000 f9de 	bl	80041b2 <USBH_CtlSendData>
     phost->Control.timer = phost->Timer;
 8003df6:	f8d4 33b8 	ldr.w	r3, [r4, #952]	; 0x3b8
 8003dfa:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8003dfc:	2306      	movs	r3, #6
 8003dfe:	e7c4      	b.n	8003d8a <USBH_CtlReq+0x4e>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);     
 8003e00:	7941      	ldrb	r1, [r0, #5]
 8003e02:	f007 fda5 	bl	800b950 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8003e06:	2801      	cmp	r0, #1
 8003e08:	d101      	bne.n	8003e0e <USBH_CtlReq+0xd2>
      phost->Control.state = CTRL_STATUS_IN;
 8003e0a:	2307      	movs	r3, #7
 8003e0c:	e7cc      	b.n	8003da8 <USBH_CtlReq+0x6c>
    else if  (URB_Status == USBH_URB_STALL) 
 8003e0e:	2805      	cmp	r0, #5
 8003e10:	d102      	bne.n	8003e18 <USBH_CtlReq+0xdc>
      phost->Control.state = CTRL_STALLED; 
 8003e12:	230c      	movs	r3, #12
 8003e14:	7623      	strb	r3, [r4, #24]
 8003e16:	e7de      	b.n	8003dd6 <USBH_CtlReq+0x9a>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8003e18:	2802      	cmp	r0, #2
 8003e1a:	d101      	bne.n	8003e20 <USBH_CtlReq+0xe4>
      phost->Control.state = CTRL_DATA_OUT;
 8003e1c:	2305      	movs	r3, #5
 8003e1e:	e7c3      	b.n	8003da8 <USBH_CtlReq+0x6c>
    else if (URB_Status == USBH_URB_ERROR)
 8003e20:	2804      	cmp	r0, #4
 8003e22:	d192      	bne.n	8003d4a <USBH_CtlReq+0xe>
      phost->Control.state = CTRL_ERROR;  
 8003e24:	230b      	movs	r3, #11
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8003e26:	2200      	movs	r2, #0
 8003e28:	2103      	movs	r1, #3
 8003e2a:	f8d4 03c8 	ldr.w	r0, [r4, #968]	; 0x3c8
      phost->Control.state = CTRL_ERROR;  
 8003e2e:	7623      	strb	r3, [r4, #24]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8003e30:	f000 fb28 	bl	8004484 <osMessagePut>
      phost->RequestState = CMD_SEND;
 8003e34:	2301      	movs	r3, #1
      status = USBH_FAIL;
 8003e36:	2002      	movs	r0, #2
      phost->RequestState = CMD_SEND;
 8003e38:	70a3      	strb	r3, [r4, #2]
 8003e3a:	e7d3      	b.n	8003de4 <USBH_CtlReq+0xa8>
    USBH_CtlReceiveData (phost,
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	7903      	ldrb	r3, [r0, #4]
 8003e40:	4611      	mov	r1, r2
 8003e42:	f000 f9cd 	bl	80041e0 <USBH_CtlReceiveData>
    phost->Control.timer = phost->Timer;
 8003e46:	f8d4 33b8 	ldr.w	r3, [r4, #952]	; 0x3b8
 8003e4a:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8003e4c:	2308      	movs	r3, #8
 8003e4e:	e79c      	b.n	8003d8a <USBH_CtlReq+0x4e>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in); 
 8003e50:	7901      	ldrb	r1, [r0, #4]
 8003e52:	f007 fd7d 	bl	800b950 <USBH_LL_GetURBState>
    if  ( URB_Status == USBH_URB_DONE)
 8003e56:	2801      	cmp	r0, #1
 8003e58:	d10c      	bne.n	8003e74 <USBH_CtlReq+0x138>
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);  
    if  (URB_Status == USBH_URB_DONE)
    { 
      status = USBH_OK;      
      phost->Control.state = CTRL_COMPLETE; 
 8003e5a:	230d      	movs	r3, #13
      
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	2103      	movs	r1, #3
 8003e60:	f8d4 03c8 	ldr.w	r0, [r4, #968]	; 0x3c8
      phost->Control.state = CTRL_COMPLETE; 
 8003e64:	7623      	strb	r3, [r4, #24]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8003e66:	f000 fb0d 	bl	8004484 <osMessagePut>
      phost->RequestState = CMD_SEND;
 8003e6a:	2301      	movs	r3, #1
      phost->Control.state =CTRL_IDLE;  
 8003e6c:	2000      	movs	r0, #0
      phost->RequestState = CMD_SEND;
 8003e6e:	70a3      	strb	r3, [r4, #2]
      phost->Control.state =CTRL_IDLE;  
 8003e70:	7620      	strb	r0, [r4, #24]
 8003e72:	e7b7      	b.n	8003de4 <USBH_CtlReq+0xa8>
    else if (URB_Status == USBH_URB_ERROR)
 8003e74:	2804      	cmp	r0, #4
 8003e76:	d101      	bne.n	8003e7c <USBH_CtlReq+0x140>
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }      
    else if (URB_Status == USBH_URB_ERROR)
    {
      phost->Control.state = CTRL_ERROR; 
 8003e78:	230b      	movs	r3, #11
 8003e7a:	e795      	b.n	8003da8 <USBH_CtlReq+0x6c>
     else if(URB_Status == USBH_URB_STALL)
 8003e7c:	2805      	cmp	r0, #5
 8003e7e:	f47f af64 	bne.w	8003d4a <USBH_CtlReq+0xe>
 8003e82:	e7a8      	b.n	8003dd6 <USBH_CtlReq+0x9a>
    USBH_CtlSendData (phost,
 8003e84:	2200      	movs	r2, #0
 8003e86:	2501      	movs	r5, #1
 8003e88:	7943      	ldrb	r3, [r0, #5]
 8003e8a:	4611      	mov	r1, r2
 8003e8c:	9500      	str	r5, [sp, #0]
 8003e8e:	f000 f990 	bl	80041b2 <USBH_CtlSendData>
     phost->Control.timer = phost->Timer;
 8003e92:	f8d4 33b8 	ldr.w	r3, [r4, #952]	; 0x3b8
 8003e96:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8003e98:	230a      	movs	r3, #10
 8003e9a:	e776      	b.n	8003d8a <USBH_CtlReq+0x4e>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);  
 8003e9c:	7941      	ldrb	r1, [r0, #5]
 8003e9e:	f007 fd57 	bl	800b950 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8003ea2:	2801      	cmp	r0, #1
 8003ea4:	d0d9      	beq.n	8003e5a <USBH_CtlReq+0x11e>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8003ea6:	2802      	cmp	r0, #2
 8003ea8:	d082      	beq.n	8003db0 <USBH_CtlReq+0x74>
    else if (URB_Status == USBH_URB_ERROR)
 8003eaa:	2804      	cmp	r0, #4
 8003eac:	f47f af4d 	bne.w	8003d4a <USBH_CtlReq+0xe>
 8003eb0:	e7e2      	b.n	8003e78 <USBH_CtlReq+0x13c>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be 
    required to clear the halt or error condition if the next Setup PID is not 
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8003eb2:	7e43      	ldrb	r3, [r0, #25]
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	7643      	strb	r3, [r0, #25]
 8003ebc:	d805      	bhi.n	8003eca <USBH_CtlReq+0x18e>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8003ebe:	f007 fcd9 	bl	800b874 <USBH_LL_Stop>
         
      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP; 
 8003ec2:	2001      	movs	r0, #1
 8003ec4:	7620      	strb	r0, [r4, #24]
      phost->RequestState = CMD_SEND;
 8003ec6:	70a0      	strb	r0, [r4, #2]
 8003ec8:	e78c      	b.n	8003de4 <USBH_CtlReq+0xa8>
    }
    else
    {
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8003eca:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4
 8003ece:	2106      	movs	r1, #6
 8003ed0:	4798      	blx	r3
      phost->Control.errorcount = 0;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	7663      	strb	r3, [r4, #25]
 8003ed6:	e7ad      	b.n	8003e34 <USBH_CtlReq+0xf8>

08003ed8 <USBH_GetDescriptor>:
{ 
 8003ed8:	b430      	push	{r4, r5}
  if(phost->RequestState == CMD_SEND)
 8003eda:	7884      	ldrb	r4, [r0, #2]
{ 
 8003edc:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  if(phost->RequestState == CMD_SEND)
 8003ee0:	2c01      	cmp	r4, #1
 8003ee2:	d10f      	bne.n	8003f04 <USBH_GetDescriptor+0x2c>
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8003ee4:	f061 047f 	orn	r4, r1, #127	; 0x7f
    phost->Control.setup.b.wValue.w = value_idx;
 8003ee8:	8242      	strh	r2, [r0, #18]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8003eea:	2106      	movs	r1, #6
    phost->Control.setup.b.wLength.w = length; 
 8003eec:	82c5      	strh	r5, [r0, #22]
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8003eee:	7404      	strb	r4, [r0, #16]
    if ((value_idx & 0xff00) == USB_DESC_STRING)
 8003ef0:	f402 447f 	and.w	r4, r2, #65280	; 0xff00
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8003ef4:	7441      	strb	r1, [r0, #17]
    if ((value_idx & 0xff00) == USB_DESC_STRING)
 8003ef6:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
      phost->Control.setup.b.wIndex.w = 0x0409;
 8003efa:	bf0c      	ite	eq
 8003efc:	f240 4209 	movweq	r2, #1033	; 0x409
      phost->Control.setup.b.wIndex.w = 0;
 8003f00:	2200      	movne	r2, #0
 8003f02:	8282      	strh	r2, [r0, #20]
  return USBH_CtlReq(phost, buff , length );     
 8003f04:	462a      	mov	r2, r5
 8003f06:	4619      	mov	r1, r3
}
 8003f08:	bc30      	pop	{r4, r5}
  return USBH_CtlReq(phost, buff , length );     
 8003f0a:	f7ff bf17 	b.w	8003d3c <USBH_CtlReq>

08003f0e <USBH_Get_DevDesc>:
{
 8003f0e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if((status = USBH_GetDescriptor(phost,
 8003f10:	f500 738e 	add.w	r3, r0, #284	; 0x11c
 8003f14:	460d      	mov	r5, r1
 8003f16:	9100      	str	r1, [sp, #0]
 8003f18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f1c:	2100      	movs	r1, #0
{
 8003f1e:	4604      	mov	r4, r0
  if((status = USBH_GetDescriptor(phost,
 8003f20:	f7ff ffda 	bl	8003ed8 <USBH_GetDescriptor>
 8003f24:	2800      	cmp	r0, #0
 8003f26:	d149      	bne.n	8003fbc <USBH_Get_DevDesc+0xae>
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8003f28:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
  if (length > 8)
 8003f2c:	2d08      	cmp	r5, #8
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8003f2e:	f894 211f 	ldrb.w	r2, [r4, #287]	; 0x11f
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8003f32:	f884 3320 	strb.w	r3, [r4, #800]	; 0x320
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8003f36:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
 8003f3a:	f884 3321 	strb.w	r3, [r4, #801]	; 0x321
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8003f3e:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
 8003f42:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003f46:	f8a4 3322 	strh.w	r3, [r4, #802]	; 0x322
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8003f4a:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
 8003f4e:	f884 3324 	strb.w	r3, [r4, #804]	; 0x324
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8003f52:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
 8003f56:	f884 3325 	strb.w	r3, [r4, #805]	; 0x325
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8003f5a:	f894 3122 	ldrb.w	r3, [r4, #290]	; 0x122
 8003f5e:	f884 3326 	strb.w	r3, [r4, #806]	; 0x326
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8003f62:	f894 3123 	ldrb.w	r3, [r4, #291]	; 0x123
 8003f66:	f884 3327 	strb.w	r3, [r4, #807]	; 0x327
  if (length > 8)
 8003f6a:	d927      	bls.n	8003fbc <USBH_Get_DevDesc+0xae>
    dev_desc->idVendor           = LE16 (buf +  8);
 8003f6c:	f894 2125 	ldrb.w	r2, [r4, #293]	; 0x125
 8003f70:	f894 3124 	ldrb.w	r3, [r4, #292]	; 0x124
 8003f74:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    dev_desc->idProduct          = LE16 (buf + 10);
 8003f78:	f894 2127 	ldrb.w	r2, [r4, #295]	; 0x127
    dev_desc->idVendor           = LE16 (buf +  8);
 8003f7c:	f8a4 3328 	strh.w	r3, [r4, #808]	; 0x328
    dev_desc->idProduct          = LE16 (buf + 10);
 8003f80:	f894 3126 	ldrb.w	r3, [r4, #294]	; 0x126
 8003f84:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8003f88:	f894 2129 	ldrb.w	r2, [r4, #297]	; 0x129
    dev_desc->idProduct          = LE16 (buf + 10);
 8003f8c:	f8a4 332a 	strh.w	r3, [r4, #810]	; 0x32a
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8003f90:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
 8003f94:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003f98:	f8a4 332c 	strh.w	r3, [r4, #812]	; 0x32c
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8003f9c:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
 8003fa0:	f884 332e 	strb.w	r3, [r4, #814]	; 0x32e
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8003fa4:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
 8003fa8:	f884 332f 	strb.w	r3, [r4, #815]	; 0x32f
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8003fac:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
 8003fb0:	f884 3330 	strb.w	r3, [r4, #816]	; 0x330
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8003fb4:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 8003fb8:	f884 3331 	strb.w	r3, [r4, #817]	; 0x331
}
 8003fbc:	b003      	add	sp, #12
 8003fbe:	bd30      	pop	{r4, r5, pc}

08003fc0 <USBH_Get_CfgDesc>:
{
 8003fc0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  pData = phost->device.CfgDesc_Raw;
 8003fc4:	f100 051c 	add.w	r5, r0, #28
{
 8003fc8:	460f      	mov	r7, r1
  if((status = USBH_GetDescriptor(phost,
 8003fca:	9100      	str	r1, [sp, #0]
 8003fcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fd0:	462b      	mov	r3, r5
 8003fd2:	2100      	movs	r1, #0
{
 8003fd4:	4604      	mov	r4, r0
  if((status = USBH_GetDescriptor(phost,
 8003fd6:	f7ff ff7f 	bl	8003ed8 <USBH_GetDescriptor>
 8003fda:	bb68      	cbnz	r0, 8004038 <USBH_Get_CfgDesc+0x78>
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8003fdc:	7f23      	ldrb	r3, [r4, #28]
  if (length > USB_CONFIGURATION_DESC_SIZE)
 8003fde:	2f09      	cmp	r7, #9
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8003fe0:	7fa6      	ldrb	r6, [r4, #30]
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8003fe2:	f884 3332 	strb.w	r3, [r4, #818]	; 0x332
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8003fe6:	7f63      	ldrb	r3, [r4, #29]
 8003fe8:	f884 3333 	strb.w	r3, [r4, #819]	; 0x333
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8003fec:	7fe3      	ldrb	r3, [r4, #31]
 8003fee:	eb06 2603 	add.w	r6, r6, r3, lsl #8
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8003ff2:	f894 3020 	ldrb.w	r3, [r4, #32]
 8003ff6:	f884 3336 	strb.w	r3, [r4, #822]	; 0x336
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8003ffa:	b2b6      	uxth	r6, r6
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8003ffc:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8004000:	f8a4 6334 	strh.w	r6, [r4, #820]	; 0x334
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8004004:	f884 3337 	strb.w	r3, [r4, #823]	; 0x337
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8004008:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 800400c:	f884 3338 	strb.w	r3, [r4, #824]	; 0x338
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8004010:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8004014:	f884 3339 	strb.w	r3, [r4, #825]	; 0x339
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);    
 8004018:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800401c:	f884 333a 	strb.w	r3, [r4, #826]	; 0x33a
  if (length > USB_CONFIGURATION_DESC_SIZE)
 8004020:	d90a      	bls.n	8004038 <USBH_Get_CfgDesc+0x78>
 8004022:	4622      	mov	r2, r4
 8004024:	462b      	mov	r3, r5
 8004026:	4686      	mov	lr, r0
 8004028:	2109      	movs	r1, #9
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 800402a:	f04f 081a 	mov.w	r8, #26
    while ((if_ix < USBH_MAX_NUM_INTERFACES ) && (ptr < cfg_desc->wTotalLength))
 800402e:	f1be 0f02 	cmp.w	lr, #2
 8004032:	d001      	beq.n	8004038 <USBH_Get_CfgDesc+0x78>
 8004034:	428e      	cmp	r6, r1
 8004036:	d802      	bhi.n	800403e <USBH_Get_CfgDesc+0x7e>
}
 8004038:	b002      	add	sp, #8
 800403a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 800403e:	781d      	ldrb	r5, [r3, #0]
  pnext = (USBH_DescHeader_t *)((uint8_t *)pbuf + \
 8004040:	442b      	add	r3, r5
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 8004042:	4429      	add	r1, r5
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
 8004044:	785d      	ldrb	r5, [r3, #1]
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 8004046:	b289      	uxth	r1, r1
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
 8004048:	2d04      	cmp	r5, #4
 800404a:	d1f0      	bne.n	800402e <USBH_Get_CfgDesc+0x6e>
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 800404c:	781d      	ldrb	r5, [r3, #0]
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 800404e:	fb08 f90e 	mul.w	r9, r8, lr
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8004052:	f882 533c 	strb.w	r5, [r2, #828]	; 0x33c
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8004056:	785d      	ldrb	r5, [r3, #1]
 8004058:	f882 533d 	strb.w	r5, [r2, #829]	; 0x33d
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 800405c:	789d      	ldrb	r5, [r3, #2]
 800405e:	f882 533e 	strb.w	r5, [r2, #830]	; 0x33e
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8004062:	78dd      	ldrb	r5, [r3, #3]
 8004064:	f882 533f 	strb.w	r5, [r2, #831]	; 0x33f
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8004068:	791d      	ldrb	r5, [r3, #4]
 800406a:	f882 5340 	strb.w	r5, [r2, #832]	; 0x340
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 800406e:	795d      	ldrb	r5, [r3, #5]
 8004070:	f882 5341 	strb.w	r5, [r2, #833]	; 0x341
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8004074:	799d      	ldrb	r5, [r3, #6]
 8004076:	f882 5342 	strb.w	r5, [r2, #834]	; 0x342
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 800407a:	79dd      	ldrb	r5, [r3, #7]
 800407c:	f882 5343 	strb.w	r5, [r2, #835]	; 0x343
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8004080:	7a1d      	ldrb	r5, [r3, #8]
 8004082:	f882 5344 	strb.w	r5, [r2, #836]	; 0x344
        ep_ix = 0;
 8004086:	2500      	movs	r5, #0
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8004088:	f892 7340 	ldrb.w	r7, [r2, #832]	; 0x340
 800408c:	42bd      	cmp	r5, r7
 800408e:	db03      	blt.n	8004098 <USBH_Get_CfgDesc+0xd8>
 8004090:	f10e 0e01 	add.w	lr, lr, #1
 8004094:	321a      	adds	r2, #26
 8004096:	e7ca      	b.n	800402e <USBH_Get_CfgDesc+0x6e>
 8004098:	428e      	cmp	r6, r1
 800409a:	d9f9      	bls.n	8004090 <USBH_Get_CfgDesc+0xd0>
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 800409c:	781f      	ldrb	r7, [r3, #0]
  pnext = (USBH_DescHeader_t *)((uint8_t *)pbuf + \
 800409e:	443b      	add	r3, r7
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 80040a0:	4439      	add	r1, r7
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT) 
 80040a2:	785f      	ldrb	r7, [r3, #1]
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 80040a4:	b289      	uxth	r1, r1
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT) 
 80040a6:	2f05      	cmp	r7, #5
 80040a8:	d1ee      	bne.n	8004088 <USBH_Get_CfgDesc+0xc8>
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 80040aa:	1c6f      	adds	r7, r5, #1
 80040ac:	f893 c000 	ldrb.w	ip, [r3]
 80040b0:	eb09 05c7 	add.w	r5, r9, r7, lsl #3
 80040b4:	4425      	add	r5, r4
 80040b6:	f885 c33e 	strb.w	ip, [r5, #830]	; 0x33e
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 80040ba:	f893 c001 	ldrb.w	ip, [r3, #1]
 80040be:	f885 c33f 	strb.w	ip, [r5, #831]	; 0x33f
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 80040c2:	f893 c002 	ldrb.w	ip, [r3, #2]
 80040c6:	f885 c340 	strb.w	ip, [r5, #832]	; 0x340
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 80040ca:	f893 c003 	ldrb.w	ip, [r3, #3]
 80040ce:	f885 c341 	strb.w	ip, [r5, #833]	; 0x341
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 80040d2:	f893 a005 	ldrb.w	sl, [r3, #5]
 80040d6:	f893 c004 	ldrb.w	ip, [r3, #4]
 80040da:	eb0c 2c0a 	add.w	ip, ip, sl, lsl #8
 80040de:	f8a5 c342 	strh.w	ip, [r5, #834]	; 0x342
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 80040e2:	f893 c006 	ldrb.w	ip, [r3, #6]
 80040e6:	f885 c344 	strb.w	ip, [r5, #836]	; 0x344
            ep_ix++;
 80040ea:	b27d      	sxtb	r5, r7
 80040ec:	e7cc      	b.n	8004088 <USBH_Get_CfgDesc+0xc8>

080040ee <USBH_Get_StringDesc>:
{
 80040ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
                                  phost->device.Data,
 80040f0:	f500 758e 	add.w	r5, r0, #284	; 0x11c
{
 80040f4:	4614      	mov	r4, r2
 80040f6:	461f      	mov	r7, r3
  if((status = USBH_GetDescriptor(phost,
 80040f8:	9300      	str	r3, [sp, #0]
 80040fa:	f441 7240 	orr.w	r2, r1, #768	; 0x300
 80040fe:	462b      	mov	r3, r5
 8004100:	2100      	movs	r1, #0
{
 8004102:	4606      	mov	r6, r0
  if((status = USBH_GetDescriptor(phost,
 8004104:	f7ff fee8 	bl	8003ed8 <USBH_GetDescriptor>
 8004108:	b978      	cbnz	r0, 800412a <USBH_Get_StringDesc+0x3c>
  if ( psrc[1] == USB_DESC_TYPE_STRING)
 800410a:	f896 311d 	ldrb.w	r3, [r6, #285]	; 0x11d
 800410e:	2b03      	cmp	r3, #3
 8004110:	d10b      	bne.n	800412a <USBH_Get_StringDesc+0x3c>
    strlength = ( ( (psrc[0]-2) <= length) ? (psrc[0]-2) :length); 
 8004112:	f896 311c 	ldrb.w	r3, [r6, #284]	; 0x11c
    for (idx = 0; idx < strlength; idx+=2 )
 8004116:	4602      	mov	r2, r0
    strlength = ( ( (psrc[0]-2) <= length) ? (psrc[0]-2) :length); 
 8004118:	3b02      	subs	r3, #2
 800411a:	42bb      	cmp	r3, r7
 800411c:	bfa8      	it	ge
 800411e:	463b      	movge	r3, r7
 8004120:	b29b      	uxth	r3, r3
    for (idx = 0; idx < strlength; idx+=2 )
 8004122:	4293      	cmp	r3, r2
 8004124:	d803      	bhi.n	800412e <USBH_Get_StringDesc+0x40>
    *pdest = 0; /* mark end of string */  
 8004126:	2300      	movs	r3, #0
 8004128:	7023      	strb	r3, [r4, #0]
}
 800412a:	b003      	add	sp, #12
 800412c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pdest =  psrc[idx];
 800412e:	18a9      	adds	r1, r5, r2
    for (idx = 0; idx < strlength; idx+=2 )
 8004130:	3202      	adds	r2, #2
      *pdest =  psrc[idx];
 8004132:	7889      	ldrb	r1, [r1, #2]
    for (idx = 0; idx < strlength; idx+=2 )
 8004134:	b292      	uxth	r2, r2
      *pdest =  psrc[idx];
 8004136:	f804 1b01 	strb.w	r1, [r4], #1
 800413a:	e7f2      	b.n	8004122 <USBH_Get_StringDesc+0x34>

0800413c <USBH_SetAddress>:
  if(phost->RequestState == CMD_SEND)
 800413c:	7883      	ldrb	r3, [r0, #2]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d106      	bne.n	8004150 <USBH_SetAddress+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8004142:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8004144:	2205      	movs	r2, #5
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8004146:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8004148:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800414a:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wIndex.w = 0;
 800414c:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0;
 800414e:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0 , 0 );
 8004150:	2200      	movs	r2, #0
 8004152:	4611      	mov	r1, r2
 8004154:	f7ff bdf2 	b.w	8003d3c <USBH_CtlReq>

08004158 <USBH_SetCfg>:
  if(phost->RequestState == CMD_SEND)
 8004158:	7883      	ldrb	r3, [r0, #2]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d106      	bne.n	800416c <USBH_SetCfg+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE |\
 800415e:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8004160:	2209      	movs	r2, #9
    phost->Control.setup.b.wValue.w = cfg_idx;
 8004162:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE |\
 8004164:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8004166:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wIndex.w = 0;
 8004168:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0; 
 800416a:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0 , 0 );      
 800416c:	2200      	movs	r2, #0
 800416e:	4611      	mov	r1, r2
 8004170:	f7ff bde4 	b.w	8003d3c <USBH_CtlReq>

08004174 <USBH_ClrFeature>:
  if(phost->RequestState == CMD_SEND)
 8004174:	7883      	ldrb	r3, [r0, #2]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d106      	bne.n	8004188 <USBH_ClrFeature+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | 
 800417a:	2202      	movs	r2, #2
    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800417c:	7443      	strb	r3, [r0, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800417e:	2300      	movs	r3, #0
    phost->Control.setup.b.wIndex.w = ep_num;
 8004180:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.bmRequestType = USB_H2D | 
 8004182:	7402      	strb	r2, [r0, #16]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8004184:	8243      	strh	r3, [r0, #18]
    phost->Control.setup.b.wLength.w = 0;           
 8004186:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0 , 0 );   
 8004188:	2200      	movs	r2, #0
 800418a:	4611      	mov	r1, r2
 800418c:	f7ff bdd6 	b.w	8003d3c <USBH_CtlReq>

08004190 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint8_t pipe_num)
{
 8004190:	b530      	push	{r4, r5, lr}

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004192:	2308      	movs	r3, #8
{
 8004194:	b085      	sub	sp, #20
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004196:	2400      	movs	r4, #0
{
 8004198:	4615      	mov	r5, r2
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800419a:	9302      	str	r3, [sp, #8]
 800419c:	9101      	str	r1, [sp, #4]
 800419e:	4623      	mov	r3, r4
 80041a0:	9403      	str	r4, [sp, #12]
 80041a2:	4622      	mov	r2, r4
 80041a4:	9400      	str	r4, [sp, #0]
 80041a6:	4629      	mov	r1, r5
 80041a8:	f007 fbb8 	bl	800b91c <USBH_LL_SubmitURB>
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */ 
                          0);
  return USBH_OK;  
}
 80041ac:	4620      	mov	r0, r4
 80041ae:	b005      	add	sp, #20
 80041b0:	bd30      	pop	{r4, r5, pc}

080041b2 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 80041b2:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 80041b4:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 80041b8:	b085      	sub	sp, #20
 80041ba:	461c      	mov	r4, r3
  if(phost->device.speed != USBH_SPEED_HIGH)
 80041bc:	2d00      	cmp	r5, #0
{
 80041be:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0;
  }
  
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80041c2:	9202      	str	r2, [sp, #8]
    do_ping = 0;
 80041c4:	bf18      	it	ne
 80041c6:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80041c8:	9101      	str	r1, [sp, #4]
 80041ca:	4621      	mov	r1, r4
 80041cc:	9303      	str	r3, [sp, #12]
 80041ce:	2301      	movs	r3, #1
 80041d0:	9300      	str	r3, [sp, #0]
 80041d2:	2300      	movs	r3, #0
 80041d4:	461a      	mov	r2, r3
 80041d6:	f007 fba1 	bl	800b91c <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */ 
                          do_ping);             /* do ping (HS Only)*/
  
  return USBH_OK;
}
 80041da:	2000      	movs	r0, #0
 80041dc:	b005      	add	sp, #20
 80041de:	bd30      	pop	{r4, r5, pc}

080041e0 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost, 
                                uint8_t* buff, 
                                uint16_t length,
                                uint8_t pipe_num)
{
 80041e0:	b530      	push	{r4, r5, lr}
 80041e2:	b085      	sub	sp, #20
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80041e4:	2400      	movs	r4, #0
{
 80041e6:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80041e8:	9202      	str	r2, [sp, #8]
 80041ea:	2201      	movs	r2, #1
 80041ec:	9101      	str	r1, [sp, #4]
 80041ee:	4623      	mov	r3, r4
 80041f0:	9403      	str	r4, [sp, #12]
 80041f2:	4629      	mov	r1, r5
 80041f4:	9200      	str	r2, [sp, #0]
 80041f6:	f007 fb91 	bl	800b91c <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */ 
                          0);
  return USBH_OK;
  
}
 80041fa:	4620      	mov	r0, r4
 80041fc:	b005      	add	sp, #20
 80041fe:	bd30      	pop	{r4, r5, pc}

08004200 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{ 
 8004200:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 8004202:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{ 
 8004206:	b085      	sub	sp, #20
 8004208:	461c      	mov	r4, r3
  if(phost->device.speed != USBH_SPEED_HIGH)
 800420a:	2d00      	cmp	r5, #0
{ 
 800420c:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0;
  }
  
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004210:	9202      	str	r2, [sp, #8]
 8004212:	f04f 0200 	mov.w	r2, #0
    do_ping = 0;
 8004216:	bf18      	it	ne
 8004218:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800421a:	9101      	str	r1, [sp, #4]
 800421c:	4621      	mov	r1, r4
 800421e:	9303      	str	r3, [sp, #12]
 8004220:	2301      	movs	r3, #1
 8004222:	9300      	str	r3, [sp, #0]
 8004224:	2302      	movs	r3, #2
 8004226:	f007 fb79 	bl	800b91c <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */  
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 800422a:	2000      	movs	r0, #0
 800422c:	b005      	add	sp, #20
 800422e:	bd30      	pop	{r4, r5, pc}

08004230 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t pipe_num)
{
 8004230:	b530      	push	{r4, r5, lr}
 8004232:	b085      	sub	sp, #20
 8004234:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004236:	2400      	movs	r4, #0
 8004238:	2302      	movs	r3, #2
 800423a:	9202      	str	r2, [sp, #8]
 800423c:	2201      	movs	r2, #1
 800423e:	9101      	str	r1, [sp, #4]
 8004240:	4629      	mov	r1, r5
 8004242:	9403      	str	r4, [sp, #12]
 8004244:	9200      	str	r2, [sp, #0]
 8004246:	f007 fb69 	bl	800b91c <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */  
                          0);
  return USBH_OK;
}
 800424a:	4620      	mov	r0, r4
 800424c:	b005      	add	sp, #20
 800424e:	bd30      	pop	{r4, r5, pc}

08004250 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8004250:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  USBH_LL_OpenPipe(phost,
 8004252:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8004256:	9402      	str	r4, [sp, #8]
 8004258:	f89d 401c 	ldrb.w	r4, [sp, #28]
 800425c:	9401      	str	r4, [sp, #4]
 800425e:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8004262:	9400      	str	r4, [sp, #0]
 8004264:	f007 fb34 	bl	800b8d0 <USBH_LL_OpenPipe>
                        ep_type,
                        mps);
  
  return USBH_OK; 

}
 8004268:	2000      	movs	r0, #0
 800426a:	b004      	add	sp, #16
 800426c:	bd10      	pop	{r4, pc}

0800426e <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 800426e:	b508      	push	{r3, lr}

  USBH_LL_ClosePipe(phost, pipe_num);
 8004270:	f007 fb46 	bl	800b900 <USBH_LL_ClosePipe>
  
  return USBH_OK; 

}
 8004274:	2000      	movs	r0, #0
 8004276:	bd08      	pop	{r3, pc}

08004278 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8004278:	b530      	push	{r4, r5, lr}
 800427a:	2300      	movs	r3, #0
 800427c:	f500 745f 	add.w	r4, r0, #892	; 0x37c
{
  uint8_t idx = 0;
  
  for (idx = 0 ; idx < 11 ; idx++)
  {
	if ((phost->Pipes[idx] & 0x8000) == 0)
 8004280:	f854 5b04 	ldr.w	r5, [r4], #4
 8004284:	b2da      	uxtb	r2, r3
 8004286:	042d      	lsls	r5, r5, #16
 8004288:	d408      	bmi.n	800429c <USBH_AllocPipe+0x24>
	phost->Pipes[pipe] = 0x8000 | ep_addr;
 800428a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800428e:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
	{
	   return idx;
 8004292:	b292      	uxth	r2, r2
	phost->Pipes[pipe] = 0x8000 | ep_addr;
 8004294:	f8c0 137c 	str.w	r1, [r0, #892]	; 0x37c
}
 8004298:	b2d0      	uxtb	r0, r2
 800429a:	bd30      	pop	{r4, r5, pc}
 800429c:	3301      	adds	r3, #1
  for (idx = 0 ; idx < 11 ; idx++)
 800429e:	2b0b      	cmp	r3, #11
 80042a0:	d1ee      	bne.n	8004280 <USBH_AllocPipe+0x8>
	} 
  }
  return 0xFFFF;
 80042a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042a6:	e7f7      	b.n	8004298 <USBH_AllocPipe+0x20>

080042a8 <USBH_FreePipe>:
   if(idx < 11)
 80042a8:	290a      	cmp	r1, #10
 80042aa:	bf9f      	itttt	ls
 80042ac:	eb00 0081 	addls.w	r0, r0, r1, lsl #2
	 phost->Pipes[idx] &= 0x7FFF;
 80042b0:	f8d0 337c 	ldrls.w	r3, [r0, #892]	; 0x37c
 80042b4:	f3c3 030e 	ubfxls	r3, r3, #0, #15
 80042b8:	f8c0 337c 	strls.w	r3, [r0, #892]	; 0x37c
}
 80042bc:	2000      	movs	r0, #0
 80042be:	4770      	bx	lr

080042c0 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 80042c0:	4b0f      	ldr	r3, [pc, #60]	; (8004300 <FATFS_LinkDriverEx+0x40>)
{
 80042c2:	b530      	push	{r4, r5, lr}
  if(disk.nbr < _VOLUMES)
 80042c4:	7a5d      	ldrb	r5, [r3, #9]
 80042c6:	f005 04ff 	and.w	r4, r5, #255	; 0xff
 80042ca:	b9b5      	cbnz	r5, 80042fa <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 80042cc:	7a5d      	ldrb	r5, [r3, #9]
 80042ce:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 80042d0:	7a5d      	ldrb	r5, [r3, #9]
 80042d2:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80042d6:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 80042d8:	7a58      	ldrb	r0, [r3, #9]
 80042da:	4418      	add	r0, r3
 80042dc:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 80042de:	7a5a      	ldrb	r2, [r3, #9]
 80042e0:	b2d2      	uxtb	r2, r2
 80042e2:	1c50      	adds	r0, r2, #1
    path[0] = DiskNum + '0';
 80042e4:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
 80042e6:	b2c0      	uxtb	r0, r0
 80042e8:	7258      	strb	r0, [r3, #9]
    path[1] = ':';
 80042ea:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 80042ec:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
    path[3] = 0;
 80042ee:	4620      	mov	r0, r4
    path[1] = ':';
 80042f0:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 80042f2:	232f      	movs	r3, #47	; 0x2f
    path[3] = 0;
 80042f4:	70cc      	strb	r4, [r1, #3]
    path[2] = '/';
 80042f6:	708b      	strb	r3, [r1, #2]
 80042f8:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 80042fa:	2001      	movs	r0, #1
    ret = 0;
  }

  return ret;
}
 80042fc:	bd30      	pop	{r4, r5, pc}
 80042fe:	bf00      	nop
 8004300:	200000b4 	.word	0x200000b4

08004304 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 8004304:	2200      	movs	r2, #0
 8004306:	f7ff bfdb 	b.w	80042c0 <FATFS_LinkDriverEx>

0800430a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800430a:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800430c:	f001 f8a8 	bl	8005460 <vTaskStartScheduler>
  
  return osOK;
}
 8004310:	2000      	movs	r0, #0
 8004312:	bd08      	pop	{r3, pc}

08004314 <osKernelSysTick>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004314:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 8004318:	b10b      	cbz	r3, 800431e <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
 800431a:	f001 b8ef 	b.w	80054fc <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
 800431e:	f001 b8e7 	b.w	80054f0 <xTaskGetTickCount>

08004322 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004322:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004324:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
{
 8004328:	b085      	sub	sp, #20
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800432a:	8a02      	ldrh	r2, [r0, #16]
{
 800432c:	460b      	mov	r3, r1
  if (priority != osPriorityError) {
 800432e:	2c84      	cmp	r4, #132	; 0x84
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004330:	e890 0022 	ldmia.w	r0, {r1, r5}
    fpriority += (priority - osPriorityIdle);
 8004334:	bf14      	ite	ne
 8004336:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004338:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800433a:	a803      	add	r0, sp, #12
 800433c:	9400      	str	r4, [sp, #0]
 800433e:	9001      	str	r0, [sp, #4]
 8004340:	4628      	mov	r0, r5
 8004342:	f000 ffbd 	bl	80052c0 <xTaskCreate>
 8004346:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004348:	bf0c      	ite	eq
 800434a:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 800434c:	2000      	movne	r0, #0
}
 800434e:	b005      	add	sp, #20
 8004350:	bd30      	pop	{r4, r5, pc}

08004352 <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004352:	2800      	cmp	r0, #0
 8004354:	bf08      	it	eq
 8004356:	2001      	moveq	r0, #1
{
 8004358:	b508      	push	{r3, lr}
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800435a:	f001 f9e5 	bl	8005728 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800435e:	2000      	movs	r0, #0
 8004360:	bd08      	pop	{r3, pc}

08004362 <osMutexCreate>:
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8004362:	2001      	movs	r0, #1
 8004364:	f000 bd4e 	b.w	8004e04 <xQueueCreateMutex>

08004368 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8004368:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800436a:	2400      	movs	r4, #0
{
 800436c:	460a      	mov	r2, r1
  portBASE_TYPE taskWoken = pdFALSE;  
 800436e:	9401      	str	r4, [sp, #4]
  
  
  if (mutex_id == NULL) {
 8004370:	b1e8      	cbz	r0, 80043ae <osMutexWait+0x46>
 8004372:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8004376:	b1a3      	cbz	r3, 80043a2 <osMutexWait+0x3a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004378:	aa01      	add	r2, sp, #4
 800437a:	4621      	mov	r1, r4
 800437c:	f000 fee6 	bl	800514c <xQueueReceiveFromISR>
 8004380:	2801      	cmp	r0, #1
 8004382:	d002      	beq.n	800438a <osMutexWait+0x22>
      return osErrorOS;
 8004384:	20ff      	movs	r0, #255	; 0xff
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
}
 8004386:	b002      	add	sp, #8
 8004388:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 800438a:	9b01      	ldr	r3, [sp, #4]
 800438c:	b13b      	cbz	r3, 800439e <osMutexWait+0x36>
 800438e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004392:	4b08      	ldr	r3, [pc, #32]	; (80043b4 <osMutexWait+0x4c>)
 8004394:	601a      	str	r2, [r3, #0]
 8004396:	f3bf 8f4f 	dsb	sy
 800439a:	f3bf 8f6f 	isb	sy
  return osOK;
 800439e:	2000      	movs	r0, #0
 80043a0:	e7f1      	b.n	8004386 <osMutexWait+0x1e>
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80043a2:	4619      	mov	r1, r3
 80043a4:	f000 fe08 	bl	8004fb8 <xQueueGenericReceive>
 80043a8:	2801      	cmp	r0, #1
 80043aa:	d1eb      	bne.n	8004384 <osMutexWait+0x1c>
 80043ac:	e7f7      	b.n	800439e <osMutexWait+0x36>
    return osErrorParameter;
 80043ae:	2080      	movs	r0, #128	; 0x80
 80043b0:	e7e9      	b.n	8004386 <osMutexWait+0x1e>
 80043b2:	bf00      	nop
 80043b4:	e000ed04 	.word	0xe000ed04

080043b8 <osSemaphoreCreate>:
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 80043b8:	2901      	cmp	r1, #1
{ 
 80043ba:	4608      	mov	r0, r1
 80043bc:	b510      	push	{r4, lr}
  if (count == 1) {
 80043be:	d10c      	bne.n	80043da <osSemaphoreCreate+0x22>
    vSemaphoreCreateBinary(sema);
 80043c0:	2203      	movs	r2, #3
 80043c2:	2100      	movs	r1, #0
 80043c4:	f000 fc3c 	bl	8004c40 <xQueueGenericCreate>
 80043c8:	4604      	mov	r4, r0
 80043ca:	b120      	cbz	r0, 80043d6 <osSemaphoreCreate+0x1e>
 80043cc:	2300      	movs	r3, #0
 80043ce:	461a      	mov	r2, r3
 80043d0:	4619      	mov	r1, r3
 80043d2:	f000 fc59 	bl	8004c88 <xQueueGenericSend>
#else
    return NULL;
#endif
  }
#endif
}
 80043d6:	4620      	mov	r0, r4
 80043d8:	bd10      	pop	{r4, pc}
    return NULL;
 80043da:	2400      	movs	r4, #0
 80043dc:	e7fb      	b.n	80043d6 <osSemaphoreCreate+0x1e>
	...

080043e0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80043e0:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80043e2:	2400      	movs	r4, #0
{
 80043e4:	460a      	mov	r2, r1
  portBASE_TYPE taskWoken = pdFALSE;  
 80043e6:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 80043e8:	b1e8      	cbz	r0, 8004426 <osSemaphoreWait+0x46>
 80043ea:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 80043ee:	b1a3      	cbz	r3, 800441a <osSemaphoreWait+0x3a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80043f0:	aa01      	add	r2, sp, #4
 80043f2:	4621      	mov	r1, r4
 80043f4:	f000 feaa 	bl	800514c <xQueueReceiveFromISR>
 80043f8:	2801      	cmp	r0, #1
 80043fa:	d002      	beq.n	8004402 <osSemaphoreWait+0x22>
      return osErrorOS;
 80043fc:	20ff      	movs	r0, #255	; 0xff
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
}
 80043fe:	b002      	add	sp, #8
 8004400:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 8004402:	9b01      	ldr	r3, [sp, #4]
 8004404:	b13b      	cbz	r3, 8004416 <osSemaphoreWait+0x36>
 8004406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800440a:	4b08      	ldr	r3, [pc, #32]	; (800442c <osSemaphoreWait+0x4c>)
 800440c:	601a      	str	r2, [r3, #0]
 800440e:	f3bf 8f4f 	dsb	sy
 8004412:	f3bf 8f6f 	isb	sy
  return osOK;
 8004416:	2000      	movs	r0, #0
 8004418:	e7f1      	b.n	80043fe <osSemaphoreWait+0x1e>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800441a:	4619      	mov	r1, r3
 800441c:	f000 fdcc 	bl	8004fb8 <xQueueGenericReceive>
 8004420:	2801      	cmp	r0, #1
 8004422:	d1eb      	bne.n	80043fc <osSemaphoreWait+0x1c>
 8004424:	e7f7      	b.n	8004416 <osSemaphoreWait+0x36>
    return osErrorParameter;
 8004426:	2080      	movs	r0, #128	; 0x80
 8004428:	e7e9      	b.n	80043fe <osSemaphoreWait+0x1e>
 800442a:	bf00      	nop
 800442c:	e000ed04 	.word	0xe000ed04

08004430 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8004430:	b513      	push	{r0, r1, r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8004432:	2400      	movs	r4, #0
 8004434:	9401      	str	r4, [sp, #4]
 8004436:	f3ef 8305 	mrs	r3, IPSR
  
  
  if (inHandlerMode()) {
 800443a:	b193      	cbz	r3, 8004462 <osSemaphoreRelease+0x32>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800443c:	a901      	add	r1, sp, #4
 800443e:	f000 fd5d 	bl	8004efc <xQueueGiveFromISR>
 8004442:	2801      	cmp	r0, #1
 8004444:	d113      	bne.n	800446e <osSemaphoreRelease+0x3e>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004446:	9b01      	ldr	r3, [sp, #4]
 8004448:	b913      	cbnz	r3, 8004450 <osSemaphoreRelease+0x20>
  osStatus result = osOK;
 800444a:	2000      	movs	r0, #0
      result = osErrorOS;
    }
  }
  
  return result;
}
 800444c:	b002      	add	sp, #8
 800444e:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8004450:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004454:	4b07      	ldr	r3, [pc, #28]	; (8004474 <osSemaphoreRelease+0x44>)
 8004456:	601a      	str	r2, [r3, #0]
 8004458:	f3bf 8f4f 	dsb	sy
 800445c:	f3bf 8f6f 	isb	sy
 8004460:	e7f3      	b.n	800444a <osSemaphoreRelease+0x1a>
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8004462:	461a      	mov	r2, r3
 8004464:	4619      	mov	r1, r3
 8004466:	f000 fc0f 	bl	8004c88 <xQueueGenericSend>
 800446a:	2801      	cmp	r0, #1
 800446c:	d0ed      	beq.n	800444a <osSemaphoreRelease+0x1a>
      result = osErrorOS;
 800446e:	20ff      	movs	r0, #255	; 0xff
 8004470:	e7ec      	b.n	800444c <osSemaphoreRelease+0x1c>
 8004472:	bf00      	nop
 8004474:	e000ed04 	.word	0xe000ed04

08004478 <osMutexRelease>:
 8004478:	f7ff bfda 	b.w	8004430 <osSemaphoreRelease>

0800447c <osMessageCreate>:
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800447c:	2200      	movs	r2, #0
 800447e:	c803      	ldmia	r0, {r0, r1}
 8004480:	f000 bbde 	b.w	8004c40 <xQueueGenericCreate>

08004484 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8004484:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 8004486:	2400      	movs	r4, #0
{
 8004488:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800448a:	9403      	str	r4, [sp, #12]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
 800448c:	42a2      	cmp	r2, r4
 800448e:	bf08      	it	eq
 8004490:	2201      	moveq	r2, #1
 8004492:	f3ef 8305 	mrs	r3, IPSR
  }
  
  if (inHandlerMode()) {
 8004496:	b1ab      	cbz	r3, 80044c4 <osMessagePut+0x40>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8004498:	4623      	mov	r3, r4
 800449a:	aa03      	add	r2, sp, #12
 800449c:	a901      	add	r1, sp, #4
 800449e:	f000 fcc3 	bl	8004e28 <xQueueGenericSendFromISR>
 80044a2:	2801      	cmp	r0, #1
 80044a4:	d002      	beq.n	80044ac <osMessagePut+0x28>
      return osErrorOS;
 80044a6:	20ff      	movs	r0, #255	; 0xff
      return osErrorOS;
    }
  }
  
  return osOK;
}
 80044a8:	b004      	add	sp, #16
 80044aa:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 80044ac:	9b03      	ldr	r3, [sp, #12]
 80044ae:	b13b      	cbz	r3, 80044c0 <osMessagePut+0x3c>
 80044b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044b4:	4b06      	ldr	r3, [pc, #24]	; (80044d0 <osMessagePut+0x4c>)
 80044b6:	601a      	str	r2, [r3, #0]
 80044b8:	f3bf 8f4f 	dsb	sy
 80044bc:	f3bf 8f6f 	isb	sy
  return osOK;
 80044c0:	2000      	movs	r0, #0
 80044c2:	e7f1      	b.n	80044a8 <osMessagePut+0x24>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80044c4:	a901      	add	r1, sp, #4
 80044c6:	f000 fbdf 	bl	8004c88 <xQueueGenericSend>
 80044ca:	2801      	cmp	r0, #1
 80044cc:	d1eb      	bne.n	80044a6 <osMessagePut+0x22>
 80044ce:	e7f7      	b.n	80044c0 <osMessagePut+0x3c>
 80044d0:	e000ed04 	.word	0xe000ed04

080044d4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80044d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 80044d6:	2600      	movs	r6, #0
{
 80044d8:	b085      	sub	sp, #20
 80044da:	4604      	mov	r4, r0
 80044dc:	4617      	mov	r7, r2
 80044de:	4608      	mov	r0, r1
  event.def.message_id = queue_id;
 80044e0:	9103      	str	r1, [sp, #12]
  event.value.v = 0;
 80044e2:	9602      	str	r6, [sp, #8]
 80044e4:	ad01      	add	r5, sp, #4
  
  if (queue_id == NULL) {
 80044e6:	b911      	cbnz	r1, 80044ee <osMessageGet+0x1a>
    event.status = osErrorParameter;
 80044e8:	2380      	movs	r3, #128	; 0x80
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80044ea:	9301      	str	r3, [sp, #4]
 80044ec:	e016      	b.n	800451c <osMessageGet+0x48>
  taskWoken = pdFALSE;
 80044ee:	9600      	str	r6, [sp, #0]
 80044f0:	f3ef 8305 	mrs	r3, IPSR
  if (inHandlerMode()) {
 80044f4:	b1cb      	cbz	r3, 800452a <osMessageGet+0x56>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80044f6:	466a      	mov	r2, sp
 80044f8:	a902      	add	r1, sp, #8
 80044fa:	f000 fe27 	bl	800514c <xQueueReceiveFromISR>
 80044fe:	2801      	cmp	r0, #1
      event.status = osEventMessage;
 8004500:	bf0a      	itet	eq
 8004502:	2310      	moveq	r3, #16
      event.status = osOK;
 8004504:	9601      	strne	r6, [sp, #4]
      event.status = osEventMessage;
 8004506:	9301      	streq	r3, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 8004508:	9b00      	ldr	r3, [sp, #0]
 800450a:	b13b      	cbz	r3, 800451c <osMessageGet+0x48>
 800450c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004510:	4b0c      	ldr	r3, [pc, #48]	; (8004544 <osMessageGet+0x70>)
 8004512:	601a      	str	r2, [r3, #0]
 8004514:	f3bf 8f4f 	dsb	sy
 8004518:	f3bf 8f6f 	isb	sy
    }
  }
  
  return event;
 800451c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004520:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004524:	4620      	mov	r0, r4
 8004526:	b005      	add	sp, #20
 8004528:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800452a:	a902      	add	r1, sp, #8
 800452c:	f000 fd44 	bl	8004fb8 <xQueueGenericReceive>
 8004530:	2801      	cmp	r0, #1
 8004532:	d101      	bne.n	8004538 <osMessageGet+0x64>
      event.status = osEventMessage;
 8004534:	2310      	movs	r3, #16
 8004536:	e7d8      	b.n	80044ea <osMessageGet+0x16>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8004538:	2f00      	cmp	r7, #0
 800453a:	bf0c      	ite	eq
 800453c:	2300      	moveq	r3, #0
 800453e:	2340      	movne	r3, #64	; 0x40
 8004540:	e7d3      	b.n	80044ea <osMessageGet+0x16>
 8004542:	bf00      	nop
 8004544:	e000ed04 	.word	0xe000ed04

08004548 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8004548:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800454a:	f001 fa3d 	bl	80059c8 <xTaskGetSchedulerState>
 800454e:	2801      	cmp	r0, #1
 8004550:	d003      	beq.n	800455a <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8004552:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8004556:	f000 b90d 	b.w	8004774 <xPortSysTickHandler>
 800455a:	bd08      	pop	{r3, pc}

0800455c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800455c:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004560:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004564:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004566:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004568:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800456a:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800456c:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800456e:	6003      	str	r3, [r0, #0]
 8004570:	4770      	bx	lr

08004572 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004572:	2300      	movs	r3, #0
 8004574:	6103      	str	r3, [r0, #16]
 8004576:	4770      	bx	lr

08004578 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8004578:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800457a:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800457c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800457e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004580:	689a      	ldr	r2, [r3, #8]
 8004582:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004584:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8004586:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004588:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800458a:	3301      	adds	r3, #1
 800458c:	6003      	str	r3, [r0, #0]
 800458e:	4770      	bx	lr

08004590 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004590:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004592:	1c53      	adds	r3, r2, #1
{
 8004594:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8004596:	d10a      	bne.n	80045ae <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004598:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800459a:	685a      	ldr	r2, [r3, #4]
 800459c:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800459e:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80045a0:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80045a2:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80045a4:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80045a6:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80045a8:	3301      	adds	r3, #1
 80045aa:	6003      	str	r3, [r0, #0]
 80045ac:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045ae:	f100 0308 	add.w	r3, r0, #8
 80045b2:	685c      	ldr	r4, [r3, #4]
 80045b4:	6825      	ldr	r5, [r4, #0]
 80045b6:	42aa      	cmp	r2, r5
 80045b8:	d3ef      	bcc.n	800459a <vListInsert+0xa>
 80045ba:	4623      	mov	r3, r4
 80045bc:	e7f9      	b.n	80045b2 <vListInsert+0x22>

080045be <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80045be:	6841      	ldr	r1, [r0, #4]
 80045c0:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80045c2:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80045c4:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80045c6:	6882      	ldr	r2, [r0, #8]
 80045c8:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80045ca:	6859      	ldr	r1, [r3, #4]
 80045cc:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80045ce:	bf08      	it	eq
 80045d0:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80045d2:	2200      	movs	r2, #0
 80045d4:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80045d6:	6818      	ldr	r0, [r3, #0]
 80045d8:	3801      	subs	r0, #1
 80045da:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 80045dc:	4770      	bx	lr
	...

080045e0 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80045e0:	4b0c      	ldr	r3, [pc, #48]	; (8004614 <prvTaskExitError+0x34>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	3301      	adds	r3, #1
 80045e6:	d00a      	beq.n	80045fe <prvTaskExitError+0x1e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80045e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ec:	b672      	cpsid	i
 80045ee:	f383 8811 	msr	BASEPRI, r3
 80045f2:	f3bf 8f6f 	isb	sy
 80045f6:	f3bf 8f4f 	dsb	sy
 80045fa:	b662      	cpsie	i
 80045fc:	e7fe      	b.n	80045fc <prvTaskExitError+0x1c>
 80045fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004602:	b672      	cpsid	i
 8004604:	f383 8811 	msr	BASEPRI, r3
 8004608:	f3bf 8f6f 	isb	sy
 800460c:	f3bf 8f4f 	dsb	sy
 8004610:	b662      	cpsie	i
 8004612:	e7fe      	b.n	8004612 <prvTaskExitError+0x32>
 8004614:	20000020 	.word	0x20000020

08004618 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004618:	4806      	ldr	r0, [pc, #24]	; (8004634 <prvPortStartFirstTask+0x1c>)
 800461a:	6800      	ldr	r0, [r0, #0]
 800461c:	6800      	ldr	r0, [r0, #0]
 800461e:	f380 8808 	msr	MSP, r0
 8004622:	b662      	cpsie	i
 8004624:	b661      	cpsie	f
 8004626:	f3bf 8f4f 	dsb	sy
 800462a:	f3bf 8f6f 	isb	sy
 800462e:	df00      	svc	0
 8004630:	bf00      	nop
 8004632:	0000      	.short	0x0000
 8004634:	e000ed08 	.word	0xe000ed08

08004638 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004638:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004648 <vPortEnableVFP+0x10>
 800463c:	6801      	ldr	r1, [r0, #0]
 800463e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004642:	6001      	str	r1, [r0, #0]
 8004644:	4770      	bx	lr
 8004646:	0000      	.short	0x0000
 8004648:	e000ed88 	.word	0xe000ed88

0800464c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800464c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004650:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004654:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8004658:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800465a:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800465c:	4b03      	ldr	r3, [pc, #12]	; (800466c <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800465e:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004660:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8004662:	f06f 0302 	mvn.w	r3, #2
 8004666:	6203      	str	r3, [r0, #32]
}
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	080045e1 	.word	0x080045e1

08004670 <SVC_Handler>:
	__asm volatile (
 8004670:	4b07      	ldr	r3, [pc, #28]	; (8004690 <pxCurrentTCBConst2>)
 8004672:	6819      	ldr	r1, [r3, #0]
 8004674:	6808      	ldr	r0, [r1, #0]
 8004676:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800467a:	f380 8809 	msr	PSP, r0
 800467e:	f3bf 8f6f 	isb	sy
 8004682:	f04f 0000 	mov.w	r0, #0
 8004686:	f380 8811 	msr	BASEPRI, r0
 800468a:	4770      	bx	lr
 800468c:	f3af 8000 	nop.w

08004690 <pxCurrentTCBConst2>:
 8004690:	20003ce0 	.word	0x20003ce0

08004694 <vPortEnterCritical>:
 8004694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004698:	b672      	cpsid	i
 800469a:	f383 8811 	msr	BASEPRI, r3
 800469e:	f3bf 8f6f 	isb	sy
 80046a2:	f3bf 8f4f 	dsb	sy
 80046a6:	b662      	cpsie	i
	uxCriticalNesting++;
 80046a8:	4a0b      	ldr	r2, [pc, #44]	; (80046d8 <vPortEnterCritical+0x44>)
 80046aa:	6813      	ldr	r3, [r2, #0]
 80046ac:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80046ae:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80046b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80046b2:	d10f      	bne.n	80046d4 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80046b4:	4b09      	ldr	r3, [pc, #36]	; (80046dc <vPortEnterCritical+0x48>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f013 0fff 	tst.w	r3, #255	; 0xff
 80046bc:	d00a      	beq.n	80046d4 <vPortEnterCritical+0x40>
 80046be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c2:	b672      	cpsid	i
 80046c4:	f383 8811 	msr	BASEPRI, r3
 80046c8:	f3bf 8f6f 	isb	sy
 80046cc:	f3bf 8f4f 	dsb	sy
 80046d0:	b662      	cpsie	i
 80046d2:	e7fe      	b.n	80046d2 <vPortEnterCritical+0x3e>
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	20000020 	.word	0x20000020
 80046dc:	e000ed04 	.word	0xe000ed04

080046e0 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80046e0:	4a09      	ldr	r2, [pc, #36]	; (8004708 <vPortExitCritical+0x28>)
 80046e2:	6813      	ldr	r3, [r2, #0]
 80046e4:	b953      	cbnz	r3, 80046fc <vPortExitCritical+0x1c>
 80046e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ea:	b672      	cpsid	i
 80046ec:	f383 8811 	msr	BASEPRI, r3
 80046f0:	f3bf 8f6f 	isb	sy
 80046f4:	f3bf 8f4f 	dsb	sy
 80046f8:	b662      	cpsie	i
 80046fa:	e7fe      	b.n	80046fa <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 80046fc:	3b01      	subs	r3, #1
 80046fe:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004700:	b90b      	cbnz	r3, 8004706 <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004702:	f383 8811 	msr	BASEPRI, r3
 8004706:	4770      	bx	lr
 8004708:	20000020 	.word	0x20000020
 800470c:	00000000 	.word	0x00000000

08004710 <PendSV_Handler>:
	__asm volatile
 8004710:	f3ef 8009 	mrs	r0, PSP
 8004714:	f3bf 8f6f 	isb	sy
 8004718:	4b15      	ldr	r3, [pc, #84]	; (8004770 <pxCurrentTCBConst>)
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	f01e 0f10 	tst.w	lr, #16
 8004720:	bf08      	it	eq
 8004722:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004726:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800472a:	6010      	str	r0, [r2, #0]
 800472c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8004730:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004734:	b672      	cpsid	i
 8004736:	f380 8811 	msr	BASEPRI, r0
 800473a:	f3bf 8f4f 	dsb	sy
 800473e:	f3bf 8f6f 	isb	sy
 8004742:	b662      	cpsie	i
 8004744:	f001 f850 	bl	80057e8 <vTaskSwitchContext>
 8004748:	f04f 0000 	mov.w	r0, #0
 800474c:	f380 8811 	msr	BASEPRI, r0
 8004750:	bc08      	pop	{r3}
 8004752:	6819      	ldr	r1, [r3, #0]
 8004754:	6808      	ldr	r0, [r1, #0]
 8004756:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800475a:	f01e 0f10 	tst.w	lr, #16
 800475e:	bf08      	it	eq
 8004760:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004764:	f380 8809 	msr	PSP, r0
 8004768:	f3bf 8f6f 	isb	sy
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop

08004770 <pxCurrentTCBConst>:
 8004770:	20003ce0 	.word	0x20003ce0

08004774 <xPortSysTickHandler>:
{
 8004774:	b508      	push	{r3, lr}
	__asm volatile
 8004776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800477a:	b672      	cpsid	i
 800477c:	f383 8811 	msr	BASEPRI, r3
 8004780:	f3bf 8f6f 	isb	sy
 8004784:	f3bf 8f4f 	dsb	sy
 8004788:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 800478a:	f000 febf 	bl	800550c <xTaskIncrementTick>
 800478e:	b118      	cbz	r0, 8004798 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004790:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004794:	4b02      	ldr	r3, [pc, #8]	; (80047a0 <xPortSysTickHandler+0x2c>)
 8004796:	601a      	str	r2, [r3, #0]
	__asm volatile
 8004798:	2300      	movs	r3, #0
 800479a:	f383 8811 	msr	BASEPRI, r3
 800479e:	bd08      	pop	{r3, pc}
 80047a0:	e000ed04 	.word	0xe000ed04

080047a4 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80047a4:	4b06      	ldr	r3, [pc, #24]	; (80047c0 <vPortSetupTimerInterrupt+0x1c>)
 80047a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80047b0:	4a04      	ldr	r2, [pc, #16]	; (80047c4 <vPortSetupTimerInterrupt+0x20>)
 80047b2:	3b01      	subs	r3, #1
 80047b4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80047b6:	2207      	movs	r2, #7
 80047b8:	4b03      	ldr	r3, [pc, #12]	; (80047c8 <vPortSetupTimerInterrupt+0x24>)
 80047ba:	601a      	str	r2, [r3, #0]
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	2000002c 	.word	0x2000002c
 80047c4:	e000e014 	.word	0xe000e014
 80047c8:	e000e010 	.word	0xe000e010

080047cc <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80047cc:	4b23      	ldr	r3, [pc, #140]	; (800485c <xPortStartScheduler+0x90>)
{
 80047ce:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80047d0:	781a      	ldrb	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047d2:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80047d4:	b2d2      	uxtb	r2, r2
 80047d6:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80047d8:	22ff      	movs	r2, #255	; 0xff
 80047da:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80047dc:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80047de:	4a20      	ldr	r2, [pc, #128]	; (8004860 <xPortStartScheduler+0x94>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80047e6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80047ea:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80047ee:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80047f0:	2207      	movs	r2, #7
 80047f2:	4b1c      	ldr	r3, [pc, #112]	; (8004864 <xPortStartScheduler+0x98>)
 80047f4:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047f6:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80047fa:	1e54      	subs	r4, r2, #1
 80047fc:	0600      	lsls	r0, r0, #24
 80047fe:	d423      	bmi.n	8004848 <xPortStartScheduler+0x7c>
 8004800:	b101      	cbz	r1, 8004804 <xPortStartScheduler+0x38>
 8004802:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004808:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800480c:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800480e:	9b01      	ldr	r3, [sp, #4]
 8004810:	4a12      	ldr	r2, [pc, #72]	; (800485c <xPortStartScheduler+0x90>)
 8004812:	b2db      	uxtb	r3, r3
 8004814:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004816:	4b14      	ldr	r3, [pc, #80]	; (8004868 <xPortStartScheduler+0x9c>)
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800481e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8004826:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8004828:	f7ff ffbc 	bl	80047a4 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800482c:	2200      	movs	r2, #0
 800482e:	4b0f      	ldr	r3, [pc, #60]	; (800486c <xPortStartScheduler+0xa0>)
 8004830:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 8004832:	f7ff ff01 	bl	8004638 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004836:	4a0e      	ldr	r2, [pc, #56]	; (8004870 <xPortStartScheduler+0xa4>)
 8004838:	6813      	ldr	r3, [r2, #0]
 800483a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800483e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8004840:	f7ff feea 	bl	8004618 <prvPortStartFirstTask>
	prvTaskExitError();
 8004844:	f7ff fecc 	bl	80045e0 <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004848:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800484c:	2101      	movs	r1, #1
 800484e:	0052      	lsls	r2, r2, #1
 8004850:	b2d2      	uxtb	r2, r2
 8004852:	f88d 2003 	strb.w	r2, [sp, #3]
 8004856:	4622      	mov	r2, r4
 8004858:	e7cd      	b.n	80047f6 <xPortStartScheduler+0x2a>
 800485a:	bf00      	nop
 800485c:	e000e400 	.word	0xe000e400
 8004860:	200000c0 	.word	0x200000c0
 8004864:	200000c4 	.word	0x200000c4
 8004868:	e000ed20 	.word	0xe000ed20
 800486c:	20000020 	.word	0x20000020
 8004870:	e000ef34 	.word	0xe000ef34

08004874 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8004874:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004878:	2b0f      	cmp	r3, #15
 800487a:	d910      	bls.n	800489e <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800487c:	4a12      	ldr	r2, [pc, #72]	; (80048c8 <vPortValidateInterruptPriority+0x54>)
 800487e:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004880:	4a12      	ldr	r2, [pc, #72]	; (80048cc <vPortValidateInterruptPriority+0x58>)
 8004882:	7812      	ldrb	r2, [r2, #0]
 8004884:	429a      	cmp	r2, r3
 8004886:	d90a      	bls.n	800489e <vPortValidateInterruptPriority+0x2a>
	__asm volatile
 8004888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800488c:	b672      	cpsid	i
 800488e:	f383 8811 	msr	BASEPRI, r3
 8004892:	f3bf 8f6f 	isb	sy
 8004896:	f3bf 8f4f 	dsb	sy
 800489a:	b662      	cpsie	i
 800489c:	e7fe      	b.n	800489c <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800489e:	4b0c      	ldr	r3, [pc, #48]	; (80048d0 <vPortValidateInterruptPriority+0x5c>)
 80048a0:	4a0c      	ldr	r2, [pc, #48]	; (80048d4 <vPortValidateInterruptPriority+0x60>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	6812      	ldr	r2, [r2, #0]
 80048a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d90a      	bls.n	80048c4 <vPortValidateInterruptPriority+0x50>
 80048ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b2:	b672      	cpsid	i
 80048b4:	f383 8811 	msr	BASEPRI, r3
 80048b8:	f3bf 8f6f 	isb	sy
 80048bc:	f3bf 8f4f 	dsb	sy
 80048c0:	b662      	cpsie	i
 80048c2:	e7fe      	b.n	80048c2 <vPortValidateInterruptPriority+0x4e>
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	e000e3f0 	.word	0xe000e3f0
 80048cc:	200000c0 	.word	0x200000c0
 80048d0:	e000ed0c 	.word	0xe000ed0c
 80048d4:	200000c4 	.word	0x200000c4

080048d8 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80048d8:	4b0f      	ldr	r3, [pc, #60]	; (8004918 <prvInsertBlockIntoFreeList+0x40>)
{
 80048da:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	4282      	cmp	r2, r0
 80048e0:	d318      	bcc.n	8004914 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80048e2:	685c      	ldr	r4, [r3, #4]
 80048e4:	1919      	adds	r1, r3, r4
 80048e6:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80048e8:	bf01      	itttt	eq
 80048ea:	6841      	ldreq	r1, [r0, #4]
 80048ec:	4618      	moveq	r0, r3
 80048ee:	1909      	addeq	r1, r1, r4
 80048f0:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80048f2:	6844      	ldr	r4, [r0, #4]
 80048f4:	1901      	adds	r1, r0, r4
 80048f6:	428a      	cmp	r2, r1
 80048f8:	d107      	bne.n	800490a <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80048fa:	4908      	ldr	r1, [pc, #32]	; (800491c <prvInsertBlockIntoFreeList+0x44>)
 80048fc:	6809      	ldr	r1, [r1, #0]
 80048fe:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004900:	bf1f      	itttt	ne
 8004902:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004904:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004906:	1909      	addne	r1, r1, r4
 8004908:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800490a:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800490c:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800490e:	bf18      	it	ne
 8004910:	6018      	strne	r0, [r3, #0]
 8004912:	bd10      	pop	{r4, pc}
 8004914:	4613      	mov	r3, r2
 8004916:	e7e1      	b.n	80048dc <prvInsertBlockIntoFreeList+0x4>
 8004918:	20003cd8 	.word	0x20003cd8
 800491c:	200000c8 	.word	0x200000c8

08004920 <pvPortMalloc>:
{
 8004920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004924:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8004926:	f000 fddb 	bl	80054e0 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800492a:	4940      	ldr	r1, [pc, #256]	; (8004a2c <pvPortMalloc+0x10c>)
 800492c:	4d40      	ldr	r5, [pc, #256]	; (8004a30 <pvPortMalloc+0x110>)
 800492e:	680b      	ldr	r3, [r1, #0]
 8004930:	bb0b      	cbnz	r3, 8004976 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8004932:	4a40      	ldr	r2, [pc, #256]	; (8004a34 <pvPortMalloc+0x114>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004934:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004936:	4e40      	ldr	r6, [pc, #256]	; (8004a38 <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004938:	bf1b      	ittet	ne
 800493a:	1dd0      	addne	r0, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800493c:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004940:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004944:	f020 0007 	bicne.w	r0, r0, #7
 8004948:	bf1c      	itt	ne
 800494a:	4602      	movne	r2, r0
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800494c:	1a1b      	subne	r3, r3, r0
	xStart.xBlockSize = ( size_t ) 0;
 800494e:	2000      	movs	r0, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004950:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004952:	6032      	str	r2, [r6, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004954:	6070      	str	r0, [r6, #4]
	uxAddress -= xHeapStructSize;
 8004956:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004958:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 800495c:	6018      	str	r0, [r3, #0]
	pxEnd->xBlockSize = 0;
 800495e:	6058      	str	r0, [r3, #4]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004960:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 8004962:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004964:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004966:	4b35      	ldr	r3, [pc, #212]	; (8004a3c <pvPortMalloc+0x11c>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004968:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800496a:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800496c:	4b34      	ldr	r3, [pc, #208]	; (8004a40 <pvPortMalloc+0x120>)
 800496e:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004970:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004974:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004976:	682f      	ldr	r7, [r5, #0]
 8004978:	4227      	tst	r7, r4
 800497a:	d116      	bne.n	80049aa <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 800497c:	2c00      	cmp	r4, #0
 800497e:	d042      	beq.n	8004a06 <pvPortMalloc+0xe6>
				xWantedSize += xHeapStructSize;
 8004980:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004984:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004986:	bf1c      	itt	ne
 8004988:	f023 0307 	bicne.w	r3, r3, #7
 800498c:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800498e:	b163      	cbz	r3, 80049aa <pvPortMalloc+0x8a>
 8004990:	4a2b      	ldr	r2, [pc, #172]	; (8004a40 <pvPortMalloc+0x120>)
 8004992:	6816      	ldr	r6, [r2, #0]
 8004994:	4690      	mov	r8, r2
 8004996:	42b3      	cmp	r3, r6
 8004998:	d807      	bhi.n	80049aa <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 800499a:	4a27      	ldr	r2, [pc, #156]	; (8004a38 <pvPortMalloc+0x118>)
 800499c:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800499e:	6868      	ldr	r0, [r5, #4]
 80049a0:	4283      	cmp	r3, r0
 80049a2:	d804      	bhi.n	80049ae <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 80049a4:	6809      	ldr	r1, [r1, #0]
 80049a6:	428d      	cmp	r5, r1
 80049a8:	d107      	bne.n	80049ba <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 80049aa:	2400      	movs	r4, #0
 80049ac:	e02b      	b.n	8004a06 <pvPortMalloc+0xe6>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80049ae:	682c      	ldr	r4, [r5, #0]
 80049b0:	2c00      	cmp	r4, #0
 80049b2:	d0f7      	beq.n	80049a4 <pvPortMalloc+0x84>
 80049b4:	462a      	mov	r2, r5
 80049b6:	4625      	mov	r5, r4
 80049b8:	e7f1      	b.n	800499e <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80049ba:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80049bc:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80049be:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80049c0:	1ac2      	subs	r2, r0, r3
 80049c2:	2a10      	cmp	r2, #16
 80049c4:	d911      	bls.n	80049ea <pvPortMalloc+0xca>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80049c6:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80049c8:	0741      	lsls	r1, r0, #29
 80049ca:	d00a      	beq.n	80049e2 <pvPortMalloc+0xc2>
 80049cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d0:	b672      	cpsid	i
 80049d2:	f383 8811 	msr	BASEPRI, r3
 80049d6:	f3bf 8f6f 	isb	sy
 80049da:	f3bf 8f4f 	dsb	sy
 80049de:	b662      	cpsie	i
 80049e0:	e7fe      	b.n	80049e0 <pvPortMalloc+0xc0>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80049e2:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80049e4:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80049e6:	f7ff ff77 	bl	80048d8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80049ea:	686b      	ldr	r3, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80049ec:	3408      	adds	r4, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80049ee:	4913      	ldr	r1, [pc, #76]	; (8004a3c <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80049f0:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80049f2:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80049f4:	6808      	ldr	r0, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 80049f6:	2300      	movs	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80049f8:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80049fc:	4286      	cmp	r6, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80049fe:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004a00:	602b      	str	r3, [r5, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004a02:	bf38      	it	cc
 8004a04:	600e      	strcc	r6, [r1, #0]
	( void ) xTaskResumeAll();
 8004a06:	f000 fe15 	bl	8005634 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a0a:	0763      	lsls	r3, r4, #29
 8004a0c:	d00a      	beq.n	8004a24 <pvPortMalloc+0x104>
 8004a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a12:	b672      	cpsid	i
 8004a14:	f383 8811 	msr	BASEPRI, r3
 8004a18:	f3bf 8f6f 	isb	sy
 8004a1c:	f3bf 8f4f 	dsb	sy
 8004a20:	b662      	cpsie	i
 8004a22:	e7fe      	b.n	8004a22 <pvPortMalloc+0x102>
}
 8004a24:	4620      	mov	r0, r4
 8004a26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a2a:	bf00      	nop
 8004a2c:	200000c8 	.word	0x200000c8
 8004a30:	20003ccc 	.word	0x20003ccc
 8004a34:	200000cc 	.word	0x200000cc
 8004a38:	20003cd8 	.word	0x20003cd8
 8004a3c:	20003cd4 	.word	0x20003cd4
 8004a40:	20003cd0 	.word	0x20003cd0

08004a44 <vPortFree>:
{
 8004a44:	b510      	push	{r4, lr}
	if( pv != NULL )
 8004a46:	4604      	mov	r4, r0
 8004a48:	2800      	cmp	r0, #0
 8004a4a:	d032      	beq.n	8004ab2 <vPortFree+0x6e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004a4c:	4a19      	ldr	r2, [pc, #100]	; (8004ab4 <vPortFree+0x70>)
 8004a4e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8004a52:	6812      	ldr	r2, [r2, #0]
 8004a54:	4213      	tst	r3, r2
 8004a56:	d10a      	bne.n	8004a6e <vPortFree+0x2a>
 8004a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5c:	b672      	cpsid	i
 8004a5e:	f383 8811 	msr	BASEPRI, r3
 8004a62:	f3bf 8f6f 	isb	sy
 8004a66:	f3bf 8f4f 	dsb	sy
 8004a6a:	b662      	cpsie	i
 8004a6c:	e7fe      	b.n	8004a6c <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004a6e:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8004a72:	b151      	cbz	r1, 8004a8a <vPortFree+0x46>
 8004a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a78:	b672      	cpsid	i
 8004a7a:	f383 8811 	msr	BASEPRI, r3
 8004a7e:	f3bf 8f6f 	isb	sy
 8004a82:	f3bf 8f4f 	dsb	sy
 8004a86:	b662      	cpsie	i
 8004a88:	e7fe      	b.n	8004a88 <vPortFree+0x44>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004a8a:	ea23 0302 	bic.w	r3, r3, r2
 8004a8e:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8004a92:	f000 fd25 	bl	80054e0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004a96:	4a08      	ldr	r2, [pc, #32]	; (8004ab8 <vPortFree+0x74>)
 8004a98:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004a9c:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004aa0:	6811      	ldr	r1, [r2, #0]
 8004aa2:	440b      	add	r3, r1
 8004aa4:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004aa6:	f7ff ff17 	bl	80048d8 <prvInsertBlockIntoFreeList>
}
 8004aaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8004aae:	f000 bdc1 	b.w	8005634 <xTaskResumeAll>
 8004ab2:	bd10      	pop	{r4, pc}
 8004ab4:	20003ccc 	.word	0x20003ccc
 8004ab8:	20003cd0 	.word	0x20003cd0

08004abc <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004abc:	b570      	push	{r4, r5, r6, lr}
 8004abe:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004ac0:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8004ac2:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ac4:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004ac6:	b942      	cbnz	r2, 8004ada <prvCopyDataToQueue+0x1e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ac8:	6805      	ldr	r5, [r0, #0]
 8004aca:	b99d      	cbnz	r5, 8004af4 <prvCopyDataToQueue+0x38>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004acc:	6840      	ldr	r0, [r0, #4]
 8004ace:	f000 ffd1 	bl	8005a74 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8004ad2:	6065      	str	r5, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8004ad4:	3601      	adds	r6, #1
 8004ad6:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 8004ad8:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8004ada:	b96d      	cbnz	r5, 8004af8 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004adc:	6880      	ldr	r0, [r0, #8]
 8004ade:	f007 f844 	bl	800bb6a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004ae2:	68a3      	ldr	r3, [r4, #8]
 8004ae4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004ae6:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ae8:	6862      	ldr	r2, [r4, #4]
 8004aea:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004aec:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004aee:	d301      	bcc.n	8004af4 <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004af0:	6823      	ldr	r3, [r4, #0]
 8004af2:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8004af4:	2000      	movs	r0, #0
 8004af6:	e7ed      	b.n	8004ad4 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004af8:	68c0      	ldr	r0, [r0, #12]
 8004afa:	f007 f836 	bl	800bb6a <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004afe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b00:	68e2      	ldr	r2, [r4, #12]
 8004b02:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b04:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004b06:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b08:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004b0a:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004b0c:	bf3e      	ittt	cc
 8004b0e:	6862      	ldrcc	r2, [r4, #4]
 8004b10:	189b      	addcc	r3, r3, r2
 8004b12:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8004b14:	2d02      	cmp	r5, #2
 8004b16:	d1ed      	bne.n	8004af4 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b18:	b10e      	cbz	r6, 8004b1e <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8004b1a:	3e01      	subs	r6, #1
 8004b1c:	e7ea      	b.n	8004af4 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8004b1e:	4630      	mov	r0, r6
 8004b20:	e7d8      	b.n	8004ad4 <prvCopyDataToQueue+0x18>

08004b22 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004b22:	4603      	mov	r3, r0
 8004b24:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004b26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8004b28:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004b2a:	b162      	cbz	r2, 8004b46 <prvCopyDataFromQueue+0x24>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004b2c:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004b2e:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004b30:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004b32:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004b34:	60d9      	str	r1, [r3, #12]
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
	}
}
 8004b36:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004b3a:	bf24      	itt	cs
 8004b3c:	6819      	ldrcs	r1, [r3, #0]
 8004b3e:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004b40:	68d9      	ldr	r1, [r3, #12]
 8004b42:	f007 b812 	b.w	800bb6a <memcpy>
}
 8004b46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004b4c:	b570      	push	{r4, r5, r6, lr}
 8004b4e:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004b50:	f7ff fda0 	bl	8004694 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004b54:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b58:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8004b5c:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b5e:	2d00      	cmp	r5, #0
 8004b60:	dc14      	bgt.n	8004b8c <prvUnlockQueue+0x40>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004b62:	23ff      	movs	r3, #255	; 0xff

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b64:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 8004b68:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8004b6c:	f7ff fdb8 	bl	80046e0 <vPortExitCritical>
	taskENTER_CRITICAL();
 8004b70:	f7ff fd90 	bl	8004694 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8004b74:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8004b78:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b7a:	2d00      	cmp	r5, #0
 8004b7c:	dc12      	bgt.n	8004ba4 <prvUnlockQueue+0x58>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004b7e:	23ff      	movs	r3, #255	; 0xff
 8004b80:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 8004b84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8004b88:	f7ff bdaa 	b.w	80046e0 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d0e7      	beq.n	8004b62 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b92:	4630      	mov	r0, r6
 8004b94:	f000 fe80 	bl	8005898 <xTaskRemoveFromEventList>
 8004b98:	b108      	cbz	r0, 8004b9e <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8004b9a:	f000 ff0f 	bl	80059bc <vTaskMissedYield>
 8004b9e:	3d01      	subs	r5, #1
 8004ba0:	b26d      	sxtb	r5, r5
 8004ba2:	e7dc      	b.n	8004b5e <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ba4:	6923      	ldr	r3, [r4, #16]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d0e9      	beq.n	8004b7e <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004baa:	4630      	mov	r0, r6
 8004bac:	f000 fe74 	bl	8005898 <xTaskRemoveFromEventList>
 8004bb0:	b108      	cbz	r0, 8004bb6 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8004bb2:	f000 ff03 	bl	80059bc <vTaskMissedYield>
 8004bb6:	3d01      	subs	r5, #1
 8004bb8:	b26d      	sxtb	r5, r5
 8004bba:	e7de      	b.n	8004b7a <prvUnlockQueue+0x2e>

08004bbc <xQueueGenericReset>:
{
 8004bbc:	b538      	push	{r3, r4, r5, lr}
 8004bbe:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8004bc0:	4604      	mov	r4, r0
 8004bc2:	b950      	cbnz	r0, 8004bda <xQueueGenericReset+0x1e>
 8004bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc8:	b672      	cpsid	i
 8004bca:	f383 8811 	msr	BASEPRI, r3
 8004bce:	f3bf 8f6f 	isb	sy
 8004bd2:	f3bf 8f4f 	dsb	sy
 8004bd6:	b662      	cpsie	i
 8004bd8:	e7fe      	b.n	8004bd8 <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 8004bda:	f7ff fd5b 	bl	8004694 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004bde:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004be0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004be2:	6822      	ldr	r2, [r4, #0]
 8004be4:	4343      	muls	r3, r0
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004be6:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004be8:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004bea:	1a1b      	subs	r3, r3, r0
 8004bec:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004bee:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004bf0:	2100      	movs	r1, #0
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004bf2:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004bf4:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004bf6:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8004bf8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004bfc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8004c00:	b995      	cbnz	r5, 8004c28 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c02:	6923      	ldr	r3, [r4, #16]
 8004c04:	b163      	cbz	r3, 8004c20 <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c06:	f104 0010 	add.w	r0, r4, #16
 8004c0a:	f000 fe45 	bl	8005898 <xTaskRemoveFromEventList>
 8004c0e:	b138      	cbz	r0, 8004c20 <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 8004c10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c14:	4b09      	ldr	r3, [pc, #36]	; (8004c3c <xQueueGenericReset+0x80>)
 8004c16:	601a      	str	r2, [r3, #0]
 8004c18:	f3bf 8f4f 	dsb	sy
 8004c1c:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8004c20:	f7ff fd5e 	bl	80046e0 <vPortExitCritical>
}
 8004c24:	2001      	movs	r0, #1
 8004c26:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004c28:	f104 0010 	add.w	r0, r4, #16
 8004c2c:	f7ff fc96 	bl	800455c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004c30:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004c34:	f7ff fc92 	bl	800455c <vListInitialise>
 8004c38:	e7f2      	b.n	8004c20 <xQueueGenericReset+0x64>
 8004c3a:	bf00      	nop
 8004c3c:	e000ed04 	.word	0xe000ed04

08004c40 <xQueueGenericCreate>:
	{
 8004c40:	b570      	push	{r4, r5, r6, lr}
 8004c42:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004c44:	4606      	mov	r6, r0
 8004c46:	b950      	cbnz	r0, 8004c5e <xQueueGenericCreate+0x1e>
 8004c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c4c:	b672      	cpsid	i
 8004c4e:	f383 8811 	msr	BASEPRI, r3
 8004c52:	f3bf 8f6f 	isb	sy
 8004c56:	f3bf 8f4f 	dsb	sy
 8004c5a:	b662      	cpsie	i
 8004c5c:	e7fe      	b.n	8004c5c <xQueueGenericCreate+0x1c>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c5e:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004c60:	3048      	adds	r0, #72	; 0x48
 8004c62:	f7ff fe5d 	bl	8004920 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8004c66:	4604      	mov	r4, r0
 8004c68:	b138      	cbz	r0, 8004c7a <xQueueGenericCreate+0x3a>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8004c6a:	b945      	cbnz	r5, 8004c7e <xQueueGenericCreate+0x3e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004c6c:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8004c6e:	63e6      	str	r6, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004c70:	2101      	movs	r1, #1
	pxNewQueue->uxItemSize = uxItemSize;
 8004c72:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004c74:	4620      	mov	r0, r4
 8004c76:	f7ff ffa1 	bl	8004bbc <xQueueGenericReset>
	}
 8004c7a:	4620      	mov	r0, r4
 8004c7c:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004c7e:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004c82:	6003      	str	r3, [r0, #0]
 8004c84:	e7f3      	b.n	8004c6e <xQueueGenericCreate+0x2e>
	...

08004c88 <xQueueGenericSend>:
{
 8004c88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c8c:	4689      	mov	r9, r1
 8004c8e:	9201      	str	r2, [sp, #4]
 8004c90:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8004c92:	4604      	mov	r4, r0
 8004c94:	b950      	cbnz	r0, 8004cac <xQueueGenericSend+0x24>
 8004c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c9a:	b672      	cpsid	i
 8004c9c:	f383 8811 	msr	BASEPRI, r3
 8004ca0:	f3bf 8f6f 	isb	sy
 8004ca4:	f3bf 8f4f 	dsb	sy
 8004ca8:	b662      	cpsie	i
 8004caa:	e7fe      	b.n	8004caa <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cac:	2900      	cmp	r1, #0
 8004cae:	f040 808c 	bne.w	8004dca <xQueueGenericSend+0x142>
 8004cb2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	f000 8088 	beq.w	8004dca <xQueueGenericSend+0x142>
 8004cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cbe:	b672      	cpsid	i
 8004cc0:	f383 8811 	msr	BASEPRI, r3
 8004cc4:	f3bf 8f6f 	isb	sy
 8004cc8:	f3bf 8f4f 	dsb	sy
 8004ccc:	b662      	cpsie	i
 8004cce:	e7fe      	b.n	8004cce <xQueueGenericSend+0x46>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004cd0:	9e01      	ldr	r6, [sp, #4]
 8004cd2:	2e00      	cmp	r6, #0
 8004cd4:	f000 8084 	beq.w	8004de0 <xQueueGenericSend+0x158>
 8004cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cdc:	b672      	cpsid	i
 8004cde:	f383 8811 	msr	BASEPRI, r3
 8004ce2:	f3bf 8f6f 	isb	sy
 8004ce6:	f3bf 8f4f 	dsb	sy
 8004cea:	b662      	cpsie	i
 8004cec:	e7fe      	b.n	8004cec <xQueueGenericSend+0x64>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004cee:	9d01      	ldr	r5, [sp, #4]
 8004cf0:	b91d      	cbnz	r5, 8004cfa <xQueueGenericSend+0x72>
					taskEXIT_CRITICAL();
 8004cf2:	f7ff fcf5 	bl	80046e0 <vPortExitCritical>
			return errQUEUE_FULL;
 8004cf6:	2000      	movs	r0, #0
 8004cf8:	e058      	b.n	8004dac <xQueueGenericSend+0x124>
				else if( xEntryTimeSet == pdFALSE )
 8004cfa:	b916      	cbnz	r6, 8004d02 <xQueueGenericSend+0x7a>
					vTaskSetTimeOutState( &xTimeOut );
 8004cfc:	a802      	add	r0, sp, #8
 8004cfe:	f000 fe0f 	bl	8005920 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 8004d02:	f7ff fced 	bl	80046e0 <vPortExitCritical>
		vTaskSuspendAll();
 8004d06:	f000 fbeb 	bl	80054e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d0a:	f7ff fcc3 	bl	8004694 <vPortEnterCritical>
 8004d0e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004d12:	2bff      	cmp	r3, #255	; 0xff
 8004d14:	d101      	bne.n	8004d1a <xQueueGenericSend+0x92>
 8004d16:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 8004d1a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004d1e:	2bff      	cmp	r3, #255	; 0xff
 8004d20:	d101      	bne.n	8004d26 <xQueueGenericSend+0x9e>
 8004d22:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 8004d26:	f7ff fcdb 	bl	80046e0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d2a:	a901      	add	r1, sp, #4
 8004d2c:	a802      	add	r0, sp, #8
 8004d2e:	f000 fe07 	bl	8005940 <xTaskCheckForTimeOut>
 8004d32:	2800      	cmp	r0, #0
 8004d34:	d143      	bne.n	8004dbe <xQueueGenericSend+0x136>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d36:	f7ff fcad 	bl	8004694 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004d3a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8004d3c:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8004d3e:	f7ff fccf 	bl	80046e0 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004d42:	42ae      	cmp	r6, r5
 8004d44:	d135      	bne.n	8004db2 <xQueueGenericSend+0x12a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004d46:	9901      	ldr	r1, [sp, #4]
 8004d48:	f104 0010 	add.w	r0, r4, #16
 8004d4c:	f000 fd88 	bl	8005860 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004d50:	4620      	mov	r0, r4
 8004d52:	f7ff fefb 	bl	8004b4c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004d56:	f000 fc6d 	bl	8005634 <xTaskResumeAll>
 8004d5a:	b938      	cbnz	r0, 8004d6c <xQueueGenericSend+0xe4>
					portYIELD_WITHIN_API();
 8004d5c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004d60:	f8ca 3000 	str.w	r3, [sl]
 8004d64:	f3bf 8f4f 	dsb	sy
 8004d68:	f3bf 8f6f 	isb	sy
 8004d6c:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8004d6e:	f7ff fc91 	bl	8004694 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d72:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004d74:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d301      	bcc.n	8004d7e <xQueueGenericSend+0xf6>
 8004d7a:	2f02      	cmp	r7, #2
 8004d7c:	d1b7      	bne.n	8004cee <xQueueGenericSend+0x66>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d7e:	463a      	mov	r2, r7
 8004d80:	4649      	mov	r1, r9
 8004d82:	4620      	mov	r0, r4
 8004d84:	f7ff fe9a 	bl	8004abc <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d8a:	b11b      	cbz	r3, 8004d94 <xQueueGenericSend+0x10c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d8c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004d90:	f000 fd82 	bl	8005898 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8004d94:	b138      	cbz	r0, 8004da6 <xQueueGenericSend+0x11e>
						queueYIELD_IF_USING_PREEMPTION();
 8004d96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d9a:	4b19      	ldr	r3, [pc, #100]	; (8004e00 <xQueueGenericSend+0x178>)
 8004d9c:	601a      	str	r2, [r3, #0]
 8004d9e:	f3bf 8f4f 	dsb	sy
 8004da2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8004da6:	f7ff fc9b 	bl	80046e0 <vPortExitCritical>
				return pdPASS;
 8004daa:	2001      	movs	r0, #1
}
 8004dac:	b004      	add	sp, #16
 8004dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8004db2:	4620      	mov	r0, r4
 8004db4:	f7ff feca 	bl	8004b4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004db8:	f000 fc3c 	bl	8005634 <xTaskResumeAll>
 8004dbc:	e7d6      	b.n	8004d6c <xQueueGenericSend+0xe4>
			prvUnlockQueue( pxQueue );
 8004dbe:	4620      	mov	r0, r4
 8004dc0:	f7ff fec4 	bl	8004b4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004dc4:	f000 fc36 	bl	8005634 <xTaskResumeAll>
 8004dc8:	e795      	b.n	8004cf6 <xQueueGenericSend+0x6e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004dca:	2f02      	cmp	r7, #2
 8004dcc:	d102      	bne.n	8004dd4 <xQueueGenericSend+0x14c>
 8004dce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d10a      	bne.n	8004dea <xQueueGenericSend+0x162>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004dd4:	f000 fdf8 	bl	80059c8 <xTaskGetSchedulerState>
 8004dd8:	2800      	cmp	r0, #0
 8004dda:	f43f af79 	beq.w	8004cd0 <xQueueGenericSend+0x48>
 8004dde:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8004de0:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8004de4:	f8df a018 	ldr.w	sl, [pc, #24]	; 8004e00 <xQueueGenericSend+0x178>
 8004de8:	e7c1      	b.n	8004d6e <xQueueGenericSend+0xe6>
 8004dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dee:	b672      	cpsid	i
 8004df0:	f383 8811 	msr	BASEPRI, r3
 8004df4:	f3bf 8f6f 	isb	sy
 8004df8:	f3bf 8f4f 	dsb	sy
 8004dfc:	b662      	cpsie	i
 8004dfe:	e7fe      	b.n	8004dfe <xQueueGenericSend+0x176>
 8004e00:	e000ed04 	.word	0xe000ed04

08004e04 <xQueueCreateMutex>:
	{
 8004e04:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004e06:	4602      	mov	r2, r0
 8004e08:	2100      	movs	r1, #0
 8004e0a:	2001      	movs	r0, #1
 8004e0c:	f7ff ff18 	bl	8004c40 <xQueueGenericCreate>
		if( pxNewQueue != NULL )
 8004e10:	4604      	mov	r4, r0
 8004e12:	b138      	cbz	r0, 8004e24 <xQueueCreateMutex+0x20>
			pxNewQueue->pxMutexHolder = NULL;
 8004e14:	2300      	movs	r3, #0
 8004e16:	6043      	str	r3, [r0, #4]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004e18:	461a      	mov	r2, r3
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004e1a:	6003      	str	r3, [r0, #0]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004e1c:	4619      	mov	r1, r3
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8004e1e:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004e20:	f7ff ff32 	bl	8004c88 <xQueueGenericSend>
	}
 8004e24:	4620      	mov	r0, r4
 8004e26:	bd10      	pop	{r4, pc}

08004e28 <xQueueGenericSendFromISR>:
{
 8004e28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e2c:	4688      	mov	r8, r1
 8004e2e:	4691      	mov	r9, r2
 8004e30:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8004e32:	4604      	mov	r4, r0
 8004e34:	b950      	cbnz	r0, 8004e4c <xQueueGenericSendFromISR+0x24>
 8004e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e3a:	b672      	cpsid	i
 8004e3c:	f383 8811 	msr	BASEPRI, r3
 8004e40:	f3bf 8f6f 	isb	sy
 8004e44:	f3bf 8f4f 	dsb	sy
 8004e48:	b662      	cpsie	i
 8004e4a:	e7fe      	b.n	8004e4a <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e4c:	bb19      	cbnz	r1, 8004e96 <xQueueGenericSendFromISR+0x6e>
 8004e4e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004e50:	b30b      	cbz	r3, 8004e96 <xQueueGenericSendFromISR+0x6e>
 8004e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e56:	b672      	cpsid	i
 8004e58:	f383 8811 	msr	BASEPRI, r3
 8004e5c:	f3bf 8f6f 	isb	sy
 8004e60:	f3bf 8f4f 	dsb	sy
 8004e64:	b662      	cpsie	i
 8004e66:	e7fe      	b.n	8004e66 <xQueueGenericSendFromISR+0x3e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e68:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004e6c:	f000 fd14 	bl	8005898 <xTaskRemoveFromEventList>
 8004e70:	2800      	cmp	r0, #0
 8004e72:	d036      	beq.n	8004ee2 <xQueueGenericSendFromISR+0xba>
							if( pxHigherPriorityTaskWoken != NULL )
 8004e74:	f1b9 0f00 	cmp.w	r9, #0
 8004e78:	d033      	beq.n	8004ee2 <xQueueGenericSendFromISR+0xba>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004e7a:	2001      	movs	r0, #1
 8004e7c:	f8c9 0000 	str.w	r0, [r9]
	__asm volatile
 8004e80:	f386 8811 	msr	BASEPRI, r6
}
 8004e84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004e88:	3501      	adds	r5, #1
 8004e8a:	b26d      	sxtb	r5, r5
 8004e8c:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8004e90:	e027      	b.n	8004ee2 <xQueueGenericSendFromISR+0xba>
			xReturn = errQUEUE_FULL;
 8004e92:	2000      	movs	r0, #0
 8004e94:	e7f4      	b.n	8004e80 <xQueueGenericSendFromISR+0x58>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e96:	2f02      	cmp	r7, #2
 8004e98:	d102      	bne.n	8004ea0 <xQueueGenericSendFromISR+0x78>
 8004e9a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d122      	bne.n	8004ee6 <xQueueGenericSendFromISR+0xbe>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004ea0:	f7ff fce8 	bl	8004874 <vPortValidateInterruptPriority>
	__asm volatile
 8004ea4:	f3ef 8611 	mrs	r6, BASEPRI
 8004ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eac:	b672      	cpsid	i
 8004eae:	f383 8811 	msr	BASEPRI, r3
 8004eb2:	f3bf 8f6f 	isb	sy
 8004eb6:	f3bf 8f4f 	dsb	sy
 8004eba:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004ebc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004ebe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d301      	bcc.n	8004ec8 <xQueueGenericSendFromISR+0xa0>
 8004ec4:	2f02      	cmp	r7, #2
 8004ec6:	d1e4      	bne.n	8004e92 <xQueueGenericSendFromISR+0x6a>
			const int8_t cTxLock = pxQueue->cTxLock;
 8004ec8:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ecc:	463a      	mov	r2, r7
 8004ece:	4641      	mov	r1, r8
 8004ed0:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8004ed2:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ed4:	f7ff fdf2 	bl	8004abc <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8004ed8:	1c6b      	adds	r3, r5, #1
 8004eda:	d1d5      	bne.n	8004e88 <xQueueGenericSendFromISR+0x60>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004edc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1c2      	bne.n	8004e68 <xQueueGenericSendFromISR+0x40>
			xReturn = pdPASS;
 8004ee2:	2001      	movs	r0, #1
 8004ee4:	e7cc      	b.n	8004e80 <xQueueGenericSendFromISR+0x58>
	__asm volatile
 8004ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eea:	b672      	cpsid	i
 8004eec:	f383 8811 	msr	BASEPRI, r3
 8004ef0:	f3bf 8f6f 	isb	sy
 8004ef4:	f3bf 8f4f 	dsb	sy
 8004ef8:	b662      	cpsie	i
 8004efa:	e7fe      	b.n	8004efa <xQueueGenericSendFromISR+0xd2>

08004efc <xQueueGiveFromISR>:
{
 8004efc:	b570      	push	{r4, r5, r6, lr}
 8004efe:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8004f00:	4604      	mov	r4, r0
 8004f02:	b950      	cbnz	r0, 8004f1a <xQueueGiveFromISR+0x1e>
 8004f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f08:	b672      	cpsid	i
 8004f0a:	f383 8811 	msr	BASEPRI, r3
 8004f0e:	f3bf 8f6f 	isb	sy
 8004f12:	f3bf 8f4f 	dsb	sy
 8004f16:	b662      	cpsie	i
 8004f18:	e7fe      	b.n	8004f18 <xQueueGiveFromISR+0x1c>
	configASSERT( pxQueue->uxItemSize == 0 );
 8004f1a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004f1c:	b153      	cbz	r3, 8004f34 <xQueueGiveFromISR+0x38>
 8004f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f22:	b672      	cpsid	i
 8004f24:	f383 8811 	msr	BASEPRI, r3
 8004f28:	f3bf 8f6f 	isb	sy
 8004f2c:	f3bf 8f4f 	dsb	sy
 8004f30:	b662      	cpsie	i
 8004f32:	e7fe      	b.n	8004f32 <xQueueGiveFromISR+0x36>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8004f34:	6803      	ldr	r3, [r0, #0]
 8004f36:	b913      	cbnz	r3, 8004f3e <xQueueGiveFromISR+0x42>
 8004f38:	6843      	ldr	r3, [r0, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d130      	bne.n	8004fa0 <xQueueGiveFromISR+0xa4>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004f3e:	f7ff fc99 	bl	8004874 <vPortValidateInterruptPriority>
	__asm volatile
 8004f42:	f3ef 8611 	mrs	r6, BASEPRI
 8004f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f4a:	b672      	cpsid	i
 8004f4c:	f383 8811 	msr	BASEPRI, r3
 8004f50:	f3bf 8f6f 	isb	sy
 8004f54:	f3bf 8f4f 	dsb	sy
 8004f58:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f5a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004f5c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d301      	bcc.n	8004f66 <xQueueGiveFromISR+0x6a>
			xReturn = errQUEUE_FULL;
 8004f62:	2000      	movs	r0, #0
 8004f64:	e014      	b.n	8004f90 <xQueueGiveFromISR+0x94>
			const int8_t cTxLock = pxQueue->cTxLock;
 8004f66:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8004f6a:	3201      	adds	r2, #1
			const int8_t cTxLock = pxQueue->cTxLock;
 8004f6c:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8004f6e:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8004f70:	1c5a      	adds	r2, r3, #1
 8004f72:	d110      	bne.n	8004f96 <xQueueGiveFromISR+0x9a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f76:	b90b      	cbnz	r3, 8004f7c <xQueueGiveFromISR+0x80>
			xReturn = pdPASS;
 8004f78:	2001      	movs	r0, #1
 8004f7a:	e009      	b.n	8004f90 <xQueueGiveFromISR+0x94>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f7c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004f80:	f000 fc8a 	bl	8005898 <xTaskRemoveFromEventList>
 8004f84:	2800      	cmp	r0, #0
 8004f86:	d0f7      	beq.n	8004f78 <xQueueGiveFromISR+0x7c>
							if( pxHigherPriorityTaskWoken != NULL )
 8004f88:	2d00      	cmp	r5, #0
 8004f8a:	d0f5      	beq.n	8004f78 <xQueueGiveFromISR+0x7c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004f8c:	2001      	movs	r0, #1
 8004f8e:	6028      	str	r0, [r5, #0]
	__asm volatile
 8004f90:	f386 8811 	msr	BASEPRI, r6
}
 8004f94:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004f96:	3301      	adds	r3, #1
 8004f98:	b25b      	sxtb	r3, r3
 8004f9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f9e:	e7eb      	b.n	8004f78 <xQueueGiveFromISR+0x7c>
	__asm volatile
 8004fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa4:	b672      	cpsid	i
 8004fa6:	f383 8811 	msr	BASEPRI, r3
 8004faa:	f3bf 8f6f 	isb	sy
 8004fae:	f3bf 8f4f 	dsb	sy
 8004fb2:	b662      	cpsie	i
 8004fb4:	e7fe      	b.n	8004fb4 <xQueueGiveFromISR+0xb8>
	...

08004fb8 <xQueueGenericReceive>:
{
 8004fb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fbc:	4688      	mov	r8, r1
 8004fbe:	9201      	str	r2, [sp, #4]
 8004fc0:	4699      	mov	r9, r3
	configASSERT( pxQueue );
 8004fc2:	4604      	mov	r4, r0
 8004fc4:	b950      	cbnz	r0, 8004fdc <xQueueGenericReceive+0x24>
 8004fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fca:	b672      	cpsid	i
 8004fcc:	f383 8811 	msr	BASEPRI, r3
 8004fd0:	f3bf 8f6f 	isb	sy
 8004fd4:	f3bf 8f4f 	dsb	sy
 8004fd8:	b662      	cpsie	i
 8004fda:	e7fe      	b.n	8004fda <xQueueGenericReceive+0x22>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004fdc:	2900      	cmp	r1, #0
 8004fde:	f040 80a9 	bne.w	8005134 <xQueueGenericReceive+0x17c>
 8004fe2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f000 80a5 	beq.w	8005134 <xQueueGenericReceive+0x17c>
 8004fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fee:	b672      	cpsid	i
 8004ff0:	f383 8811 	msr	BASEPRI, r3
 8004ff4:	f3bf 8f6f 	isb	sy
 8004ff8:	f3bf 8f4f 	dsb	sy
 8004ffc:	b662      	cpsie	i
 8004ffe:	e7fe      	b.n	8004ffe <xQueueGenericReceive+0x46>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005000:	9e01      	ldr	r6, [sp, #4]
 8005002:	2e00      	cmp	r6, #0
 8005004:	f000 809c 	beq.w	8005140 <xQueueGenericReceive+0x188>
 8005008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800500c:	b672      	cpsid	i
 800500e:	f383 8811 	msr	BASEPRI, r3
 8005012:	f3bf 8f6f 	isb	sy
 8005016:	f3bf 8f4f 	dsb	sy
 800501a:	b662      	cpsie	i
 800501c:	e7fe      	b.n	800501c <xQueueGenericReceive+0x64>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800501e:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8005020:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005022:	2b00      	cmp	r3, #0
 8005024:	d06d      	beq.n	8005102 <xQueueGenericReceive+0x14a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005026:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800502a:	e05f      	b.n	80050ec <xQueueGenericReceive+0x134>
				if( xTicksToWait == ( TickType_t ) 0 )
 800502c:	9d01      	ldr	r5, [sp, #4]
 800502e:	b91d      	cbnz	r5, 8005038 <xQueueGenericReceive+0x80>
					taskEXIT_CRITICAL();
 8005030:	f7ff fb56 	bl	80046e0 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8005034:	4628      	mov	r0, r5
 8005036:	e067      	b.n	8005108 <xQueueGenericReceive+0x150>
				else if( xEntryTimeSet == pdFALSE )
 8005038:	b916      	cbnz	r6, 8005040 <xQueueGenericReceive+0x88>
					vTaskSetTimeOutState( &xTimeOut );
 800503a:	a802      	add	r0, sp, #8
 800503c:	f000 fc70 	bl	8005920 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 8005040:	f7ff fb4e 	bl	80046e0 <vPortExitCritical>
		vTaskSuspendAll();
 8005044:	f000 fa4c 	bl	80054e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005048:	f7ff fb24 	bl	8004694 <vPortEnterCritical>
 800504c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005050:	2bff      	cmp	r3, #255	; 0xff
 8005052:	d101      	bne.n	8005058 <xQueueGenericReceive+0xa0>
 8005054:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8005058:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800505c:	2bff      	cmp	r3, #255	; 0xff
 800505e:	d101      	bne.n	8005064 <xQueueGenericReceive+0xac>
 8005060:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005064:	f7ff fb3c 	bl	80046e0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005068:	a901      	add	r1, sp, #4
 800506a:	a802      	add	r0, sp, #8
 800506c:	f000 fc68 	bl	8005940 <xTaskCheckForTimeOut>
 8005070:	2800      	cmp	r0, #0
 8005072:	d152      	bne.n	800511a <xQueueGenericReceive+0x162>
	taskENTER_CRITICAL();
 8005074:	f7ff fb0e 	bl	8004694 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005078:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 800507a:	f7ff fb31 	bl	80046e0 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800507e:	2d00      	cmp	r5, #0
 8005080:	d145      	bne.n	800510e <xQueueGenericReceive+0x156>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005082:	6823      	ldr	r3, [r4, #0]
 8005084:	b933      	cbnz	r3, 8005094 <xQueueGenericReceive+0xdc>
						taskENTER_CRITICAL();
 8005086:	f7ff fb05 	bl	8004694 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800508a:	6860      	ldr	r0, [r4, #4]
 800508c:	f000 fcac 	bl	80059e8 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 8005090:	f7ff fb26 	bl	80046e0 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005094:	9901      	ldr	r1, [sp, #4]
 8005096:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800509a:	f000 fbe1 	bl	8005860 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800509e:	4620      	mov	r0, r4
 80050a0:	f7ff fd54 	bl	8004b4c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80050a4:	f000 fac6 	bl	8005634 <xTaskResumeAll>
 80050a8:	b938      	cbnz	r0, 80050ba <xQueueGenericReceive+0x102>
					portYIELD_WITHIN_API();
 80050aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80050ae:	f8ca 3000 	str.w	r3, [sl]
 80050b2:	f3bf 8f4f 	dsb	sy
 80050b6:	f3bf 8f6f 	isb	sy
 80050ba:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80050bc:	f7ff faea 	bl	8004694 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050c0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80050c2:	2d00      	cmp	r5, #0
 80050c4:	d0b2      	beq.n	800502c <xQueueGenericReceive+0x74>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80050c6:	4641      	mov	r1, r8
 80050c8:	4620      	mov	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 80050ca:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80050cc:	f7ff fd29 	bl	8004b22 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 80050d0:	f1b9 0f00 	cmp.w	r9, #0
 80050d4:	d1a3      	bne.n	800501e <xQueueGenericReceive+0x66>
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 80050d6:	3d01      	subs	r5, #1
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80050d8:	6823      	ldr	r3, [r4, #0]
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 80050da:	63a5      	str	r5, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80050dc:	b913      	cbnz	r3, 80050e4 <xQueueGenericReceive+0x12c>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80050de:	f000 fd1d 	bl	8005b1c <pvTaskIncrementMutexHeldCount>
 80050e2:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050e4:	6923      	ldr	r3, [r4, #16]
 80050e6:	b163      	cbz	r3, 8005102 <xQueueGenericReceive+0x14a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050e8:	f104 0010 	add.w	r0, r4, #16
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050ec:	f000 fbd4 	bl	8005898 <xTaskRemoveFromEventList>
 80050f0:	b138      	cbz	r0, 8005102 <xQueueGenericReceive+0x14a>
							queueYIELD_IF_USING_PREEMPTION();
 80050f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050f6:	4b14      	ldr	r3, [pc, #80]	; (8005148 <xQueueGenericReceive+0x190>)
 80050f8:	601a      	str	r2, [r3, #0]
 80050fa:	f3bf 8f4f 	dsb	sy
 80050fe:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8005102:	f7ff faed 	bl	80046e0 <vPortExitCritical>
				return pdPASS;
 8005106:	2001      	movs	r0, #1
}
 8005108:	b004      	add	sp, #16
 800510a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 800510e:	4620      	mov	r0, r4
 8005110:	f7ff fd1c 	bl	8004b4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005114:	f000 fa8e 	bl	8005634 <xTaskResumeAll>
 8005118:	e7cf      	b.n	80050ba <xQueueGenericReceive+0x102>
			prvUnlockQueue( pxQueue );
 800511a:	4620      	mov	r0, r4
 800511c:	f7ff fd16 	bl	8004b4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005120:	f000 fa88 	bl	8005634 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8005124:	f7ff fab6 	bl	8004694 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005128:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 800512a:	f7ff fad9 	bl	80046e0 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800512e:	2d00      	cmp	r5, #0
 8005130:	d1c3      	bne.n	80050ba <xQueueGenericReceive+0x102>
 8005132:	e77f      	b.n	8005034 <xQueueGenericReceive+0x7c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005134:	f000 fc48 	bl	80059c8 <xTaskGetSchedulerState>
 8005138:	2800      	cmp	r0, #0
 800513a:	f43f af61 	beq.w	8005000 <xQueueGenericReceive+0x48>
 800513e:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8005140:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8005142:	f8df a004 	ldr.w	sl, [pc, #4]	; 8005148 <xQueueGenericReceive+0x190>
 8005146:	e7b9      	b.n	80050bc <xQueueGenericReceive+0x104>
 8005148:	e000ed04 	.word	0xe000ed04

0800514c <xQueueReceiveFromISR>:
{
 800514c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005150:	4689      	mov	r9, r1
 8005152:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8005154:	4605      	mov	r5, r0
 8005156:	b950      	cbnz	r0, 800516e <xQueueReceiveFromISR+0x22>
 8005158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800515c:	b672      	cpsid	i
 800515e:	f383 8811 	msr	BASEPRI, r3
 8005162:	f3bf 8f6f 	isb	sy
 8005166:	f3bf 8f4f 	dsb	sy
 800516a:	b662      	cpsie	i
 800516c:	e7fe      	b.n	800516c <xQueueReceiveFromISR+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800516e:	bb81      	cbnz	r1, 80051d2 <xQueueReceiveFromISR+0x86>
 8005170:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005172:	b373      	cbz	r3, 80051d2 <xQueueReceiveFromISR+0x86>
 8005174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005178:	b672      	cpsid	i
 800517a:	f383 8811 	msr	BASEPRI, r3
 800517e:	f3bf 8f6f 	isb	sy
 8005182:	f3bf 8f4f 	dsb	sy
 8005186:	b662      	cpsie	i
 8005188:	e7fe      	b.n	8005188 <xQueueReceiveFromISR+0x3c>
			const int8_t cRxLock = pxQueue->cRxLock;
 800518a:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800518e:	4649      	mov	r1, r9
 8005190:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8005192:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 8005194:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005196:	f7ff fcc4 	bl	8004b22 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 800519a:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800519c:	1c73      	adds	r3, r6, #1
 800519e:	d113      	bne.n	80051c8 <xQueueReceiveFromISR+0x7c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051a0:	692b      	ldr	r3, [r5, #16]
 80051a2:	b90b      	cbnz	r3, 80051a8 <xQueueReceiveFromISR+0x5c>
			xReturn = pdPASS;
 80051a4:	2001      	movs	r0, #1
 80051a6:	e00b      	b.n	80051c0 <xQueueReceiveFromISR+0x74>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051a8:	f105 0010 	add.w	r0, r5, #16
 80051ac:	f000 fb74 	bl	8005898 <xTaskRemoveFromEventList>
 80051b0:	2800      	cmp	r0, #0
 80051b2:	d0f7      	beq.n	80051a4 <xQueueReceiveFromISR+0x58>
						if( pxHigherPriorityTaskWoken != NULL )
 80051b4:	f1b8 0f00 	cmp.w	r8, #0
 80051b8:	d0f4      	beq.n	80051a4 <xQueueReceiveFromISR+0x58>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80051ba:	2001      	movs	r0, #1
 80051bc:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 80051c0:	f387 8811 	msr	BASEPRI, r7
}
 80051c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80051c8:	3601      	adds	r6, #1
 80051ca:	b276      	sxtb	r6, r6
 80051cc:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 80051d0:	e7e8      	b.n	80051a4 <xQueueReceiveFromISR+0x58>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80051d2:	f7ff fb4f 	bl	8004874 <vPortValidateInterruptPriority>
	__asm volatile
 80051d6:	f3ef 8711 	mrs	r7, BASEPRI
 80051da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051de:	b672      	cpsid	i
 80051e0:	f383 8811 	msr	BASEPRI, r3
 80051e4:	f3bf 8f6f 	isb	sy
 80051e8:	f3bf 8f4f 	dsb	sy
 80051ec:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80051ee:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80051f0:	2c00      	cmp	r4, #0
 80051f2:	d1ca      	bne.n	800518a <xQueueReceiveFromISR+0x3e>
			xReturn = pdFAIL;
 80051f4:	4620      	mov	r0, r4
 80051f6:	e7e3      	b.n	80051c0 <xQueueReceiveFromISR+0x74>

080051f8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051f8:	4a06      	ldr	r2, [pc, #24]	; (8005214 <prvResetNextTaskUnblockTime+0x1c>)
 80051fa:	6813      	ldr	r3, [r2, #0]
 80051fc:	6819      	ldr	r1, [r3, #0]
 80051fe:	4b06      	ldr	r3, [pc, #24]	; (8005218 <prvResetNextTaskUnblockTime+0x20>)
 8005200:	b919      	cbnz	r1, 800520a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005202:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005206:	601a      	str	r2, [r3, #0]
 8005208:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800520a:	6812      	ldr	r2, [r2, #0]
 800520c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800520e:	68d2      	ldr	r2, [r2, #12]
 8005210:	6852      	ldr	r2, [r2, #4]
 8005212:	e7f8      	b.n	8005206 <prvResetNextTaskUnblockTime+0xe>
 8005214:	20003ce4 	.word	0x20003ce4
 8005218:	20003dbc 	.word	0x20003dbc

0800521c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800521c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800521e:	4b1b      	ldr	r3, [pc, #108]	; (800528c <prvAddCurrentTaskToDelayedList+0x70>)
{
 8005220:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005222:	4e1b      	ldr	r6, [pc, #108]	; (8005290 <prvAddCurrentTaskToDelayedList+0x74>)
{
 8005224:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8005226:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005228:	6830      	ldr	r0, [r6, #0]
 800522a:	3004      	adds	r0, #4
 800522c:	f7ff f9c7 	bl	80045be <uxListRemove>
 8005230:	4633      	mov	r3, r6
 8005232:	b940      	cbnz	r0, 8005246 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005234:	6831      	ldr	r1, [r6, #0]
 8005236:	2001      	movs	r0, #1
 8005238:	4e16      	ldr	r6, [pc, #88]	; (8005294 <prvAddCurrentTaskToDelayedList+0x78>)
 800523a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800523c:	6832      	ldr	r2, [r6, #0]
 800523e:	4088      	lsls	r0, r1
 8005240:	ea22 0200 	bic.w	r2, r2, r0
 8005244:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005246:	1c62      	adds	r2, r4, #1
 8005248:	d107      	bne.n	800525a <prvAddCurrentTaskToDelayedList+0x3e>
 800524a:	b137      	cbz	r7, 800525a <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800524c:	6819      	ldr	r1, [r3, #0]
 800524e:	4812      	ldr	r0, [pc, #72]	; (8005298 <prvAddCurrentTaskToDelayedList+0x7c>)
 8005250:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005252:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005256:	f7ff b98f 	b.w	8004578 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800525a:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800525c:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 800525e:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005260:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8005262:	d907      	bls.n	8005274 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005264:	4a0d      	ldr	r2, [pc, #52]	; (800529c <prvAddCurrentTaskToDelayedList+0x80>)
 8005266:	6810      	ldr	r0, [r2, #0]
 8005268:	6819      	ldr	r1, [r3, #0]
}
 800526a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800526e:	3104      	adds	r1, #4
 8005270:	f7ff b98e 	b.w	8004590 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005274:	4a0a      	ldr	r2, [pc, #40]	; (80052a0 <prvAddCurrentTaskToDelayedList+0x84>)
 8005276:	6810      	ldr	r0, [r2, #0]
 8005278:	6819      	ldr	r1, [r3, #0]
 800527a:	3104      	adds	r1, #4
 800527c:	f7ff f988 	bl	8004590 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005280:	4b08      	ldr	r3, [pc, #32]	; (80052a4 <prvAddCurrentTaskToDelayedList+0x88>)
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	4294      	cmp	r4, r2
 8005286:	d200      	bcs.n	800528a <prvAddCurrentTaskToDelayedList+0x6e>
					xNextTaskUnblockTime = xTimeToWake;
 8005288:	601c      	str	r4, [r3, #0]
 800528a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800528c:	20003e04 	.word	0x20003e04
 8005290:	20003ce0 	.word	0x20003ce0
 8005294:	20003d8c 	.word	0x20003d8c
 8005298:	20003ddc 	.word	0x20003ddc
 800529c:	20003ce8 	.word	0x20003ce8
 80052a0:	20003ce4 	.word	0x20003ce4
 80052a4:	20003dbc 	.word	0x20003dbc

080052a8 <prvTaskIsTaskSuspended.part.0>:
	__asm volatile
 80052a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ac:	b672      	cpsid	i
 80052ae:	f383 8811 	msr	BASEPRI, r3
 80052b2:	f3bf 8f6f 	isb	sy
 80052b6:	f3bf 8f4f 	dsb	sy
 80052ba:	b662      	cpsie	i
 80052bc:	e7fe      	b.n	80052bc <prvTaskIsTaskSuspended.part.0+0x14>
	...

080052c0 <xTaskCreate>:
	{
 80052c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052c4:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 80052c8:	4680      	mov	r8, r0
 80052ca:	460f      	mov	r7, r1
 80052cc:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052ce:	4650      	mov	r0, sl
	{
 80052d0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052d2:	f7ff fb25 	bl	8004920 <pvPortMalloc>
			if( pxStack != NULL )
 80052d6:	4605      	mov	r5, r0
 80052d8:	2800      	cmp	r0, #0
 80052da:	f000 8096 	beq.w	800540a <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80052de:	2054      	movs	r0, #84	; 0x54
 80052e0:	f7ff fb1e 	bl	8004920 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80052e4:	4604      	mov	r4, r0
 80052e6:	2800      	cmp	r0, #0
 80052e8:	f000 808c 	beq.w	8005404 <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80052ec:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 80052f0:	6305      	str	r5, [r0, #48]	; 0x30
 80052f2:	1e7b      	subs	r3, r7, #1
 80052f4:	f100 0234 	add.w	r2, r0, #52	; 0x34
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80052f8:	4455      	add	r5, sl
 80052fa:	370f      	adds	r7, #15
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80052fc:	f025 0a07 	bic.w	sl, r5, #7
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005300:	7859      	ldrb	r1, [r3, #1]
 8005302:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8005306:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800530a:	b109      	cbz	r1, 8005310 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800530c:	42bb      	cmp	r3, r7
 800530e:	d1f7      	bne.n	8005300 <xTaskCreate+0x40>
 8005310:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005312:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005316:	1d27      	adds	r7, r4, #4
 8005318:	2d06      	cmp	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800531a:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800531e:	4638      	mov	r0, r7
		pxNewTCB->uxMutexesHeld = 0;
 8005320:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
 8005324:	bf28      	it	cs
 8005326:	2506      	movcs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 8005328:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800532a:	6465      	str	r5, [r4, #68]	; 0x44
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800532c:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005330:	f7ff f91f 	bl	8004572 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005334:	f104 0018 	add.w	r0, r4, #24
 8005338:	f7ff f91b 	bl	8004572 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800533c:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005340:	6124      	str	r4, [r4, #16]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005342:	464a      	mov	r2, r9
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005344:	61a5      	str	r5, [r4, #24]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005346:	4641      	mov	r1, r8
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005348:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800534a:	4650      	mov	r0, sl
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800534c:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005350:	f7ff f97c 	bl	800464c <pxPortInitialiseStack>
 8005354:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8005356:	b106      	cbz	r6, 800535a <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005358:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 800535a:	f7ff f99b 	bl	8004694 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800535e:	4b32      	ldr	r3, [pc, #200]	; (8005428 <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 8005360:	4e32      	ldr	r6, [pc, #200]	; (800542c <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8005458 <xTaskCreate+0x198>
 8005368:	3201      	adds	r2, #1
 800536a:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800536c:	6835      	ldr	r5, [r6, #0]
 800536e:	2d00      	cmp	r5, #0
 8005370:	d14e      	bne.n	8005410 <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 8005372:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2b01      	cmp	r3, #1
 8005378:	d11d      	bne.n	80053b6 <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800537a:	eb08 0005 	add.w	r0, r8, r5
 800537e:	3514      	adds	r5, #20
 8005380:	f7ff f8ec 	bl	800455c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005384:	2d8c      	cmp	r5, #140	; 0x8c
 8005386:	d1f8      	bne.n	800537a <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 8005388:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 800545c <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 800538c:	4d28      	ldr	r5, [pc, #160]	; (8005430 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 800538e:	4648      	mov	r0, r9
 8005390:	f7ff f8e4 	bl	800455c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005394:	4628      	mov	r0, r5
 8005396:	f7ff f8e1 	bl	800455c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800539a:	4826      	ldr	r0, [pc, #152]	; (8005434 <xTaskCreate+0x174>)
 800539c:	f7ff f8de 	bl	800455c <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80053a0:	4825      	ldr	r0, [pc, #148]	; (8005438 <xTaskCreate+0x178>)
 80053a2:	f7ff f8db 	bl	800455c <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80053a6:	4825      	ldr	r0, [pc, #148]	; (800543c <xTaskCreate+0x17c>)
 80053a8:	f7ff f8d8 	bl	800455c <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80053ac:	4b24      	ldr	r3, [pc, #144]	; (8005440 <xTaskCreate+0x180>)
 80053ae:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80053b2:	4b24      	ldr	r3, [pc, #144]	; (8005444 <xTaskCreate+0x184>)
 80053b4:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 80053b6:	4a24      	ldr	r2, [pc, #144]	; (8005448 <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 80053b8:	2501      	movs	r5, #1
 80053ba:	4924      	ldr	r1, [pc, #144]	; (800544c <xTaskCreate+0x18c>)
		uxTaskNumber++;
 80053bc:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80053be:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 80053c0:	3301      	adds	r3, #1
 80053c2:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80053c4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80053c6:	fa05 f302 	lsl.w	r3, r5, r2
 80053ca:	4303      	orrs	r3, r0
 80053cc:	2014      	movs	r0, #20
 80053ce:	600b      	str	r3, [r1, #0]
 80053d0:	4639      	mov	r1, r7
 80053d2:	fb00 8002 	mla	r0, r0, r2, r8
 80053d6:	f7ff f8cf 	bl	8004578 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80053da:	f7ff f981 	bl	80046e0 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80053de:	4b1c      	ldr	r3, [pc, #112]	; (8005450 <xTaskCreate+0x190>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	b163      	cbz	r3, 80053fe <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80053e4:	6833      	ldr	r3, [r6, #0]
 80053e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d207      	bcs.n	80053fe <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 80053ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053f2:	4b18      	ldr	r3, [pc, #96]	; (8005454 <xTaskCreate+0x194>)
 80053f4:	601a      	str	r2, [r3, #0]
 80053f6:	f3bf 8f4f 	dsb	sy
 80053fa:	f3bf 8f6f 	isb	sy
	}
 80053fe:	4628      	mov	r0, r5
 8005400:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 8005404:	4628      	mov	r0, r5
 8005406:	f7ff fb1d 	bl	8004a44 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800540a:	f04f 35ff 	mov.w	r5, #4294967295
 800540e:	e7f6      	b.n	80053fe <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 8005410:	4b0f      	ldr	r3, [pc, #60]	; (8005450 <xTaskCreate+0x190>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d1ce      	bne.n	80053b6 <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005418:	6833      	ldr	r3, [r6, #0]
 800541a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800541c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800541e:	429a      	cmp	r2, r3
 8005420:	d8c9      	bhi.n	80053b6 <xTaskCreate+0xf6>
					pxCurrentTCB = pxNewTCB;
 8005422:	6034      	str	r4, [r6, #0]
 8005424:	e7c7      	b.n	80053b6 <xTaskCreate+0xf6>
 8005426:	bf00      	nop
 8005428:	20003d78 	.word	0x20003d78
 800542c:	20003ce0 	.word	0x20003ce0
 8005430:	20003da4 	.word	0x20003da4
 8005434:	20003dc4 	.word	0x20003dc4
 8005438:	20003df0 	.word	0x20003df0
 800543c:	20003ddc 	.word	0x20003ddc
 8005440:	20003ce4 	.word	0x20003ce4
 8005444:	20003ce8 	.word	0x20003ce8
 8005448:	20003d88 	.word	0x20003d88
 800544c:	20003d8c 	.word	0x20003d8c
 8005450:	20003dd8 	.word	0x20003dd8
 8005454:	e000ed04 	.word	0xe000ed04
 8005458:	20003cec 	.word	0x20003cec
 800545c:	20003d90 	.word	0x20003d90

08005460 <vTaskStartScheduler>:
{
 8005460:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8005462:	4b19      	ldr	r3, [pc, #100]	; (80054c8 <vTaskStartScheduler+0x68>)
 8005464:	2400      	movs	r4, #0
 8005466:	2280      	movs	r2, #128	; 0x80
 8005468:	4918      	ldr	r1, [pc, #96]	; (80054cc <vTaskStartScheduler+0x6c>)
 800546a:	9301      	str	r3, [sp, #4]
 800546c:	4623      	mov	r3, r4
 800546e:	9400      	str	r4, [sp, #0]
 8005470:	4817      	ldr	r0, [pc, #92]	; (80054d0 <vTaskStartScheduler+0x70>)
 8005472:	f7ff ff25 	bl	80052c0 <xTaskCreate>
	if( xReturn == pdPASS )
 8005476:	2801      	cmp	r0, #1
 8005478:	d116      	bne.n	80054a8 <vTaskStartScheduler+0x48>
 800547a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800547e:	b672      	cpsid	i
 8005480:	f383 8811 	msr	BASEPRI, r3
 8005484:	f3bf 8f6f 	isb	sy
 8005488:	f3bf 8f4f 	dsb	sy
 800548c:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 800548e:	f04f 32ff 	mov.w	r2, #4294967295
 8005492:	4b10      	ldr	r3, [pc, #64]	; (80054d4 <vTaskStartScheduler+0x74>)
 8005494:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005496:	4b10      	ldr	r3, [pc, #64]	; (80054d8 <vTaskStartScheduler+0x78>)
 8005498:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800549a:	4b10      	ldr	r3, [pc, #64]	; (80054dc <vTaskStartScheduler+0x7c>)
 800549c:	601c      	str	r4, [r3, #0]
}
 800549e:	b002      	add	sp, #8
 80054a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 80054a4:	f7ff b992 	b.w	80047cc <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80054a8:	3001      	adds	r0, #1
 80054aa:	d10a      	bne.n	80054c2 <vTaskStartScheduler+0x62>
 80054ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b0:	b672      	cpsid	i
 80054b2:	f383 8811 	msr	BASEPRI, r3
 80054b6:	f3bf 8f6f 	isb	sy
 80054ba:	f3bf 8f4f 	dsb	sy
 80054be:	b662      	cpsie	i
 80054c0:	e7fe      	b.n	80054c0 <vTaskStartScheduler+0x60>
}
 80054c2:	b002      	add	sp, #8
 80054c4:	bd10      	pop	{r4, pc}
 80054c6:	bf00      	nop
 80054c8:	20003db8 	.word	0x20003db8
 80054cc:	0800ca71 	.word	0x0800ca71
 80054d0:	08005775 	.word	0x08005775
 80054d4:	20003dbc 	.word	0x20003dbc
 80054d8:	20003dd8 	.word	0x20003dd8
 80054dc:	20003e04 	.word	0x20003e04

080054e0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80054e0:	4a02      	ldr	r2, [pc, #8]	; (80054ec <vTaskSuspendAll+0xc>)
 80054e2:	6813      	ldr	r3, [r2, #0]
 80054e4:	3301      	adds	r3, #1
 80054e6:	6013      	str	r3, [r2, #0]
 80054e8:	4770      	bx	lr
 80054ea:	bf00      	nop
 80054ec:	20003d84 	.word	0x20003d84

080054f0 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80054f0:	4b01      	ldr	r3, [pc, #4]	; (80054f8 <xTaskGetTickCount+0x8>)
 80054f2:	6818      	ldr	r0, [r3, #0]
}
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	20003e04 	.word	0x20003e04

080054fc <xTaskGetTickCountFromISR>:
{
 80054fc:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80054fe:	f7ff f9b9 	bl	8004874 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8005502:	4b01      	ldr	r3, [pc, #4]	; (8005508 <xTaskGetTickCountFromISR+0xc>)
 8005504:	6818      	ldr	r0, [r3, #0]
}
 8005506:	bd08      	pop	{r3, pc}
 8005508:	20003e04 	.word	0x20003e04

0800550c <xTaskIncrementTick>:
{
 800550c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005510:	4b3d      	ldr	r3, [pc, #244]	; (8005608 <xTaskIncrementTick+0xfc>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d155      	bne.n	80055c4 <xTaskIncrementTick+0xb8>
		const TickType_t xConstTickCount = xTickCount + 1;
 8005518:	4b3c      	ldr	r3, [pc, #240]	; (800560c <xTaskIncrementTick+0x100>)
 800551a:	681c      	ldr	r4, [r3, #0]
 800551c:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800551e:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8005520:	b9cc      	cbnz	r4, 8005556 <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 8005522:	4b3b      	ldr	r3, [pc, #236]	; (8005610 <xTaskIncrementTick+0x104>)
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	6812      	ldr	r2, [r2, #0]
 8005528:	b152      	cbz	r2, 8005540 <xTaskIncrementTick+0x34>
 800552a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800552e:	b672      	cpsid	i
 8005530:	f383 8811 	msr	BASEPRI, r3
 8005534:	f3bf 8f6f 	isb	sy
 8005538:	f3bf 8f4f 	dsb	sy
 800553c:	b662      	cpsie	i
 800553e:	e7fe      	b.n	800553e <xTaskIncrementTick+0x32>
 8005540:	4a34      	ldr	r2, [pc, #208]	; (8005614 <xTaskIncrementTick+0x108>)
 8005542:	6819      	ldr	r1, [r3, #0]
 8005544:	6810      	ldr	r0, [r2, #0]
 8005546:	6018      	str	r0, [r3, #0]
 8005548:	6011      	str	r1, [r2, #0]
 800554a:	4a33      	ldr	r2, [pc, #204]	; (8005618 <xTaskIncrementTick+0x10c>)
 800554c:	6813      	ldr	r3, [r2, #0]
 800554e:	3301      	adds	r3, #1
 8005550:	6013      	str	r3, [r2, #0]
 8005552:	f7ff fe51 	bl	80051f8 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005556:	4d31      	ldr	r5, [pc, #196]	; (800561c <xTaskIncrementTick+0x110>)
 8005558:	f04f 0b00 	mov.w	fp, #0
 800555c:	4f30      	ldr	r7, [pc, #192]	; (8005620 <xTaskIncrementTick+0x114>)
 800555e:	682b      	ldr	r3, [r5, #0]
 8005560:	429c      	cmp	r4, r3
 8005562:	d33e      	bcc.n	80055e2 <xTaskIncrementTick+0xd6>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005564:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8005610 <xTaskIncrementTick+0x104>
					prvAddTaskToReadyList( pxTCB );
 8005568:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8005630 <xTaskIncrementTick+0x124>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800556c:	f8d8 2000 	ldr.w	r2, [r8]
 8005570:	6812      	ldr	r2, [r2, #0]
 8005572:	bb72      	cbnz	r2, 80055d2 <xTaskIncrementTick+0xc6>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005574:	f04f 32ff 	mov.w	r2, #4294967295
 8005578:	602a      	str	r2, [r5, #0]
					break;
 800557a:	e032      	b.n	80055e2 <xTaskIncrementTick+0xd6>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800557c:	f106 0a04 	add.w	sl, r6, #4
 8005580:	4650      	mov	r0, sl
 8005582:	f7ff f81c 	bl	80045be <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005586:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8005588:	b119      	cbz	r1, 8005592 <xTaskIncrementTick+0x86>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800558a:	f106 0018 	add.w	r0, r6, #24
 800558e:	f7ff f816 	bl	80045be <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005592:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8005594:	2201      	movs	r2, #1
 8005596:	f8d9 3000 	ldr.w	r3, [r9]
 800559a:	f04f 0e14 	mov.w	lr, #20
 800559e:	fa02 f100 	lsl.w	r1, r2, r0
 80055a2:	4319      	orrs	r1, r3
 80055a4:	4b1f      	ldr	r3, [pc, #124]	; (8005624 <xTaskIncrementTick+0x118>)
 80055a6:	f8c9 1000 	str.w	r1, [r9]
 80055aa:	4651      	mov	r1, sl
 80055ac:	fb0e 3000 	mla	r0, lr, r0, r3
 80055b0:	f7fe ffe2 	bl	8004578 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80055b4:	6838      	ldr	r0, [r7, #0]
 80055b6:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 80055b8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80055ba:	4291      	cmp	r1, r2
 80055bc:	bf28      	it	cs
 80055be:	f04f 0b01 	movcs.w	fp, #1
 80055c2:	e7d3      	b.n	800556c <xTaskIncrementTick+0x60>
		++uxPendedTicks;
 80055c4:	4a18      	ldr	r2, [pc, #96]	; (8005628 <xTaskIncrementTick+0x11c>)
BaseType_t xSwitchRequired = pdFALSE;
 80055c6:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 80055ca:	6813      	ldr	r3, [r2, #0]
 80055cc:	3301      	adds	r3, #1
 80055ce:	6013      	str	r3, [r2, #0]
 80055d0:	e011      	b.n	80055f6 <xTaskIncrementTick+0xea>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80055d2:	f8d8 2000 	ldr.w	r2, [r8]
 80055d6:	68d2      	ldr	r2, [r2, #12]
 80055d8:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80055da:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 80055dc:	428c      	cmp	r4, r1
 80055de:	d2cd      	bcs.n	800557c <xTaskIncrementTick+0x70>
						xNextTaskUnblockTime = xItemValue;
 80055e0:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80055e2:	683a      	ldr	r2, [r7, #0]
 80055e4:	4b0f      	ldr	r3, [pc, #60]	; (8005624 <xTaskIncrementTick+0x118>)
 80055e6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80055e8:	2214      	movs	r2, #20
 80055ea:	434a      	muls	r2, r1
 80055ec:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 80055ee:	2a02      	cmp	r2, #2
 80055f0:	bf28      	it	cs
 80055f2:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 80055f6:	4a0d      	ldr	r2, [pc, #52]	; (800562c <xTaskIncrementTick+0x120>)
 80055f8:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 80055fa:	2a00      	cmp	r2, #0
 80055fc:	bf18      	it	ne
 80055fe:	f04f 0b01 	movne.w	fp, #1
}
 8005602:	4658      	mov	r0, fp
 8005604:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005608:	20003d84 	.word	0x20003d84
 800560c:	20003e04 	.word	0x20003e04
 8005610:	20003ce4 	.word	0x20003ce4
 8005614:	20003ce8 	.word	0x20003ce8
 8005618:	20003dc0 	.word	0x20003dc0
 800561c:	20003dbc 	.word	0x20003dbc
 8005620:	20003ce0 	.word	0x20003ce0
 8005624:	20003cec 	.word	0x20003cec
 8005628:	20003d80 	.word	0x20003d80
 800562c:	20003e08 	.word	0x20003e08
 8005630:	20003d8c 	.word	0x20003d8c

08005634 <xTaskResumeAll>:
{
 8005634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8005638:	4c32      	ldr	r4, [pc, #200]	; (8005704 <xTaskResumeAll+0xd0>)
 800563a:	6823      	ldr	r3, [r4, #0]
 800563c:	b953      	cbnz	r3, 8005654 <xTaskResumeAll+0x20>
 800563e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005642:	b672      	cpsid	i
 8005644:	f383 8811 	msr	BASEPRI, r3
 8005648:	f3bf 8f6f 	isb	sy
 800564c:	f3bf 8f4f 	dsb	sy
 8005650:	b662      	cpsie	i
 8005652:	e7fe      	b.n	8005652 <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
 8005654:	f7ff f81e 	bl	8004694 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8005658:	6823      	ldr	r3, [r4, #0]
 800565a:	3b01      	subs	r3, #1
 800565c:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800565e:	6824      	ldr	r4, [r4, #0]
 8005660:	b12c      	cbz	r4, 800566e <xTaskResumeAll+0x3a>
BaseType_t xAlreadyYielded = pdFALSE;
 8005662:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8005664:	f7ff f83c 	bl	80046e0 <vPortExitCritical>
}
 8005668:	4620      	mov	r0, r4
 800566a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800566e:	4b26      	ldr	r3, [pc, #152]	; (8005708 <xTaskResumeAll+0xd4>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d0f5      	beq.n	8005662 <xTaskResumeAll+0x2e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005676:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8005720 <xTaskResumeAll+0xec>
					prvAddTaskToReadyList( pxTCB );
 800567a:	4f24      	ldr	r7, [pc, #144]	; (800570c <xTaskResumeAll+0xd8>)
 800567c:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8005724 <xTaskResumeAll+0xf0>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005680:	f8d9 3000 	ldr.w	r3, [r9]
 8005684:	b9e3      	cbnz	r3, 80056c0 <xTaskResumeAll+0x8c>
				if( pxTCB != NULL )
 8005686:	b10c      	cbz	r4, 800568c <xTaskResumeAll+0x58>
					prvResetNextTaskUnblockTime();
 8005688:	f7ff fdb6 	bl	80051f8 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800568c:	4d20      	ldr	r5, [pc, #128]	; (8005710 <xTaskResumeAll+0xdc>)
 800568e:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005690:	b144      	cbz	r4, 80056a4 <xTaskResumeAll+0x70>
								xYieldPending = pdTRUE;
 8005692:	4e20      	ldr	r6, [pc, #128]	; (8005714 <xTaskResumeAll+0xe0>)
 8005694:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8005696:	f7ff ff39 	bl	800550c <xTaskIncrementTick>
 800569a:	b100      	cbz	r0, 800569e <xTaskResumeAll+0x6a>
								xYieldPending = pdTRUE;
 800569c:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800569e:	3c01      	subs	r4, #1
 80056a0:	d1f9      	bne.n	8005696 <xTaskResumeAll+0x62>
						uxPendedTicks = 0;
 80056a2:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80056a4:	4b1b      	ldr	r3, [pc, #108]	; (8005714 <xTaskResumeAll+0xe0>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d0da      	beq.n	8005662 <xTaskResumeAll+0x2e>
					taskYIELD_IF_USING_PREEMPTION();
 80056ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056b0:	4b19      	ldr	r3, [pc, #100]	; (8005718 <xTaskResumeAll+0xe4>)
 80056b2:	601a      	str	r2, [r3, #0]
 80056b4:	f3bf 8f4f 	dsb	sy
 80056b8:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80056bc:	2401      	movs	r4, #1
 80056be:	e7d1      	b.n	8005664 <xTaskResumeAll+0x30>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80056c0:	f8d9 300c 	ldr.w	r3, [r9, #12]
					prvAddTaskToReadyList( pxTCB );
 80056c4:	2501      	movs	r5, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80056c6:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056c8:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80056ca:	f104 0018 	add.w	r0, r4, #24
 80056ce:	f7fe ff76 	bl	80045be <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056d2:	4630      	mov	r0, r6
 80056d4:	f7fe ff73 	bl	80045be <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80056d8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80056da:	6839      	ldr	r1, [r7, #0]
 80056dc:	2014      	movs	r0, #20
 80056de:	fa05 f302 	lsl.w	r3, r5, r2
 80056e2:	fb00 8002 	mla	r0, r0, r2, r8
 80056e6:	430b      	orrs	r3, r1
 80056e8:	4631      	mov	r1, r6
 80056ea:	603b      	str	r3, [r7, #0]
 80056ec:	f7fe ff44 	bl	8004578 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056f0:	4b0a      	ldr	r3, [pc, #40]	; (800571c <xTaskResumeAll+0xe8>)
 80056f2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d3c1      	bcc.n	8005680 <xTaskResumeAll+0x4c>
						xYieldPending = pdTRUE;
 80056fc:	4b05      	ldr	r3, [pc, #20]	; (8005714 <xTaskResumeAll+0xe0>)
 80056fe:	601d      	str	r5, [r3, #0]
 8005700:	e7be      	b.n	8005680 <xTaskResumeAll+0x4c>
 8005702:	bf00      	nop
 8005704:	20003d84 	.word	0x20003d84
 8005708:	20003d78 	.word	0x20003d78
 800570c:	20003d8c 	.word	0x20003d8c
 8005710:	20003d80 	.word	0x20003d80
 8005714:	20003e08 	.word	0x20003e08
 8005718:	e000ed04 	.word	0xe000ed04
 800571c:	20003ce0 	.word	0x20003ce0
 8005720:	20003dc4 	.word	0x20003dc4
 8005724:	20003cec 	.word	0x20003cec

08005728 <vTaskDelay>:
	{
 8005728:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800572a:	b940      	cbnz	r0, 800573e <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 800572c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005730:	4b0e      	ldr	r3, [pc, #56]	; (800576c <vTaskDelay+0x44>)
 8005732:	601a      	str	r2, [r3, #0]
 8005734:	f3bf 8f4f 	dsb	sy
 8005738:	f3bf 8f6f 	isb	sy
 800573c:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800573e:	4b0c      	ldr	r3, [pc, #48]	; (8005770 <vTaskDelay+0x48>)
 8005740:	6819      	ldr	r1, [r3, #0]
 8005742:	b151      	cbz	r1, 800575a <vTaskDelay+0x32>
 8005744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005748:	b672      	cpsid	i
 800574a:	f383 8811 	msr	BASEPRI, r3
 800574e:	f3bf 8f6f 	isb	sy
 8005752:	f3bf 8f4f 	dsb	sy
 8005756:	b662      	cpsie	i
 8005758:	e7fe      	b.n	8005758 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800575a:	f7ff fec1 	bl	80054e0 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800575e:	f7ff fd5d 	bl	800521c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8005762:	f7ff ff67 	bl	8005634 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8005766:	2800      	cmp	r0, #0
 8005768:	d0e0      	beq.n	800572c <vTaskDelay+0x4>
 800576a:	bd08      	pop	{r3, pc}
 800576c:	e000ed04 	.word	0xe000ed04
 8005770:	20003d84 	.word	0x20003d84

08005774 <prvIdleTask>:
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8005774:	4e17      	ldr	r6, [pc, #92]	; (80057d4 <prvIdleTask+0x60>)
{
 8005776:	b508      	push	{r3, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005778:	4c17      	ldr	r4, [pc, #92]	; (80057d8 <prvIdleTask+0x64>)
 800577a:	6823      	ldr	r3, [r4, #0]
 800577c:	b963      	cbnz	r3, 8005798 <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800577e:	4b17      	ldr	r3, [pc, #92]	; (80057dc <prvIdleTask+0x68>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2b01      	cmp	r3, #1
 8005784:	d9f8      	bls.n	8005778 <prvIdleTask+0x4>
				taskYIELD();
 8005786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800578a:	4b15      	ldr	r3, [pc, #84]	; (80057e0 <prvIdleTask+0x6c>)
 800578c:	601a      	str	r2, [r3, #0]
 800578e:	f3bf 8f4f 	dsb	sy
 8005792:	f3bf 8f6f 	isb	sy
 8005796:	e7ef      	b.n	8005778 <prvIdleTask+0x4>
			vTaskSuspendAll();
 8005798:	f7ff fea2 	bl	80054e0 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800579c:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 800579e:	f7ff ff49 	bl	8005634 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 80057a2:	2d00      	cmp	r5, #0
 80057a4:	d0e9      	beq.n	800577a <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 80057a6:	f7fe ff75 	bl	8004694 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80057aa:	68f3      	ldr	r3, [r6, #12]
 80057ac:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057ae:	1d28      	adds	r0, r5, #4
 80057b0:	f7fe ff05 	bl	80045be <uxListRemove>
					--uxCurrentNumberOfTasks;
 80057b4:	4a0b      	ldr	r2, [pc, #44]	; (80057e4 <prvIdleTask+0x70>)
 80057b6:	6813      	ldr	r3, [r2, #0]
 80057b8:	3b01      	subs	r3, #1
 80057ba:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 80057bc:	6823      	ldr	r3, [r4, #0]
 80057be:	3b01      	subs	r3, #1
 80057c0:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 80057c2:	f7fe ff8d 	bl	80046e0 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 80057c6:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80057c8:	f7ff f93c 	bl	8004a44 <vPortFree>
			vPortFree( pxTCB );
 80057cc:	4628      	mov	r0, r5
 80057ce:	f7ff f939 	bl	8004a44 <vPortFree>
 80057d2:	e7d2      	b.n	800577a <prvIdleTask+0x6>
 80057d4:	20003df0 	.word	0x20003df0
 80057d8:	20003d7c 	.word	0x20003d7c
 80057dc:	20003cec 	.word	0x20003cec
 80057e0:	e000ed04 	.word	0xe000ed04
 80057e4:	20003d78 	.word	0x20003d78

080057e8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80057e8:	4b18      	ldr	r3, [pc, #96]	; (800584c <vTaskSwitchContext+0x64>)
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	4b18      	ldr	r3, [pc, #96]	; (8005850 <vTaskSwitchContext+0x68>)
{
 80057ee:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80057f0:	b112      	cbz	r2, 80057f8 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80057f2:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80057f4:	601a      	str	r2, [r3, #0]
 80057f6:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 80057f8:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80057fa:	4b16      	ldr	r3, [pc, #88]	; (8005854 <vTaskSwitchContext+0x6c>)
 80057fc:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80057fe:	fab3 f383 	clz	r3, r3
 8005802:	b2db      	uxtb	r3, r3
 8005804:	2214      	movs	r2, #20
 8005806:	4914      	ldr	r1, [pc, #80]	; (8005858 <vTaskSwitchContext+0x70>)
 8005808:	f1c3 031f 	rsb	r3, r3, #31
 800580c:	435a      	muls	r2, r3
 800580e:	588c      	ldr	r4, [r1, r2]
 8005810:	1888      	adds	r0, r1, r2
 8005812:	b954      	cbnz	r4, 800582a <vTaskSwitchContext+0x42>
	__asm volatile
 8005814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005818:	b672      	cpsid	i
 800581a:	f383 8811 	msr	BASEPRI, r3
 800581e:	f3bf 8f6f 	isb	sy
 8005822:	f3bf 8f4f 	dsb	sy
 8005826:	b662      	cpsie	i
 8005828:	e7fe      	b.n	8005828 <vTaskSwitchContext+0x40>
 800582a:	6844      	ldr	r4, [r0, #4]
 800582c:	3208      	adds	r2, #8
 800582e:	6864      	ldr	r4, [r4, #4]
 8005830:	440a      	add	r2, r1
 8005832:	4294      	cmp	r4, r2
 8005834:	6044      	str	r4, [r0, #4]
 8005836:	bf04      	itt	eq
 8005838:	6862      	ldreq	r2, [r4, #4]
 800583a:	6042      	streq	r2, [r0, #4]
 800583c:	2214      	movs	r2, #20
 800583e:	fb02 1303 	mla	r3, r2, r3, r1
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	68da      	ldr	r2, [r3, #12]
 8005846:	4b05      	ldr	r3, [pc, #20]	; (800585c <vTaskSwitchContext+0x74>)
 8005848:	e7d4      	b.n	80057f4 <vTaskSwitchContext+0xc>
 800584a:	bf00      	nop
 800584c:	20003d84 	.word	0x20003d84
 8005850:	20003e08 	.word	0x20003e08
 8005854:	20003d8c 	.word	0x20003d8c
 8005858:	20003cec 	.word	0x20003cec
 800585c:	20003ce0 	.word	0x20003ce0

08005860 <vTaskPlaceOnEventList>:
{
 8005860:	b510      	push	{r4, lr}
 8005862:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8005864:	b950      	cbnz	r0, 800587c <vTaskPlaceOnEventList+0x1c>
 8005866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800586a:	b672      	cpsid	i
 800586c:	f383 8811 	msr	BASEPRI, r3
 8005870:	f3bf 8f6f 	isb	sy
 8005874:	f3bf 8f4f 	dsb	sy
 8005878:	b662      	cpsie	i
 800587a:	e7fe      	b.n	800587a <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800587c:	4b05      	ldr	r3, [pc, #20]	; (8005894 <vTaskPlaceOnEventList+0x34>)
 800587e:	6819      	ldr	r1, [r3, #0]
 8005880:	3118      	adds	r1, #24
 8005882:	f7fe fe85 	bl	8004590 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005886:	4620      	mov	r0, r4
 8005888:	2101      	movs	r1, #1
}
 800588a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800588e:	f7ff bcc5 	b.w	800521c <prvAddCurrentTaskToDelayedList>
 8005892:	bf00      	nop
 8005894:	20003ce0 	.word	0x20003ce0

08005898 <xTaskRemoveFromEventList>:
{
 8005898:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800589a:	68c3      	ldr	r3, [r0, #12]
 800589c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800589e:	b954      	cbnz	r4, 80058b6 <xTaskRemoveFromEventList+0x1e>
 80058a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a4:	b672      	cpsid	i
 80058a6:	f383 8811 	msr	BASEPRI, r3
 80058aa:	f3bf 8f6f 	isb	sy
 80058ae:	f3bf 8f4f 	dsb	sy
 80058b2:	b662      	cpsie	i
 80058b4:	e7fe      	b.n	80058b4 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80058b6:	f104 0518 	add.w	r5, r4, #24
 80058ba:	4628      	mov	r0, r5
 80058bc:	f7fe fe7f 	bl	80045be <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058c0:	4b11      	ldr	r3, [pc, #68]	; (8005908 <xTaskRemoveFromEventList+0x70>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	b9db      	cbnz	r3, 80058fe <xTaskRemoveFromEventList+0x66>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80058c6:	1d25      	adds	r5, r4, #4
 80058c8:	4628      	mov	r0, r5
 80058ca:	f7fe fe78 	bl	80045be <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80058ce:	490f      	ldr	r1, [pc, #60]	; (800590c <xTaskRemoveFromEventList+0x74>)
 80058d0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80058d2:	2301      	movs	r3, #1
 80058d4:	6808      	ldr	r0, [r1, #0]
 80058d6:	4093      	lsls	r3, r2
 80058d8:	4303      	orrs	r3, r0
 80058da:	2014      	movs	r0, #20
 80058dc:	600b      	str	r3, [r1, #0]
 80058de:	4629      	mov	r1, r5
 80058e0:	4b0b      	ldr	r3, [pc, #44]	; (8005910 <xTaskRemoveFromEventList+0x78>)
 80058e2:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80058e6:	f7fe fe47 	bl	8004578 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80058ea:	4b0a      	ldr	r3, [pc, #40]	; (8005914 <xTaskRemoveFromEventList+0x7c>)
 80058ec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d906      	bls.n	8005904 <xTaskRemoveFromEventList+0x6c>
		xYieldPending = pdTRUE;
 80058f6:	2001      	movs	r0, #1
 80058f8:	4b07      	ldr	r3, [pc, #28]	; (8005918 <xTaskRemoveFromEventList+0x80>)
 80058fa:	6018      	str	r0, [r3, #0]
 80058fc:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80058fe:	4629      	mov	r1, r5
 8005900:	4806      	ldr	r0, [pc, #24]	; (800591c <xTaskRemoveFromEventList+0x84>)
 8005902:	e7f0      	b.n	80058e6 <xTaskRemoveFromEventList+0x4e>
		xReturn = pdFALSE;
 8005904:	2000      	movs	r0, #0
}
 8005906:	bd38      	pop	{r3, r4, r5, pc}
 8005908:	20003d84 	.word	0x20003d84
 800590c:	20003d8c 	.word	0x20003d8c
 8005910:	20003cec 	.word	0x20003cec
 8005914:	20003ce0 	.word	0x20003ce0
 8005918:	20003e08 	.word	0x20003e08
 800591c:	20003dc4 	.word	0x20003dc4

08005920 <vTaskSetTimeOutState>:
{
 8005920:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
 8005922:	b908      	cbnz	r0, 8005928 <vTaskSetTimeOutState+0x8>
 8005924:	f7ff fcc0 	bl	80052a8 <prvTaskIsTaskSuspended.part.0>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005928:	4b03      	ldr	r3, [pc, #12]	; (8005938 <vTaskSetTimeOutState+0x18>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800592e:	4b03      	ldr	r3, [pc, #12]	; (800593c <vTaskSetTimeOutState+0x1c>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	6043      	str	r3, [r0, #4]
 8005934:	bd08      	pop	{r3, pc}
 8005936:	bf00      	nop
 8005938:	20003dc0 	.word	0x20003dc0
 800593c:	20003e04 	.word	0x20003e04

08005940 <xTaskCheckForTimeOut>:
{
 8005940:	b538      	push	{r3, r4, r5, lr}
 8005942:	460d      	mov	r5, r1
	configASSERT( pxTimeOut );
 8005944:	4604      	mov	r4, r0
 8005946:	b950      	cbnz	r0, 800595e <xTaskCheckForTimeOut+0x1e>
 8005948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800594c:	b672      	cpsid	i
 800594e:	f383 8811 	msr	BASEPRI, r3
 8005952:	f3bf 8f6f 	isb	sy
 8005956:	f3bf 8f4f 	dsb	sy
 800595a:	b662      	cpsie	i
 800595c:	e7fe      	b.n	800595c <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 800595e:	b951      	cbnz	r1, 8005976 <xTaskCheckForTimeOut+0x36>
 8005960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005964:	b672      	cpsid	i
 8005966:	f383 8811 	msr	BASEPRI, r3
 800596a:	f3bf 8f6f 	isb	sy
 800596e:	f3bf 8f4f 	dsb	sy
 8005972:	b662      	cpsie	i
 8005974:	e7fe      	b.n	8005974 <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 8005976:	f7fe fe8d 	bl	8004694 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800597a:	4b0e      	ldr	r3, [pc, #56]	; (80059b4 <xTaskCheckForTimeOut+0x74>)
 800597c:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800597e:	682b      	ldr	r3, [r5, #0]
 8005980:	1c5a      	adds	r2, r3, #1
 8005982:	d010      	beq.n	80059a6 <xTaskCheckForTimeOut+0x66>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005984:	4a0c      	ldr	r2, [pc, #48]	; (80059b8 <xTaskCheckForTimeOut+0x78>)
 8005986:	6820      	ldr	r0, [r4, #0]
 8005988:	6812      	ldr	r2, [r2, #0]
 800598a:	4290      	cmp	r0, r2
 800598c:	6862      	ldr	r2, [r4, #4]
 800598e:	d001      	beq.n	8005994 <xTaskCheckForTimeOut+0x54>
 8005990:	4291      	cmp	r1, r2
 8005992:	d20d      	bcs.n	80059b0 <xTaskCheckForTimeOut+0x70>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005994:	1a88      	subs	r0, r1, r2
 8005996:	4283      	cmp	r3, r0
 8005998:	d90a      	bls.n	80059b0 <xTaskCheckForTimeOut+0x70>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 800599a:	1a5b      	subs	r3, r3, r1
			vTaskSetTimeOutState( pxTimeOut );
 800599c:	4620      	mov	r0, r4
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 800599e:	4413      	add	r3, r2
 80059a0:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 80059a2:	f7ff ffbd 	bl	8005920 <vTaskSetTimeOutState>
				xReturn = pdFALSE;
 80059a6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80059a8:	f7fe fe9a 	bl	80046e0 <vPortExitCritical>
}
 80059ac:	4620      	mov	r0, r4
 80059ae:	bd38      	pop	{r3, r4, r5, pc}
			xReturn = pdTRUE;
 80059b0:	2401      	movs	r4, #1
 80059b2:	e7f9      	b.n	80059a8 <xTaskCheckForTimeOut+0x68>
 80059b4:	20003e04 	.word	0x20003e04
 80059b8:	20003dc0 	.word	0x20003dc0

080059bc <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80059bc:	2201      	movs	r2, #1
 80059be:	4b01      	ldr	r3, [pc, #4]	; (80059c4 <vTaskMissedYield+0x8>)
 80059c0:	601a      	str	r2, [r3, #0]
 80059c2:	4770      	bx	lr
 80059c4:	20003e08 	.word	0x20003e08

080059c8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80059c8:	4b05      	ldr	r3, [pc, #20]	; (80059e0 <xTaskGetSchedulerState+0x18>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	b133      	cbz	r3, 80059dc <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059ce:	4b05      	ldr	r3, [pc, #20]	; (80059e4 <xTaskGetSchedulerState+0x1c>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 80059d4:	bf0c      	ite	eq
 80059d6:	2002      	moveq	r0, #2
 80059d8:	2000      	movne	r0, #0
 80059da:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80059dc:	2001      	movs	r0, #1
	}
 80059de:	4770      	bx	lr
 80059e0:	20003dd8 	.word	0x20003dd8
 80059e4:	20003d84 	.word	0x20003d84

080059e8 <vTaskPriorityInherit>:
	{
 80059e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 80059ec:	4604      	mov	r4, r0
 80059ee:	2800      	cmp	r0, #0
 80059f0:	d038      	beq.n	8005a64 <vTaskPriorityInherit+0x7c>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 80059f2:	4d1d      	ldr	r5, [pc, #116]	; (8005a68 <vTaskPriorityInherit+0x80>)
 80059f4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80059f6:	682a      	ldr	r2, [r5, #0]
 80059f8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d232      	bcs.n	8005a64 <vTaskPriorityInherit+0x7c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80059fe:	6982      	ldr	r2, [r0, #24]
 8005a00:	2a00      	cmp	r2, #0
 8005a02:	db04      	blt.n	8005a0e <vTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a04:	682a      	ldr	r2, [r5, #0]
 8005a06:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005a08:	f1c2 0207 	rsb	r2, r2, #7
 8005a0c:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005a0e:	4e17      	ldr	r6, [pc, #92]	; (8005a6c <vTaskPriorityInherit+0x84>)
 8005a10:	2714      	movs	r7, #20
 8005a12:	6962      	ldr	r2, [r4, #20]
 8005a14:	fb07 6303 	mla	r3, r7, r3, r6
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d120      	bne.n	8005a5e <vTaskPriorityInherit+0x76>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a1c:	f104 0804 	add.w	r8, r4, #4
 8005a20:	4640      	mov	r0, r8
 8005a22:	f7fe fdcc 	bl	80045be <uxListRemove>
 8005a26:	4a12      	ldr	r2, [pc, #72]	; (8005a70 <vTaskPriorityInherit+0x88>)
 8005a28:	b948      	cbnz	r0, 8005a3e <vTaskPriorityInherit+0x56>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005a2a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005a2c:	4347      	muls	r7, r0
 8005a2e:	59f3      	ldr	r3, [r6, r7]
 8005a30:	b92b      	cbnz	r3, 8005a3e <vTaskPriorityInherit+0x56>
 8005a32:	2101      	movs	r1, #1
 8005a34:	6813      	ldr	r3, [r2, #0]
 8005a36:	4081      	lsls	r1, r0
 8005a38:	ea23 0301 	bic.w	r3, r3, r1
 8005a3c:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005a3e:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxTCB );
 8005a40:	6811      	ldr	r1, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005a42:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8005a44:	2301      	movs	r3, #1
 8005a46:	4083      	lsls	r3, r0
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005a48:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8005a4a:	430b      	orrs	r3, r1
 8005a4c:	4641      	mov	r1, r8
 8005a4e:	6013      	str	r3, [r2, #0]
 8005a50:	2314      	movs	r3, #20
 8005a52:	fb03 6000 	mla	r0, r3, r0, r6
	}
 8005a56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					prvAddTaskToReadyList( pxTCB );
 8005a5a:	f7fe bd8d 	b.w	8004578 <vListInsertEnd>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005a5e:	682b      	ldr	r3, [r5, #0]
 8005a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a62:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a68:	20003ce0 	.word	0x20003ce0
 8005a6c:	20003cec 	.word	0x20003cec
 8005a70:	20003d8c 	.word	0x20003d8c

08005a74 <xTaskPriorityDisinherit>:
	{
 8005a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8005a76:	4604      	mov	r4, r0
 8005a78:	b908      	cbnz	r0, 8005a7e <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8005a7a:	2000      	movs	r0, #0
 8005a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8005a7e:	4b24      	ldr	r3, [pc, #144]	; (8005b10 <xTaskPriorityDisinherit+0x9c>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4298      	cmp	r0, r3
 8005a84:	d00a      	beq.n	8005a9c <xTaskPriorityDisinherit+0x28>
 8005a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a8a:	b672      	cpsid	i
 8005a8c:	f383 8811 	msr	BASEPRI, r3
 8005a90:	f3bf 8f6f 	isb	sy
 8005a94:	f3bf 8f4f 	dsb	sy
 8005a98:	b662      	cpsie	i
 8005a9a:	e7fe      	b.n	8005a9a <xTaskPriorityDisinherit+0x26>
			configASSERT( pxTCB->uxMutexesHeld );
 8005a9c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8005a9e:	b953      	cbnz	r3, 8005ab6 <xTaskPriorityDisinherit+0x42>
 8005aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa4:	b672      	cpsid	i
 8005aa6:	f383 8811 	msr	BASEPRI, r3
 8005aaa:	f3bf 8f6f 	isb	sy
 8005aae:	f3bf 8f4f 	dsb	sy
 8005ab2:	b662      	cpsie	i
 8005ab4:	e7fe      	b.n	8005ab4 <xTaskPriorityDisinherit+0x40>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005ab6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 8005ab8:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005aba:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8005abc:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005abe:	4291      	cmp	r1, r2
 8005ac0:	d0db      	beq.n	8005a7a <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1d9      	bne.n	8005a7a <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ac6:	1d05      	adds	r5, r0, #4
 8005ac8:	4e12      	ldr	r6, [pc, #72]	; (8005b14 <xTaskPriorityDisinherit+0xa0>)
 8005aca:	4628      	mov	r0, r5
 8005acc:	f7fe fd77 	bl	80045be <uxListRemove>
 8005ad0:	4a11      	ldr	r2, [pc, #68]	; (8005b18 <xTaskPriorityDisinherit+0xa4>)
 8005ad2:	b950      	cbnz	r0, 8005aea <xTaskPriorityDisinherit+0x76>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005ad4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005ad6:	2114      	movs	r1, #20
 8005ad8:	4379      	muls	r1, r7
 8005ada:	5873      	ldr	r3, [r6, r1]
 8005adc:	b92b      	cbnz	r3, 8005aea <xTaskPriorityDisinherit+0x76>
 8005ade:	2001      	movs	r0, #1
 8005ae0:	6813      	ldr	r3, [r2, #0]
 8005ae2:	40b8      	lsls	r0, r7
 8005ae4:	ea23 0300 	bic.w	r3, r3, r0
 8005ae8:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005aea:	6c63      	ldr	r3, [r4, #68]	; 0x44
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005aec:	f1c3 0107 	rsb	r1, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005af0:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005af2:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8005af4:	2401      	movs	r4, #1
 8005af6:	6811      	ldr	r1, [r2, #0]
 8005af8:	fa04 f003 	lsl.w	r0, r4, r3
 8005afc:	4308      	orrs	r0, r1
 8005afe:	4629      	mov	r1, r5
 8005b00:	6010      	str	r0, [r2, #0]
 8005b02:	2014      	movs	r0, #20
 8005b04:	fb00 6003 	mla	r0, r0, r3, r6
 8005b08:	f7fe fd36 	bl	8004578 <vListInsertEnd>
					xReturn = pdTRUE;
 8005b0c:	4620      	mov	r0, r4
	}
 8005b0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b10:	20003ce0 	.word	0x20003ce0
 8005b14:	20003cec 	.word	0x20003cec
 8005b18:	20003d8c 	.word	0x20003d8c

08005b1c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8005b1c:	4b04      	ldr	r3, [pc, #16]	; (8005b30 <pvTaskIncrementMutexHeldCount+0x14>)
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	b11a      	cbz	r2, 8005b2a <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8005b22:	6819      	ldr	r1, [r3, #0]
 8005b24:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8005b26:	3201      	adds	r2, #1
 8005b28:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 8005b2a:	6818      	ldr	r0, [r3, #0]
	}
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	20003ce0 	.word	0x20003ce0

08005b34 <tcpip_thread>:
tcpip_thread(void *arg)
{
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 8005b34:	4b18      	ldr	r3, [pc, #96]	; (8005b98 <tcpip_thread+0x64>)
 8005b36:	681b      	ldr	r3, [r3, #0]
{
 8005b38:	b507      	push	{r0, r1, r2, lr}
  if (tcpip_init_done != NULL) {
 8005b3a:	b113      	cbz	r3, 8005b42 <tcpip_thread+0xe>
    tcpip_init_done(tcpip_init_done_arg);
 8005b3c:	4a17      	ldr	r2, [pc, #92]	; (8005b9c <tcpip_thread+0x68>)
 8005b3e:	6810      	ldr	r0, [r2, #0]
 8005b40:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
 8005b42:	4c17      	ldr	r4, [pc, #92]	; (8005ba0 <tcpip_thread+0x6c>)
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 8005b44:	4d17      	ldr	r5, [pc, #92]	; (8005ba4 <tcpip_thread+0x70>)
  LOCK_TCPIP_CORE();
 8005b46:	4816      	ldr	r0, [pc, #88]	; (8005ba0 <tcpip_thread+0x6c>)
 8005b48:	f005 f941 	bl	800adce <sys_mutex_lock>
    UNLOCK_TCPIP_CORE();
 8005b4c:	4620      	mov	r0, r4
 8005b4e:	f005 f943 	bl	800add8 <sys_mutex_unlock>
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 8005b52:	a901      	add	r1, sp, #4
 8005b54:	4628      	mov	r0, r5
 8005b56:	f004 fe55 	bl	800a804 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 8005b5a:	4620      	mov	r0, r4
 8005b5c:	f005 f937 	bl	800adce <sys_mutex_lock>
    if (msg == NULL) {
 8005b60:	9b01      	ldr	r3, [sp, #4]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d0f2      	beq.n	8005b4c <tcpip_thread+0x18>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
      continue;
    }
    switch (msg->type) {
 8005b66:	781a      	ldrb	r2, [r3, #0]
 8005b68:	2a03      	cmp	r2, #3
 8005b6a:	d00b      	beq.n	8005b84 <tcpip_thread+0x50>
 8005b6c:	2a04      	cmp	r2, #4
 8005b6e:	d00f      	beq.n	8005b90 <tcpip_thread+0x5c>
 8005b70:	2a02      	cmp	r2, #2
 8005b72:	d1eb      	bne.n	8005b4c <tcpip_thread+0x18>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 8005b74:	1d18      	adds	r0, r3, #4
 8005b76:	c807      	ldmia	r0, {r0, r1, r2}
 8005b78:	4790      	blx	r2
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8005b7a:	9901      	ldr	r1, [sp, #4]
 8005b7c:	2009      	movs	r0, #9
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8005b7e:	f002 f981 	bl	8007e84 <memp_free>
      break;
 8005b82:	e7e3      	b.n	8005b4c <tcpip_thread+0x18>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8005b84:	6898      	ldr	r0, [r3, #8]
 8005b86:	685a      	ldr	r2, [r3, #4]
 8005b88:	4790      	blx	r2
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8005b8a:	9901      	ldr	r1, [sp, #4]
 8005b8c:	2008      	movs	r0, #8
 8005b8e:	e7f6      	b.n	8005b7e <tcpip_thread+0x4a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8005b90:	685a      	ldr	r2, [r3, #4]
 8005b92:	6898      	ldr	r0, [r3, #8]
 8005b94:	4790      	blx	r2
      break;
 8005b96:	e7d9      	b.n	8005b4c <tcpip_thread+0x18>
 8005b98:	20003e10 	.word	0x20003e10
 8005b9c:	20003e14 	.word	0x20003e14
 8005ba0:	20003fc8 	.word	0x20003fc8
 8005ba4:	20003e0c 	.word	0x20003e0c

08005ba8 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8005ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005baa:	4607      	mov	r7, r0
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8005bac:	480d      	ldr	r0, [pc, #52]	; (8005be4 <tcpip_inpkt+0x3c>)
{
 8005bae:	460e      	mov	r6, r1
 8005bb0:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8005bb2:	f005 f8eb 	bl	800ad8c <sys_mbox_valid>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8005bb6:	2009      	movs	r0, #9
 8005bb8:	f002 f958 	bl	8007e6c <memp_malloc>
  if (msg == NULL) {
 8005bbc:	4604      	mov	r4, r0
 8005bbe:	b168      	cbz	r0, 8005bdc <tcpip_inpkt+0x34>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 8005bc0:	2302      	movs	r3, #2
  msg->msg.inp.p = p;
 8005bc2:	6047      	str	r7, [r0, #4]
  msg->msg.inp.netif = inp;
 8005bc4:	6086      	str	r6, [r0, #8]
  msg->msg.inp.input_fn = input_fn;
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8005bc6:	4601      	mov	r1, r0
  msg->type = TCPIP_MSG_INPKT;
 8005bc8:	7003      	strb	r3, [r0, #0]
  msg->msg.inp.input_fn = input_fn;
 8005bca:	60c5      	str	r5, [r0, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8005bcc:	4805      	ldr	r0, [pc, #20]	; (8005be4 <tcpip_inpkt+0x3c>)
 8005bce:	f005 f8b1 	bl	800ad34 <sys_mbox_trypost>
 8005bd2:	b128      	cbz	r0, 8005be0 <tcpip_inpkt+0x38>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8005bd4:	4621      	mov	r1, r4
 8005bd6:	2009      	movs	r0, #9
 8005bd8:	f002 f954 	bl	8007e84 <memp_free>
    return ERR_MEM;
 8005bdc:	f04f 30ff 	mov.w	r0, #4294967295
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8005be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005be2:	bf00      	nop
 8005be4:	20003e0c 	.word	0x20003e0c

08005be8 <tcpip_input>:
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8005be8:	f891 302f 	ldrb.w	r3, [r1, #47]	; 0x2f
 8005bec:	f013 0f18 	tst.w	r3, #24
    return tcpip_inpkt(p, inp, ethernet_input);
 8005bf0:	bf14      	ite	ne
 8005bf2:	4a02      	ldrne	r2, [pc, #8]	; (8005bfc <tcpip_input+0x14>)
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 8005bf4:	4a02      	ldreq	r2, [pc, #8]	; (8005c00 <tcpip_input+0x18>)
 8005bf6:	f7ff bfd7 	b.w	8005ba8 <tcpip_inpkt>
 8005bfa:	bf00      	nop
 8005bfc:	0800ac19 	.word	0x0800ac19
 8005c00:	0800734d 	.word	0x0800734d

08005c04 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 8005c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c06:	4607      	mov	r7, r0
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8005c08:	480f      	ldr	r0, [pc, #60]	; (8005c48 <tcpip_callback_with_block+0x44>)
{
 8005c0a:	460e      	mov	r6, r1
 8005c0c:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8005c0e:	f005 f8bd 	bl	800ad8c <sys_mbox_valid>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8005c12:	2008      	movs	r0, #8
 8005c14:	f002 f92a 	bl	8007e6c <memp_malloc>
  if (msg == NULL) {
 8005c18:	4604      	mov	r4, r0
 8005c1a:	b188      	cbz	r0, 8005c40 <tcpip_callback_with_block+0x3c>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8005c1c:	2303      	movs	r3, #3
  msg->msg.cb.function = function;
 8005c1e:	6047      	str	r7, [r0, #4]
  msg->msg.cb.ctx = ctx;
 8005c20:	6086      	str	r6, [r0, #8]
  if (block) {
    sys_mbox_post(&mbox, msg);
 8005c22:	4601      	mov	r1, r0
  msg->type = TCPIP_MSG_CALLBACK;
 8005c24:	7003      	strb	r3, [r0, #0]
    sys_mbox_post(&mbox, msg);
 8005c26:	4808      	ldr	r0, [pc, #32]	; (8005c48 <tcpip_callback_with_block+0x44>)
  if (block) {
 8005c28:	b11d      	cbz	r5, 8005c32 <tcpip_callback_with_block+0x2e>
    sys_mbox_post(&mbox, msg);
 8005c2a:	f005 f877 	bl	800ad1c <sys_mbox_post>
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
      memp_free(MEMP_TCPIP_MSG_API, msg);
      return ERR_MEM;
    }
  }
  return ERR_OK;
 8005c2e:	2000      	movs	r0, #0
 8005c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8005c32:	f005 f87f 	bl	800ad34 <sys_mbox_trypost>
 8005c36:	b128      	cbz	r0, 8005c44 <tcpip_callback_with_block+0x40>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8005c38:	4621      	mov	r1, r4
 8005c3a:	2008      	movs	r0, #8
 8005c3c:	f002 f922 	bl	8007e84 <memp_free>
    return ERR_MEM;
 8005c40:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c46:	bf00      	nop
 8005c48:	20003e0c 	.word	0x20003e0c

08005c4c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8005c4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c4e:	4605      	mov	r5, r0
 8005c50:	460c      	mov	r4, r1
  lwip_init();
 8005c52:	f000 f828 	bl	8005ca6 <lwip_init>

  tcpip_init_done = initfunc;
 8005c56:	4b0b      	ldr	r3, [pc, #44]	; (8005c84 <tcpip_init+0x38>)
  tcpip_init_done_arg = arg;
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8005c58:	2106      	movs	r1, #6
 8005c5a:	480b      	ldr	r0, [pc, #44]	; (8005c88 <tcpip_init+0x3c>)
  tcpip_init_done = initfunc;
 8005c5c:	601d      	str	r5, [r3, #0]
  tcpip_init_done_arg = arg;
 8005c5e:	4b0b      	ldr	r3, [pc, #44]	; (8005c8c <tcpip_init+0x40>)
 8005c60:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8005c62:	f005 f84b 	bl	800acfc <sys_mbox_new>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8005c66:	480a      	ldr	r0, [pc, #40]	; (8005c90 <tcpip_init+0x44>)
 8005c68:	f005 f8a2 	bl	800adb0 <sys_mutex_new>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8005c6c:	2303      	movs	r3, #3
 8005c6e:	2200      	movs	r2, #0
 8005c70:	4908      	ldr	r1, [pc, #32]	; (8005c94 <tcpip_init+0x48>)
 8005c72:	9300      	str	r3, [sp, #0]
 8005c74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c78:	4807      	ldr	r0, [pc, #28]	; (8005c98 <tcpip_init+0x4c>)
 8005c7a:	f005 f8b0 	bl	800adde <sys_thread_new>
}
 8005c7e:	b003      	add	sp, #12
 8005c80:	bd30      	pop	{r4, r5, pc}
 8005c82:	bf00      	nop
 8005c84:	20003e10 	.word	0x20003e10
 8005c88:	20003e0c 	.word	0x20003e0c
 8005c8c:	20003e14 	.word	0x20003e14
 8005c90:	20003fc8 	.word	0x20003fc8
 8005c94:	08005b35 	.word	0x08005b35
 8005c98:	0800ca76 	.word	0x0800ca76

08005c9c <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return (u16_t)PP_HTONS(n);
 8005c9c:	ba40      	rev16	r0, r0
}
 8005c9e:	b280      	uxth	r0, r0
 8005ca0:	4770      	bx	lr

08005ca2 <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return (u32_t)PP_HTONL(n);
}
 8005ca2:	ba00      	rev	r0, r0
 8005ca4:	4770      	bx	lr

08005ca6 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8005ca6:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8005ca8:	f005 f876 	bl	800ad98 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8005cac:	f001 ff60 	bl	8007b70 <mem_init>
  memp_init();
 8005cb0:	f002 f8ce 	bl	8007e50 <memp_init>
  pbuf_init();
  netif_init();
 8005cb4:	f002 f905 	bl	8007ec2 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8005cb8:	f004 fdf6 	bl	800a8a8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8005cbc:	f002 fbb4 	bl	8008428 <tcp_init>
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 8005cc0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 8005cc4:	f004 bd66 	b.w	800a794 <sys_timeouts_init>

08005cc8 <dhcp_set_state>:
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
  if (new_state != dhcp->state) {
 8005cc8:	7a43      	ldrb	r3, [r0, #9]
 8005cca:	428b      	cmp	r3, r1
    dhcp->state = new_state;
    dhcp->tries = 0;
 8005ccc:	bf1f      	itttt	ne
 8005cce:	2300      	movne	r3, #0
    dhcp->state = new_state;
 8005cd0:	7241      	strbne	r1, [r0, #9]
    dhcp->tries = 0;
 8005cd2:	7283      	strbne	r3, [r0, #10]
    dhcp->request_timeout = 0;
 8005cd4:	82c3      	strhne	r3, [r0, #22]
 8005cd6:	4770      	bx	lr

08005cd8 <dhcp_option>:
 *
 */
static void
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
{
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8005cd8:	8a83      	ldrh	r3, [r0, #20]
{
 8005cda:	b530      	push	{r4, r5, lr}
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
 8005cdc:	6904      	ldr	r4, [r0, #16]
 8005cde:	18e5      	adds	r5, r4, r3
 8005ce0:	f885 10f0 	strb.w	r1, [r5, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
 8005ce4:	1c99      	adds	r1, r3, #2
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
 8005ce6:	3301      	adds	r3, #1
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
 8005ce8:	8281      	strh	r1, [r0, #20]
 8005cea:	fa14 f383 	uxtah	r3, r4, r3
 8005cee:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
 8005cf2:	bd30      	pop	{r4, r5, pc}

08005cf4 <dhcp_option_short>:
}

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8005cf4:	8a83      	ldrh	r3, [r0, #20]
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8005cf6:	6902      	ldr	r2, [r0, #16]
{
 8005cf8:	b530      	push	{r4, r5, lr}
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8005cfa:	18d4      	adds	r4, r2, r3
 8005cfc:	0a0d      	lsrs	r5, r1, #8
 8005cfe:	f884 50f0 	strb.w	r5, [r4, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 8005d02:	1c9c      	adds	r4, r3, #2
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8005d04:	3301      	adds	r3, #1
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 8005d06:	8284      	strh	r4, [r0, #20]
 8005d08:	fa12 f383 	uxtah	r3, r2, r3
 8005d0c:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
 8005d10:	bd30      	pop	{r4, r5, pc}

08005d12 <dhcp_option_long>:
}

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8005d12:	8a83      	ldrh	r3, [r0, #20]
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8005d14:	6902      	ldr	r2, [r0, #16]
{
 8005d16:	b530      	push	{r4, r5, lr}
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8005d18:	18d4      	adds	r4, r2, r3
 8005d1a:	0e0d      	lsrs	r5, r1, #24
 8005d1c:	f884 50f0 	strb.w	r5, [r4, #240]	; 0xf0
 8005d20:	1c5c      	adds	r4, r3, #1
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8005d22:	0c0d      	lsrs	r5, r1, #16
 8005d24:	fa12 f484 	uxtah	r4, r2, r4
 8005d28:	f884 50f0 	strb.w	r5, [r4, #240]	; 0xf0
 8005d2c:	1c9c      	adds	r4, r3, #2
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8005d2e:	0a0d      	lsrs	r5, r1, #8
 8005d30:	fa12 f484 	uxtah	r4, r2, r4
 8005d34:	f884 50f0 	strb.w	r5, [r4, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8005d38:	1d1c      	adds	r4, r3, #4
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8005d3a:	3303      	adds	r3, #3
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8005d3c:	8284      	strh	r4, [r0, #20]
 8005d3e:	fa12 f383 	uxtah	r3, r2, r3
 8005d42:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
 8005d46:	bd30      	pop	{r4, r5, pc}

08005d48 <dhcp_option_trailer>:
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
 8005d48:	b510      	push	{r4, lr}
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 8005d4a:	b158      	cbz	r0, 8005d64 <dhcp_option_trailer+0x1c>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 8005d4c:	8a83      	ldrh	r3, [r0, #20]
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
 8005d4e:	6902      	ldr	r2, [r0, #16]
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
 8005d50:	1c59      	adds	r1, r3, #1
 8005d52:	4413      	add	r3, r2
 8005d54:	8281      	strh	r1, [r0, #20]
 8005d56:	21ff      	movs	r1, #255	; 0xff
 8005d58:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 8005d5c:	2100      	movs	r1, #0
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 8005d5e:	8a83      	ldrh	r3, [r0, #20]
 8005d60:	2b43      	cmp	r3, #67	; 0x43
 8005d62:	d900      	bls.n	8005d66 <dhcp_option_trailer+0x1e>
 8005d64:	bd10      	pop	{r4, pc}
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 8005d66:	1c5c      	adds	r4, r3, #1
 8005d68:	4413      	add	r3, r2
 8005d6a:	8284      	strh	r4, [r0, #20]
 8005d6c:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
 8005d70:	e7f5      	b.n	8005d5e <dhcp_option_trailer+0x16>
	...

08005d74 <dhcp_create_msg>:
{
 8005d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d78:	460c      	mov	r4, r1
 8005d7a:	4616      	mov	r6, r2
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
 8005d7c:	4680      	mov	r8, r0
 8005d7e:	2800      	cmp	r0, #0
 8005d80:	f000 8091 	beq.w	8005ea6 <dhcp_create_msg+0x132>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8005d84:	2900      	cmp	r1, #0
 8005d86:	f000 8092 	beq.w	8005eae <dhcp_create_msg+0x13a>
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f44f 719a 	mov.w	r1, #308	; 0x134
 8005d90:	4610      	mov	r0, r2
 8005d92:	f002 f9f0 	bl	8008176 <pbuf_alloc>
 8005d96:	60e0      	str	r0, [r4, #12]
  if (dhcp->p_out == NULL) {
 8005d98:	2800      	cmp	r0, #0
 8005d9a:	f000 808c 	beq.w	8005eb6 <dhcp_create_msg+0x142>
  if (message_type != DHCP_REQUEST) {
 8005d9e:	2e03      	cmp	r6, #3
 8005da0:	d007      	beq.n	8005db2 <dhcp_create_msg+0x3e>
    if (dhcp->tries == 0) {
 8005da2:	7aa3      	ldrb	r3, [r4, #10]
 8005da4:	4d46      	ldr	r5, [pc, #280]	; (8005ec0 <dhcp_create_msg+0x14c>)
 8005da6:	b913      	cbnz	r3, 8005dae <dhcp_create_msg+0x3a>
      xid = LWIP_RAND();
 8005da8:	f005 ffb6 	bl	800bd18 <rand>
 8005dac:	6028      	str	r0, [r5, #0]
    dhcp->xid = xid;
 8005dae:	682b      	ldr	r3, [r5, #0]
 8005db0:	6023      	str	r3, [r4, #0]
  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 8005db2:	68e3      	ldr	r3, [r4, #12]
  dhcp->msg_out->hops = 0;
 8005db4:	2500      	movs	r5, #0
  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 8005db6:	685f      	ldr	r7, [r3, #4]
  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 8005db8:	2301      	movs	r3, #1
  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 8005dba:	6127      	str	r7, [r4, #16]
  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 8005dbc:	703b      	strb	r3, [r7, #0]
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
 8005dbe:	707b      	strb	r3, [r7, #1]
  dhcp->msg_out->hlen = netif->hwaddr_len;
 8005dc0:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
  dhcp->msg_out->hops = 0;
 8005dc4:	70fd      	strb	r5, [r7, #3]
  dhcp->msg_out->hlen = netif->hwaddr_len;
 8005dc6:	70bb      	strb	r3, [r7, #2]
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
 8005dc8:	6820      	ldr	r0, [r4, #0]
 8005dca:	f7ff ff6a 	bl	8005ca2 <lwip_htonl>
  dhcp->msg_out->secs = 0;
 8005dce:	6923      	ldr	r3, [r4, #16]
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8005dd0:	2e04      	cmp	r6, #4
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
 8005dd2:	6078      	str	r0, [r7, #4]
  dhcp->msg_out->secs = 0;
 8005dd4:	721d      	strb	r5, [r3, #8]
 8005dd6:	725d      	strb	r5, [r3, #9]
  dhcp->msg_out->flags = 0;
 8005dd8:	729d      	strb	r5, [r3, #10]
 8005dda:	72dd      	strb	r5, [r3, #11]
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
 8005ddc:	731d      	strb	r5, [r3, #12]
 8005dde:	735d      	strb	r5, [r3, #13]
 8005de0:	739d      	strb	r5, [r3, #14]
 8005de2:	73dd      	strb	r5, [r3, #15]
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8005de4:	d008      	beq.n	8005df8 <dhcp_create_msg+0x84>
 8005de6:	1ff2      	subs	r2, r6, #7
 8005de8:	2a01      	cmp	r2, #1
 8005dea:	d905      	bls.n	8005df8 <dhcp_create_msg+0x84>
 8005dec:	2e03      	cmp	r6, #3
 8005dee:	d106      	bne.n	8005dfe <dhcp_create_msg+0x8a>
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 8005df0:	7a62      	ldrb	r2, [r4, #9]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8005df2:	3a04      	subs	r2, #4
 8005df4:	2a01      	cmp	r2, #1
 8005df6:	d802      	bhi.n	8005dfe <dhcp_create_msg+0x8a>
    ip4_addr_copy(dhcp->msg_out->ciaddr, *netif_ip4_addr(netif));
 8005df8:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8005dfc:	60da      	str	r2, [r3, #12]
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f103 001c 	add.w	r0, r3, #28
 8005e04:	741a      	strb	r2, [r3, #16]
 8005e06:	745a      	strb	r2, [r3, #17]
 8005e08:	749a      	strb	r2, [r3, #18]
 8005e0a:	74da      	strb	r2, [r3, #19]
  ip4_addr_set_zero(&dhcp->msg_out->siaddr);
 8005e0c:	751a      	strb	r2, [r3, #20]
 8005e0e:	755a      	strb	r2, [r3, #21]
 8005e10:	759a      	strb	r2, [r3, #22]
 8005e12:	75da      	strb	r2, [r3, #23]
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
 8005e14:	761a      	strb	r2, [r3, #24]
 8005e16:	765a      	strb	r2, [r3, #25]
 8005e18:	769a      	strb	r2, [r3, #26]
 8005e1a:	76da      	strb	r2, [r3, #27]
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 8005e1c:	f898 5028 	ldrb.w	r5, [r8, #40]	; 0x28
 8005e20:	b291      	uxth	r1, r2
 8005e22:	428d      	cmp	r5, r1
 8005e24:	d93d      	bls.n	8005ea2 <dhcp_create_msg+0x12e>
 8005e26:	2905      	cmp	r1, #5
 8005e28:	d83b      	bhi.n	8005ea2 <dhcp_create_msg+0x12e>
 8005e2a:	eb08 0102 	add.w	r1, r8, r2
 8005e2e:	f891 1029 	ldrb.w	r1, [r1, #41]	; 0x29
 8005e32:	3201      	adds	r2, #1
 8005e34:	f800 1b01 	strb.w	r1, [r0], #1
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 8005e38:	2a10      	cmp	r2, #16
 8005e3a:	d1f1      	bne.n	8005e20 <dhcp_create_msg+0xac>
 8005e3c:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8005e40:	f103 016c 	add.w	r1, r3, #108	; 0x6c
    dhcp->msg_out->sname[i] = 0;
 8005e44:	2000      	movs	r0, #0
 8005e46:	f802 0b01 	strb.w	r0, [r2], #1
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 8005e4a:	428a      	cmp	r2, r1
 8005e4c:	d1fb      	bne.n	8005e46 <dhcp_create_msg+0xd2>
 8005e4e:	f103 00ec 	add.w	r0, r3, #236	; 0xec
    dhcp->msg_out->file[i] = 0;
 8005e52:	2100      	movs	r1, #0
 8005e54:	f802 1b01 	strb.w	r1, [r2], #1
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 8005e58:	4282      	cmp	r2, r0
 8005e5a:	d1fb      	bne.n	8005e54 <dhcp_create_msg+0xe0>
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8005e5c:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8005e60:	2263      	movs	r2, #99	; 0x63
 8005e62:	33f0      	adds	r3, #240	; 0xf0
 8005e64:	f803 0c03 	strb.w	r0, [r3, #-3]
 8005e68:	2053      	movs	r0, #83	; 0x53
 8005e6a:	f803 2c04 	strb.w	r2, [r3, #-4]
 8005e6e:	f803 2c01 	strb.w	r2, [r3, #-1]
  dhcp->options_out_len = 0;
 8005e72:	2200      	movs	r2, #0
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8005e74:	f803 0c02 	strb.w	r0, [r3, #-2]
  dhcp->options_out_len = 0;
 8005e78:	82a1      	strh	r1, [r4, #20]
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
 8005e7a:	f803 2b01 	strb.w	r2, [r3], #1
 8005e7e:	3201      	adds	r2, #1
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 8005e80:	2a44      	cmp	r2, #68	; 0x44
 8005e82:	d1fa      	bne.n	8005e7a <dhcp_create_msg+0x106>
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8005e84:	4620      	mov	r0, r4
 8005e86:	2201      	movs	r2, #1
 8005e88:	2135      	movs	r1, #53	; 0x35
 8005e8a:	f7ff ff25 	bl	8005cd8 <dhcp_option>
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 8005e8e:	8aa2      	ldrh	r2, [r4, #20]
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 8005e90:	6923      	ldr	r3, [r4, #16]
  return ERR_OK;
 8005e92:	2000      	movs	r0, #0
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 8005e94:	1c51      	adds	r1, r2, #1
 8005e96:	4413      	add	r3, r2
 8005e98:	82a1      	strh	r1, [r4, #20]
 8005e9a:	f883 60f0 	strb.w	r6, [r3, #240]	; 0xf0
 8005e9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 8005ea2:	2100      	movs	r1, #0
 8005ea4:	e7c5      	b.n	8005e32 <dhcp_create_msg+0xbe>
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
 8005ea6:	f06f 000f 	mvn.w	r0, #15
 8005eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8005eae:	f06f 0005 	mvn.w	r0, #5
 8005eb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_MEM;
 8005eb6:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005eba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ebe:	bf00      	nop
 8005ec0:	20003e20 	.word	0x20003e20

08005ec4 <dhcp_delete_msg>:
{
 8005ec4:	b510      	push	{r4, lr}
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 8005ec6:	4604      	mov	r4, r0
 8005ec8:	b130      	cbz	r0, 8005ed8 <dhcp_delete_msg+0x14>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
 8005eca:	68c0      	ldr	r0, [r0, #12]
  if (dhcp->p_out != NULL) {
 8005ecc:	b108      	cbz	r0, 8005ed2 <dhcp_delete_msg+0xe>
    pbuf_free(dhcp->p_out);
 8005ece:	f002 f922 	bl	8008116 <pbuf_free>
  dhcp->p_out = NULL;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	60e3      	str	r3, [r4, #12]
  dhcp->msg_out = NULL;
 8005ed6:	6123      	str	r3, [r4, #16]
 8005ed8:	bd10      	pop	{r4, pc}

08005eda <dhcp_check>:
{
 8005eda:	b538      	push	{r3, r4, r5, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8005edc:	6a04      	ldr	r4, [r0, #32]
{
 8005ede:	4605      	mov	r5, r0
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8005ee0:	2108      	movs	r1, #8
 8005ee2:	4620      	mov	r0, r4
 8005ee4:	f7ff fef0 	bl	8005cc8 <dhcp_set_state>
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8005eee:	4628      	mov	r0, r5
 8005ef0:	f001 f84a 	bl	8006f88 <etharp_query>
  if (dhcp->tries < 255) {
 8005ef4:	7aa3      	ldrb	r3, [r4, #10]
 8005ef6:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8005ef8:	bf1c      	itt	ne
 8005efa:	3301      	addne	r3, #1
 8005efc:	72a3      	strbne	r3, [r4, #10]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8005efe:	2301      	movs	r3, #1
 8005f00:	82e3      	strh	r3, [r4, #22]
 8005f02:	bd38      	pop	{r3, r4, r5, pc}

08005f04 <dhcp_bind>:
{
 8005f04:	b537      	push	{r0, r1, r2, r4, r5, lr}
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8005f06:	4605      	mov	r5, r0
 8005f08:	2800      	cmp	r0, #0
 8005f0a:	d053      	beq.n	8005fb4 <dhcp_bind+0xb0>
  dhcp = netif_dhcp_data(netif);
 8005f0c:	6a04      	ldr	r4, [r0, #32]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8005f0e:	2c00      	cmp	r4, #0
 8005f10:	d050      	beq.n	8005fb4 <dhcp_bind+0xb0>
  dhcp->lease_used = 0;
 8005f12:	2300      	movs	r3, #0
 8005f14:	8423      	strh	r3, [r4, #32]
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8005f16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005f18:	1c5a      	adds	r2, r3, #1
 8005f1a:	d00b      	beq.n	8005f34 <dhcp_bind+0x30>
     timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8005f1c:	223c      	movs	r2, #60	; 0x3c
 8005f1e:	331e      	adds	r3, #30
 8005f20:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	bf28      	it	cs
 8005f2c:	4613      	movcs	r3, r2
     if (dhcp->t0_timeout == 0) {
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d042      	beq.n	8005fb8 <dhcp_bind+0xb4>
       dhcp->t0_timeout = 1;
 8005f32:	8463      	strh	r3, [r4, #34]	; 0x22
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8005f34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005f36:	1c58      	adds	r0, r3, #1
 8005f38:	d00d      	beq.n	8005f56 <dhcp_bind+0x52>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8005f3a:	223c      	movs	r2, #60	; 0x3c
 8005f3c:	331e      	adds	r3, #30
 8005f3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f46:	4293      	cmp	r3, r2
 8005f48:	bf28      	it	cs
 8005f4a:	4613      	movcs	r3, r2
    if (dhcp->t1_timeout == 0) {
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d035      	beq.n	8005fbc <dhcp_bind+0xb8>
      dhcp->t1_timeout = 1;
 8005f50:	8323      	strh	r3, [r4, #24]
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8005f52:	8b23      	ldrh	r3, [r4, #24]
 8005f54:	83a3      	strh	r3, [r4, #28]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8005f56:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005f58:	1c59      	adds	r1, r3, #1
 8005f5a:	d00c      	beq.n	8005f76 <dhcp_bind+0x72>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8005f5c:	223c      	movs	r2, #60	; 0x3c
 8005f5e:	331e      	adds	r3, #30
 8005f60:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	bf28      	it	cs
 8005f6c:	4613      	movcs	r3, r2
    if (dhcp->t2_timeout == 0) {
 8005f6e:	b33b      	cbz	r3, 8005fc0 <dhcp_bind+0xbc>
      dhcp->t2_timeout = 1;
 8005f70:	8363      	strh	r3, [r4, #26]
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8005f72:	8b63      	ldrh	r3, [r4, #26]
 8005f74:	83e3      	strh	r3, [r4, #30]
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8005f76:	8b63      	ldrh	r3, [r4, #26]
 8005f78:	8b22      	ldrh	r2, [r4, #24]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d302      	bcc.n	8005f84 <dhcp_bind+0x80>
 8005f7e:	b10b      	cbz	r3, 8005f84 <dhcp_bind+0x80>
    dhcp->t1_timeout = 0;
 8005f80:	2300      	movs	r3, #0
 8005f82:	8323      	strh	r3, [r4, #24]
  if (dhcp->subnet_mask_given) {
 8005f84:	7ae3      	ldrb	r3, [r4, #11]
 8005f86:	b1eb      	cbz	r3, 8005fc4 <dhcp_bind+0xc0>
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8005f88:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8005f8a:	9300      	str	r3, [sp, #0]
  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8005f8c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005f8e:	9301      	str	r3, [sp, #4]
  if (ip4_addr_isany_val(gw_addr)) {
 8005f90:	b92b      	cbnz	r3, 8005f9e <dhcp_bind+0x9a>
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8005f92:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005f94:	9a00      	ldr	r2, [sp, #0]
 8005f96:	4013      	ands	r3, r2
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8005f98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f9c:	9301      	str	r3, [sp, #4]
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8005f9e:	210a      	movs	r1, #10
 8005fa0:	4620      	mov	r0, r4
 8005fa2:	f7ff fe91 	bl	8005cc8 <dhcp_set_state>
  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8005fa6:	ab01      	add	r3, sp, #4
 8005fa8:	466a      	mov	r2, sp
 8005faa:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8005fae:	4628      	mov	r0, r5
 8005fb0:	f001 ffaa 	bl	8007f08 <netif_set_addr>
}
 8005fb4:	b003      	add	sp, #12
 8005fb6:	bd30      	pop	{r4, r5, pc}
       dhcp->t0_timeout = 1;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e7ba      	b.n	8005f32 <dhcp_bind+0x2e>
      dhcp->t1_timeout = 1;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e7c7      	b.n	8005f50 <dhcp_bind+0x4c>
      dhcp->t2_timeout = 1;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e7d5      	b.n	8005f70 <dhcp_bind+0x6c>
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8005fc4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    if (first_octet <= 127) {
 8005fc8:	061a      	lsls	r2, r3, #24
 8005fca:	d401      	bmi.n	8005fd0 <dhcp_bind+0xcc>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8005fcc:	23ff      	movs	r3, #255	; 0xff
 8005fce:	e7dc      	b.n	8005f8a <dhcp_bind+0x86>
    } else if (first_octet >= 192) {
 8005fd0:	2bbf      	cmp	r3, #191	; 0xbf
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8005fd2:	bf8c      	ite	hi
 8005fd4:	f06f 437f 	mvnhi.w	r3, #4278190080	; 0xff000000
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8005fd8:	f64f 73ff 	movwls	r3, #65535	; 0xffff
 8005fdc:	e7d5      	b.n	8005f8a <dhcp_bind+0x86>
	...

08005fe0 <dhcp_inc_pcb_refcount>:
{
 8005fe0:	b570      	push	{r4, r5, r6, lr}
  if (dhcp_pcb_refcount == 0) {
 8005fe2:	4c11      	ldr	r4, [pc, #68]	; (8006028 <dhcp_inc_pcb_refcount+0x48>)
 8005fe4:	7826      	ldrb	r6, [r4, #0]
 8005fe6:	b9b6      	cbnz	r6, 8006016 <dhcp_inc_pcb_refcount+0x36>
    dhcp_pcb = udp_new();
 8005fe8:	4d10      	ldr	r5, [pc, #64]	; (800602c <dhcp_inc_pcb_refcount+0x4c>)
 8005fea:	f004 fdf1 	bl	800abd0 <udp_new>
 8005fee:	6028      	str	r0, [r5, #0]
    if (dhcp_pcb == NULL) {
 8005ff0:	b1b0      	cbz	r0, 8006020 <dhcp_inc_pcb_refcount+0x40>
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8005ff2:	7a02      	ldrb	r2, [r0, #8]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, DHCP_CLIENT_PORT);
 8005ff4:	490e      	ldr	r1, [pc, #56]	; (8006030 <dhcp_inc_pcb_refcount+0x50>)
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8005ff6:	f042 0220 	orr.w	r2, r2, #32
 8005ffa:	7202      	strb	r2, [r0, #8]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, DHCP_CLIENT_PORT);
 8005ffc:	2244      	movs	r2, #68	; 0x44
 8005ffe:	f004 fce1 	bl	800a9c4 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, DHCP_SERVER_PORT);
 8006002:	2243      	movs	r2, #67	; 0x43
 8006004:	490a      	ldr	r1, [pc, #40]	; (8006030 <dhcp_inc_pcb_refcount+0x50>)
 8006006:	6828      	ldr	r0, [r5, #0]
 8006008:	f004 fd9e 	bl	800ab48 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800600c:	4632      	mov	r2, r6
 800600e:	4909      	ldr	r1, [pc, #36]	; (8006034 <dhcp_inc_pcb_refcount+0x54>)
 8006010:	6828      	ldr	r0, [r5, #0]
 8006012:	f004 fdc1 	bl	800ab98 <udp_recv>
  dhcp_pcb_refcount++;
 8006016:	7823      	ldrb	r3, [r4, #0]
  return ERR_OK;
 8006018:	2000      	movs	r0, #0
  dhcp_pcb_refcount++;
 800601a:	3301      	adds	r3, #1
 800601c:	7023      	strb	r3, [r4, #0]
  return ERR_OK;
 800601e:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_MEM;
 8006020:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006024:	bd70      	pop	{r4, r5, r6, pc}
 8006026:	bf00      	nop
 8006028:	20003e1c 	.word	0x20003e1c
 800602c:	20003e18 	.word	0x20003e18
 8006030:	0800ca84 	.word	0x0800ca84
 8006034:	08006395 	.word	0x08006395

08006038 <dhcp_handle_ack.isra.0>:
dhcp_handle_ack(struct netif *netif)
 8006038:	b538      	push	{r3, r4, r5, lr}
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800603a:	2300      	movs	r3, #0
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800603c:	4d17      	ldr	r5, [pc, #92]	; (800609c <dhcp_handle_ack.isra.0+0x64>)
dhcp_handle_ack(struct netif *netif)
 800603e:	4604      	mov	r4, r0
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8006040:	62c3      	str	r3, [r0, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8006042:	6303      	str	r3, [r0, #48]	; 0x30
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8006044:	78eb      	ldrb	r3, [r5, #3]
 8006046:	b113      	cbz	r3, 800604e <dhcp_handle_ack.isra.0+0x16>
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8006048:	4b15      	ldr	r3, [pc, #84]	; (80060a0 <dhcp_handle_ack.isra.0+0x68>)
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	6343      	str	r3, [r0, #52]	; 0x34
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800604e:	792b      	ldrb	r3, [r5, #4]
 8006050:	b1db      	cbz	r3, 800608a <dhcp_handle_ack.isra.0+0x52>
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8006052:	4b13      	ldr	r3, [pc, #76]	; (80060a0 <dhcp_handle_ack.isra.0+0x68>)
 8006054:	691b      	ldr	r3, [r3, #16]
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8006056:	63a3      	str	r3, [r4, #56]	; 0x38
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8006058:	796b      	ldrb	r3, [r5, #5]
 800605a:	b1cb      	cbz	r3, 8006090 <dhcp_handle_ack.isra.0+0x58>
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800605c:	4b10      	ldr	r3, [pc, #64]	; (80060a0 <dhcp_handle_ack.isra.0+0x68>)
 800605e:	695b      	ldr	r3, [r3, #20]
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8006060:	63e3      	str	r3, [r4, #60]	; 0x3c
  ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 8006062:	6863      	ldr	r3, [r4, #4]
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	62a3      	str	r3, [r4, #40]	; 0x28
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8006068:	79ab      	ldrb	r3, [r5, #6]
 800606a:	b12b      	cbz	r3, 8006078 <dhcp_handle_ack.isra.0+0x40>
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800606c:	4b0c      	ldr	r3, [pc, #48]	; (80060a0 <dhcp_handle_ack.isra.0+0x68>)
 800606e:	6998      	ldr	r0, [r3, #24]
 8006070:	f7ff fe17 	bl	8005ca2 <lwip_htonl>
    dhcp->subnet_mask_given = 1;
 8006074:	2301      	movs	r3, #1
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8006076:	62e0      	str	r0, [r4, #44]	; 0x2c
    dhcp->subnet_mask_given = 0;
 8006078:	72e3      	strb	r3, [r4, #11]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800607a:	79eb      	ldrb	r3, [r5, #7]
 800607c:	b123      	cbz	r3, 8006088 <dhcp_handle_ack.isra.0+0x50>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800607e:	4b08      	ldr	r3, [pc, #32]	; (80060a0 <dhcp_handle_ack.isra.0+0x68>)
 8006080:	69d8      	ldr	r0, [r3, #28]
 8006082:	f7ff fe0e 	bl	8005ca2 <lwip_htonl>
 8006086:	6320      	str	r0, [r4, #48]	; 0x30
 8006088:	bd38      	pop	{r3, r4, r5, pc}
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800608a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800608c:	085b      	lsrs	r3, r3, #1
 800608e:	e7e2      	b.n	8006056 <dhcp_handle_ack.isra.0+0x1e>
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8006090:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006092:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006096:	08db      	lsrs	r3, r3, #3
 8006098:	e7e2      	b.n	8006060 <dhcp_handle_ack.isra.0+0x28>
 800609a:	bf00      	nop
 800609c:	20003fe4 	.word	0x20003fe4
 80060a0:	20003ff0 	.word	0x20003ff0

080060a4 <dhcp_dec_pcb_refcount>:
{
 80060a4:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 80060a6:	4b06      	ldr	r3, [pc, #24]	; (80060c0 <dhcp_dec_pcb_refcount+0x1c>)
  dhcp_pcb_refcount--;
 80060a8:	781c      	ldrb	r4, [r3, #0]
 80060aa:	3c01      	subs	r4, #1
 80060ac:	b2e4      	uxtb	r4, r4
 80060ae:	701c      	strb	r4, [r3, #0]
  if (dhcp_pcb_refcount == 0) {
 80060b0:	b924      	cbnz	r4, 80060bc <dhcp_dec_pcb_refcount+0x18>
    udp_remove(dhcp_pcb);
 80060b2:	4d04      	ldr	r5, [pc, #16]	; (80060c4 <dhcp_dec_pcb_refcount+0x20>)
 80060b4:	6828      	ldr	r0, [r5, #0]
 80060b6:	f004 fd73 	bl	800aba0 <udp_remove>
    dhcp_pcb = NULL;
 80060ba:	602c      	str	r4, [r5, #0]
 80060bc:	bd38      	pop	{r3, r4, r5, pc}
 80060be:	bf00      	nop
 80060c0:	20003e1c 	.word	0x20003e1c
 80060c4:	20003e18 	.word	0x20003e18

080060c8 <dhcp_discover>:
{
 80060c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 80060ca:	2300      	movs	r3, #0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80060cc:	6a04      	ldr	r4, [r0, #32]
{
 80060ce:	4606      	mov	r6, r0
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 80060d0:	2106      	movs	r1, #6
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 80060d2:	62a3      	str	r3, [r4, #40]	; 0x28
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 80060d4:	4620      	mov	r0, r4
 80060d6:	f7ff fdf7 	bl	8005cc8 <dhcp_set_state>
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
 80060da:	2201      	movs	r2, #1
 80060dc:	4621      	mov	r1, r4
 80060de:	4630      	mov	r0, r6
 80060e0:	f7ff fe48 	bl	8005d74 <dhcp_create_msg>
  if (result == ERR_OK) {
 80060e4:	4605      	mov	r5, r0
 80060e6:	2800      	cmp	r0, #0
 80060e8:	d13d      	bne.n	8006166 <dhcp_discover+0x9e>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80060ea:	2202      	movs	r2, #2
 80060ec:	2139      	movs	r1, #57	; 0x39
 80060ee:	4620      	mov	r0, r4
 80060f0:	f7ff fdf2 	bl	8005cd8 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 80060f4:	8cf1      	ldrh	r1, [r6, #38]	; 0x26
 80060f6:	4620      	mov	r0, r4
 80060f8:	f7ff fdfc 	bl	8005cf4 <dhcp_option_short>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80060fc:	2204      	movs	r2, #4
 80060fe:	2137      	movs	r1, #55	; 0x37
 8006100:	4620      	mov	r0, r4
 8006102:	f7ff fde9 	bl	8005cd8 <dhcp_option>
 8006106:	8aa3      	ldrh	r3, [r4, #20]
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 8006108:	6922      	ldr	r2, [r4, #16]
 800610a:	2001      	movs	r0, #1
 800610c:	18d1      	adds	r1, r2, r3
 800610e:	f881 00f0 	strb.w	r0, [r1, #240]	; 0xf0
 8006112:	1819      	adds	r1, r3, r0
 8006114:	2003      	movs	r0, #3
 8006116:	fa12 f181 	uxtah	r1, r2, r1
 800611a:	f881 00f0 	strb.w	r0, [r1, #240]	; 0xf0
 800611e:	1c99      	adds	r1, r3, #2
 8006120:	201c      	movs	r0, #28
 8006122:	fa12 f181 	uxtah	r1, r2, r1
 8006126:	f881 00f0 	strb.w	r0, [r1, #240]	; 0xf0
 800612a:	1cd9      	adds	r1, r3, #3
 800612c:	3304      	adds	r3, #4
    dhcp_option_trailer(dhcp);
 800612e:	4620      	mov	r0, r4
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 8006130:	fa12 f281 	uxtah	r2, r2, r1
 8006134:	2106      	movs	r1, #6
 8006136:	f882 10f0 	strb.w	r1, [r2, #240]	; 0xf0
 800613a:	82a3      	strh	r3, [r4, #20]
    dhcp_option_trailer(dhcp);
 800613c:	f7ff fe04 	bl	8005d48 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8006140:	8aa1      	ldrh	r1, [r4, #20]
 8006142:	68e0      	ldr	r0, [r4, #12]
 8006144:	31f0      	adds	r1, #240	; 0xf0
 8006146:	b289      	uxth	r1, r1
 8006148:	f002 f89d 	bl	8008286 <pbuf_realloc>
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 800614c:	4b11      	ldr	r3, [pc, #68]	; (8006194 <dhcp_discover+0xcc>)
 800614e:	4812      	ldr	r0, [pc, #72]	; (8006198 <dhcp_discover+0xd0>)
 8006150:	9301      	str	r3, [sp, #4]
 8006152:	2343      	movs	r3, #67	; 0x43
 8006154:	9600      	str	r6, [sp, #0]
 8006156:	4a11      	ldr	r2, [pc, #68]	; (800619c <dhcp_discover+0xd4>)
 8006158:	68e1      	ldr	r1, [r4, #12]
 800615a:	6800      	ldr	r0, [r0, #0]
 800615c:	f004 fc86 	bl	800aa6c <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 8006160:	4620      	mov	r0, r4
 8006162:	f7ff feaf 	bl	8005ec4 <dhcp_delete_msg>
  if (dhcp->tries < 255) {
 8006166:	7aa3      	ldrb	r3, [r4, #10]
}
 8006168:	4628      	mov	r0, r5
  if (dhcp->tries < 255) {
 800616a:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 800616c:	bf1c      	itt	ne
 800616e:	3301      	addne	r3, #1
 8006170:	72a3      	strbne	r3, [r4, #10]
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 8006172:	7aa2      	ldrb	r2, [r4, #10]
 8006174:	2a05      	cmp	r2, #5
 8006176:	bf96      	itet	ls
 8006178:	f44f 737a 	movls.w	r3, #1000	; 0x3e8
 800617c:	f64e 2360 	movwhi	r3, #60000	; 0xea60
 8006180:	4093      	lslls	r3, r2
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8006182:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006186:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800618a:	fb93 f3f2 	sdiv	r3, r3, r2
 800618e:	82e3      	strh	r3, [r4, #22]
}
 8006190:	b002      	add	sp, #8
 8006192:	bd70      	pop	{r4, r5, r6, pc}
 8006194:	0800ca84 	.word	0x0800ca84
 8006198:	20003e18 	.word	0x20003e18
 800619c:	0800ca88 	.word	0x0800ca88

080061a0 <dhcp_reboot>:
{
 80061a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80061a2:	6a04      	ldr	r4, [r0, #32]
{
 80061a4:	4606      	mov	r6, r0
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80061a6:	2103      	movs	r1, #3
 80061a8:	4620      	mov	r0, r4
 80061aa:	f7ff fd8d 	bl	8005cc8 <dhcp_set_state>
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 80061ae:	2203      	movs	r2, #3
 80061b0:	4621      	mov	r1, r4
 80061b2:	4630      	mov	r0, r6
 80061b4:	f7ff fdde 	bl	8005d74 <dhcp_create_msg>
  if (result == ERR_OK) {
 80061b8:	4605      	mov	r5, r0
 80061ba:	2800      	cmp	r0, #0
 80061bc:	d148      	bne.n	8006250 <dhcp_reboot+0xb0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80061be:	2202      	movs	r2, #2
 80061c0:	2139      	movs	r1, #57	; 0x39
 80061c2:	4620      	mov	r0, r4
 80061c4:	f7ff fd88 	bl	8005cd8 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80061c8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80061cc:	4620      	mov	r0, r4
 80061ce:	f7ff fd91 	bl	8005cf4 <dhcp_option_short>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 80061d2:	2204      	movs	r2, #4
 80061d4:	2132      	movs	r1, #50	; 0x32
 80061d6:	4620      	mov	r0, r4
 80061d8:	f7ff fd7e 	bl	8005cd8 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80061dc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80061de:	f7ff fd60 	bl	8005ca2 <lwip_htonl>
 80061e2:	4601      	mov	r1, r0
 80061e4:	4620      	mov	r0, r4
 80061e6:	f7ff fd94 	bl	8005d12 <dhcp_option_long>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80061ea:	2204      	movs	r2, #4
 80061ec:	2137      	movs	r1, #55	; 0x37
 80061ee:	4620      	mov	r0, r4
 80061f0:	f7ff fd72 	bl	8005cd8 <dhcp_option>
 80061f4:	8aa3      	ldrh	r3, [r4, #20]
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 80061f6:	6922      	ldr	r2, [r4, #16]
 80061f8:	2001      	movs	r0, #1
 80061fa:	18d1      	adds	r1, r2, r3
 80061fc:	f881 00f0 	strb.w	r0, [r1, #240]	; 0xf0
 8006200:	1819      	adds	r1, r3, r0
 8006202:	2003      	movs	r0, #3
 8006204:	fa12 f181 	uxtah	r1, r2, r1
 8006208:	f881 00f0 	strb.w	r0, [r1, #240]	; 0xf0
 800620c:	1c99      	adds	r1, r3, #2
 800620e:	201c      	movs	r0, #28
 8006210:	fa12 f181 	uxtah	r1, r2, r1
 8006214:	f881 00f0 	strb.w	r0, [r1, #240]	; 0xf0
 8006218:	1cd9      	adds	r1, r3, #3
 800621a:	3304      	adds	r3, #4
    dhcp_option_trailer(dhcp);
 800621c:	4620      	mov	r0, r4
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 800621e:	fa12 f281 	uxtah	r2, r2, r1
 8006222:	2106      	movs	r1, #6
 8006224:	f882 10f0 	strb.w	r1, [r2, #240]	; 0xf0
 8006228:	82a3      	strh	r3, [r4, #20]
    dhcp_option_trailer(dhcp);
 800622a:	f7ff fd8d 	bl	8005d48 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800622e:	8aa1      	ldrh	r1, [r4, #20]
 8006230:	68e0      	ldr	r0, [r4, #12]
 8006232:	31f0      	adds	r1, #240	; 0xf0
 8006234:	b289      	uxth	r1, r1
 8006236:	f002 f826 	bl	8008286 <pbuf_realloc>
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 800623a:	4813      	ldr	r0, [pc, #76]	; (8006288 <dhcp_reboot+0xe8>)
 800623c:	9600      	str	r6, [sp, #0]
 800623e:	2343      	movs	r3, #67	; 0x43
 8006240:	4a12      	ldr	r2, [pc, #72]	; (800628c <dhcp_reboot+0xec>)
 8006242:	68e1      	ldr	r1, [r4, #12]
 8006244:	6800      	ldr	r0, [r0, #0]
 8006246:	f004 fc65 	bl	800ab14 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800624a:	4620      	mov	r0, r4
 800624c:	f7ff fe3a 	bl	8005ec4 <dhcp_delete_msg>
  if (dhcp->tries < 255) {
 8006250:	7aa3      	ldrb	r3, [r4, #10]
}
 8006252:	4628      	mov	r0, r5
  if (dhcp->tries < 255) {
 8006254:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8006256:	bf1c      	itt	ne
 8006258:	3301      	addne	r3, #1
 800625a:	72a3      	strbne	r3, [r4, #10]
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 800625c:	7aa3      	ldrb	r3, [r4, #10]
 800625e:	2b09      	cmp	r3, #9
 8006260:	bf96      	itet	ls
 8006262:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 8006266:	f242 7310 	movwhi	r3, #10000	; 0x2710
 800626a:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800626e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 8006272:	bf9c      	itt	ls
 8006274:	00db      	lslls	r3, r3, #3
 8006276:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8006278:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800627c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006280:	82e3      	strh	r3, [r4, #22]
}
 8006282:	b002      	add	sp, #8
 8006284:	bd70      	pop	{r4, r5, r6, pc}
 8006286:	bf00      	nop
 8006288:	20003e18 	.word	0x20003e18
 800628c:	0800ca88 	.word	0x0800ca88

08006290 <dhcp_select>:
{
 8006290:	b573      	push	{r0, r1, r4, r5, r6, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8006292:	6a04      	ldr	r4, [r0, #32]
{
 8006294:	4606      	mov	r6, r0
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8006296:	2101      	movs	r1, #1
 8006298:	4620      	mov	r0, r4
 800629a:	f7ff fd15 	bl	8005cc8 <dhcp_set_state>
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800629e:	2203      	movs	r2, #3
 80062a0:	4621      	mov	r1, r4
 80062a2:	4630      	mov	r0, r6
 80062a4:	f7ff fd66 	bl	8005d74 <dhcp_create_msg>
  if (result == ERR_OK) {
 80062a8:	4605      	mov	r5, r0
 80062aa:	2800      	cmp	r0, #0
 80062ac:	d155      	bne.n	800635a <dhcp_select+0xca>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80062ae:	2202      	movs	r2, #2
 80062b0:	2139      	movs	r1, #57	; 0x39
 80062b2:	4620      	mov	r0, r4
 80062b4:	f7ff fd10 	bl	8005cd8 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 80062b8:	8cf1      	ldrh	r1, [r6, #38]	; 0x26
 80062ba:	4620      	mov	r0, r4
 80062bc:	f7ff fd1a 	bl	8005cf4 <dhcp_option_short>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 80062c0:	2204      	movs	r2, #4
 80062c2:	2132      	movs	r1, #50	; 0x32
 80062c4:	4620      	mov	r0, r4
 80062c6:	f7ff fd07 	bl	8005cd8 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80062ca:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80062cc:	f7ff fce9 	bl	8005ca2 <lwip_htonl>
 80062d0:	4601      	mov	r1, r0
 80062d2:	4620      	mov	r0, r4
 80062d4:	f7ff fd1d 	bl	8005d12 <dhcp_option_long>
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 80062d8:	2204      	movs	r2, #4
 80062da:	2136      	movs	r1, #54	; 0x36
 80062dc:	4620      	mov	r0, r4
 80062de:	f7ff fcfb 	bl	8005cd8 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 80062e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80062e4:	f7ff fcdd 	bl	8005ca2 <lwip_htonl>
 80062e8:	4601      	mov	r1, r0
 80062ea:	4620      	mov	r0, r4
 80062ec:	f7ff fd11 	bl	8005d12 <dhcp_option_long>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80062f0:	2204      	movs	r2, #4
 80062f2:	2137      	movs	r1, #55	; 0x37
 80062f4:	4620      	mov	r0, r4
 80062f6:	f7ff fcef 	bl	8005cd8 <dhcp_option>
 80062fa:	8aa3      	ldrh	r3, [r4, #20]
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 80062fc:	6922      	ldr	r2, [r4, #16]
 80062fe:	2001      	movs	r0, #1
 8006300:	18d1      	adds	r1, r2, r3
 8006302:	f881 00f0 	strb.w	r0, [r1, #240]	; 0xf0
 8006306:	1819      	adds	r1, r3, r0
 8006308:	2003      	movs	r0, #3
 800630a:	fa12 f181 	uxtah	r1, r2, r1
 800630e:	f881 00f0 	strb.w	r0, [r1, #240]	; 0xf0
 8006312:	1c99      	adds	r1, r3, #2
 8006314:	201c      	movs	r0, #28
 8006316:	fa12 f181 	uxtah	r1, r2, r1
 800631a:	f881 00f0 	strb.w	r0, [r1, #240]	; 0xf0
 800631e:	1cd9      	adds	r1, r3, #3
 8006320:	3304      	adds	r3, #4
    dhcp_option_trailer(dhcp);
 8006322:	4620      	mov	r0, r4
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 8006324:	fa12 f281 	uxtah	r2, r2, r1
 8006328:	2106      	movs	r1, #6
 800632a:	f882 10f0 	strb.w	r1, [r2, #240]	; 0xf0
 800632e:	82a3      	strh	r3, [r4, #20]
    dhcp_option_trailer(dhcp);
 8006330:	f7ff fd0a 	bl	8005d48 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8006334:	8aa1      	ldrh	r1, [r4, #20]
 8006336:	68e0      	ldr	r0, [r4, #12]
 8006338:	31f0      	adds	r1, #240	; 0xf0
 800633a:	b289      	uxth	r1, r1
 800633c:	f001 ffa3 	bl	8008286 <pbuf_realloc>
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 8006340:	4b11      	ldr	r3, [pc, #68]	; (8006388 <dhcp_select+0xf8>)
 8006342:	4812      	ldr	r0, [pc, #72]	; (800638c <dhcp_select+0xfc>)
 8006344:	9301      	str	r3, [sp, #4]
 8006346:	2343      	movs	r3, #67	; 0x43
 8006348:	9600      	str	r6, [sp, #0]
 800634a:	4a11      	ldr	r2, [pc, #68]	; (8006390 <dhcp_select+0x100>)
 800634c:	68e1      	ldr	r1, [r4, #12]
 800634e:	6800      	ldr	r0, [r0, #0]
 8006350:	f004 fb8c 	bl	800aa6c <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 8006354:	4620      	mov	r0, r4
 8006356:	f7ff fdb5 	bl	8005ec4 <dhcp_delete_msg>
  if (dhcp->tries < 255) {
 800635a:	7aa3      	ldrb	r3, [r4, #10]
}
 800635c:	4628      	mov	r0, r5
  if (dhcp->tries < 255) {
 800635e:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8006360:	bf1c      	itt	ne
 8006362:	3301      	addne	r3, #1
 8006364:	72a3      	strbne	r3, [r4, #10]
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 8006366:	7aa2      	ldrb	r2, [r4, #10]
 8006368:	2a05      	cmp	r2, #5
 800636a:	bf96      	itet	ls
 800636c:	f44f 737a 	movls.w	r3, #1000	; 0x3e8
 8006370:	f64e 2360 	movwhi	r3, #60000	; 0xea60
 8006374:	4093      	lslls	r3, r2
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8006376:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800637a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800637e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006382:	82e3      	strh	r3, [r4, #22]
}
 8006384:	b002      	add	sp, #8
 8006386:	bd70      	pop	{r4, r5, r6, pc}
 8006388:	0800ca84 	.word	0x0800ca84
 800638c:	20003e18 	.word	0x20003e18
 8006390:	0800ca88 	.word	0x0800ca88

08006394 <dhcp_recv>:
  struct netif *netif = ip_current_input_netif();
 8006394:	4bb5      	ldr	r3, [pc, #724]	; (800666c <dhcp_recv+0x2d8>)
{
 8006396:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct netif *netif = ip_current_input_netif();
 800639a:	685e      	ldr	r6, [r3, #4]
{
 800639c:	b08b      	sub	sp, #44	; 0x2c
 800639e:	4693      	mov	fp, r2
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80063a0:	f8d6 9020 	ldr.w	r9, [r6, #32]
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 80063a4:	f1b9 0f00 	cmp.w	r9, #0
 80063a8:	d068      	beq.n	800647c <dhcp_recv+0xe8>
 80063aa:	f899 3008 	ldrb.w	r3, [r9, #8]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d061      	beq.n	8006476 <dhcp_recv+0xe2>
  if (p->len < DHCP_MIN_REPLY_LEN) {
 80063b2:	8953      	ldrh	r3, [r2, #10]
 80063b4:	2b2b      	cmp	r3, #43	; 0x2b
 80063b6:	d95e      	bls.n	8006476 <dhcp_recv+0xe2>
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 80063b8:	6852      	ldr	r2, [r2, #4]
  if (reply_msg->op != DHCP_BOOTREPLY) {
 80063ba:	7813      	ldrb	r3, [r2, #0]
 80063bc:	2b02      	cmp	r3, #2
 80063be:	d15a      	bne.n	8006476 <dhcp_recv+0xe2>
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 80063c0:	f896 4028 	ldrb.w	r4, [r6, #40]	; 0x28
 80063c4:	f106 0029 	add.w	r0, r6, #41	; 0x29
 80063c8:	f102 011c 	add.w	r1, r2, #28
 80063cc:	2300      	movs	r3, #0
 80063ce:	b2dd      	uxtb	r5, r3
 80063d0:	42ac      	cmp	r4, r5
 80063d2:	d901      	bls.n	80063d8 <dhcp_recv+0x44>
 80063d4:	2b06      	cmp	r3, #6
 80063d6:	d147      	bne.n	8006468 <dhcp_recv+0xd4>
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 80063d8:	6850      	ldr	r0, [r2, #4]
 80063da:	f7ff fc62 	bl	8005ca2 <lwip_htonl>
 80063de:	f8d9 3000 	ldr.w	r3, [r9]
 80063e2:	4298      	cmp	r0, r3
 80063e4:	d147      	bne.n	8006476 <dhcp_recv+0xe2>
  dhcp_clear_all_options(dhcp);
 80063e6:	4aa2      	ldr	r2, [pc, #648]	; (8006670 <dhcp_recv+0x2dc>)
 80063e8:	2300      	movs	r3, #0
 80063ea:	6013      	str	r3, [r2, #0]
 80063ec:	6053      	str	r3, [r2, #4]
 80063ee:	8113      	strh	r3, [r2, #8]
  if (p->len < DHCP_SNAME_OFS) {
 80063f0:	f8bb 200a 	ldrh.w	r2, [fp, #10]
 80063f4:	2a2b      	cmp	r2, #43	; 0x2b
 80063f6:	d93e      	bls.n	8006476 <dhcp_recv+0xe2>
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
 80063f8:	f8db 2004 	ldr.w	r2, [fp, #4]
  options_idx = DHCP_OPTIONS_OFS;
 80063fc:	24f0      	movs	r4, #240	; 0xf0
  options_idx_max = p->tot_len;
 80063fe:	f8bb a008 	ldrh.w	sl, [fp, #8]
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
 8006402:	f8c9 2004 	str.w	r2, [r9, #4]
  int parse_sname_as_options = 0;
 8006406:	9302      	str	r3, [sp, #8]
  options_idx = DHCP_OPTIONS_OFS;
 8006408:	465f      	mov	r7, fp
  while ((q != NULL) && (options_idx >= q->len)) {
 800640a:	897b      	ldrh	r3, [r7, #10]
 800640c:	42a3      	cmp	r3, r4
 800640e:	d93b      	bls.n	8006488 <dhcp_recv+0xf4>
        options = (u8_t*)q->payload;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	9303      	str	r3, [sp, #12]
  while ((q != NULL) && (options[offset] != DHCP_OPTION_END) && (offset < offset_max)) {
 8006414:	9b03      	ldr	r3, [sp, #12]
 8006416:	5d1a      	ldrb	r2, [r3, r4]
 8006418:	2aff      	cmp	r2, #255	; 0xff
 800641a:	f000 80c7 	beq.w	80065ac <dhcp_recv+0x218>
 800641e:	4554      	cmp	r4, sl
 8006420:	f080 80c4 	bcs.w	80065ac <dhcp_recv+0x218>
    u16_t val_offset = offset + 2;
 8006424:	1ca3      	adds	r3, r4, #2
    if ((offset + 1) < q->len) {
 8006426:	8979      	ldrh	r1, [r7, #10]
    u16_t val_offset = offset + 2;
 8006428:	b29b      	uxth	r3, r3
 800642a:	9306      	str	r3, [sp, #24]
    if ((offset + 1) < q->len) {
 800642c:	1c63      	adds	r3, r4, #1
 800642e:	428b      	cmp	r3, r1
 8006430:	da34      	bge.n	800649c <dhcp_recv+0x108>
      len = options[offset + 1];
 8006432:	9b03      	ldr	r3, [sp, #12]
 8006434:	4423      	add	r3, r4
 8006436:	785b      	ldrb	r3, [r3, #1]
    switch(op) {
 8006438:	2a33      	cmp	r2, #51	; 0x33
 800643a:	f000 808a 	beq.w	8006552 <dhcp_recv+0x1be>
 800643e:	f200 8139 	bhi.w	80066b4 <dhcp_recv+0x320>
 8006442:	2a01      	cmp	r2, #1
 8006444:	d079      	beq.n	800653a <dhcp_recv+0x1a6>
 8006446:	d330      	bcc.n	80064aa <dhcp_recv+0x116>
 8006448:	2a03      	cmp	r2, #3
 800644a:	d07c      	beq.n	8006546 <dhcp_recv+0x1b2>
 800644c:	2a06      	cmp	r2, #6
 800644e:	f040 8159 	bne.w	8006704 <dhcp_recv+0x370>
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 8006452:	0799      	lsls	r1, r3, #30
 8006454:	d10f      	bne.n	8006476 <dhcp_recv+0xe2>
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 8006456:	2b08      	cmp	r3, #8
 8006458:	461d      	mov	r5, r3
 800645a:	bf28      	it	cs
 800645c:	2508      	movcs	r5, #8
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800645e:	42ab      	cmp	r3, r5
 8006460:	d309      	bcc.n	8006476 <dhcp_recv+0xe2>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 8006462:	f04f 0808 	mov.w	r8, #8
 8006466:	e026      	b.n	80064b6 <dhcp_recv+0x122>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8006468:	f810 7b01 	ldrb.w	r7, [r0], #1
 800646c:	3301      	adds	r3, #1
 800646e:	f811 5b01 	ldrb.w	r5, [r1], #1
 8006472:	42af      	cmp	r7, r5
 8006474:	d0ab      	beq.n	80063ce <dhcp_recv+0x3a>
    dhcp->msg_in = NULL;
 8006476:	2300      	movs	r3, #0
 8006478:	f8c9 3004 	str.w	r3, [r9, #4]
  pbuf_free(p);
 800647c:	4658      	mov	r0, fp
 800647e:	f001 fe4a 	bl	8008116 <pbuf_free>
}
 8006482:	b00b      	add	sp, #44	; 0x2c
 8006484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    options_idx -= q->len;
 8006488:	1ae4      	subs	r4, r4, r3
    options_idx_max -= q->len;
 800648a:	ebaa 0a03 	sub.w	sl, sl, r3
    q = q->next;
 800648e:	683f      	ldr	r7, [r7, #0]
    options_idx -= q->len;
 8006490:	b2a4      	uxth	r4, r4
    options_idx_max -= q->len;
 8006492:	fa1f fa8a 	uxth.w	sl, sl
  while ((q != NULL) && (options_idx >= q->len)) {
 8006496:	2f00      	cmp	r7, #0
 8006498:	d1b7      	bne.n	800640a <dhcp_recv+0x76>
 800649a:	e7ec      	b.n	8006476 <dhcp_recv+0xe2>
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	f000 8123 	beq.w	80066ea <dhcp_recv+0x356>
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	e7c6      	b.n	8006438 <dhcp_recv+0xa4>
        offset--;
 80064aa:	3c01      	subs	r4, #1
        decode_len = len = 0;
 80064ac:	2500      	movs	r5, #0
    int decode_idx = -1;
 80064ae:	f04f 38ff 	mov.w	r8, #4294967295
        offset--;
 80064b2:	b2a4      	uxth	r4, r4
        decode_len = len = 0;
 80064b4:	462b      	mov	r3, r5
 80064b6:	3402      	adds	r4, #2
    offset += len + 2;
 80064b8:	fa13 f484 	uxtah	r4, r3, r4
 80064bc:	b2a4      	uxth	r4, r4
    if (decode_len > 0) {
 80064be:	2d00      	cmp	r5, #0
 80064c0:	d068      	beq.n	8006594 <dhcp_recv+0x200>
      u32_t value = 0;
 80064c2:	ab0a      	add	r3, sp, #40	; 0x28
 80064c4:	f8cd 8004 	str.w	r8, [sp, #4]
 80064c8:	9305      	str	r3, [sp, #20]
 80064ca:	2300      	movs	r3, #0
 80064cc:	9a05      	ldr	r2, [sp, #20]
 80064ce:	f842 3d04 	str.w	r3, [r2, #-4]!
 80064d2:	f108 33ff 	add.w	r3, r8, #4294967295
 80064d6:	9205      	str	r2, [sp, #20]
 80064d8:	4a65      	ldr	r2, [pc, #404]	; (8006670 <dhcp_recv+0x2dc>)
 80064da:	4413      	add	r3, r2
 80064dc:	9304      	str	r3, [sp, #16]
 80064de:	9b01      	ldr	r3, [sp, #4]
 80064e0:	9a06      	ldr	r2, [sp, #24]
 80064e2:	eba3 0308 	sub.w	r3, r3, r8
 80064e6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
      if (!dhcp_option_given(dhcp, decode_idx)) {
 80064ea:	9a04      	ldr	r2, [sp, #16]
 80064ec:	7852      	ldrb	r2, [r2, #1]
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	2a00      	cmp	r2, #0
 80064f2:	d14f      	bne.n	8006594 <dhcp_recv+0x200>
        copy_len = LWIP_MIN(decode_len, 4);
 80064f4:	2d03      	cmp	r5, #3
        if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80064f6:	9905      	ldr	r1, [sp, #20]
 80064f8:	4638      	mov	r0, r7
 80064fa:	bf94      	ite	ls
 80064fc:	462a      	movls	r2, r5
 80064fe:	2204      	movhi	r2, #4
 8006500:	9207      	str	r2, [sp, #28]
 8006502:	f001 ff62 	bl	80083ca <pbuf_copy_partial>
 8006506:	9b07      	ldr	r3, [sp, #28]
 8006508:	4283      	cmp	r3, r0
 800650a:	d1b4      	bne.n	8006476 <dhcp_recv+0xe2>
        if (decode_len > 4) {
 800650c:	2d04      	cmp	r5, #4
 800650e:	d934      	bls.n	800657a <dhcp_recv+0x1e6>
          LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8006510:	07aa      	lsls	r2, r5, #30
 8006512:	d1b0      	bne.n	8006476 <dhcp_recv+0xe2>
          dhcp_got_option(dhcp, decode_idx);
 8006514:	9b04      	ldr	r3, [sp, #16]
 8006516:	f04f 0201 	mov.w	r2, #1
          dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 800651a:	9809      	ldr	r0, [sp, #36]	; 0x24
          decode_len -= 4;
 800651c:	3d04      	subs	r5, #4
          dhcp_got_option(dhcp, decode_idx);
 800651e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006522:	9304      	str	r3, [sp, #16]
          dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8006524:	f7ff fbbd 	bl	8005ca2 <lwip_htonl>
 8006528:	9a01      	ldr	r2, [sp, #4]
          decode_len -= 4;
 800652a:	b2ed      	uxtb	r5, r5
          dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 800652c:	4b51      	ldr	r3, [pc, #324]	; (8006674 <dhcp_recv+0x2e0>)
 800652e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
          decode_idx++;
 8006532:	4613      	mov	r3, r2
 8006534:	3301      	adds	r3, #1
 8006536:	9301      	str	r3, [sp, #4]
 8006538:	e7d1      	b.n	80064de <dhcp_recv+0x14a>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800653a:	2b04      	cmp	r3, #4
 800653c:	d19b      	bne.n	8006476 <dhcp_recv+0xe2>
 800653e:	461d      	mov	r5, r3
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8006540:	f04f 0806 	mov.w	r8, #6
 8006544:	e7b7      	b.n	80064b6 <dhcp_recv+0x122>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8006546:	2b03      	cmp	r3, #3
 8006548:	d995      	bls.n	8006476 <dhcp_recv+0xe2>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 800654a:	f04f 0807 	mov.w	r8, #7
        decode_len = 4; /* only copy the first given router */
 800654e:	2504      	movs	r5, #4
 8006550:	e7b1      	b.n	80064b6 <dhcp_recv+0x122>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8006552:	2b04      	cmp	r3, #4
 8006554:	d18f      	bne.n	8006476 <dhcp_recv+0xe2>
 8006556:	461d      	mov	r5, r3
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8006558:	f04f 0803 	mov.w	r8, #3
 800655c:	e7ab      	b.n	80064b6 <dhcp_recv+0x122>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800655e:	2b01      	cmp	r3, #1
 8006560:	d189      	bne.n	8006476 <dhcp_recv+0xe2>
 8006562:	461d      	mov	r5, r3
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8006564:	f04f 0800 	mov.w	r8, #0
 8006568:	e7a5      	b.n	80064b6 <dhcp_recv+0x122>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800656a:	2b04      	cmp	r3, #4
 800656c:	d183      	bne.n	8006476 <dhcp_recv+0xe2>
 800656e:	461d      	mov	r5, r3
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8006570:	f04f 0802 	mov.w	r8, #2
 8006574:	e79f      	b.n	80064b6 <dhcp_recv+0x122>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8006576:	2b04      	cmp	r3, #4
 8006578:	e0a6      	b.n	80066c8 <dhcp_recv+0x334>
        } else if (decode_len == 4) {
 800657a:	d134      	bne.n	80065e6 <dhcp_recv+0x252>
          value = lwip_ntohl(value);
 800657c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800657e:	f7ff fb90 	bl	8005ca2 <lwip_htonl>
 8006582:	9009      	str	r0, [sp, #36]	; 0x24
        dhcp_got_option(dhcp, decode_idx);
 8006584:	2301      	movs	r3, #1
 8006586:	4a3a      	ldr	r2, [pc, #232]	; (8006670 <dhcp_recv+0x2dc>)
 8006588:	9901      	ldr	r1, [sp, #4]
 800658a:	5453      	strb	r3, [r2, r1]
        dhcp_set_option_value(dhcp, decode_idx, value);
 800658c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800658e:	4a39      	ldr	r2, [pc, #228]	; (8006674 <dhcp_recv+0x2e0>)
 8006590:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    if (offset >= q->len) {
 8006594:	897b      	ldrh	r3, [r7, #10]
 8006596:	42a3      	cmp	r3, r4
 8006598:	f63f af3c 	bhi.w	8006414 <dhcp_recv+0x80>
      offset -= q->len;
 800659c:	1ae4      	subs	r4, r4, r3
      offset_max -= q->len;
 800659e:	ebaa 0a03 	sub.w	sl, sl, r3
      offset -= q->len;
 80065a2:	b2a4      	uxth	r4, r4
      offset_max -= q->len;
 80065a4:	fa1f fa8a 	uxth.w	sl, sl
      if ((offset < offset_max) && offset_max) {
 80065a8:	4554      	cmp	r4, sl
 80065aa:	d323      	bcc.n	80065f4 <dhcp_recv+0x260>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 80065ac:	4a30      	ldr	r2, [pc, #192]	; (8006670 <dhcp_recv+0x2dc>)
 80065ae:	7813      	ldrb	r3, [r2, #0]
 80065b0:	4611      	mov	r1, r2
 80065b2:	bb0b      	cbnz	r3, 80065f8 <dhcp_recv+0x264>
  } else if (parse_sname_as_options) {
 80065b4:	9b02      	ldr	r3, [sp, #8]
 80065b6:	bb3b      	cbnz	r3, 8006608 <dhcp_recv+0x274>
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 80065b8:	784b      	ldrb	r3, [r1, #1]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	f43f af5b 	beq.w	8006476 <dhcp_recv+0xe2>
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 80065c0:	4a2c      	ldr	r2, [pc, #176]	; (8006674 <dhcp_recv+0x2e0>)
 80065c2:	7913      	ldrb	r3, [r2, #4]
  if (msg_type == DHCP_ACK) {
 80065c4:	2b05      	cmp	r3, #5
 80065c6:	d138      	bne.n	800663a <dhcp_recv+0x2a6>
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 80065c8:	f899 3009 	ldrb.w	r3, [r9, #9]
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d129      	bne.n	8006624 <dhcp_recv+0x290>
      dhcp_handle_ack(netif);
 80065d0:	6a30      	ldr	r0, [r6, #32]
 80065d2:	f7ff fd31 	bl	8006038 <dhcp_handle_ack.isra.0>
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80065d6:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
        dhcp_check(netif);
 80065da:	4630      	mov	r0, r6
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80065dc:	071b      	lsls	r3, r3, #28
 80065de:	d529      	bpl.n	8006634 <dhcp_recv+0x2a0>
        dhcp_check(netif);
 80065e0:	f7ff fc7b 	bl	8005eda <dhcp_check>
 80065e4:	e747      	b.n	8006476 <dhcp_recv+0xe2>
          LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 80065e6:	2d01      	cmp	r5, #1
 80065e8:	f47f af45 	bne.w	8006476 <dhcp_recv+0xe2>
          value = ((u8_t*)&value)[0];
 80065ec:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80065f0:	9309      	str	r3, [sp, #36]	; 0x24
 80065f2:	e7c7      	b.n	8006584 <dhcp_recv+0x1f0>
        q = q->next;
 80065f4:	683f      	ldr	r7, [r7, #0]
 80065f6:	e70b      	b.n	8006410 <dhcp_recv+0x7c>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80065f8:	4b1e      	ldr	r3, [pc, #120]	; (8006674 <dhcp_recv+0x2e0>)
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80065fa:	2000      	movs	r0, #0
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80065fc:	681b      	ldr	r3, [r3, #0]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80065fe:	7010      	strb	r0, [r2, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8006600:	2b01      	cmp	r3, #1
 8006602:	d00b      	beq.n	800661c <dhcp_recv+0x288>
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8006604:	2b02      	cmp	r3, #2
 8006606:	d105      	bne.n	8006614 <dhcp_recv+0x280>
    parse_sname_as_options = 0;
 8006608:	2300      	movs	r3, #0
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 800660a:	f04f 0a6c 	mov.w	sl, #108	; 0x6c
    options_idx = DHCP_SNAME_OFS;
 800660e:	242c      	movs	r4, #44	; 0x2c
    parse_sname_as_options = 0;
 8006610:	9302      	str	r3, [sp, #8]
 8006612:	e6f9      	b.n	8006408 <dhcp_recv+0x74>
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8006614:	2b03      	cmp	r3, #3
 8006616:	d1cd      	bne.n	80065b4 <dhcp_recv+0x220>
      parse_sname_as_options = 1;
 8006618:	2301      	movs	r3, #1
 800661a:	9302      	str	r3, [sp, #8]
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 800661c:	f04f 0aec 	mov.w	sl, #236	; 0xec
    options_idx = DHCP_FILE_OFS;
 8006620:	246c      	movs	r4, #108	; 0x6c
 8006622:	e6f1      	b.n	8006408 <dhcp_recv+0x74>
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8006624:	3b03      	subs	r3, #3
 8006626:	2b02      	cmp	r3, #2
 8006628:	f63f af25 	bhi.w	8006476 <dhcp_recv+0xe2>
      dhcp_handle_ack(netif);
 800662c:	6a30      	ldr	r0, [r6, #32]
 800662e:	f7ff fd03 	bl	8006038 <dhcp_handle_ack.isra.0>
      dhcp_bind(netif);
 8006632:	4630      	mov	r0, r6
 8006634:	f7ff fc66 	bl	8005f04 <dhcp_bind>
 8006638:	e71d      	b.n	8006476 <dhcp_recv+0xe2>
  else if ((msg_type == DHCP_NAK) &&
 800663a:	2b06      	cmp	r3, #6
 800663c:	d11e      	bne.n	800667c <dhcp_recv+0x2e8>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800663e:	f899 3009 	ldrb.w	r3, [r9, #9]
  else if ((msg_type == DHCP_NAK) &&
 8006642:	1eda      	subs	r2, r3, #3
 8006644:	2a02      	cmp	r2, #2
 8006646:	d902      	bls.n	800664e <dhcp_recv+0x2ba>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8006648:	2b01      	cmp	r3, #1
 800664a:	f47f af14 	bne.w	8006476 <dhcp_recv+0xe2>
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800664e:	6a30      	ldr	r0, [r6, #32]
 8006650:	210c      	movs	r1, #12
 8006652:	f7ff fb39 	bl	8005cc8 <dhcp_set_state>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8006656:	4b08      	ldr	r3, [pc, #32]	; (8006678 <dhcp_recv+0x2e4>)
 8006658:	4630      	mov	r0, r6
 800665a:	461a      	mov	r2, r3
 800665c:	4619      	mov	r1, r3
 800665e:	f001 fc53 	bl	8007f08 <netif_set_addr>
  dhcp_discover(netif);
 8006662:	4630      	mov	r0, r6
 8006664:	f7ff fd30 	bl	80060c8 <dhcp_discover>
 8006668:	e705      	b.n	8006476 <dhcp_recv+0xe2>
 800666a:	bf00      	nop
 800666c:	20003fcc 	.word	0x20003fcc
 8006670:	20003fe4 	.word	0x20003fe4
 8006674:	20003ff0 	.word	0x20003ff0
 8006678:	0800ca84 	.word	0x0800ca84
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 800667c:	2b02      	cmp	r3, #2
 800667e:	f47f aefa 	bne.w	8006476 <dhcp_recv+0xe2>
 8006682:	f899 3009 	ldrb.w	r3, [r9, #9]
 8006686:	2b06      	cmp	r3, #6
 8006688:	f47f aef5 	bne.w	8006476 <dhcp_recv+0xe2>
    dhcp->request_timeout = 0;
 800668c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8006690:	6a34      	ldr	r4, [r6, #32]
    dhcp->request_timeout = 0;
 8006692:	f8a9 3016 	strh.w	r3, [r9, #22]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8006696:	788b      	ldrb	r3, [r1, #2]
 8006698:	2b00      	cmp	r3, #0
 800669a:	f43f aeec 	beq.w	8006476 <dhcp_recv+0xe2>
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800669e:	6890      	ldr	r0, [r2, #8]
 80066a0:	f7ff faff 	bl	8005ca2 <lwip_htonl>
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 80066a4:	6863      	ldr	r3, [r4, #4]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80066a6:	6260      	str	r0, [r4, #36]	; 0x24
    dhcp_select(netif);
 80066a8:	4630      	mov	r0, r6
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	62a3      	str	r3, [r4, #40]	; 0x28
    dhcp_select(netif);
 80066ae:	f7ff fdef 	bl	8006290 <dhcp_select>
 80066b2:	e6e0      	b.n	8006476 <dhcp_recv+0xe2>
    switch(op) {
 80066b4:	2a36      	cmp	r2, #54	; 0x36
 80066b6:	f43f af58 	beq.w	800656a <dhcp_recv+0x1d6>
 80066ba:	d80a      	bhi.n	80066d2 <dhcp_recv+0x33e>
 80066bc:	2a34      	cmp	r2, #52	; 0x34
 80066be:	f43f af4e 	beq.w	800655e <dhcp_recv+0x1ca>
 80066c2:	2a35      	cmp	r2, #53	; 0x35
 80066c4:	d11e      	bne.n	8006704 <dhcp_recv+0x370>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80066c6:	2b01      	cmp	r3, #1
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80066c8:	f47f aed5 	bne.w	8006476 <dhcp_recv+0xe2>
 80066cc:	461d      	mov	r5, r3
        decode_idx = DHCP_OPTION_IDX_T1;
 80066ce:	4698      	mov	r8, r3
 80066d0:	e6f1      	b.n	80064b6 <dhcp_recv+0x122>
    switch(op) {
 80066d2:	2a3a      	cmp	r2, #58	; 0x3a
 80066d4:	f43f af4f 	beq.w	8006576 <dhcp_recv+0x1e2>
 80066d8:	2a3b      	cmp	r2, #59	; 0x3b
 80066da:	d113      	bne.n	8006704 <dhcp_recv+0x370>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80066dc:	2b04      	cmp	r3, #4
 80066de:	f47f aeca 	bne.w	8006476 <dhcp_recv+0xe2>
 80066e2:	461d      	mov	r5, r3
        decode_idx = DHCP_OPTION_IDX_T2;
 80066e4:	f04f 0805 	mov.w	r8, #5
 80066e8:	e6e5      	b.n	80064b6 <dhcp_recv+0x122>
    switch(op) {
 80066ea:	2a06      	cmp	r2, #6
 80066ec:	f43f aeb1 	beq.w	8006452 <dhcp_recv+0xbe>
 80066f0:	d80c      	bhi.n	800670c <dhcp_recv+0x378>
 80066f2:	2a01      	cmp	r2, #1
 80066f4:	f43f aebf 	beq.w	8006476 <dhcp_recv+0xe2>
 80066f8:	f4ff aed7 	bcc.w	80064aa <dhcp_recv+0x116>
 80066fc:	2a03      	cmp	r2, #3
 80066fe:	f43f aeba 	beq.w	8006476 <dhcp_recv+0xe2>
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
 8006702:	2300      	movs	r3, #0
    offset += len + 2;
 8006704:	9a06      	ldr	r2, [sp, #24]
 8006706:	441a      	add	r2, r3
 8006708:	b294      	uxth	r4, r2
 800670a:	e743      	b.n	8006594 <dhcp_recv+0x200>
    switch(op) {
 800670c:	2a33      	cmp	r2, #51	; 0x33
 800670e:	d3f8      	bcc.n	8006702 <dhcp_recv+0x36e>
 8006710:	2a36      	cmp	r2, #54	; 0x36
 8006712:	f67f aeb0 	bls.w	8006476 <dhcp_recv+0xe2>
 8006716:	3a3a      	subs	r2, #58	; 0x3a
 8006718:	2a01      	cmp	r2, #1
 800671a:	f67f aeac 	bls.w	8006476 <dhcp_recv+0xe2>
 800671e:	e7f0      	b.n	8006702 <dhcp_recv+0x36e>

08006720 <dhcp_arp_reply>:
{
 8006720:	b537      	push	{r0, r1, r2, r4, r5, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8006722:	4605      	mov	r5, r0
 8006724:	2800      	cmp	r0, #0
 8006726:	d03c      	beq.n	80067a2 <dhcp_arp_reply+0x82>
  dhcp = netif_dhcp_data(netif);
 8006728:	6a04      	ldr	r4, [r0, #32]
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 800672a:	2c00      	cmp	r4, #0
 800672c:	d039      	beq.n	80067a2 <dhcp_arp_reply+0x82>
 800672e:	7a63      	ldrb	r3, [r4, #9]
 8006730:	2b08      	cmp	r3, #8
 8006732:	d136      	bne.n	80067a2 <dhcp_arp_reply+0x82>
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8006734:	680a      	ldr	r2, [r1, #0]
 8006736:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006738:	429a      	cmp	r2, r3
 800673a:	d132      	bne.n	80067a2 <dhcp_arp_reply+0x82>
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800673c:	210c      	movs	r1, #12
 800673e:	4620      	mov	r0, r4
 8006740:	f7ff fac2 	bl	8005cc8 <dhcp_set_state>
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
 8006744:	2204      	movs	r2, #4
 8006746:	4621      	mov	r1, r4
 8006748:	4628      	mov	r0, r5
 800674a:	f7ff fb13 	bl	8005d74 <dhcp_create_msg>
  if (result == ERR_OK) {
 800674e:	bb08      	cbnz	r0, 8006794 <dhcp_arp_reply+0x74>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 8006750:	2204      	movs	r2, #4
 8006752:	2132      	movs	r1, #50	; 0x32
 8006754:	4620      	mov	r0, r4
 8006756:	f7ff fabf 	bl	8005cd8 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800675a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800675c:	f7ff faa1 	bl	8005ca2 <lwip_htonl>
 8006760:	4601      	mov	r1, r0
 8006762:	4620      	mov	r0, r4
 8006764:	f7ff fad5 	bl	8005d12 <dhcp_option_long>
    dhcp_option_trailer(dhcp);
 8006768:	4620      	mov	r0, r4
 800676a:	f7ff faed 	bl	8005d48 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800676e:	8aa1      	ldrh	r1, [r4, #20]
 8006770:	68e0      	ldr	r0, [r4, #12]
 8006772:	31f0      	adds	r1, #240	; 0xf0
 8006774:	b289      	uxth	r1, r1
 8006776:	f001 fd86 	bl	8008286 <pbuf_realloc>
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 800677a:	4b0b      	ldr	r3, [pc, #44]	; (80067a8 <dhcp_arp_reply+0x88>)
 800677c:	480b      	ldr	r0, [pc, #44]	; (80067ac <dhcp_arp_reply+0x8c>)
 800677e:	9301      	str	r3, [sp, #4]
 8006780:	2343      	movs	r3, #67	; 0x43
 8006782:	9500      	str	r5, [sp, #0]
 8006784:	4a0a      	ldr	r2, [pc, #40]	; (80067b0 <dhcp_arp_reply+0x90>)
 8006786:	68e1      	ldr	r1, [r4, #12]
 8006788:	6800      	ldr	r0, [r0, #0]
 800678a:	f004 f96f 	bl	800aa6c <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 800678e:	4620      	mov	r0, r4
 8006790:	f7ff fb98 	bl	8005ec4 <dhcp_delete_msg>
  if (dhcp->tries < 255) {
 8006794:	7aa3      	ldrb	r3, [r4, #10]
 8006796:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8006798:	bf1c      	itt	ne
 800679a:	3301      	addne	r3, #1
 800679c:	72a3      	strbne	r3, [r4, #10]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800679e:	2314      	movs	r3, #20
 80067a0:	82e3      	strh	r3, [r4, #22]
}
 80067a2:	b003      	add	sp, #12
 80067a4:	bd30      	pop	{r4, r5, pc}
 80067a6:	bf00      	nop
 80067a8:	0800ca84 	.word	0x0800ca84
 80067ac:	20003e18 	.word	0x20003e18
 80067b0:	0800ca88 	.word	0x0800ca88

080067b4 <dhcp_renew>:
{
 80067b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80067b6:	6a04      	ldr	r4, [r0, #32]
{
 80067b8:	4606      	mov	r6, r0
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 80067ba:	2105      	movs	r1, #5
 80067bc:	4620      	mov	r0, r4
 80067be:	f7ff fa83 	bl	8005cc8 <dhcp_set_state>
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 80067c2:	2203      	movs	r2, #3
 80067c4:	4621      	mov	r1, r4
 80067c6:	4630      	mov	r0, r6
 80067c8:	f7ff fad4 	bl	8005d74 <dhcp_create_msg>
  if (result == ERR_OK) {
 80067cc:	4605      	mov	r5, r0
 80067ce:	2800      	cmp	r0, #0
 80067d0:	d13c      	bne.n	800684c <dhcp_renew+0x98>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80067d2:	2202      	movs	r2, #2
 80067d4:	2139      	movs	r1, #57	; 0x39
 80067d6:	4620      	mov	r0, r4
 80067d8:	f7ff fa7e 	bl	8005cd8 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 80067dc:	8cf1      	ldrh	r1, [r6, #38]	; 0x26
 80067de:	4620      	mov	r0, r4
 80067e0:	f7ff fa88 	bl	8005cf4 <dhcp_option_short>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80067e4:	2204      	movs	r2, #4
 80067e6:	2137      	movs	r1, #55	; 0x37
 80067e8:	4620      	mov	r0, r4
 80067ea:	f7ff fa75 	bl	8005cd8 <dhcp_option>
 80067ee:	8aa3      	ldrh	r3, [r4, #20]
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 80067f0:	6922      	ldr	r2, [r4, #16]
 80067f2:	2001      	movs	r0, #1
 80067f4:	18d1      	adds	r1, r2, r3
 80067f6:	f881 00f0 	strb.w	r0, [r1, #240]	; 0xf0
 80067fa:	1819      	adds	r1, r3, r0
 80067fc:	2003      	movs	r0, #3
 80067fe:	fa12 f181 	uxtah	r1, r2, r1
 8006802:	f881 00f0 	strb.w	r0, [r1, #240]	; 0xf0
 8006806:	1c99      	adds	r1, r3, #2
 8006808:	201c      	movs	r0, #28
 800680a:	fa12 f181 	uxtah	r1, r2, r1
 800680e:	f881 00f0 	strb.w	r0, [r1, #240]	; 0xf0
 8006812:	1cd9      	adds	r1, r3, #3
 8006814:	3304      	adds	r3, #4
    dhcp_option_trailer(dhcp);
 8006816:	4620      	mov	r0, r4
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 8006818:	fa12 f281 	uxtah	r2, r2, r1
 800681c:	2106      	movs	r1, #6
 800681e:	f882 10f0 	strb.w	r1, [r2, #240]	; 0xf0
 8006822:	82a3      	strh	r3, [r4, #20]
    dhcp_option_trailer(dhcp);
 8006824:	f7ff fa90 	bl	8005d48 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8006828:	8aa1      	ldrh	r1, [r4, #20]
 800682a:	68e0      	ldr	r0, [r4, #12]
 800682c:	31f0      	adds	r1, #240	; 0xf0
 800682e:	b289      	uxth	r1, r1
 8006830:	f001 fd29 	bl	8008286 <pbuf_realloc>
    udp_sendto_if(dhcp_pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
 8006834:	4813      	ldr	r0, [pc, #76]	; (8006884 <dhcp_renew+0xd0>)
 8006836:	9600      	str	r6, [sp, #0]
 8006838:	2343      	movs	r3, #67	; 0x43
 800683a:	f104 0224 	add.w	r2, r4, #36	; 0x24
 800683e:	68e1      	ldr	r1, [r4, #12]
 8006840:	6800      	ldr	r0, [r0, #0]
 8006842:	f004 f967 	bl	800ab14 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 8006846:	4620      	mov	r0, r4
 8006848:	f7ff fb3c 	bl	8005ec4 <dhcp_delete_msg>
  if (dhcp->tries < 255) {
 800684c:	7aa3      	ldrb	r3, [r4, #10]
}
 800684e:	4628      	mov	r0, r5
  if (dhcp->tries < 255) {
 8006850:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8006852:	bf1c      	itt	ne
 8006854:	3301      	addne	r3, #1
 8006856:	72a3      	strbne	r3, [r4, #10]
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 8006858:	7aa3      	ldrb	r3, [r4, #10]
 800685a:	2b09      	cmp	r3, #9
 800685c:	bf96      	itet	ls
 800685e:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 8006862:	f644 6320 	movwhi	r3, #20000	; 0x4e20
 8006866:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800686a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 800686e:	bf9c      	itt	ls
 8006870:	011b      	lslls	r3, r3, #4
 8006872:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8006874:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8006878:	fb93 f3f2 	sdiv	r3, r3, r2
 800687c:	82e3      	strh	r3, [r4, #22]
}
 800687e:	b002      	add	sp, #8
 8006880:	bd70      	pop	{r4, r5, r6, pc}
 8006882:	bf00      	nop
 8006884:	20003e18 	.word	0x20003e18

08006888 <dhcp_stop>:
{
 8006888:	b510      	push	{r4, lr}
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
 800688a:	b158      	cbz	r0, 80068a4 <dhcp_stop+0x1c>
  dhcp = netif_dhcp_data(netif);
 800688c:	6a04      	ldr	r4, [r0, #32]
  if (dhcp != NULL) {
 800688e:	b14c      	cbz	r4, 80068a4 <dhcp_stop+0x1c>
    dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8006890:	2100      	movs	r1, #0
 8006892:	4620      	mov	r0, r4
 8006894:	f7ff fa18 	bl	8005cc8 <dhcp_set_state>
    if (dhcp->pcb_allocated != 0) {
 8006898:	7a23      	ldrb	r3, [r4, #8]
 800689a:	b11b      	cbz	r3, 80068a4 <dhcp_stop+0x1c>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800689c:	f7ff fc02 	bl	80060a4 <dhcp_dec_pcb_refcount>
      dhcp->pcb_allocated = 0;
 80068a0:	2300      	movs	r3, #0
 80068a2:	7223      	strb	r3, [r4, #8]
 80068a4:	bd10      	pop	{r4, pc}

080068a6 <dhcp_start>:
{
 80068a6:	b538      	push	{r3, r4, r5, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 80068a8:	4604      	mov	r4, r0
 80068aa:	b360      	cbz	r0, 8006906 <dhcp_start+0x60>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 80068ac:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 80068b0:	07db      	lsls	r3, r3, #31
 80068b2:	d528      	bpl.n	8006906 <dhcp_start+0x60>
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 80068b4:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
  dhcp = netif_dhcp_data(netif);
 80068b6:	6a05      	ldr	r5, [r0, #32]
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 80068b8:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80068bc:	d202      	bcs.n	80068c4 <dhcp_start+0x1e>
    return ERR_MEM;
 80068be:	f04f 30ff 	mov.w	r0, #4294967295
 80068c2:	bd38      	pop	{r3, r4, r5, pc}
  if (dhcp == NULL) {
 80068c4:	b9cd      	cbnz	r5, 80068fa <dhcp_start+0x54>
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 80068c6:	2040      	movs	r0, #64	; 0x40
 80068c8:	f001 fa3a 	bl	8007d40 <mem_malloc>
    if (dhcp == NULL) {
 80068cc:	4605      	mov	r5, r0
 80068ce:	2800      	cmp	r0, #0
 80068d0:	d0f5      	beq.n	80068be <dhcp_start+0x18>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 80068d2:	6220      	str	r0, [r4, #32]
  memset(dhcp, 0, sizeof(struct dhcp));
 80068d4:	2240      	movs	r2, #64	; 0x40
 80068d6:	2100      	movs	r1, #0
 80068d8:	4628      	mov	r0, r5
 80068da:	f005 f951 	bl	800bb80 <memset>
  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 80068de:	f7ff fb7f 	bl	8005fe0 <dhcp_inc_pcb_refcount>
 80068e2:	2800      	cmp	r0, #0
 80068e4:	d1eb      	bne.n	80068be <dhcp_start+0x18>
  dhcp->pcb_allocated = 1;
 80068e6:	2301      	movs	r3, #1
  result = dhcp_discover(netif);
 80068e8:	4620      	mov	r0, r4
  dhcp->pcb_allocated = 1;
 80068ea:	722b      	strb	r3, [r5, #8]
  result = dhcp_discover(netif);
 80068ec:	f7ff fbec 	bl	80060c8 <dhcp_discover>
  if (result != ERR_OK) {
 80068f0:	b158      	cbz	r0, 800690a <dhcp_start+0x64>
    dhcp_stop(netif);
 80068f2:	4620      	mov	r0, r4
 80068f4:	f7ff ffc8 	bl	8006888 <dhcp_stop>
 80068f8:	e7e1      	b.n	80068be <dhcp_start+0x18>
    if (dhcp->pcb_allocated != 0) {
 80068fa:	7a2b      	ldrb	r3, [r5, #8]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d0e9      	beq.n	80068d4 <dhcp_start+0x2e>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8006900:	f7ff fbd0 	bl	80060a4 <dhcp_dec_pcb_refcount>
 8006904:	e7e6      	b.n	80068d4 <dhcp_start+0x2e>
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8006906:	f06f 000f 	mvn.w	r0, #15
}
 800690a:	bd38      	pop	{r3, r4, r5, pc}

0800690c <dhcp_supplied_address>:
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 800690c:	b148      	cbz	r0, 8006922 <dhcp_supplied_address+0x16>
 800690e:	6a00      	ldr	r0, [r0, #32]
 8006910:	b138      	cbz	r0, 8006922 <dhcp_supplied_address+0x16>
    struct dhcp* dhcp = netif_dhcp_data(netif);
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING);
 8006912:	7a40      	ldrb	r0, [r0, #9]
 8006914:	280a      	cmp	r0, #10
 8006916:	d003      	beq.n	8006920 <dhcp_supplied_address+0x14>
 8006918:	1f43      	subs	r3, r0, #5
 800691a:	4258      	negs	r0, r3
 800691c:	4158      	adcs	r0, r3
 800691e:	4770      	bx	lr
 8006920:	2001      	movs	r0, #1
  }
  return 0;
}
 8006922:	4770      	bx	lr

08006924 <dhcp_release>:
{
 8006924:	b5f0      	push	{r4, r5, r6, r7, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8006926:	6a04      	ldr	r4, [r0, #32]
{
 8006928:	b085      	sub	sp, #20
 800692a:	4606      	mov	r6, r0
  if (dhcp == NULL) {
 800692c:	2c00      	cmp	r4, #0
 800692e:	d047      	beq.n	80069c0 <dhcp_release+0x9c>
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8006930:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006932:	9303      	str	r3, [sp, #12]
  is_dhcp_supplied_address = dhcp_supplied_address(netif);
 8006934:	f7ff ffea 	bl	800690c <dhcp_supplied_address>
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8006938:	2100      	movs	r1, #0
  is_dhcp_supplied_address = dhcp_supplied_address(netif);
 800693a:	4605      	mov	r5, r0
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800693c:	4620      	mov	r0, r4
 800693e:	f7ff f9c3 	bl	8005cc8 <dhcp_set_state>
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8006942:	2300      	movs	r3, #0
 8006944:	6263      	str	r3, [r4, #36]	; 0x24
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8006946:	62a3      	str	r3, [r4, #40]	; 0x28
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8006948:	62e3      	str	r3, [r4, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800694a:	6323      	str	r3, [r4, #48]	; 0x30
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800694c:	63e3      	str	r3, [r4, #60]	; 0x3c
 800694e:	63a3      	str	r3, [r4, #56]	; 0x38
 8006950:	6363      	str	r3, [r4, #52]	; 0x34
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8006952:	8463      	strh	r3, [r4, #34]	; 0x22
 8006954:	8423      	strh	r3, [r4, #32]
 8006956:	83e3      	strh	r3, [r4, #30]
 8006958:	83a3      	strh	r3, [r4, #28]
  if (!is_dhcp_supplied_address) {
 800695a:	b375      	cbz	r5, 80069ba <dhcp_release+0x96>
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
 800695c:	2207      	movs	r2, #7
 800695e:	4621      	mov	r1, r4
 8006960:	4630      	mov	r0, r6
 8006962:	f7ff fa07 	bl	8005d74 <dhcp_create_msg>
  if (result == ERR_OK) {
 8006966:	4605      	mov	r5, r0
 8006968:	bb08      	cbnz	r0, 80069ae <dhcp_release+0x8a>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800696a:	af04      	add	r7, sp, #16
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 800696c:	2204      	movs	r2, #4
 800696e:	2136      	movs	r1, #54	; 0x36
 8006970:	4620      	mov	r0, r4
 8006972:	f7ff f9b1 	bl	8005cd8 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8006976:	f857 0d04 	ldr.w	r0, [r7, #-4]!
 800697a:	f7ff f992 	bl	8005ca2 <lwip_htonl>
 800697e:	4601      	mov	r1, r0
 8006980:	4620      	mov	r0, r4
 8006982:	f7ff f9c6 	bl	8005d12 <dhcp_option_long>
    dhcp_option_trailer(dhcp);
 8006986:	4620      	mov	r0, r4
 8006988:	f7ff f9de 	bl	8005d48 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800698c:	8aa1      	ldrh	r1, [r4, #20]
 800698e:	68e0      	ldr	r0, [r4, #12]
 8006990:	31f0      	adds	r1, #240	; 0xf0
 8006992:	b289      	uxth	r1, r1
 8006994:	f001 fc77 	bl	8008286 <pbuf_realloc>
    udp_sendto_if(dhcp_pcb, dhcp->p_out, &server_ip_addr, DHCP_SERVER_PORT, netif);
 8006998:	480b      	ldr	r0, [pc, #44]	; (80069c8 <dhcp_release+0xa4>)
 800699a:	9600      	str	r6, [sp, #0]
 800699c:	2343      	movs	r3, #67	; 0x43
 800699e:	463a      	mov	r2, r7
 80069a0:	68e1      	ldr	r1, [r4, #12]
 80069a2:	6800      	ldr	r0, [r0, #0]
 80069a4:	f004 f8b6 	bl	800ab14 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 80069a8:	4620      	mov	r0, r4
 80069aa:	f7ff fa8b 	bl	8005ec4 <dhcp_delete_msg>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80069ae:	4b07      	ldr	r3, [pc, #28]	; (80069cc <dhcp_release+0xa8>)
 80069b0:	4630      	mov	r0, r6
 80069b2:	461a      	mov	r2, r3
 80069b4:	4619      	mov	r1, r3
 80069b6:	f001 faa7 	bl	8007f08 <netif_set_addr>
}
 80069ba:	4628      	mov	r0, r5
 80069bc:	b005      	add	sp, #20
 80069be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ERR_ARG;
 80069c0:	f06f 050f 	mvn.w	r5, #15
 80069c4:	e7f9      	b.n	80069ba <dhcp_release+0x96>
 80069c6:	bf00      	nop
 80069c8:	20003e18 	.word	0x20003e18
 80069cc:	0800ca84 	.word	0x0800ca84

080069d0 <dhcp_coarse_tmr>:
  struct netif *netif = netif_list;
 80069d0:	4b59      	ldr	r3, [pc, #356]	; (8006b38 <dhcp_coarse_tmr+0x168>)
{
 80069d2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  struct netif *netif = netif_list;
 80069d6:	681d      	ldr	r5, [r3, #0]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80069d8:	f240 2619 	movw	r6, #537	; 0x219
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 80069dc:	4f57      	ldr	r7, [pc, #348]	; (8006b3c <dhcp_coarse_tmr+0x16c>)
 80069de:	f8df 8160 	ldr.w	r8, [pc, #352]	; 8006b40 <dhcp_coarse_tmr+0x170>
  while (netif != NULL) {
 80069e2:	b915      	cbnz	r5, 80069ea <dhcp_coarse_tmr+0x1a>
}
 80069e4:	b003      	add	sp, #12
 80069e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80069ea:	6a2c      	ldr	r4, [r5, #32]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 80069ec:	b17c      	cbz	r4, 8006a0e <dhcp_coarse_tmr+0x3e>
 80069ee:	7a63      	ldrb	r3, [r4, #9]
 80069f0:	b16b      	cbz	r3, 8006a0e <dhcp_coarse_tmr+0x3e>
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 80069f2:	8c61      	ldrh	r1, [r4, #34]	; 0x22
 80069f4:	b169      	cbz	r1, 8006a12 <dhcp_coarse_tmr+0x42>
 80069f6:	8c22      	ldrh	r2, [r4, #32]
 80069f8:	3201      	adds	r2, #1
 80069fa:	b292      	uxth	r2, r2
 80069fc:	4291      	cmp	r1, r2
 80069fe:	8422      	strh	r2, [r4, #32]
 8006a00:	d107      	bne.n	8006a12 <dhcp_coarse_tmr+0x42>
        dhcp_release(netif);
 8006a02:	4628      	mov	r0, r5
 8006a04:	f7ff ff8e 	bl	8006924 <dhcp_release>
        dhcp_discover(netif);
 8006a08:	4628      	mov	r0, r5
 8006a0a:	f7ff fb5d 	bl	80060c8 <dhcp_discover>
    netif = netif->next;
 8006a0e:	682d      	ldr	r5, [r5, #0]
 8006a10:	e7e7      	b.n	80069e2 <dhcp_coarse_tmr+0x12>
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8006a12:	f8b4 901e 	ldrh.w	r9, [r4, #30]
 8006a16:	f1b9 0f00 	cmp.w	r9, #0
 8006a1a:	d072      	beq.n	8006b02 <dhcp_coarse_tmr+0x132>
 8006a1c:	f109 32ff 	add.w	r2, r9, #4294967295
 8006a20:	f1b9 0f01 	cmp.w	r9, #1
 8006a24:	83e2      	strh	r2, [r4, #30]
 8006a26:	d16c      	bne.n	8006b02 <dhcp_coarse_tmr+0x132>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8006a28:	3b01      	subs	r3, #1
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	2b09      	cmp	r3, #9
 8006a2e:	d8ee      	bhi.n	8006a0e <dhcp_coarse_tmr+0x3e>
 8006a30:	fa26 f303 	lsr.w	r3, r6, r3
 8006a34:	07db      	lsls	r3, r3, #31
 8006a36:	d5ea      	bpl.n	8006a0e <dhcp_coarse_tmr+0x3e>
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8006a38:	2104      	movs	r1, #4
 8006a3a:	4620      	mov	r0, r4
 8006a3c:	f7ff f944 	bl	8005cc8 <dhcp_set_state>
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 8006a40:	2203      	movs	r2, #3
 8006a42:	4621      	mov	r1, r4
 8006a44:	4628      	mov	r0, r5
 8006a46:	f7ff f995 	bl	8005d74 <dhcp_create_msg>
  if (result == ERR_OK) {
 8006a4a:	2800      	cmp	r0, #0
 8006a4c:	d139      	bne.n	8006ac2 <dhcp_coarse_tmr+0xf2>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8006a4e:	2202      	movs	r2, #2
 8006a50:	2139      	movs	r1, #57	; 0x39
 8006a52:	4620      	mov	r0, r4
 8006a54:	f7ff f940 	bl	8005cd8 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 8006a58:	8ce9      	ldrh	r1, [r5, #38]	; 0x26
 8006a5a:	4620      	mov	r0, r4
 8006a5c:	f7ff f94a 	bl	8005cf4 <dhcp_option_short>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8006a60:	2204      	movs	r2, #4
 8006a62:	2137      	movs	r1, #55	; 0x37
 8006a64:	4620      	mov	r0, r4
 8006a66:	f7ff f937 	bl	8005cd8 <dhcp_option>
 8006a6a:	8aa3      	ldrh	r3, [r4, #20]
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 8006a6c:	6922      	ldr	r2, [r4, #16]
 8006a6e:	2003      	movs	r0, #3
 8006a70:	18d1      	adds	r1, r2, r3
 8006a72:	f881 90f0 	strb.w	r9, [r1, #240]	; 0xf0
 8006a76:	1c59      	adds	r1, r3, #1
 8006a78:	fa12 f181 	uxtah	r1, r2, r1
 8006a7c:	f881 00f0 	strb.w	r0, [r1, #240]	; 0xf0
 8006a80:	1c99      	adds	r1, r3, #2
 8006a82:	201c      	movs	r0, #28
 8006a84:	fa12 f181 	uxtah	r1, r2, r1
 8006a88:	f881 00f0 	strb.w	r0, [r1, #240]	; 0xf0
 8006a8c:	1cd9      	adds	r1, r3, #3
 8006a8e:	3304      	adds	r3, #4
    dhcp_option_trailer(dhcp);
 8006a90:	4620      	mov	r0, r4
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 8006a92:	fa12 f281 	uxtah	r2, r2, r1
 8006a96:	2106      	movs	r1, #6
 8006a98:	f882 10f0 	strb.w	r1, [r2, #240]	; 0xf0
 8006a9c:	82a3      	strh	r3, [r4, #20]
    dhcp_option_trailer(dhcp);
 8006a9e:	f7ff f953 	bl	8005d48 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8006aa2:	8aa1      	ldrh	r1, [r4, #20]
 8006aa4:	68e0      	ldr	r0, [r4, #12]
 8006aa6:	31f0      	adds	r1, #240	; 0xf0
 8006aa8:	b289      	uxth	r1, r1
 8006aaa:	f001 fbec 	bl	8008286 <pbuf_realloc>
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 8006aae:	9500      	str	r5, [sp, #0]
 8006ab0:	2343      	movs	r3, #67	; 0x43
 8006ab2:	4642      	mov	r2, r8
 8006ab4:	68e1      	ldr	r1, [r4, #12]
 8006ab6:	6838      	ldr	r0, [r7, #0]
 8006ab8:	f004 f82c 	bl	800ab14 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 8006abc:	4620      	mov	r0, r4
 8006abe:	f7ff fa01 	bl	8005ec4 <dhcp_delete_msg>
  if (dhcp->tries < 255) {
 8006ac2:	7aa3      	ldrb	r3, [r4, #10]
 8006ac4:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8006ac6:	bf1c      	itt	ne
 8006ac8:	3301      	addne	r3, #1
 8006aca:	72a3      	strbne	r3, [r4, #10]
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 8006acc:	7aa3      	ldrb	r3, [r4, #10]
 8006ace:	2b09      	cmp	r3, #9
 8006ad0:	bf96      	itet	ls
 8006ad2:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 8006ad6:	f242 7310 	movwhi	r3, #10000	; 0x2710
 8006ada:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8006ade:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 8006ae2:	bf9c      	itt	ls
 8006ae4:	00db      	lslls	r3, r3, #3
 8006ae6:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8006ae8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8006aec:	fb93 f3f2 	sdiv	r3, r3, r2
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 8006af0:	8c22      	ldrh	r2, [r4, #32]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8006af2:	82e3      	strh	r3, [r4, #22]
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 8006af4:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8006af6:	1a9b      	subs	r3, r3, r2
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	dd88      	ble.n	8006a0e <dhcp_coarse_tmr+0x3e>
       dhcp->t2_rebind_time = ((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8006afc:	105b      	asrs	r3, r3, #1
 8006afe:	83e3      	strh	r3, [r4, #30]
 8006b00:	e785      	b.n	8006a0e <dhcp_coarse_tmr+0x3e>
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8006b02:	8ba2      	ldrh	r2, [r4, #28]
 8006b04:	2a00      	cmp	r2, #0
 8006b06:	d082      	beq.n	8006a0e <dhcp_coarse_tmr+0x3e>
 8006b08:	1e51      	subs	r1, r2, #1
 8006b0a:	2a01      	cmp	r2, #1
 8006b0c:	83a1      	strh	r1, [r4, #28]
 8006b0e:	f47f af7e 	bne.w	8006a0e <dhcp_coarse_tmr+0x3e>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8006b12:	f003 02fb 	and.w	r2, r3, #251	; 0xfb
 8006b16:	2a01      	cmp	r2, #1
 8006b18:	d002      	beq.n	8006b20 <dhcp_coarse_tmr+0x150>
 8006b1a:	2b0a      	cmp	r3, #10
 8006b1c:	f47f af77 	bne.w	8006a0e <dhcp_coarse_tmr+0x3e>
    dhcp_renew(netif);
 8006b20:	4628      	mov	r0, r5
 8006b22:	f7ff fe47 	bl	80067b4 <dhcp_renew>
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 8006b26:	8b63      	ldrh	r3, [r4, #26]
 8006b28:	8c22      	ldrh	r2, [r4, #32]
 8006b2a:	1a9b      	subs	r3, r3, r2
 8006b2c:	2b01      	cmp	r3, #1
       dhcp->t1_renew_time = ((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8006b2e:	bfc4      	itt	gt
 8006b30:	105b      	asrgt	r3, r3, #1
 8006b32:	83a3      	strhgt	r3, [r4, #28]
 8006b34:	e76b      	b.n	8006a0e <dhcp_coarse_tmr+0x3e>
 8006b36:	bf00      	nop
 8006b38:	20007714 	.word	0x20007714
 8006b3c:	20003e18 	.word	0x20003e18
 8006b40:	0800ca88 	.word	0x0800ca88

08006b44 <dhcp_fine_tmr>:
{
 8006b44:	b538      	push	{r3, r4, r5, lr}
  struct netif *netif = netif_list;
 8006b46:	4b1d      	ldr	r3, [pc, #116]	; (8006bbc <dhcp_fine_tmr+0x78>)
        dhcp->request_timeout--;
 8006b48:	2500      	movs	r5, #0
  struct netif *netif = netif_list;
 8006b4a:	681c      	ldr	r4, [r3, #0]
  while (netif != NULL) {
 8006b4c:	b904      	cbnz	r4, 8006b50 <dhcp_fine_tmr+0xc>
}
 8006b4e:	bd38      	pop	{r3, r4, r5, pc}
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8006b50:	6a23      	ldr	r3, [r4, #32]
    if (dhcp != NULL) {
 8006b52:	b123      	cbz	r3, 8006b5e <dhcp_fine_tmr+0x1a>
      if (dhcp->request_timeout > 1) {
 8006b54:	8ada      	ldrh	r2, [r3, #22]
 8006b56:	2a01      	cmp	r2, #1
 8006b58:	d903      	bls.n	8006b62 <dhcp_fine_tmr+0x1e>
        dhcp->request_timeout--;
 8006b5a:	3a01      	subs	r2, #1
 8006b5c:	82da      	strh	r2, [r3, #22]
    netif = netif->next;
 8006b5e:	6824      	ldr	r4, [r4, #0]
 8006b60:	e7f4      	b.n	8006b4c <dhcp_fine_tmr+0x8>
      else if (dhcp->request_timeout == 1) {
 8006b62:	d1fc      	bne.n	8006b5e <dhcp_fine_tmr+0x1a>
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8006b64:	7a5a      	ldrb	r2, [r3, #9]
        dhcp->request_timeout--;
 8006b66:	82dd      	strh	r5, [r3, #22]
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8006b68:	2a0c      	cmp	r2, #12
 8006b6a:	d001      	beq.n	8006b70 <dhcp_fine_tmr+0x2c>
 8006b6c:	2a06      	cmp	r2, #6
 8006b6e:	d103      	bne.n	8006b78 <dhcp_fine_tmr+0x34>
      dhcp_discover(netif);
 8006b70:	4620      	mov	r0, r4
      dhcp_discover(netif);
 8006b72:	f7ff faa9 	bl	80060c8 <dhcp_discover>
 8006b76:	e7f2      	b.n	8006b5e <dhcp_fine_tmr+0x1a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8006b78:	2a01      	cmp	r2, #1
 8006b7a:	d109      	bne.n	8006b90 <dhcp_fine_tmr+0x4c>
    if (dhcp->tries <= 5) {
 8006b7c:	7a9b      	ldrb	r3, [r3, #10]
      dhcp_select(netif);
 8006b7e:	4620      	mov	r0, r4
    if (dhcp->tries <= 5) {
 8006b80:	2b05      	cmp	r3, #5
 8006b82:	d802      	bhi.n	8006b8a <dhcp_fine_tmr+0x46>
      dhcp_select(netif);
 8006b84:	f7ff fb84 	bl	8006290 <dhcp_select>
 8006b88:	e7e9      	b.n	8006b5e <dhcp_fine_tmr+0x1a>
      dhcp_release(netif);
 8006b8a:	f7ff fecb 	bl	8006924 <dhcp_release>
 8006b8e:	e7ef      	b.n	8006b70 <dhcp_fine_tmr+0x2c>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8006b90:	2a08      	cmp	r2, #8
 8006b92:	d109      	bne.n	8006ba8 <dhcp_fine_tmr+0x64>
    if (dhcp->tries <= 1) {
 8006b94:	7a9b      	ldrb	r3, [r3, #10]
      dhcp_check(netif);
 8006b96:	4620      	mov	r0, r4
    if (dhcp->tries <= 1) {
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d802      	bhi.n	8006ba2 <dhcp_fine_tmr+0x5e>
      dhcp_check(netif);
 8006b9c:	f7ff f99d 	bl	8005eda <dhcp_check>
 8006ba0:	e7dd      	b.n	8006b5e <dhcp_fine_tmr+0x1a>
      dhcp_bind(netif);
 8006ba2:	f7ff f9af 	bl	8005f04 <dhcp_bind>
 8006ba6:	e7da      	b.n	8006b5e <dhcp_fine_tmr+0x1a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8006ba8:	2a03      	cmp	r2, #3
 8006baa:	d1d8      	bne.n	8006b5e <dhcp_fine_tmr+0x1a>
    if (dhcp->tries < REBOOT_TRIES) {
 8006bac:	7a9b      	ldrb	r3, [r3, #10]
      dhcp_reboot(netif);
 8006bae:	4620      	mov	r0, r4
    if (dhcp->tries < REBOOT_TRIES) {
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d8de      	bhi.n	8006b72 <dhcp_fine_tmr+0x2e>
      dhcp_reboot(netif);
 8006bb4:	f7ff faf4 	bl	80061a0 <dhcp_reboot>
 8006bb8:	e7d1      	b.n	8006b5e <dhcp_fine_tmr+0x1a>
 8006bba:	bf00      	nop
 8006bbc:	20007714 	.word	0x20007714

08006bc0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8006bc0:	b570      	push	{r4, r5, r6, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8006bc2:	2618      	movs	r6, #24
 8006bc4:	4c07      	ldr	r4, [pc, #28]	; (8006be4 <etharp_free_entry+0x24>)
{
 8006bc6:	4605      	mov	r5, r0
  if (arp_table[i].q != NULL) {
 8006bc8:	4346      	muls	r6, r0
 8006bca:	59a0      	ldr	r0, [r4, r6]
 8006bcc:	b118      	cbz	r0, 8006bd6 <etharp_free_entry+0x16>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8006bce:	f001 faa2 	bl	8008116 <pbuf_free>
    arp_table[i].q = NULL;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	51a3      	str	r3, [r4, r6]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8006bd6:	2318      	movs	r3, #24
 8006bd8:	fb03 4405 	mla	r4, r3, r5, r4
 8006bdc:	2300      	movs	r3, #0
 8006bde:	7523      	strb	r3, [r4, #20]
 8006be0:	bd70      	pop	{r4, r5, r6, pc}
 8006be2:	bf00      	nop
 8006be4:	20003e24 	.word	0x20003e24

08006be8 <etharp_find_entry.isra.0>:
 *
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 8006be8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bec:	4b30      	ldr	r3, [pc, #192]	; (8006cb0 <etharp_find_entry.isra.0+0xc8>)
{
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s8_t empty = ARP_TABLE_SIZE;
  u8_t i = 0;
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 8006bee:	220a      	movs	r2, #10
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 8006bf0:	4605      	mov	r5, r0
 8006bf2:	2000      	movs	r0, #0
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8006bf4:	4616      	mov	r6, r2
 8006bf6:	4696      	mov	lr, r2
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8006bf8:	4681      	mov	r9, r0
 8006bfa:	4684      	mov	ip, r0
 8006bfc:	4683      	mov	fp, r0
  s8_t empty = ARP_TABLE_SIZE;
 8006bfe:	4614      	mov	r4, r2
 8006c00:	4698      	mov	r8, r3
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 8006c02:	9101      	str	r1, [sp, #4]
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8006c04:	2c0a      	cmp	r4, #10
    u8_t state = arp_table[i].state;
 8006c06:	7d1f      	ldrb	r7, [r3, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8006c08:	d10f      	bne.n	8006c2a <etharp_find_entry.isra.0+0x42>
 8006c0a:	b987      	cbnz	r7, 8006c2e <etharp_find_entry.isra.0+0x46>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 8006c0c:	b244      	sxtb	r4, r0
 8006c0e:	3001      	adds	r0, #1
 8006c10:	3318      	adds	r3, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8006c12:	280a      	cmp	r0, #10
 8006c14:	d1f6      	bne.n	8006c04 <etharp_find_entry.isra.0+0x1c>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8006c16:	9b01      	ldr	r3, [sp, #4]
 8006c18:	0799      	lsls	r1, r3, #30
 8006c1a:	d403      	bmi.n	8006c24 <etharp_find_entry.isra.0+0x3c>
 8006c1c:	2c0a      	cmp	r4, #10
 8006c1e:	d11b      	bne.n	8006c58 <etharp_find_entry.isra.0+0x70>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8006c20:	07db      	lsls	r3, r3, #31
 8006c22:	d428      	bmi.n	8006c76 <etharp_find_entry.isra.0+0x8e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 8006c24:	f04f 30ff 	mov.w	r0, #4294967295
 8006c28:	e008      	b.n	8006c3c <etharp_find_entry.isra.0+0x54>
    } else if (state != ETHARP_STATE_EMPTY) {
 8006c2a:	2f00      	cmp	r7, #0
 8006c2c:	d0ef      	beq.n	8006c0e <etharp_find_entry.isra.0+0x26>
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8006c2e:	b39d      	cbz	r5, 8006c98 <etharp_find_entry.isra.0+0xb0>
 8006c30:	6829      	ldr	r1, [r5, #0]
 8006c32:	468a      	mov	sl, r1
 8006c34:	6859      	ldr	r1, [r3, #4]
 8006c36:	458a      	cmp	sl, r1
 8006c38:	d12e      	bne.n	8006c98 <etharp_find_entry.isra.0+0xb0>
        return i;
 8006c3a:	b240      	sxtb	r0, r0
  arp_table[i].ctime = 0;
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
}
 8006c3c:	b003      	add	sp, #12
 8006c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (arp_table[i].ctime >= age_pending) {
 8006c42:	45e2      	cmp	sl, ip
 8006c44:	d3e3      	bcc.n	8006c0e <etharp_find_entry.isra.0+0x26>
            old_pending = i;
 8006c46:	b246      	sxtb	r6, r0
 8006c48:	46d4      	mov	ip, sl
 8006c4a:	e7e0      	b.n	8006c0e <etharp_find_entry.isra.0+0x26>
          if (arp_table[i].ctime >= age_stable) {
 8006c4c:	45ca      	cmp	sl, r9
            old_stable = i;
 8006c4e:	bf24      	itt	cs
 8006c50:	fa4f fe80 	sxtbcs.w	lr, r0
 8006c54:	46d1      	movcs	r9, sl
 8006c56:	e7da      	b.n	8006c0e <etharp_find_entry.isra.0+0x26>
    i = empty;
 8006c58:	b2e4      	uxtb	r4, r4
  if (ipaddr != NULL) {
 8006c5a:	b125      	cbz	r5, 8006c66 <etharp_find_entry.isra.0+0x7e>
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8006c5c:	2318      	movs	r3, #24
 8006c5e:	682a      	ldr	r2, [r5, #0]
 8006c60:	fb03 8304 	mla	r3, r3, r4, r8
 8006c64:	605a      	str	r2, [r3, #4]
  arp_table[i].ctime = 0;
 8006c66:	2318      	movs	r3, #24
  return (err_t)i;
 8006c68:	b260      	sxtb	r0, r4
  arp_table[i].ctime = 0;
 8006c6a:	fb03 8804 	mla	r8, r3, r4, r8
 8006c6e:	2300      	movs	r3, #0
 8006c70:	f8a8 3012 	strh.w	r3, [r8, #18]
 8006c74:	e7e2      	b.n	8006c3c <etharp_find_entry.isra.0+0x54>
    if (old_stable < ARP_TABLE_SIZE) {
 8006c76:	f1be 0f0a 	cmp.w	lr, #10
 8006c7a:	d005      	beq.n	8006c88 <etharp_find_entry.isra.0+0xa0>
      i = old_stable;
 8006c7c:	fa5f f48e 	uxtb.w	r4, lr
    etharp_free_entry(i);
 8006c80:	4620      	mov	r0, r4
 8006c82:	f7ff ff9d 	bl	8006bc0 <etharp_free_entry>
 8006c86:	e7e8      	b.n	8006c5a <etharp_find_entry.isra.0+0x72>
    } else if (old_pending < ARP_TABLE_SIZE) {
 8006c88:	2e0a      	cmp	r6, #10
 8006c8a:	d001      	beq.n	8006c90 <etharp_find_entry.isra.0+0xa8>
      i = old_pending;
 8006c8c:	b2f4      	uxtb	r4, r6
 8006c8e:	e7f7      	b.n	8006c80 <etharp_find_entry.isra.0+0x98>
    } else if (old_queue < ARP_TABLE_SIZE) {
 8006c90:	2a0a      	cmp	r2, #10
 8006c92:	d0c7      	beq.n	8006c24 <etharp_find_entry.isra.0+0x3c>
      i = old_queue;
 8006c94:	b2d4      	uxtb	r4, r2
 8006c96:	e7f3      	b.n	8006c80 <etharp_find_entry.isra.0+0x98>
      if (state == ETHARP_STATE_PENDING) {
 8006c98:	2f01      	cmp	r7, #1
 8006c9a:	f8b3 a012 	ldrh.w	sl, [r3, #18]
 8006c9e:	d1d5      	bne.n	8006c4c <etharp_find_entry.isra.0+0x64>
        if (arp_table[i].q != NULL) {
 8006ca0:	681f      	ldr	r7, [r3, #0]
 8006ca2:	2f00      	cmp	r7, #0
 8006ca4:	d0cd      	beq.n	8006c42 <etharp_find_entry.isra.0+0x5a>
          if (arp_table[i].ctime >= age_queue) {
 8006ca6:	45da      	cmp	sl, fp
 8006ca8:	d3b1      	bcc.n	8006c0e <etharp_find_entry.isra.0+0x26>
            old_queue = i;
 8006caa:	b242      	sxtb	r2, r0
 8006cac:	46d3      	mov	fp, sl
 8006cae:	e7ae      	b.n	8006c0e <etharp_find_entry.isra.0+0x26>
 8006cb0:	20003e24 	.word	0x20003e24

08006cb4 <etharp_raw.constprop.1>:
 * @return ERR_OK if the ARP packet has been sent
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
 8006cb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006cb8:	4607      	mov	r7, r0
 8006cba:	4688      	mov	r8, r1
 8006cbc:	4691      	mov	r9, r2
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8006cbe:	211c      	movs	r1, #28
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	2002      	movs	r0, #2
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
 8006cc4:	461d      	mov	r5, r3
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8006cc6:	f001 fa56 	bl	8008176 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8006cca:	4606      	mov	r6, r0
 8006ccc:	b380      	cbz	r0, 8006d30 <etharp_raw.constprop.1+0x7c>
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8006cce:	6844      	ldr	r4, [r0, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8006cd0:	2001      	movs	r0, #1
 8006cd2:	f7fe ffe3 	bl	8005c9c <lwip_htons>
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8006cd6:	4631      	mov	r1, r6
  hdr->opcode = lwip_htons(opcode);
 8006cd8:	80e0      	strh	r0, [r4, #6]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8006cda:	4638      	mov	r0, r7
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 8006cdc:	682b      	ldr	r3, [r5, #0]
 8006cde:	60a3      	str	r3, [r4, #8]
 8006ce0:	88ab      	ldrh	r3, [r5, #4]
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8006ce2:	2500      	movs	r5, #0
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 8006ce4:	81a3      	strh	r3, [r4, #12]
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8006ce6:	4b14      	ldr	r3, [pc, #80]	; (8006d38 <etharp_raw.constprop.1+0x84>)
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	889b      	ldrh	r3, [r3, #4]
 8006cec:	f8c4 2012 	str.w	r2, [r4, #18]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8006cf0:	4642      	mov	r2, r8
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8006cf2:	82e3      	strh	r3, [r4, #22]
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 8006cf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8006cfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cfe:	681b      	ldr	r3, [r3, #0]
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8006d00:	7025      	strb	r5, [r4, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8006d02:	61a3      	str	r3, [r4, #24]
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8006d04:	2301      	movs	r3, #1
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8006d06:	70e5      	strb	r5, [r4, #3]
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8006d08:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8006d0a:	2308      	movs	r3, #8
 8006d0c:	70a3      	strb	r3, [r4, #2]
  hdr->hwlen = ETH_HWADDR_LEN;
 8006d0e:	2306      	movs	r3, #6
 8006d10:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8006d12:	2304      	movs	r3, #4
 8006d14:	7163      	strb	r3, [r4, #5]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8006d16:	f640 0306 	movw	r3, #2054	; 0x806
 8006d1a:	9300      	str	r3, [sp, #0]
 8006d1c:	464b      	mov	r3, r9
 8006d1e:	f003 ffc7 	bl	800acb0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8006d22:	4630      	mov	r0, r6
 8006d24:	f001 f9f7 	bl	8008116 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 8006d28:	4628      	mov	r0, r5
}
 8006d2a:	b003      	add	sp, #12
 8006d2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return ERR_MEM;
 8006d30:	f04f 30ff 	mov.w	r0, #4294967295
 8006d34:	e7f9      	b.n	8006d2a <etharp_raw.constprop.1+0x76>
 8006d36:	bf00      	nop
 8006d38:	0800cbb2 	.word	0x0800cbb2

08006d3c <etharp_cleanup_netif>:
{
 8006d3c:	b570      	push	{r4, r5, r6, lr}
 8006d3e:	4606      	mov	r6, r0
 8006d40:	4d07      	ldr	r5, [pc, #28]	; (8006d60 <etharp_cleanup_netif+0x24>)
 8006d42:	2400      	movs	r4, #0
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8006d44:	7d2b      	ldrb	r3, [r5, #20]
 8006d46:	b12b      	cbz	r3, 8006d54 <etharp_cleanup_netif+0x18>
 8006d48:	68ab      	ldr	r3, [r5, #8]
 8006d4a:	42b3      	cmp	r3, r6
 8006d4c:	d102      	bne.n	8006d54 <etharp_cleanup_netif+0x18>
      etharp_free_entry(i);
 8006d4e:	4620      	mov	r0, r4
 8006d50:	f7ff ff36 	bl	8006bc0 <etharp_free_entry>
 8006d54:	3401      	adds	r4, #1
 8006d56:	3518      	adds	r5, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8006d58:	2c0a      	cmp	r4, #10
 8006d5a:	d1f3      	bne.n	8006d44 <etharp_cleanup_netif+0x8>
}
 8006d5c:	bd70      	pop	{r4, r5, r6, pc}
 8006d5e:	bf00      	nop
 8006d60:	20003e24 	.word	0x20003e24

08006d64 <etharp_input>:
{
 8006d64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d68:	4680      	mov	r8, r0
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8006d6a:	460d      	mov	r5, r1
 8006d6c:	b181      	cbz	r1, 8006d90 <etharp_input+0x2c>
  hdr = (struct etharp_hdr *)p->payload;
 8006d6e:	6844      	ldr	r4, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8006d70:	8823      	ldrh	r3, [r4, #0]
 8006d72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d76:	d108      	bne.n	8006d8a <etharp_input+0x26>
 8006d78:	7923      	ldrb	r3, [r4, #4]
 8006d7a:	2b06      	cmp	r3, #6
 8006d7c:	d105      	bne.n	8006d8a <etharp_input+0x26>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8006d7e:	7963      	ldrb	r3, [r4, #5]
 8006d80:	2b04      	cmp	r3, #4
 8006d82:	d102      	bne.n	8006d8a <etharp_input+0x26>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8006d84:	8863      	ldrh	r3, [r4, #2]
 8006d86:	2b08      	cmp	r3, #8
 8006d88:	d005      	beq.n	8006d96 <etharp_input+0x32>
  pbuf_free(p);
 8006d8a:	4640      	mov	r0, r8
 8006d8c:	f001 f9c3 	bl	8008116 <pbuf_free>
}
 8006d90:	b004      	add	sp, #16
 8006d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8006d96:	f8d4 000e 	ldr.w	r0, [r4, #14]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8006d9a:	684f      	ldr	r7, [r1, #4]
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8006d9c:	9003      	str	r0, [sp, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8006d9e:	69a3      	ldr	r3, [r4, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8006da0:	b117      	cbz	r7, 8006da8 <etharp_input+0x44>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8006da2:	1bdb      	subs	r3, r3, r7
 8006da4:	425f      	negs	r7, r3
 8006da6:	415f      	adcs	r7, r3
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8006da8:	2f00      	cmp	r7, #0
 8006daa:	f104 0608 	add.w	r6, r4, #8
 8006dae:	bf14      	ite	ne
 8006db0:	f04f 0901 	movne.w	r9, #1
 8006db4:	f04f 0902 	moveq.w	r9, #2
  if (ip4_addr_isany(ipaddr) ||
 8006db8:	2800      	cmp	r0, #0
 8006dba:	d03c      	beq.n	8006e36 <etharp_input+0xd2>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8006dbc:	4629      	mov	r1, r5
 8006dbe:	f000 fbfe 	bl	80075be <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 8006dc2:	4682      	mov	sl, r0
 8006dc4:	bbb8      	cbnz	r0, 8006e36 <etharp_input+0xd2>
      ip4_addr_ismulticast(ipaddr)) {
 8006dc6:	9b03      	ldr	r3, [sp, #12]
 8006dc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8006dcc:	2be0      	cmp	r3, #224	; 0xe0
 8006dce:	d032      	beq.n	8006e36 <etharp_input+0xd2>
  i = etharp_find_entry(ipaddr, flags, netif);
 8006dd0:	4649      	mov	r1, r9
 8006dd2:	a803      	add	r0, sp, #12
 8006dd4:	f7ff ff08 	bl	8006be8 <etharp_find_entry.isra.0>
  if (i < 0) {
 8006dd8:	2800      	cmp	r0, #0
 8006dda:	db2c      	blt.n	8006e36 <etharp_input+0xd2>
    arp_table[i].state = ETHARP_STATE_STABLE;
 8006ddc:	2218      	movs	r2, #24
 8006dde:	4b2d      	ldr	r3, [pc, #180]	; (8006e94 <etharp_input+0x130>)
 8006de0:	f04f 0c02 	mov.w	ip, #2
 8006de4:	fb02 f100 	mul.w	r1, r2, r0
 8006de8:	eb03 0e01 	add.w	lr, r3, r1
 8006dec:	f88e c014 	strb.w	ip, [lr, #20]
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 8006df0:	f04f 0c0c 	mov.w	ip, #12
  arp_table[i].netif = netif;
 8006df4:	f8ce 5008 	str.w	r5, [lr, #8]
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 8006df8:	fb12 c200 	smlabb	r2, r2, r0, ip
 8006dfc:	6830      	ldr	r0, [r6, #0]
 8006dfe:	eb03 0c02 	add.w	ip, r3, r2
 8006e02:	5098      	str	r0, [r3, r2]
 8006e04:	88b2      	ldrh	r2, [r6, #4]
 8006e06:	f8ac 2004 	strh.w	r2, [ip, #4]
  if (arp_table[i].q != NULL) {
 8006e0a:	f853 9001 	ldr.w	r9, [r3, r1]
  arp_table[i].ctime = 0;
 8006e0e:	f8ae a012 	strh.w	sl, [lr, #18]
  if (arp_table[i].q != NULL) {
 8006e12:	f1b9 0f00 	cmp.w	r9, #0
 8006e16:	d00e      	beq.n	8006e36 <etharp_input+0xd2>
    arp_table[i].q = NULL;
 8006e18:	f843 a001 	str.w	sl, [r3, r1]
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8006e1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006e20:	f105 0229 	add.w	r2, r5, #41	; 0x29
 8006e24:	4649      	mov	r1, r9
 8006e26:	9300      	str	r3, [sp, #0]
 8006e28:	4628      	mov	r0, r5
 8006e2a:	4633      	mov	r3, r6
 8006e2c:	f003 ff40 	bl	800acb0 <ethernet_output>
    pbuf_free(p);
 8006e30:	4648      	mov	r0, r9
 8006e32:	f001 f970 	bl	8008116 <pbuf_free>
  switch (hdr->opcode) {
 8006e36:	88e3      	ldrh	r3, [r4, #6]
 8006e38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e3c:	d007      	beq.n	8006e4e <etharp_input+0xea>
 8006e3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e42:	d1a2      	bne.n	8006d8a <etharp_input+0x26>
    dhcp_arp_reply(netif, &sipaddr);
 8006e44:	a903      	add	r1, sp, #12
 8006e46:	4628      	mov	r0, r5
 8006e48:	f7ff fc6a 	bl	8006720 <dhcp_arp_reply>
    break;
 8006e4c:	e79d      	b.n	8006d8a <etharp_input+0x26>
    if (for_us) {
 8006e4e:	2f00      	cmp	r7, #0
 8006e50:	d09b      	beq.n	8006d8a <etharp_input+0x26>
      hdr->opcode = lwip_htons(ARP_REPLY);
 8006e52:	2002      	movs	r0, #2
 8006e54:	f7fe ff22 	bl	8005c9c <lwip_htons>
      IPADDR2_COPY(&hdr->dipaddr, &hdr->sipaddr);
 8006e58:	f8d4 300e 	ldr.w	r3, [r4, #14]
      hdr->opcode = lwip_htons(ARP_REPLY);
 8006e5c:	80e0      	strh	r0, [r4, #6]
        ethernet_output(netif, p, &hdr->shwaddr, &hdr->dhwaddr, ETHTYPE_ARP);
 8006e5e:	4628      	mov	r0, r5
      IPADDR2_COPY(&hdr->dipaddr, &hdr->sipaddr);
 8006e60:	61a3      	str	r3, [r4, #24]
      IPADDR2_COPY(&hdr->sipaddr, netif_ip4_addr(netif));
 8006e62:	686b      	ldr	r3, [r5, #4]
 8006e64:	f8c4 300e 	str.w	r3, [r4, #14]
      ETHADDR16_COPY(&hdr->dhwaddr, &hdr->shwaddr);
 8006e68:	f104 0312 	add.w	r3, r4, #18
 8006e6c:	6832      	ldr	r2, [r6, #0]
 8006e6e:	f8c4 2012 	str.w	r2, [r4, #18]
 8006e72:	88b2      	ldrh	r2, [r6, #4]
 8006e74:	809a      	strh	r2, [r3, #4]
      ETHADDR16_COPY(&hdr->shwaddr, netif->hwaddr);
 8006e76:	462a      	mov	r2, r5
 8006e78:	f852 1f29 	ldr.w	r1, [r2, #41]!
 8006e7c:	60a1      	str	r1, [r4, #8]
        ethernet_output(netif, p, &hdr->shwaddr, &hdr->dhwaddr, ETHTYPE_ARP);
 8006e7e:	4641      	mov	r1, r8
      ETHADDR16_COPY(&hdr->shwaddr, netif->hwaddr);
 8006e80:	8892      	ldrh	r2, [r2, #4]
 8006e82:	80b2      	strh	r2, [r6, #4]
        ethernet_output(netif, p, &hdr->shwaddr, &hdr->dhwaddr, ETHTYPE_ARP);
 8006e84:	f640 0206 	movw	r2, #2054	; 0x806
 8006e88:	9200      	str	r2, [sp, #0]
 8006e8a:	4632      	mov	r2, r6
 8006e8c:	f003 ff10 	bl	800acb0 <ethernet_output>
 8006e90:	e77b      	b.n	8006d8a <etharp_input+0x26>
 8006e92:	bf00      	nop
 8006e94:	20003e24 	.word	0x20003e24

08006e98 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8006e98:	b507      	push	{r0, r1, r2, lr}
 8006e9a:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8006e9c:	f100 0329 	add.w	r3, r0, #41	; 0x29
 8006ea0:	9101      	str	r1, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8006ea2:	3204      	adds	r2, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	9200      	str	r2, [sp, #0]
 8006ea8:	4a02      	ldr	r2, [pc, #8]	; (8006eb4 <etharp_request+0x1c>)
 8006eaa:	f7ff ff03 	bl	8006cb4 <etharp_raw.constprop.1>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 8006eae:	b003      	add	sp, #12
 8006eb0:	f85d fb04 	ldr.w	pc, [sp], #4
 8006eb4:	0800cbac 	.word	0x0800cbac

08006eb8 <etharp_tmr>:
{
 8006eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eba:	4c13      	ldr	r4, [pc, #76]	; (8006f08 <etharp_tmr+0x50>)
 8006ebc:	2500      	movs	r5, #0
        arp_table[i].state = ETHARP_STATE_STABLE;
 8006ebe:	2602      	movs	r6, #2
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8006ec0:	2704      	movs	r7, #4
    u8_t state = arp_table[i].state;
 8006ec2:	7c22      	ldrb	r2, [r4, #16]
    if (state != ETHARP_STATE_EMPTY
 8006ec4:	b16a      	cbz	r2, 8006ee2 <etharp_tmr+0x2a>
      arp_table[i].ctime++;
 8006ec6:	89e3      	ldrh	r3, [r4, #14]
 8006ec8:	3301      	adds	r3, #1
 8006eca:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8006ecc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 8006ed0:	81e3      	strh	r3, [r4, #14]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8006ed2:	d203      	bcs.n	8006edc <etharp_tmr+0x24>
 8006ed4:	2a01      	cmp	r2, #1
 8006ed6:	d109      	bne.n	8006eec <etharp_tmr+0x34>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8006ed8:	2b04      	cmp	r3, #4
 8006eda:	d90b      	bls.n	8006ef4 <etharp_tmr+0x3c>
        etharp_free_entry(i);
 8006edc:	4628      	mov	r0, r5
 8006ede:	f7ff fe6f 	bl	8006bc0 <etharp_free_entry>
 8006ee2:	3501      	adds	r5, #1
 8006ee4:	3418      	adds	r4, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8006ee6:	2d0a      	cmp	r5, #10
 8006ee8:	d1eb      	bne.n	8006ec2 <etharp_tmr+0xa>
 8006eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8006eec:	2a03      	cmp	r2, #3
 8006eee:	d106      	bne.n	8006efe <etharp_tmr+0x46>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8006ef0:	7427      	strb	r7, [r4, #16]
 8006ef2:	e7f6      	b.n	8006ee2 <etharp_tmr+0x2a>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8006ef4:	4621      	mov	r1, r4
 8006ef6:	6860      	ldr	r0, [r4, #4]
 8006ef8:	f7ff ffce 	bl	8006e98 <etharp_request>
 8006efc:	e7f1      	b.n	8006ee2 <etharp_tmr+0x2a>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8006efe:	2a04      	cmp	r2, #4
 8006f00:	d1ef      	bne.n	8006ee2 <etharp_tmr+0x2a>
        arp_table[i].state = ETHARP_STATE_STABLE;
 8006f02:	7426      	strb	r6, [r4, #16]
 8006f04:	e7ed      	b.n	8006ee2 <etharp_tmr+0x2a>
 8006f06:	bf00      	nop
 8006f08:	20003e28 	.word	0x20003e28

08006f0c <etharp_output_to_arp_index>:
{
 8006f0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006f10:	4689      	mov	r9, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8006f12:	4d1c      	ldr	r5, [pc, #112]	; (8006f84 <etharp_output_to_arp_index+0x78>)
 8006f14:	2118      	movs	r1, #24
{
 8006f16:	4607      	mov	r7, r0
 8006f18:	4614      	mov	r4, r2
 8006f1a:	f100 0829 	add.w	r8, r0, #41	; 0x29
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8006f1e:	fb01 5602 	mla	r6, r1, r2, r5
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8006f22:	7d33      	ldrb	r3, [r6, #20]
 8006f24:	2b02      	cmp	r3, #2
 8006f26:	d10a      	bne.n	8006f3e <etharp_output_to_arp_index+0x32>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8006f28:	8a73      	ldrh	r3, [r6, #18]
 8006f2a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8006f2e:	d915      	bls.n	8006f5c <etharp_output_to_arp_index+0x50>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8006f30:	4631      	mov	r1, r6
 8006f32:	3104      	adds	r1, #4
 8006f34:	f7ff ffb0 	bl	8006e98 <etharp_request>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8006f38:	b908      	cbnz	r0, 8006f3e <etharp_output_to_arp_index+0x32>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8006f3a:	2303      	movs	r3, #3
 8006f3c:	7533      	strb	r3, [r6, #20]
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8006f3e:	2318      	movs	r3, #24
 8006f40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f44:	4649      	mov	r1, r9
 8006f46:	4638      	mov	r0, r7
 8006f48:	fb03 5304 	mla	r3, r3, r4, r5
 8006f4c:	9200      	str	r2, [sp, #0]
 8006f4e:	4642      	mov	r2, r8
 8006f50:	330c      	adds	r3, #12
 8006f52:	f003 fead 	bl	800acb0 <ethernet_output>
}
 8006f56:	b003      	add	sp, #12
 8006f58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8006f5c:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8006f60:	d3ed      	bcc.n	8006f3e <etharp_output_to_arp_index+0x32>
 8006f62:	eb02 0142 	add.w	r1, r2, r2, lsl #1
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8006f66:	1d03      	adds	r3, r0, #4
 8006f68:	00c9      	lsls	r1, r1, #3
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8006f6a:	9300      	str	r3, [sp, #0]
 8006f6c:	4643      	mov	r3, r8
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8006f6e:	f101 020c 	add.w	r2, r1, #12
 8006f72:	3104      	adds	r1, #4
 8006f74:	4429      	add	r1, r5
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8006f76:	442a      	add	r2, r5
 8006f78:	9101      	str	r1, [sp, #4]
 8006f7a:	4641      	mov	r1, r8
 8006f7c:	f7ff fe9a 	bl	8006cb4 <etharp_raw.constprop.1>
 8006f80:	e7da      	b.n	8006f38 <etharp_output_to_arp_index+0x2c>
 8006f82:	bf00      	nop
 8006f84:	20003e24 	.word	0x20003e24

08006f88 <etharp_query>:
{
 8006f88:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006f8c:	4688      	mov	r8, r1
 8006f8e:	4607      	mov	r7, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8006f90:	4601      	mov	r1, r0
{
 8006f92:	4614      	mov	r4, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8006f94:	f8d8 0000 	ldr.w	r0, [r8]
 8006f98:	f000 fb11 	bl	80075be <ip4_addr_isbroadcast_u32>
 8006f9c:	2800      	cmp	r0, #0
 8006f9e:	d14e      	bne.n	800703e <etharp_query+0xb6>
      ip4_addr_ismulticast(ipaddr) ||
 8006fa0:	f8d8 3000 	ldr.w	r3, [r8]
 8006fa4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8006fa8:	2ae0      	cmp	r2, #224	; 0xe0
 8006faa:	d048      	beq.n	800703e <etharp_query+0xb6>
      ip4_addr_isany(ipaddr)) {
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d046      	beq.n	800703e <etharp_query+0xb6>
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8006fb0:	2101      	movs	r1, #1
 8006fb2:	4640      	mov	r0, r8
 8006fb4:	f7ff fe18 	bl	8006be8 <etharp_find_entry.isra.0>
  if (i < 0) {
 8006fb8:	1e05      	subs	r5, r0, #0
 8006fba:	db43      	blt.n	8007044 <etharp_query+0xbc>
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8006fbc:	4e2e      	ldr	r6, [pc, #184]	; (8007078 <etharp_query+0xf0>)
 8006fbe:	2318      	movs	r3, #24
 8006fc0:	fb03 6305 	mla	r3, r3, r5, r6
 8006fc4:	7d1a      	ldrb	r2, [r3, #20]
 8006fc6:	2a00      	cmp	r2, #0
 8006fc8:	d13e      	bne.n	8007048 <etharp_query+0xc0>
    arp_table[i].state = ETHARP_STATE_PENDING;
 8006fca:	2201      	movs	r2, #1
    arp_table[i].netif = netif;
 8006fcc:	609f      	str	r7, [r3, #8]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8006fce:	751a      	strb	r2, [r3, #20]
    result = etharp_request(netif, ipaddr);
 8006fd0:	4641      	mov	r1, r8
 8006fd2:	4638      	mov	r0, r7
 8006fd4:	f7ff ff60 	bl	8006e98 <etharp_request>
    if (q == NULL) {
 8006fd8:	b1a4      	cbz	r4, 8007004 <etharp_query+0x7c>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8006fda:	2318      	movs	r3, #24
 8006fdc:	fb03 6205 	mla	r2, r3, r5, r6
 8006fe0:	7d12      	ldrb	r2, [r2, #20]
 8006fe2:	2a01      	cmp	r2, #1
 8006fe4:	d911      	bls.n	800700a <etharp_query+0x82>
    ETHARP_SET_HINT(netif, i);
 8006fe6:	4a25      	ldr	r2, [pc, #148]	; (800707c <etharp_query+0xf4>)
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8006fe8:	4621      	mov	r1, r4
 8006fea:	4638      	mov	r0, r7
    ETHARP_SET_HINT(netif, i);
 8006fec:	7015      	strb	r5, [r2, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8006fee:	220c      	movs	r2, #12
 8006ff0:	fb13 2305 	smlabb	r3, r3, r5, r2
 8006ff4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ff8:	4433      	add	r3, r6
 8006ffa:	9200      	str	r2, [sp, #0]
 8006ffc:	f107 0229 	add.w	r2, r7, #41	; 0x29
 8007000:	f003 fe56 	bl	800acb0 <ethernet_output>
}
 8007004:	b002      	add	sp, #8
 8007006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800700a:	d1fb      	bne.n	8007004 <etharp_query+0x7c>
 800700c:	4623      	mov	r3, r4
    while (p) {
 800700e:	b98b      	cbnz	r3, 8007034 <etharp_query+0xac>
      pbuf_ref(p);
 8007010:	4620      	mov	r0, r4
 8007012:	f001 f969 	bl	80082e8 <pbuf_ref>
    if (p != NULL) {
 8007016:	b35c      	cbz	r4, 8007070 <etharp_query+0xe8>
 8007018:	4627      	mov	r7, r4
      if (arp_table[i].q != NULL) {
 800701a:	2318      	movs	r3, #24
 800701c:	fb03 f205 	mul.w	r2, r3, r5
 8007020:	461c      	mov	r4, r3
 8007022:	58b0      	ldr	r0, [r6, r2]
 8007024:	b108      	cbz	r0, 800702a <etharp_query+0xa2>
        pbuf_free(arp_table[i].q);
 8007026:	f001 f876 	bl	8008116 <pbuf_free>
      arp_table[i].q = p;
 800702a:	fb04 f305 	mul.w	r3, r4, r5
      result = ERR_OK;
 800702e:	2000      	movs	r0, #0
      arp_table[i].q = p;
 8007030:	50f7      	str	r7, [r6, r3]
 8007032:	e7e7      	b.n	8007004 <etharp_query+0x7c>
      if (p->type != PBUF_ROM) {
 8007034:	7b1a      	ldrb	r2, [r3, #12]
 8007036:	2a01      	cmp	r2, #1
 8007038:	d10b      	bne.n	8007052 <etharp_query+0xca>
      p = p->next;
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	e7e7      	b.n	800700e <etharp_query+0x86>
    return ERR_ARG;
 800703e:	f06f 000f 	mvn.w	r0, #15
 8007042:	e7df      	b.n	8007004 <etharp_query+0x7c>
 8007044:	4628      	mov	r0, r5
 8007046:	e7dd      	b.n	8007004 <etharp_query+0x7c>
  if (is_new_entry || (q == NULL)) {
 8007048:	2c00      	cmp	r4, #0
 800704a:	d0c1      	beq.n	8006fd0 <etharp_query+0x48>
  err_t result = ERR_MEM;
 800704c:	f04f 30ff 	mov.w	r0, #4294967295
 8007050:	e7c3      	b.n	8006fda <etharp_query+0x52>
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8007052:	2200      	movs	r2, #0
 8007054:	8919      	ldrh	r1, [r3, #8]
 8007056:	2002      	movs	r0, #2
 8007058:	f001 f88d 	bl	8008176 <pbuf_alloc>
      if (p != NULL) {
 800705c:	4607      	mov	r7, r0
 800705e:	b138      	cbz	r0, 8007070 <etharp_query+0xe8>
        if (pbuf_copy(p, q) != ERR_OK) {
 8007060:	4621      	mov	r1, r4
 8007062:	f001 f964 	bl	800832e <pbuf_copy>
 8007066:	2800      	cmp	r0, #0
 8007068:	d0d7      	beq.n	800701a <etharp_query+0x92>
          pbuf_free(p);
 800706a:	4638      	mov	r0, r7
 800706c:	f001 f853 	bl	8008116 <pbuf_free>
      result = ERR_MEM;
 8007070:	f04f 30ff 	mov.w	r0, #4294967295
 8007074:	e7c6      	b.n	8007004 <etharp_query+0x7c>
 8007076:	bf00      	nop
 8007078:	20003e24 	.word	0x20003e24
 800707c:	20003f14 	.word	0x20003f14

08007080 <etharp_output>:
{
 8007080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007082:	4604      	mov	r4, r0
 8007084:	b085      	sub	sp, #20
 8007086:	460e      	mov	r6, r1
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8007088:	4601      	mov	r1, r0
 800708a:	6810      	ldr	r0, [r2, #0]
{
 800708c:	4615      	mov	r5, r2
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800708e:	f000 fa96 	bl	80075be <ip4_addr_isbroadcast_u32>
 8007092:	2800      	cmp	r0, #0
 8007094:	d15a      	bne.n	800714c <etharp_output+0xcc>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8007096:	682b      	ldr	r3, [r5, #0]
 8007098:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800709c:	2ae0      	cmp	r2, #224	; 0xe0
 800709e:	d11d      	bne.n	80070dc <etharp_output+0x5c>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80070a0:	2301      	movs	r3, #1
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80070a2:	f88d 0009 	strb.w	r0, [sp, #9]
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80070a6:	f88d 3008 	strb.w	r3, [sp, #8]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80070aa:	235e      	movs	r3, #94	; 0x5e
 80070ac:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80070b0:	786b      	ldrb	r3, [r5, #1]
 80070b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070b6:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80070ba:	78ab      	ldrb	r3, [r5, #2]
 80070bc:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80070c0:	78eb      	ldrb	r3, [r5, #3]
 80070c2:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 80070c6:	ab02      	add	r3, sp, #8
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 80070c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070cc:	4631      	mov	r1, r6
 80070ce:	4620      	mov	r0, r4
 80070d0:	9200      	str	r2, [sp, #0]
 80070d2:	f104 0229 	add.w	r2, r4, #41	; 0x29
 80070d6:	f003 fdeb 	bl	800acb0 <ethernet_output>
 80070da:	e01f      	b.n	800711c <etharp_output+0x9c>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80070dc:	6862      	ldr	r2, [r4, #4]
 80070de:	68a1      	ldr	r1, [r4, #8]
 80070e0:	405a      	eors	r2, r3
 80070e2:	420a      	tst	r2, r1
 80070e4:	d008      	beq.n	80070f8 <etharp_output+0x78>
        !ip4_addr_islinklocal(ipaddr)) {
 80070e6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80070e8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d003      	beq.n	80070f8 <etharp_output+0x78>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80070f0:	68e3      	ldr	r3, [r4, #12]
 80070f2:	b36b      	cbz	r3, 8007150 <etharp_output+0xd0>
            dst_addr = netif_ip4_gw(netif);
 80070f4:	f104 050c 	add.w	r5, r4, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80070f8:	4b17      	ldr	r3, [pc, #92]	; (8007158 <etharp_output+0xd8>)
 80070fa:	2018      	movs	r0, #24
 80070fc:	4917      	ldr	r1, [pc, #92]	; (800715c <etharp_output+0xdc>)
 80070fe:	781a      	ldrb	r2, [r3, #0]
 8007100:	fb00 1002 	mla	r0, r0, r2, r1
 8007104:	7d01      	ldrb	r1, [r0, #20]
 8007106:	2901      	cmp	r1, #1
 8007108:	4619      	mov	r1, r3
 800710a:	d909      	bls.n	8007120 <etharp_output+0xa0>
 800710c:	682f      	ldr	r7, [r5, #0]
 800710e:	6843      	ldr	r3, [r0, #4]
 8007110:	429f      	cmp	r7, r3
 8007112:	d105      	bne.n	8007120 <etharp_output+0xa0>
        return etharp_output_to_arp_index(netif, q, i);
 8007114:	4631      	mov	r1, r6
 8007116:	4620      	mov	r0, r4
 8007118:	f7ff fef8 	bl	8006f0c <etharp_output_to_arp_index>
}
 800711c:	b005      	add	sp, #20
 800711e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007120:	4b0e      	ldr	r3, [pc, #56]	; (800715c <etharp_output+0xdc>)
{
 8007122:	2200      	movs	r2, #0
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8007124:	7d18      	ldrb	r0, [r3, #20]
 8007126:	2801      	cmp	r0, #1
 8007128:	d906      	bls.n	8007138 <etharp_output+0xb8>
 800712a:	682f      	ldr	r7, [r5, #0]
 800712c:	6858      	ldr	r0, [r3, #4]
 800712e:	4287      	cmp	r7, r0
 8007130:	d102      	bne.n	8007138 <etharp_output+0xb8>
        ETHARP_SET_HINT(netif, i);
 8007132:	b2d2      	uxtb	r2, r2
 8007134:	700a      	strb	r2, [r1, #0]
 8007136:	e7ed      	b.n	8007114 <etharp_output+0x94>
 8007138:	3201      	adds	r2, #1
 800713a:	3318      	adds	r3, #24
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800713c:	2a0a      	cmp	r2, #10
 800713e:	d1f1      	bne.n	8007124 <etharp_output+0xa4>
    return etharp_query(netif, dst_addr, q);
 8007140:	4632      	mov	r2, r6
 8007142:	4629      	mov	r1, r5
 8007144:	4620      	mov	r0, r4
 8007146:	f7ff ff1f 	bl	8006f88 <etharp_query>
 800714a:	e7e7      	b.n	800711c <etharp_output+0x9c>
    dest = (const struct eth_addr *)&ethbroadcast;
 800714c:	4b04      	ldr	r3, [pc, #16]	; (8007160 <etharp_output+0xe0>)
 800714e:	e7bb      	b.n	80070c8 <etharp_output+0x48>
            return ERR_RTE;
 8007150:	f06f 0003 	mvn.w	r0, #3
 8007154:	e7e2      	b.n	800711c <etharp_output+0x9c>
 8007156:	bf00      	nop
 8007158:	20003f14 	.word	0x20003f14
 800715c:	20003e24 	.word	0x20003e24
 8007160:	0800cbac 	.word	0x0800cbac

08007164 <icmp_send_response.isra.0>:
 *          p->payload pointing to the IP header
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
 8007164:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007166:	4604      	mov	r4, r0
 8007168:	b087      	sub	sp, #28
 800716a:	460f      	mov	r7, r1
 800716c:	4616      	mov	r6, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800716e:	2124      	movs	r1, #36	; 0x24
 8007170:	2200      	movs	r2, #0
 8007172:	2001      	movs	r0, #1
 8007174:	f000 ffff 	bl	8008176 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 8007178:	4605      	mov	r5, r0
 800717a:	b350      	cbz	r0, 80071d2 <icmp_send_response.isra.0+0x6e>
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800717c:	6822      	ldr	r2, [r4, #0]
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  icmphdr->type = type;
  icmphdr->code = code;
  icmphdr->id = 0;
 800717e:	2300      	movs	r3, #0
  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8007180:	6844      	ldr	r4, [r0, #4]
  icmphdr->seqno = 0;

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8007182:	f102 001c 	add.w	r0, r2, #28
  icmphdr->id = 0;
 8007186:	7123      	strb	r3, [r4, #4]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8007188:	f104 0108 	add.w	r1, r4, #8
  icmphdr->id = 0;
 800718c:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 800718e:	71a3      	strb	r3, [r4, #6]
 8007190:	71e3      	strb	r3, [r4, #7]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8007192:	4613      	mov	r3, r2
  icmphdr->type = type;
 8007194:	7027      	strb	r7, [r4, #0]
  icmphdr->code = code;
 8007196:	7066      	strb	r6, [r4, #1]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8007198:	f853 6b04 	ldr.w	r6, [r3], #4
 800719c:	4283      	cmp	r3, r0
 800719e:	f841 6b04 	str.w	r6, [r1], #4
 80071a2:	d1f9      	bne.n	8007198 <icmp_send_response.isra.0+0x34>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80071a4:	ae06      	add	r6, sp, #24
 80071a6:	68d3      	ldr	r3, [r2, #12]
 80071a8:	f846 3d04 	str.w	r3, [r6, #-4]!
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 80071ac:	4630      	mov	r0, r6
 80071ae:	f000 f8a1 	bl	80072f4 <ip4_route>
#endif
  if (netif != NULL) {
 80071b2:	b158      	cbz	r0, 80071cc <icmp_send_response.isra.0+0x68>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80071b4:	2100      	movs	r1, #0
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80071b6:	2301      	movs	r3, #1
 80071b8:	4632      	mov	r2, r6
    icmphdr->chksum = 0;
 80071ba:	70a1      	strb	r1, [r4, #2]
 80071bc:	70e1      	strb	r1, [r4, #3]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80071be:	9002      	str	r0, [sp, #8]
 80071c0:	4628      	mov	r0, r5
 80071c2:	e88d 000a 	stmia.w	sp, {r1, r3}
 80071c6:	23ff      	movs	r3, #255	; 0xff
 80071c8:	f000 f9e8 	bl	800759c <ip4_output_if>
  }
  pbuf_free(q);
 80071cc:	4628      	mov	r0, r5
 80071ce:	f000 ffa2 	bl	8008116 <pbuf_free>
}
 80071d2:	b007      	add	sp, #28
 80071d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080071d8 <icmp_input>:
{
 80071d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  iphdr_in = ip4_current_header();
 80071dc:	4b3e      	ldr	r3, [pc, #248]	; (80072d8 <icmp_input+0x100>)
{
 80071de:	4604      	mov	r4, r0
 80071e0:	4688      	mov	r8, r1
  iphdr_in = ip4_current_header();
 80071e2:	f8d3 a008 	ldr.w	sl, [r3, #8]
 80071e6:	461f      	mov	r7, r3
  hlen = IPH_HL(iphdr_in) * 4;
 80071e8:	f89a 5000 	ldrb.w	r5, [sl]
 80071ec:	f005 050f 	and.w	r5, r5, #15
 80071f0:	00ad      	lsls	r5, r5, #2
  if (hlen < IP_HLEN) {
 80071f2:	2d13      	cmp	r5, #19
 80071f4:	d92c      	bls.n	8007250 <icmp_input+0x78>
  if (p->len < sizeof(u16_t)*2) {
 80071f6:	8942      	ldrh	r2, [r0, #10]
 80071f8:	2a03      	cmp	r2, #3
 80071fa:	d929      	bls.n	8007250 <icmp_input+0x78>
  type = *((u8_t *)p->payload);
 80071fc:	6842      	ldr	r2, [r0, #4]
  switch (type) {
 80071fe:	7812      	ldrb	r2, [r2, #0]
 8007200:	2a08      	cmp	r2, #8
 8007202:	d125      	bne.n	8007250 <icmp_input+0x78>
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8007204:	6958      	ldr	r0, [r3, #20]
 8007206:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 800720a:	2ae0      	cmp	r2, #224	; 0xe0
 800720c:	d020      	beq.n	8007250 <icmp_input+0x78>
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800720e:	6819      	ldr	r1, [r3, #0]
 8007210:	f000 f9d5 	bl	80075be <ip4_addr_isbroadcast_u32>
 8007214:	4606      	mov	r6, r0
 8007216:	b9d8      	cbnz	r0, 8007250 <icmp_input+0x78>
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8007218:	8923      	ldrh	r3, [r4, #8]
 800721a:	2b07      	cmp	r3, #7
 800721c:	d918      	bls.n	8007250 <icmp_input+0x78>
    if (pbuf_header(p, (hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800721e:	f105 010e 	add.w	r1, r5, #14
 8007222:	4620      	mov	r0, r4
  hlen = IPH_HL(iphdr_in) * 4;
 8007224:	fa0f f985 	sxth.w	r9, r5
    if (pbuf_header(p, (hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8007228:	f000 ff67 	bl	80080fa <pbuf_header>
 800722c:	2800      	cmp	r0, #0
 800722e:	d049      	beq.n	80072c4 <icmp_input+0xec>
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 8007230:	8921      	ldrh	r1, [r4, #8]
 8007232:	4632      	mov	r2, r6
 8007234:	2002      	movs	r0, #2
 8007236:	4429      	add	r1, r5
 8007238:	b289      	uxth	r1, r1
 800723a:	f000 ff9c 	bl	8008176 <pbuf_alloc>
      if (r == NULL) {
 800723e:	4606      	mov	r6, r0
 8007240:	b130      	cbz	r0, 8007250 <icmp_input+0x78>
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8007242:	8942      	ldrh	r2, [r0, #10]
 8007244:	f105 0308 	add.w	r3, r5, #8
 8007248:	429a      	cmp	r2, r3
 800724a:	d207      	bcs.n	800725c <icmp_input+0x84>
        pbuf_free(r);
 800724c:	f000 ff63 	bl	8008116 <pbuf_free>
  pbuf_free(p);
 8007250:	4620      	mov	r0, r4
}
 8007252:	b004      	add	sp, #16
 8007254:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  pbuf_free(p);
 8007258:	f000 bf5d 	b.w	8008116 <pbuf_free>
      MEMCPY(r->payload, iphdr_in, hlen);
 800725c:	4651      	mov	r1, sl
 800725e:	462a      	mov	r2, r5
 8007260:	6840      	ldr	r0, [r0, #4]
 8007262:	f004 fc82 	bl	800bb6a <memcpy>
      if (pbuf_header(r, -hlen)) {
 8007266:	4269      	negs	r1, r5
 8007268:	4630      	mov	r0, r6
 800726a:	f000 ff46 	bl	80080fa <pbuf_header>
 800726e:	b108      	cbz	r0, 8007274 <icmp_input+0x9c>
        pbuf_free(r);
 8007270:	4630      	mov	r0, r6
 8007272:	e7eb      	b.n	800724c <icmp_input+0x74>
      if (pbuf_copy(r, p) != ERR_OK) {
 8007274:	4621      	mov	r1, r4
 8007276:	4630      	mov	r0, r6
 8007278:	f001 f859 	bl	800832e <pbuf_copy>
 800727c:	2800      	cmp	r0, #0
 800727e:	d1f7      	bne.n	8007270 <icmp_input+0x98>
      pbuf_free(p);
 8007280:	4620      	mov	r0, r4
 8007282:	4634      	mov	r4, r6
 8007284:	f000 ff47 	bl	8008116 <pbuf_free>
    if (pbuf_header(p, hlen)) {
 8007288:	4649      	mov	r1, r9
 800728a:	4620      	mov	r0, r4
    iecho = (struct icmp_echo_hdr *)p->payload;
 800728c:	6865      	ldr	r5, [r4, #4]
    if (pbuf_header(p, hlen)) {
 800728e:	f000 ff34 	bl	80080fa <pbuf_header>
 8007292:	4602      	mov	r2, r0
 8007294:	2800      	cmp	r0, #0
 8007296:	d1db      	bne.n	8007250 <icmp_input+0x78>
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 8007298:	6861      	ldr	r1, [r4, #4]
      ip4_addr_copy(iphdr->src, *src);
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	60cb      	str	r3, [r1, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	610b      	str	r3, [r1, #16]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 80072a2:	23ff      	movs	r3, #255	; 0xff
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 80072a4:	7028      	strb	r0, [r5, #0]
      iecho->chksum = 0;
 80072a6:	70a8      	strb	r0, [r5, #2]
 80072a8:	70e8      	strb	r0, [r5, #3]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 80072aa:	720b      	strb	r3, [r1, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 80072ac:	7288      	strb	r0, [r1, #10]
 80072ae:	72c8      	strb	r0, [r1, #11]
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80072b0:	2101      	movs	r1, #1
 80072b2:	9000      	str	r0, [sp, #0]
 80072b4:	4620      	mov	r0, r4
 80072b6:	9101      	str	r1, [sp, #4]
 80072b8:	f8cd 8008 	str.w	r8, [sp, #8]
 80072bc:	4907      	ldr	r1, [pc, #28]	; (80072dc <icmp_input+0x104>)
 80072be:	f000 f96d 	bl	800759c <ip4_output_if>
 80072c2:	e7c5      	b.n	8007250 <icmp_input+0x78>
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 80072c4:	f5c5 417f 	rsb	r1, r5, #65280	; 0xff00
 80072c8:	4620      	mov	r0, r4
 80072ca:	31f2      	adds	r1, #242	; 0xf2
 80072cc:	b209      	sxth	r1, r1
 80072ce:	f000 ff14 	bl	80080fa <pbuf_header>
 80072d2:	2800      	cmp	r0, #0
 80072d4:	d1bc      	bne.n	8007250 <icmp_input+0x78>
 80072d6:	e7d7      	b.n	8007288 <icmp_input+0xb0>
 80072d8:	20003fcc 	.word	0x20003fcc
 80072dc:	20003fe0 	.word	0x20003fe0

080072e0 <icmp_dest_unreach>:
  icmp_send_response(p, ICMP_DUR, t);
 80072e0:	460a      	mov	r2, r1
 80072e2:	3004      	adds	r0, #4
 80072e4:	2103      	movs	r1, #3
 80072e6:	f7ff bf3d 	b.w	8007164 <icmp_send_response.isra.0>

080072ea <icmp_time_exceeded>:
  icmp_send_response(p, ICMP_TE, t);
 80072ea:	460a      	mov	r2, r1
 80072ec:	3004      	adds	r0, #4
 80072ee:	210b      	movs	r1, #11
 80072f0:	f7ff bf38 	b.w	8007164 <icmp_send_response.isra.0>

080072f4 <ip4_route>:
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 80072f4:	4b13      	ldr	r3, [pc, #76]	; (8007344 <ip4_route+0x50>)
{
 80072f6:	b530      	push	{r4, r5, lr}
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	b96b      	cbnz	r3, 8007318 <ip4_route+0x24>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80072fc:	4a12      	ldr	r2, [pc, #72]	; (8007348 <ip4_route+0x54>)
 80072fe:	6812      	ldr	r2, [r2, #0]
 8007300:	b1ea      	cbz	r2, 800733e <ip4_route+0x4a>
 8007302:	f892 102f 	ldrb.w	r1, [r2, #47]	; 0x2f
 8007306:	f001 0105 	and.w	r1, r1, #5
 800730a:	2905      	cmp	r1, #5
 800730c:	d117      	bne.n	800733e <ip4_route+0x4a>
 800730e:	6851      	ldr	r1, [r2, #4]
 8007310:	2900      	cmp	r1, #0
 8007312:	bf18      	it	ne
 8007314:	4613      	movne	r3, r2
 8007316:	e012      	b.n	800733e <ip4_route+0x4a>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8007318:	f893 402f 	ldrb.w	r4, [r3, #47]	; 0x2f
 800731c:	f004 0205 	and.w	r2, r4, #5
 8007320:	2a05      	cmp	r2, #5
 8007322:	d1e9      	bne.n	80072f8 <ip4_route+0x4>
 8007324:	685a      	ldr	r2, [r3, #4]
 8007326:	2a00      	cmp	r2, #0
 8007328:	d0e6      	beq.n	80072f8 <ip4_route+0x4>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800732a:	6801      	ldr	r1, [r0, #0]
 800732c:	689d      	ldr	r5, [r3, #8]
 800732e:	404a      	eors	r2, r1
 8007330:	422a      	tst	r2, r5
 8007332:	d004      	beq.n	800733e <ip4_route+0x4a>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8007334:	07a2      	lsls	r2, r4, #30
 8007336:	d4df      	bmi.n	80072f8 <ip4_route+0x4>
 8007338:	68da      	ldr	r2, [r3, #12]
 800733a:	4291      	cmp	r1, r2
 800733c:	d1dc      	bne.n	80072f8 <ip4_route+0x4>
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
  }

  return netif_default;
}
 800733e:	4618      	mov	r0, r3
 8007340:	bd30      	pop	{r4, r5, pc}
 8007342:	bf00      	nop
 8007344:	20007714 	.word	0x20007714
 8007348:	20007718 	.word	0x20007718

0800734c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800734c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8007350:	6847      	ldr	r7, [r0, #4]
{
 8007352:	4605      	mov	r5, r0
 8007354:	4688      	mov	r8, r1
  if (IPH_V(iphdr) != 4) {
 8007356:	f897 9000 	ldrb.w	r9, [r7]
 800735a:	ea4f 1319 	mov.w	r3, r9, lsr #4
 800735e:	2b04      	cmp	r3, #4
 8007360:	d005      	beq.n	800736e <ip4_input+0x22>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8007362:	4628      	mov	r0, r5
 8007364:	f000 fed7 	bl	8008116 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 8007368:	2000      	movs	r0, #0
 800736a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800736e:	8878      	ldrh	r0, [r7, #2]
  iphdr_hlen = IPH_HL(iphdr);
 8007370:	f009 090f 	and.w	r9, r9, #15
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8007374:	f7fe fc92 	bl	8005c9c <lwip_htons>
  if (iphdr_len < p->tot_len) {
 8007378:	892b      	ldrh	r3, [r5, #8]
  iphdr_hlen *= 4;
 800737a:	ea4f 0989 	mov.w	r9, r9, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800737e:	4604      	mov	r4, r0
  if (iphdr_len < p->tot_len) {
 8007380:	4283      	cmp	r3, r0
 8007382:	d903      	bls.n	800738c <ip4_input+0x40>
    pbuf_realloc(p, iphdr_len);
 8007384:	4601      	mov	r1, r0
 8007386:	4628      	mov	r0, r5
 8007388:	f000 ff7d 	bl	8008286 <pbuf_realloc>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800738c:	896b      	ldrh	r3, [r5, #10]
 800738e:	454b      	cmp	r3, r9
 8007390:	d3e7      	bcc.n	8007362 <ip4_input+0x16>
 8007392:	892b      	ldrh	r3, [r5, #8]
 8007394:	42a3      	cmp	r3, r4
 8007396:	d3e4      	bcc.n	8007362 <ip4_input+0x16>
 8007398:	f1b9 0f13 	cmp.w	r9, #19
 800739c:	d9e1      	bls.n	8007362 <ip4_input+0x16>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	4c4e      	ldr	r4, [pc, #312]	; (80074dc <ip4_input+0x190>)
 80073a2:	6163      	str	r3, [r4, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80073a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80073a8:	68fa      	ldr	r2, [r7, #12]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80073aa:	2be0      	cmp	r3, #224	; 0xe0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80073ac:	6122      	str	r2, [r4, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80073ae:	d113      	bne.n	80073d8 <ip4_input+0x8c>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80073b0:	f898 302f 	ldrb.w	r3, [r8, #47]	; 0x2f
 80073b4:	07da      	lsls	r2, r3, #31
 80073b6:	d504      	bpl.n	80073c2 <ip4_input+0x76>
 80073b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	f040 808a 	bne.w	80074d6 <ip4_input+0x18a>
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 80073c2:	7a7b      	ldrb	r3, [r7, #9]
 80073c4:	2b11      	cmp	r3, #17
 80073c6:	d105      	bne.n	80073d4 <ip4_input+0x88>
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 80073c8:	eb07 0309 	add.w	r3, r7, r9
 80073cc:	885b      	ldrh	r3, [r3, #2]
 80073ce:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 80073d2:	d056      	beq.n	8007482 <ip4_input+0x136>
 80073d4:	2600      	movs	r6, #0
 80073d6:	e018      	b.n	800740a <ip4_input+0xbe>
 80073d8:	4646      	mov	r6, r8
 80073da:	f04f 0a01 	mov.w	sl, #1
        netif = netif_list;
 80073de:	f8df b100 	ldr.w	fp, [pc, #256]	; 80074e0 <ip4_input+0x194>
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80073e2:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
 80073e6:	07db      	lsls	r3, r3, #31
 80073e8:	d404      	bmi.n	80073f4 <ip4_input+0xa8>
      if (first) {
 80073ea:	f1ba 0f00 	cmp.w	sl, #0
 80073ee:	d13e      	bne.n	800746e <ip4_input+0x122>
        netif = netif->next;
 80073f0:	6836      	ldr	r6, [r6, #0]
 80073f2:	e03e      	b.n	8007472 <ip4_input+0x126>
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80073f4:	6873      	ldr	r3, [r6, #4]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d0f7      	beq.n	80073ea <ip4_input+0x9e>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80073fa:	6960      	ldr	r0, [r4, #20]
 80073fc:	4283      	cmp	r3, r0
 80073fe:	d004      	beq.n	800740a <ip4_input+0xbe>
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8007400:	4631      	mov	r1, r6
 8007402:	f000 f8dc 	bl	80075be <ip4_addr_isbroadcast_u32>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8007406:	2800      	cmp	r0, #0
 8007408:	d0ef      	beq.n	80073ea <ip4_input+0x9e>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 800740a:	6920      	ldr	r0, [r4, #16]
 800740c:	b148      	cbz	r0, 8007422 <ip4_input+0xd6>
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800740e:	4641      	mov	r1, r8
 8007410:	f000 f8d5 	bl	80075be <ip4_addr_isbroadcast_u32>
 8007414:	2800      	cmp	r0, #0
 8007416:	d1a4      	bne.n	8007362 <ip4_input+0x16>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8007418:	6923      	ldr	r3, [r4, #16]
 800741a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800741e:	2be0      	cmp	r3, #224	; 0xe0
 8007420:	d09f      	beq.n	8007362 <ip4_input+0x16>
  if (netif == NULL) {
 8007422:	2e00      	cmp	r6, #0
 8007424:	d09d      	beq.n	8007362 <ip4_input+0x16>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8007426:	88fb      	ldrh	r3, [r7, #6]
 8007428:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800742c:	b133      	cbz	r3, 800743c <ip4_input+0xf0>
    p = ip4_reass(p);
 800742e:	4628      	mov	r0, r5
 8007430:	f000 f980 	bl	8007734 <ip4_reass>
    if (p == NULL) {
 8007434:	4605      	mov	r5, r0
 8007436:	2800      	cmp	r0, #0
 8007438:	d096      	beq.n	8007368 <ip4_input+0x1c>
    iphdr = (struct ip_hdr *)p->payload;
 800743a:	6847      	ldr	r7, [r0, #4]
  ip_data.current_ip4_header = iphdr;
 800743c:	60a7      	str	r7, [r4, #8]
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800743e:	f1c9 0100 	rsb	r1, r9, #0
 8007442:	4628      	mov	r0, r5
  ip_data.current_input_netif = inp;
 8007444:	e884 0140 	stmia.w	r4, {r6, r8}
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8007448:	783b      	ldrb	r3, [r7, #0]
 800744a:	f003 030f 	and.w	r3, r3, #15
 800744e:	009b      	lsls	r3, r3, #2
 8007450:	81a3      	strh	r3, [r4, #12]
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8007452:	f000 fe52 	bl	80080fa <pbuf_header>
    switch (IPH_PROTO(iphdr)) {
 8007456:	7a7b      	ldrb	r3, [r7, #9]
 8007458:	2b06      	cmp	r3, #6
 800745a:	d020      	beq.n	800749e <ip4_input+0x152>
 800745c:	2b11      	cmp	r3, #17
 800745e:	d012      	beq.n	8007486 <ip4_input+0x13a>
 8007460:	2b01      	cmp	r3, #1
 8007462:	d121      	bne.n	80074a8 <ip4_input+0x15c>
      icmp_input(p, inp);
 8007464:	4641      	mov	r1, r8
 8007466:	4628      	mov	r0, r5
 8007468:	f7ff feb6 	bl	80071d8 <icmp_input>
      break;
 800746c:	e00f      	b.n	800748e <ip4_input+0x142>
        netif = netif_list;
 800746e:	f8db 6000 	ldr.w	r6, [fp]
      if (netif == inp) {
 8007472:	4546      	cmp	r6, r8
 8007474:	f04f 0a00 	mov.w	sl, #0
        netif = netif->next;
 8007478:	bf08      	it	eq
 800747a:	6836      	ldreq	r6, [r6, #0]
    } while (netif != NULL);
 800747c:	2e00      	cmp	r6, #0
 800747e:	d1b0      	bne.n	80073e2 <ip4_input+0x96>
 8007480:	e79f      	b.n	80073c2 <ip4_input+0x76>
 8007482:	4646      	mov	r6, r8
 8007484:	e7cd      	b.n	8007422 <ip4_input+0xd6>
      udp_input(p, inp);
 8007486:	4641      	mov	r1, r8
 8007488:	4628      	mov	r0, r5
 800748a:	f003 fa0f 	bl	800a8ac <udp_input>
  ip_data.current_netif = NULL;
 800748e:	2300      	movs	r3, #0
 8007490:	6023      	str	r3, [r4, #0]
  ip_data.current_input_netif = NULL;
 8007492:	6063      	str	r3, [r4, #4]
  ip_data.current_ip4_header = NULL;
 8007494:	60a3      	str	r3, [r4, #8]
  ip_data.current_ip_header_tot_len = 0;
 8007496:	81a3      	strh	r3, [r4, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8007498:	6123      	str	r3, [r4, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800749a:	6163      	str	r3, [r4, #20]
  return ERR_OK;
 800749c:	e764      	b.n	8007368 <ip4_input+0x1c>
      tcp_input(p, inp);
 800749e:	4641      	mov	r1, r8
 80074a0:	4628      	mov	r0, r5
 80074a2:	f002 f90f 	bl	80096c4 <tcp_input>
      break;
 80074a6:	e7f2      	b.n	800748e <ip4_input+0x142>
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80074a8:	4631      	mov	r1, r6
 80074aa:	6960      	ldr	r0, [r4, #20]
 80074ac:	f000 f887 	bl	80075be <ip4_addr_isbroadcast_u32>
 80074b0:	b968      	cbnz	r0, 80074ce <ip4_input+0x182>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80074b2:	6963      	ldr	r3, [r4, #20]
 80074b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80074b8:	2be0      	cmp	r3, #224	; 0xe0
 80074ba:	d008      	beq.n	80074ce <ip4_input+0x182>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 80074bc:	4649      	mov	r1, r9
 80074be:	4628      	mov	r0, r5
 80074c0:	f000 fe22 	bl	8008108 <pbuf_header_force>
        p->payload = iphdr;
 80074c4:	606f      	str	r7, [r5, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80074c6:	2102      	movs	r1, #2
 80074c8:	4628      	mov	r0, r5
 80074ca:	f7ff ff09 	bl	80072e0 <icmp_dest_unreach>
      pbuf_free(p);
 80074ce:	4628      	mov	r0, r5
 80074d0:	f000 fe21 	bl	8008116 <pbuf_free>
 80074d4:	e7db      	b.n	800748e <ip4_input+0x142>
 80074d6:	4646      	mov	r6, r8
 80074d8:	e797      	b.n	800740a <ip4_input+0xbe>
 80074da:	bf00      	nop
 80074dc:	20003fcc 	.word	0x20003fcc
 80074e0:	20007714 	.word	0x20007714

080074e4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 80074e4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80074e8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80074ea:	4606      	mov	r6, r0
 80074ec:	4689      	mov	r9, r1
 80074ee:	469a      	mov	sl, r3
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80074f0:	4615      	mov	r5, r2
 80074f2:	2a00      	cmp	r2, #0
 80074f4:	d03f      	beq.n	8007576 <ip4_output_if_src+0x92>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 80074f6:	2114      	movs	r1, #20
 80074f8:	f000 fdff 	bl	80080fa <pbuf_header>
 80074fc:	4680      	mov	r8, r0
 80074fe:	2800      	cmp	r0, #0
 8007500:	d145      	bne.n	800758e <ip4_output_if_src+0xaa>
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
 8007502:	6874      	ldr	r4, [r6, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
    IPH_PROTO_SET(iphdr, proto);
 8007504:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    IPH_TTL_SET(iphdr, ttl);
 8007508:	f884 a008 	strb.w	sl, [r4, #8]
    IPH_PROTO_SET(iphdr, proto);
 800750c:	7263      	strb	r3, [r4, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += LWIP_MAKE_U16(proto, ttl);
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800750e:	682b      	ldr	r3, [r5, #0]
 8007510:	6123      	str	r3, [r4, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8007512:	2345      	movs	r3, #69	; 0x45
 8007514:	7023      	strb	r3, [r4, #0]
    IPH_TOS_SET(iphdr, tos);
 8007516:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800751a:	7063      	strb	r3, [r4, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += LWIP_MAKE_U16(tos, iphdr->_v_hl);
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800751c:	8930      	ldrh	r0, [r6, #8]
 800751e:	f7fe fbbd 	bl	8005c9c <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8007522:	f884 8006 	strb.w	r8, [r4, #6]
 8007526:	f884 8007 	strb.w	r8, [r4, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800752a:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8007598 <ip4_output_if_src+0xb4>
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800752e:	8060      	strh	r0, [r4, #2]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8007530:	f8b8 0000 	ldrh.w	r0, [r8]
 8007534:	f7fe fbb2 	bl	8005c9c <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8007538:	f8b8 3000 	ldrh.w	r3, [r8]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800753c:	80a0      	strh	r0, [r4, #4]
    ++ip_id;
 800753e:	3301      	adds	r3, #1
 8007540:	f8a8 3000 	strh.w	r3, [r8]

    if (src == NULL) {
 8007544:	f1b9 0f00 	cmp.w	r9, #0
 8007548:	d112      	bne.n	8007570 <ip4_output_if_src+0x8c>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800754a:	4b12      	ldr	r3, [pc, #72]	; (8007594 <ip4_output_if_src+0xb0>)
 800754c:	681b      	ldr	r3, [r3, #0]
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800754e:	60e3      	str	r3, [r4, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8007550:	2300      	movs	r3, #0
 8007552:	72a3      	strb	r3, [r4, #10]
 8007554:	72e3      	strb	r3, [r4, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8007556:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007558:	b19b      	cbz	r3, 8007582 <ip4_output_if_src+0x9e>
 800755a:	8932      	ldrh	r2, [r6, #8]
 800755c:	429a      	cmp	r2, r3
 800755e:	d910      	bls.n	8007582 <ip4_output_if_src+0x9e>
    return ip4_frag(p, netif, dest);
 8007560:	462a      	mov	r2, r5
 8007562:	4639      	mov	r1, r7
 8007564:	4630      	mov	r0, r6
 8007566:	f000 fa49 	bl	80079fc <ip4_frag>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
}
 800756a:	b002      	add	sp, #8
 800756c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ip4_addr_copy(iphdr->src, *src);
 8007570:	f8d9 3000 	ldr.w	r3, [r9]
 8007574:	e7eb      	b.n	800754e <ip4_output_if_src+0x6a>
    ip4_addr_copy(dest_addr, iphdr->dest);
 8007576:	6843      	ldr	r3, [r0, #4]
 8007578:	ad02      	add	r5, sp, #8
 800757a:	691b      	ldr	r3, [r3, #16]
 800757c:	f845 3d04 	str.w	r3, [r5, #-4]!
 8007580:	e7e9      	b.n	8007556 <ip4_output_if_src+0x72>
  return netif->output(netif, p, dest);
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	462a      	mov	r2, r5
 8007586:	4631      	mov	r1, r6
 8007588:	4638      	mov	r0, r7
 800758a:	4798      	blx	r3
 800758c:	e7ed      	b.n	800756a <ip4_output_if_src+0x86>
      return ERR_BUF;
 800758e:	f06f 0001 	mvn.w	r0, #1
 8007592:	e7ea      	b.n	800756a <ip4_output_if_src+0x86>
 8007594:	0800ca84 	.word	0x0800ca84
 8007598:	20003f16 	.word	0x20003f16

0800759c <ip4_output_if>:
{
 800759c:	b4f0      	push	{r4, r5, r6, r7}
 800759e:	9c06      	ldr	r4, [sp, #24]
 80075a0:	f89d 5010 	ldrb.w	r5, [sp, #16]
 80075a4:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80075a8:	b11a      	cbz	r2, 80075b2 <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 80075aa:	b109      	cbz	r1, 80075b0 <ip4_output_if+0x14>
 80075ac:	680f      	ldr	r7, [r1, #0]
 80075ae:	b907      	cbnz	r7, 80075b2 <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 80075b0:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80075b2:	9406      	str	r4, [sp, #24]
 80075b4:	9605      	str	r6, [sp, #20]
 80075b6:	9504      	str	r5, [sp, #16]
}
 80075b8:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80075ba:	f7ff bf93 	b.w	80074e4 <ip4_output_if_src>

080075be <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80075be:	1e43      	subs	r3, r0, #1
 80075c0:	3303      	adds	r3, #3
 80075c2:	d811      	bhi.n	80075e8 <ip4_addr_isbroadcast_u32+0x2a>
      (addr == IPADDR_ANY)) {
    return 1;
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80075c4:	f891 302f 	ldrb.w	r3, [r1, #47]	; 0x2f
 80075c8:	f013 0302 	ands.w	r3, r3, #2
 80075cc:	d00e      	beq.n	80075ec <ip4_addr_isbroadcast_u32+0x2e>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80075ce:	684a      	ldr	r2, [r1, #4]
 80075d0:	4290      	cmp	r0, r2
 80075d2:	d00b      	beq.n	80075ec <ip4_addr_isbroadcast_u32+0x2e>
    return 0;
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80075d4:	688b      	ldr	r3, [r1, #8]
 80075d6:	4042      	eors	r2, r0
 80075d8:	421a      	tst	r2, r3
 80075da:	d107      	bne.n	80075ec <ip4_addr_isbroadcast_u32+0x2e>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80075dc:	43db      	mvns	r3, r3
 80075de:	4383      	bics	r3, r0
    return 1;
 80075e0:	bf0c      	ite	eq
 80075e2:	2001      	moveq	r0, #1
 80075e4:	2000      	movne	r0, #0
 80075e6:	4770      	bx	lr
 80075e8:	2001      	movs	r0, #1
 80075ea:	4770      	bx	lr
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 80075ec:	2000      	movs	r0, #0
  }
}
 80075ee:	4770      	bx	lr

080075f0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80075f0:	b510      	push	{r4, lr}
 80075f2:	4604      	mov	r4, r0
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  if (pcr->original != NULL) {
 80075f4:	6940      	ldr	r0, [r0, #20]
 80075f6:	b108      	cbz	r0, 80075fc <ipfrag_free_pbuf_custom+0xc>
    pbuf_free(pcr->original);
 80075f8:	f000 fd8d 	bl	8008116 <pbuf_free>
  memp_free(MEMP_FRAG_PBUF, p);
 80075fc:	4621      	mov	r1, r4
 80075fe:	2005      	movs	r0, #5
  }
  ip_frag_free_pbuf_custom_ref(pcr);
}
 8007600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 8007604:	f000 bc3e 	b.w	8007e84 <memp_free>

08007608 <ip_reass_free_complete_datagram>:
{
 8007608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800760c:	6846      	ldr	r6, [r0, #4]
{
 800760e:	4604      	mov	r4, r0
 8007610:	460f      	mov	r7, r1
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8007612:	6873      	ldr	r3, [r6, #4]
  if (iprh->start == 0) {
 8007614:	889a      	ldrh	r2, [r3, #4]
 8007616:	bb52      	cbnz	r2, 800766e <ip_reass_free_complete_datagram+0x66>
    ipr->p = iprh->next_pbuf;
 8007618:	681a      	ldr	r2, [r3, #0]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800761a:	f100 011c 	add.w	r1, r0, #28
    ipr->p = iprh->next_pbuf;
 800761e:	6042      	str	r2, [r0, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8007620:	f100 0208 	add.w	r2, r0, #8
 8007624:	f852 0b04 	ldr.w	r0, [r2], #4
 8007628:	428a      	cmp	r2, r1
 800762a:	f843 0b04 	str.w	r0, [r3], #4
 800762e:	d1f9      	bne.n	8007624 <ip_reass_free_complete_datagram+0x1c>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8007630:	2101      	movs	r1, #1
 8007632:	4630      	mov	r0, r6
 8007634:	f7ff fe59 	bl	80072ea <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8007638:	4630      	mov	r0, r6
 800763a:	f000 fe4d 	bl	80082d8 <pbuf_clen>
 800763e:	4605      	mov	r5, r0
    pbuf_free(p);
 8007640:	4630      	mov	r0, r6
 8007642:	f000 fd68 	bl	8008116 <pbuf_free>
  p = ipr->p;
 8007646:	6866      	ldr	r6, [r4, #4]
  while (p != NULL) {
 8007648:	b99e      	cbnz	r6, 8007672 <ip_reass_free_complete_datagram+0x6a>
  if (reassdatagrams == ipr) {
 800764a:	4a10      	ldr	r2, [pc, #64]	; (800768c <ip_reass_free_complete_datagram+0x84>)
  memp_free(MEMP_REASSDATA, ipr);
 800764c:	4621      	mov	r1, r4
 800764e:	2004      	movs	r0, #4
  if (reassdatagrams == ipr) {
 8007650:	6813      	ldr	r3, [r2, #0]
 8007652:	429c      	cmp	r4, r3
 8007654:	6823      	ldr	r3, [r4, #0]
    prev->next = ipr->next;
 8007656:	bf14      	ite	ne
 8007658:	603b      	strne	r3, [r7, #0]
    reassdatagrams = ipr->next;
 800765a:	6013      	streq	r3, [r2, #0]
  memp_free(MEMP_REASSDATA, ipr);
 800765c:	f000 fc12 	bl	8007e84 <memp_free>
  ip_reass_pbufcount -= pbufs_freed;
 8007660:	4a0b      	ldr	r2, [pc, #44]	; (8007690 <ip_reass_free_complete_datagram+0x88>)
}
 8007662:	4628      	mov	r0, r5
  ip_reass_pbufcount -= pbufs_freed;
 8007664:	8813      	ldrh	r3, [r2, #0]
 8007666:	1b5b      	subs	r3, r3, r5
 8007668:	8013      	strh	r3, [r2, #0]
}
 800766a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  u16_t pbufs_freed = 0;
 800766e:	2500      	movs	r5, #0
 8007670:	e7e9      	b.n	8007646 <ip_reass_free_complete_datagram+0x3e>
    iprh = (struct ip_reass_helper *)p->payload;
 8007672:	6873      	ldr	r3, [r6, #4]
    clen = pbuf_clen(pcur);
 8007674:	4630      	mov	r0, r6
    p = iprh->next_pbuf;
 8007676:	f8d3 8000 	ldr.w	r8, [r3]
    clen = pbuf_clen(pcur);
 800767a:	f000 fe2d 	bl	80082d8 <pbuf_clen>
    pbufs_freed += clen;
 800767e:	4405      	add	r5, r0
    pbuf_free(pcur);
 8007680:	4630      	mov	r0, r6
 8007682:	f000 fd48 	bl	8008116 <pbuf_free>
    p = iprh->next_pbuf;
 8007686:	4646      	mov	r6, r8
    pbufs_freed += clen;
 8007688:	b2ad      	uxth	r5, r5
 800768a:	e7dd      	b.n	8007648 <ip_reass_free_complete_datagram+0x40>
 800768c:	20003f1c 	.word	0x20003f1c
 8007690:	20003f18 	.word	0x20003f18

08007694 <ip_reass_remove_oldest_datagram>:
{
 8007694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007698:	4606      	mov	r6, r0
 800769a:	460f      	mov	r7, r1
  int pbufs_freed = 0, pbufs_freed_current;
 800769c:	2500      	movs	r5, #0
    r = reassdatagrams;
 800769e:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8007708 <ip_reass_remove_oldest_datagram+0x74>
    other_datagrams = 0;
 80076a2:	2400      	movs	r4, #0
    r = reassdatagrams;
 80076a4:	f8d8 3000 	ldr.w	r3, [r8]
    oldest_prev = NULL;
 80076a8:	4621      	mov	r1, r4
    prev = NULL;
 80076aa:	46a6      	mov	lr, r4
    oldest = NULL;
 80076ac:	4620      	mov	r0, r4
    while (r != NULL) {
 80076ae:	b953      	cbnz	r3, 80076c6 <ip_reass_remove_oldest_datagram+0x32>
    if (oldest != NULL) {
 80076b0:	b110      	cbz	r0, 80076b8 <ip_reass_remove_oldest_datagram+0x24>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80076b2:	f7ff ffa9 	bl	8007608 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 80076b6:	4405      	add	r5, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80076b8:	42bd      	cmp	r5, r7
 80076ba:	da01      	bge.n	80076c0 <ip_reass_remove_oldest_datagram+0x2c>
 80076bc:	2c01      	cmp	r4, #1
 80076be:	dcf0      	bgt.n	80076a2 <ip_reass_remove_oldest_datagram+0xe>
}
 80076c0:	4628      	mov	r0, r5
 80076c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80076c6:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 80076ca:	695a      	ldr	r2, [r3, #20]
 80076cc:	4562      	cmp	r2, ip
 80076ce:	d109      	bne.n	80076e4 <ip_reass_remove_oldest_datagram+0x50>
 80076d0:	f8d6 c010 	ldr.w	ip, [r6, #16]
 80076d4:	699a      	ldr	r2, [r3, #24]
 80076d6:	4562      	cmp	r2, ip
 80076d8:	d104      	bne.n	80076e4 <ip_reass_remove_oldest_datagram+0x50>
 80076da:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
 80076de:	88b2      	ldrh	r2, [r6, #4]
 80076e0:	4594      	cmp	ip, r2
 80076e2:	d008      	beq.n	80076f6 <ip_reass_remove_oldest_datagram+0x62>
        other_datagrams++;
 80076e4:	3401      	adds	r4, #1
        if (oldest == NULL) {
 80076e6:	b160      	cbz	r0, 8007702 <ip_reass_remove_oldest_datagram+0x6e>
        } else if (r->timer <= oldest->timer) {
 80076e8:	7fc2      	ldrb	r2, [r0, #31]
 80076ea:	f893 c01f 	ldrb.w	ip, [r3, #31]
          oldest_prev = prev;
 80076ee:	4594      	cmp	ip, r2
 80076f0:	bf9c      	itt	ls
 80076f2:	4671      	movls	r1, lr
 80076f4:	4618      	movls	r0, r3
      if (r->next != NULL) {
 80076f6:	681a      	ldr	r2, [r3, #0]
 80076f8:	2a00      	cmp	r2, #0
 80076fa:	bf18      	it	ne
 80076fc:	469e      	movne	lr, r3
 80076fe:	4613      	mov	r3, r2
 8007700:	e7d5      	b.n	80076ae <ip_reass_remove_oldest_datagram+0x1a>
          oldest_prev = prev;
 8007702:	4671      	mov	r1, lr
 8007704:	4618      	mov	r0, r3
 8007706:	e7f6      	b.n	80076f6 <ip_reass_remove_oldest_datagram+0x62>
 8007708:	20003f1c 	.word	0x20003f1c

0800770c <ip_reass_tmr>:
{
 800770c:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 800770e:	4b08      	ldr	r3, [pc, #32]	; (8007730 <ip_reass_tmr+0x24>)
  struct ip_reassdata *r, *prev = NULL;
 8007710:	2400      	movs	r4, #0
  r = reassdatagrams;
 8007712:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 8007714:	b900      	cbnz	r0, 8007718 <ip_reass_tmr+0xc>
}
 8007716:	bd38      	pop	{r3, r4, r5, pc}
    if (r->timer > 0) {
 8007718:	7fc3      	ldrb	r3, [r0, #31]
 800771a:	6805      	ldr	r5, [r0, #0]
 800771c:	b123      	cbz	r3, 8007728 <ip_reass_tmr+0x1c>
      r->timer--;
 800771e:	3b01      	subs	r3, #1
 8007720:	4604      	mov	r4, r0
 8007722:	77c3      	strb	r3, [r0, #31]
      r = r->next;
 8007724:	4628      	mov	r0, r5
 8007726:	e7f5      	b.n	8007714 <ip_reass_tmr+0x8>
      ip_reass_free_complete_datagram(tmp, prev);
 8007728:	4621      	mov	r1, r4
 800772a:	f7ff ff6d 	bl	8007608 <ip_reass_free_complete_datagram>
 800772e:	e7f9      	b.n	8007724 <ip_reass_tmr+0x18>
 8007730:	20003f1c 	.word	0x20003f1c

08007734 <ip4_reass>:
{
 8007734:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr*)p->payload;
 8007738:	6844      	ldr	r4, [r0, #4]
{
 800773a:	4605      	mov	r5, r0
  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 800773c:	7823      	ldrb	r3, [r4, #0]
 800773e:	f003 030f 	and.w	r3, r3, #15
 8007742:	2b05      	cmp	r3, #5
 8007744:	f040 808b 	bne.w	800785e <ip4_reass+0x12a>
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8007748:	88e0      	ldrh	r0, [r4, #6]
 800774a:	f7fe faa7 	bl	8005c9c <lwip_htons>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800774e:	4ea9      	ldr	r6, [pc, #676]	; (80079f4 <ip4_reass+0x2c0>)
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8007750:	9001      	str	r0, [sp, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8007752:	8860      	ldrh	r0, [r4, #2]
 8007754:	f7fe faa2 	bl	8005c9c <lwip_htons>
 8007758:	4683      	mov	fp, r0
  clen = pbuf_clen(p);
 800775a:	4628      	mov	r0, r5
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800775c:	f894 8000 	ldrb.w	r8, [r4]
  clen = pbuf_clen(p);
 8007760:	f000 fdba 	bl	80082d8 <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8007764:	8833      	ldrh	r3, [r6, #0]
  clen = pbuf_clen(p);
 8007766:	4681      	mov	r9, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8007768:	4403      	add	r3, r0
 800776a:	2b0a      	cmp	r3, #10
 800776c:	dc6e      	bgt.n	800784c <ip4_reass+0x118>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800776e:	4fa2      	ldr	r7, [pc, #648]	; (80079f8 <ip4_reass+0x2c4>)
 8007770:	f8d7 a000 	ldr.w	sl, [r7]
 8007774:	f1ba 0f00 	cmp.w	sl, #0
 8007778:	d176      	bne.n	8007868 <ip4_reass+0x134>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800777a:	2004      	movs	r0, #4
 800777c:	f000 fb76 	bl	8007e6c <memp_malloc>
  if (ipr == NULL) {
 8007780:	4682      	mov	sl, r0
 8007782:	b958      	cbnz	r0, 800779c <ip4_reass+0x68>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8007784:	4649      	mov	r1, r9
 8007786:	4620      	mov	r0, r4
 8007788:	f7ff ff84 	bl	8007694 <ip_reass_remove_oldest_datagram>
 800778c:	4581      	cmp	r9, r0
 800778e:	dc66      	bgt.n	800785e <ip4_reass+0x12a>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8007790:	2004      	movs	r0, #4
 8007792:	f000 fb6b 	bl	8007e6c <memp_malloc>
    if (ipr == NULL)
 8007796:	4682      	mov	sl, r0
 8007798:	2800      	cmp	r0, #0
 800779a:	d060      	beq.n	800785e <ip4_reass+0x12a>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800779c:	2220      	movs	r2, #32
 800779e:	2100      	movs	r1, #0
 80077a0:	4650      	mov	r0, sl
 80077a2:	f004 f9ed 	bl	800bb80 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80077a6:	2203      	movs	r2, #3
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80077a8:	f10a 0108 	add.w	r1, sl, #8
 80077ac:	f104 0014 	add.w	r0, r4, #20
  ipr->timer = IP_REASS_MAXAGE;
 80077b0:	f88a 201f 	strb.w	r2, [sl, #31]
  ipr->next = reassdatagrams;
 80077b4:	683a      	ldr	r2, [r7, #0]
  reassdatagrams = ipr;
 80077b6:	f8c7 a000 	str.w	sl, [r7]
  ipr->next = reassdatagrams;
 80077ba:	f8ca 2000 	str.w	r2, [sl]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80077be:	4622      	mov	r2, r4
 80077c0:	f852 eb04 	ldr.w	lr, [r2], #4
 80077c4:	4282      	cmp	r2, r0
 80077c6:	f841 eb04 	str.w	lr, [r1], #4
 80077ca:	d1f9      	bne.n	80077c0 <ip4_reass+0x8c>
  ip_reass_pbufcount += clen;
 80077cc:	8832      	ldrh	r2, [r6, #0]
 80077ce:	4491      	add	r9, r2
 80077d0:	f8a6 9000 	strh.w	r9, [r6]
  if ((IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0) {
 80077d4:	88e2      	ldrh	r2, [r4, #6]
 80077d6:	0693      	lsls	r3, r2, #26
 80077d8:	d40e      	bmi.n	80077f8 <ip4_reass+0xc4>
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 80077da:	f008 080f 	and.w	r8, r8, #15
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80077de:	f89a 201e 	ldrb.w	r2, [sl, #30]
    ipr->datagram_len = offset + len;
 80077e2:	9b01      	ldr	r3, [sp, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 80077e4:	ebab 0b88 	sub.w	fp, fp, r8, lsl #2
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80077e8:	f042 0201 	orr.w	r2, r2, #1
    ipr->datagram_len = offset + len;
 80077ec:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80077f0:	f88a 201e 	strb.w	r2, [sl, #30]
    ipr->datagram_len = offset + len;
 80077f4:	f8aa 301c 	strh.w	r3, [sl, #28]
  fraghdr = (struct ip_hdr*)new_p->payload;
 80077f8:	f8d5 8004 	ldr.w	r8, [r5, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 80077fc:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 8007800:	f7fe fa4c 	bl	8005c9c <lwip_htons>
 8007804:	f898 4000 	ldrb.w	r4, [r8]
 8007808:	f004 040f 	and.w	r4, r4, #15
 800780c:	eba0 0484 	sub.w	r4, r0, r4, lsl #2
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8007810:	f8b8 0006 	ldrh.w	r0, [r8, #6]
 8007814:	f7fe fa42 	bl	8005c9c <lwip_htons>
 8007818:	f3c0 000c 	ubfx	r0, r0, #0, #13
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800781c:	b2a4      	uxth	r4, r4
  iprh = (struct ip_reass_helper*)new_p->payload;
 800781e:	6869      	ldr	r1, [r5, #4]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8007820:	00c0      	lsls	r0, r0, #3
  iprh->next_pbuf = NULL;
 8007822:	2200      	movs	r2, #0
  for (q = ipr->p; q != NULL;) {
 8007824:	f8da c004 	ldr.w	ip, [sl, #4]
  int valid = 1;
 8007828:	2301      	movs	r3, #1
  iprh->end = offset + len;
 800782a:	4404      	add	r4, r0
  iprh->next_pbuf = NULL;
 800782c:	700a      	strb	r2, [r1, #0]
 800782e:	704a      	strb	r2, [r1, #1]
  iprh->end = offset + len;
 8007830:	b2a4      	uxth	r4, r4
  iprh->next_pbuf = NULL;
 8007832:	708a      	strb	r2, [r1, #2]
 8007834:	70ca      	strb	r2, [r1, #3]
  iprh->start = offset;
 8007836:	8088      	strh	r0, [r1, #4]
  iprh->end = offset + len;
 8007838:	80cc      	strh	r4, [r1, #6]
  for (q = ipr->p; q != NULL;) {
 800783a:	f1bc 0f00 	cmp.w	ip, #0
 800783e:	d126      	bne.n	800788e <ip4_reass+0x15a>
    if (iprh_prev != NULL) {
 8007840:	2a00      	cmp	r2, #0
 8007842:	f040 8088 	bne.w	8007956 <ip4_reass+0x222>
      ipr->p = new_p;
 8007846:	f8ca 5004 	str.w	r5, [sl, #4]
 800784a:	e031      	b.n	80078b0 <ip4_reass+0x17c>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800784c:	4601      	mov	r1, r0
 800784e:	4620      	mov	r0, r4
 8007850:	f7ff ff20 	bl	8007694 <ip_reass_remove_oldest_datagram>
 8007854:	b118      	cbz	r0, 800785e <ip4_reass+0x12a>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8007856:	8833      	ldrh	r3, [r6, #0]
 8007858:	444b      	add	r3, r9
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800785a:	2b0a      	cmp	r3, #10
 800785c:	dd87      	ble.n	800776e <ip4_reass+0x3a>
  pbuf_free(p);
 800785e:	4628      	mov	r0, r5
 8007860:	f000 fc59 	bl	8008116 <pbuf_free>
  return NULL;
 8007864:	2400      	movs	r4, #0
 8007866:	e064      	b.n	8007932 <ip4_reass+0x1fe>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8007868:	68e2      	ldr	r2, [r4, #12]
 800786a:	f8da 1014 	ldr.w	r1, [sl, #20]
 800786e:	4291      	cmp	r1, r2
 8007870:	d10a      	bne.n	8007888 <ip4_reass+0x154>
 8007872:	6922      	ldr	r2, [r4, #16]
 8007874:	f8da 1018 	ldr.w	r1, [sl, #24]
 8007878:	4291      	cmp	r1, r2
 800787a:	d105      	bne.n	8007888 <ip4_reass+0x154>
 800787c:	f8ba 100c 	ldrh.w	r1, [sl, #12]
 8007880:	88a2      	ldrh	r2, [r4, #4]
 8007882:	4291      	cmp	r1, r2
 8007884:	f000 8095 	beq.w	80079b2 <ip4_reass+0x27e>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8007888:	f8da a000 	ldr.w	sl, [sl]
 800788c:	e772      	b.n	8007774 <ip4_reass+0x40>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 800788e:	f8dc 8004 	ldr.w	r8, [ip, #4]
    if (iprh->start < iprh_tmp->start) {
 8007892:	f8b8 9004 	ldrh.w	r9, [r8, #4]
 8007896:	4548      	cmp	r0, r9
 8007898:	d24f      	bcs.n	800793a <ip4_reass+0x206>
      iprh->next_pbuf = q;
 800789a:	f8c1 c000 	str.w	ip, [r1]
      if (iprh_prev != NULL) {
 800789e:	2a00      	cmp	r2, #0
 80078a0:	d0d1      	beq.n	8007846 <ip4_reass+0x112>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80078a2:	f8b2 c006 	ldrh.w	ip, [r2, #6]
 80078a6:	4584      	cmp	ip, r0
 80078a8:	d864      	bhi.n	8007974 <ip4_reass+0x240>
 80078aa:	454c      	cmp	r4, r9
 80078ac:	d862      	bhi.n	8007974 <ip4_reass+0x240>
        iprh_prev->next_pbuf = new_p;
 80078ae:	6015      	str	r5, [r2, #0]
  if ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0) {
 80078b0:	f89a 201e 	ldrb.w	r2, [sl, #30]
 80078b4:	f012 0401 	ands.w	r4, r2, #1
 80078b8:	d03b      	beq.n	8007932 <ip4_reass+0x1fe>
    if (valid) {
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d0d2      	beq.n	8007864 <ip4_reass+0x130>
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 80078be:	f8da 4004 	ldr.w	r4, [sl, #4]
 80078c2:	2c00      	cmp	r4, #0
 80078c4:	d035      	beq.n	8007932 <ip4_reass+0x1fe>
 80078c6:	6864      	ldr	r4, [r4, #4]
 80078c8:	88a2      	ldrh	r2, [r4, #4]
 80078ca:	2a00      	cmp	r2, #0
 80078cc:	d1ca      	bne.n	8007864 <ip4_reass+0x130>
        q = iprh->next_pbuf;
 80078ce:	680a      	ldr	r2, [r1, #0]
        while (q != NULL) {
 80078d0:	2a00      	cmp	r2, #0
 80078d2:	d146      	bne.n	8007962 <ip4_reass+0x22e>
    ipr->datagram_len += IP_HLEN;
 80078d4:	f8ba 201c 	ldrh.w	r2, [sl, #28]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80078d8:	4621      	mov	r1, r4
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 80078da:	6825      	ldr	r5, [r4, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80078dc:	f10a 001c 	add.w	r0, sl, #28
    ipr->datagram_len += IP_HLEN;
 80078e0:	3214      	adds	r2, #20
 80078e2:	f8aa 201c 	strh.w	r2, [sl, #28]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80078e6:	f10a 0208 	add.w	r2, sl, #8
 80078ea:	f852 eb04 	ldr.w	lr, [r2], #4
 80078ee:	4282      	cmp	r2, r0
 80078f0:	f841 eb04 	str.w	lr, [r1], #4
 80078f4:	d1f9      	bne.n	80078ea <ip4_reass+0x1b6>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 80078f6:	f8ba 001c 	ldrh.w	r0, [sl, #28]
 80078fa:	f7fe f9cf 	bl	8005c9c <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 80078fe:	2200      	movs	r2, #0
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8007900:	8060      	strh	r0, [r4, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8007902:	71a2      	strb	r2, [r4, #6]
 8007904:	71e2      	strb	r2, [r4, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8007906:	72a2      	strb	r2, [r4, #10]
 8007908:	72e2      	strb	r2, [r4, #11]
    p = ipr->p;
 800790a:	f8da 4004 	ldr.w	r4, [sl, #4]
    while (r != NULL) {
 800790e:	2d00      	cmp	r5, #0
 8007910:	d137      	bne.n	8007982 <ip4_reass+0x24e>
    if (ipr == reassdatagrams) {
 8007912:	683a      	ldr	r2, [r7, #0]
 8007914:	4592      	cmp	sl, r2
 8007916:	d146      	bne.n	80079a6 <ip4_reass+0x272>
    reassdatagrams = ipr->next;
 8007918:	f8da 2000 	ldr.w	r2, [sl]
 800791c:	603a      	str	r2, [r7, #0]
  memp_free(MEMP_REASSDATA, ipr);
 800791e:	4651      	mov	r1, sl
 8007920:	2004      	movs	r0, #4
 8007922:	f000 faaf 	bl	8007e84 <memp_free>
    ip_reass_pbufcount -= pbuf_clen(p);
 8007926:	4620      	mov	r0, r4
 8007928:	f000 fcd6 	bl	80082d8 <pbuf_clen>
 800792c:	8833      	ldrh	r3, [r6, #0]
 800792e:	1a18      	subs	r0, r3, r0
 8007930:	8030      	strh	r0, [r6, #0]
}
 8007932:	4620      	mov	r0, r4
 8007934:	b003      	add	sp, #12
 8007936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if (iprh->start == iprh_tmp->start) {
 800793a:	d01b      	beq.n	8007974 <ip4_reass+0x240>
    } else if (iprh->start < iprh_tmp->end) {
 800793c:	f8b8 c006 	ldrh.w	ip, [r8, #6]
 8007940:	4584      	cmp	ip, r0
 8007942:	d817      	bhi.n	8007974 <ip4_reass+0x240>
      if (iprh_prev != NULL) {
 8007944:	b11a      	cbz	r2, 800794e <ip4_reass+0x21a>
        if (iprh_prev->end != iprh_tmp->start) {
 8007946:	88d2      	ldrh	r2, [r2, #6]
          valid = 0;
 8007948:	454a      	cmp	r2, r9
 800794a:	bf18      	it	ne
 800794c:	2300      	movne	r3, #0
    q = iprh_tmp->next_pbuf;
 800794e:	f8d8 c000 	ldr.w	ip, [r8]
 8007952:	4642      	mov	r2, r8
 8007954:	e771      	b.n	800783a <ip4_reass+0x106>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8007956:	88d4      	ldrh	r4, [r2, #6]
      iprh_prev->next_pbuf = new_p;
 8007958:	6015      	str	r5, [r2, #0]
        valid = 0;
 800795a:	42a0      	cmp	r0, r4
 800795c:	bf18      	it	ne
 800795e:	2300      	movne	r3, #0
 8007960:	e7a6      	b.n	80078b0 <ip4_reass+0x17c>
          iprh = (struct ip_reass_helper*)q->payload;
 8007962:	6850      	ldr	r0, [r2, #4]
          if (iprh_prev->end != iprh->start) {
 8007964:	88c9      	ldrh	r1, [r1, #6]
 8007966:	8882      	ldrh	r2, [r0, #4]
 8007968:	4291      	cmp	r1, r2
 800796a:	f47f af7b 	bne.w	8007864 <ip4_reass+0x130>
          q = iprh->next_pbuf;
 800796e:	6802      	ldr	r2, [r0, #0]
 8007970:	4601      	mov	r1, r0
 8007972:	e7ad      	b.n	80078d0 <ip4_reass+0x19c>
  ip_reass_pbufcount -= pbuf_clen(new_p);
 8007974:	4628      	mov	r0, r5
 8007976:	f000 fcaf 	bl	80082d8 <pbuf_clen>
 800797a:	8833      	ldrh	r3, [r6, #0]
 800797c:	1a18      	subs	r0, r3, r0
 800797e:	8030      	strh	r0, [r6, #0]
 8007980:	e76d      	b.n	800785e <ip4_reass+0x12a>
      iprh = (struct ip_reass_helper*)r->payload;
 8007982:	f8d5 8004 	ldr.w	r8, [r5, #4]
      pbuf_header(r, -IP_HLEN);
 8007986:	f06f 0113 	mvn.w	r1, #19
 800798a:	4628      	mov	r0, r5
 800798c:	f000 fbb5 	bl	80080fa <pbuf_header>
      pbuf_cat(p, r);
 8007990:	4629      	mov	r1, r5
 8007992:	4620      	mov	r0, r4
 8007994:	f000 fcb5 	bl	8008302 <pbuf_cat>
      r = iprh->next_pbuf;
 8007998:	f8d8 5000 	ldr.w	r5, [r8]
 800799c:	e7b7      	b.n	800790e <ip4_reass+0x1da>
        if (ipr_prev->next == ipr) {
 800799e:	6811      	ldr	r1, [r2, #0]
 80079a0:	458a      	cmp	sl, r1
 80079a2:	d023      	beq.n	80079ec <ip4_reass+0x2b8>
 80079a4:	460a      	mov	r2, r1
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80079a6:	2a00      	cmp	r2, #0
 80079a8:	d1f9      	bne.n	800799e <ip4_reass+0x26a>
    prev->next = ipr->next;
 80079aa:	f8da 3000 	ldr.w	r3, [sl]
 80079ae:	6013      	str	r3, [r2, #0]
 80079b0:	deff      	udf	#255	; 0xff
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80079b2:	88e0      	ldrh	r0, [r4, #6]
 80079b4:	f7fe f972 	bl	8005c9c <lwip_htons>
 80079b8:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80079bc:	2800      	cmp	r0, #0
 80079be:	f47f af05 	bne.w	80077cc <ip4_reass+0x98>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80079c2:	f8ba 000e 	ldrh.w	r0, [sl, #14]
 80079c6:	f7fe f969 	bl	8005c9c <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80079ca:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80079ce:	2800      	cmp	r0, #0
 80079d0:	f43f aefc 	beq.w	80077cc <ip4_reass+0x98>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80079d4:	4622      	mov	r2, r4
 80079d6:	f10a 0108 	add.w	r1, sl, #8
 80079da:	f104 0014 	add.w	r0, r4, #20
 80079de:	f852 eb04 	ldr.w	lr, [r2], #4
 80079e2:	4282      	cmp	r2, r0
 80079e4:	f841 eb04 	str.w	lr, [r1], #4
 80079e8:	d1f9      	bne.n	80079de <ip4_reass+0x2aa>
 80079ea:	e6ef      	b.n	80077cc <ip4_reass+0x98>
    prev->next = ipr->next;
 80079ec:	f8da 1000 	ldr.w	r1, [sl]
 80079f0:	6011      	str	r1, [r2, #0]
 80079f2:	e794      	b.n	800791e <ip4_reass+0x1ea>
 80079f4:	20003f18 	.word	0x20003f18
 80079f8:	20003f1c 	.word	0x20003f1c

080079fc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80079fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8007a00:	f8b1 8026 	ldrh.w	r8, [r1, #38]	; 0x26
 8007a04:	2308      	movs	r3, #8
{
 8007a06:	b08b      	sub	sp, #44	; 0x2c
 8007a08:	4607      	mov	r7, r0
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8007a0a:	f1a8 0814 	sub.w	r8, r8, #20
{
 8007a0e:	468b      	mov	fp, r1
 8007a10:	9208      	str	r2, [sp, #32]
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8007a12:	fb98 f8f3 	sdiv	r8, r8, r3
 8007a16:	fa1f f388 	uxth.w	r3, r8
 8007a1a:	9306      	str	r3, [sp, #24]
#if !LWIP_NETIF_TX_SINGLE_PBUF
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif

  original_iphdr = (struct ip_hdr *)p->payload;
 8007a1c:	6843      	ldr	r3, [r0, #4]
  iphdr = original_iphdr;
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8007a1e:	781e      	ldrb	r6, [r3, #0]
  original_iphdr = (struct ip_hdr *)p->payload;
 8007a20:	9302      	str	r3, [sp, #8]
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8007a22:	f006 060f 	and.w	r6, r6, #15
 8007a26:	00b6      	lsls	r6, r6, #2
 8007a28:	2e14      	cmp	r6, #20
 8007a2a:	d004      	beq.n	8007a36 <ip4_frag+0x3a>
 8007a2c:	f06f 0005 	mvn.w	r0, #5
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
}
 8007a30:	b00b      	add	sp, #44	; 0x2c
 8007a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8007a36:	9b02      	ldr	r3, [sp, #8]
 8007a38:	88d8      	ldrh	r0, [r3, #6]
 8007a3a:	f7fe f92f 	bl	8005c9c <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 8007a3e:	f3c0 030c 	ubfx	r3, r0, #0, #13
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8007a42:	f410 5400 	ands.w	r4, r0, #8192	; 0x2000
  ofo = tmp & IP_OFFMASK;
 8007a46:	9304      	str	r3, [sp, #16]
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8007a48:	d1f0      	bne.n	8007a2c <ip4_frag+0x30>
  left = p->tot_len - IP_HLEN;
 8007a4a:	893d      	ldrh	r5, [r7, #8]
    fragsize = LWIP_MIN(left, nfb * 8);
 8007a4c:	fa1f f888 	uxth.w	r8, r8
  left = p->tot_len - IP_HLEN;
 8007a50:	3d14      	subs	r5, #20
    fragsize = LWIP_MIN(left, nfb * 8);
 8007a52:	ea4f 03c8 	mov.w	r3, r8, lsl #3
  left = p->tot_len - IP_HLEN;
 8007a56:	b2ad      	uxth	r5, r5
    fragsize = LWIP_MIN(left, nfb * 8);
 8007a58:	9307      	str	r3, [sp, #28]
  while (left) {
 8007a5a:	b90d      	cbnz	r5, 8007a60 <ip4_frag+0x64>
  return ERR_OK;
 8007a5c:	4628      	mov	r0, r5
 8007a5e:	e7e7      	b.n	8007a30 <ip4_frag+0x34>
    fragsize = LWIP_MIN(left, nfb * 8);
 8007a60:	9b07      	ldr	r3, [sp, #28]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8007a62:	2200      	movs	r2, #0
 8007a64:	2114      	movs	r1, #20
 8007a66:	2002      	movs	r0, #2
    fragsize = LWIP_MIN(left, nfb * 8);
 8007a68:	42ab      	cmp	r3, r5
 8007a6a:	bfa8      	it	ge
 8007a6c:	462b      	movge	r3, r5
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	9305      	str	r3, [sp, #20]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8007a72:	f000 fb80 	bl	8008176 <pbuf_alloc>
    if (rambuf == NULL) {
 8007a76:	4680      	mov	r8, r0
 8007a78:	b318      	cbz	r0, 8007ac2 <ip4_frag+0xc6>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8007a7a:	9b02      	ldr	r3, [sp, #8]
 8007a7c:	6842      	ldr	r2, [r0, #4]
 8007a7e:	4619      	mov	r1, r3
 8007a80:	3114      	adds	r1, #20
 8007a82:	f853 0b04 	ldr.w	r0, [r3], #4
 8007a86:	428b      	cmp	r3, r1
 8007a88:	f842 0b04 	str.w	r0, [r2], #4
 8007a8c:	d1f9      	bne.n	8007a82 <ip4_frag+0x86>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8007a8e:	f8d8 3004 	ldr.w	r3, [r8, #4]
    left_to_copy = fragsize;
 8007a92:	f8dd 9014 	ldr.w	r9, [sp, #20]
    iphdr = (struct ip_hdr *)rambuf->payload;
 8007a96:	9303      	str	r3, [sp, #12]
    while (left_to_copy) {
 8007a98:	f1b9 0f00 	cmp.w	r9, #0
 8007a9c:	d038      	beq.n	8007b10 <ip4_frag+0x114>
      u16_t plen = p->len - poff;
 8007a9e:	897c      	ldrh	r4, [r7, #10]
 8007aa0:	1ba4      	subs	r4, r4, r6
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8007aa2:	b2a4      	uxth	r4, r4
 8007aa4:	454c      	cmp	r4, r9
 8007aa6:	bf28      	it	cs
 8007aa8:	464c      	movcs	r4, r9
      if (!newpbuflen) {
 8007aaa:	b914      	cbnz	r4, 8007ab2 <ip4_frag+0xb6>
        p = p->next;
 8007aac:	683f      	ldr	r7, [r7, #0]
        poff = 0;
 8007aae:	2600      	movs	r6, #0
 8007ab0:	e7f2      	b.n	8007a98 <ip4_frag+0x9c>
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 8007ab2:	2005      	movs	r0, #5
 8007ab4:	f000 f9da 	bl	8007e6c <memp_malloc>
      if (pcr == NULL) {
 8007ab8:	4682      	mov	sl, r0
 8007aba:	b928      	cbnz	r0, 8007ac8 <ip4_frag+0xcc>
        pbuf_free(rambuf);
 8007abc:	4640      	mov	r0, r8
 8007abe:	f000 fb2a 	bl	8008116 <pbuf_free>
  return ERR_MEM;
 8007ac2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ac6:	e7b3      	b.n	8007a30 <ip4_frag+0x34>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8007ac8:	9401      	str	r4, [sp, #4]
 8007aca:	2202      	movs	r2, #2
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	4621      	mov	r1, r4
 8007ad0:	4433      	add	r3, r6
 8007ad2:	9300      	str	r3, [sp, #0]
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	2004      	movs	r0, #4
 8007ad8:	f000 fae4 	bl	80080a4 <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 8007adc:	b920      	cbnz	r0, 8007ae8 <ip4_frag+0xec>
  memp_free(MEMP_FRAG_PBUF, p);
 8007ade:	4651      	mov	r1, sl
 8007ae0:	2005      	movs	r0, #5
 8007ae2:	f000 f9cf 	bl	8007e84 <memp_free>
 8007ae6:	e7e9      	b.n	8007abc <ip4_frag+0xc0>
 8007ae8:	9009      	str	r0, [sp, #36]	; 0x24
      left_to_copy -= newpbuflen;
 8007aea:	eba9 0904 	sub.w	r9, r9, r4
      pbuf_ref(p);
 8007aee:	4638      	mov	r0, r7
 8007af0:	f000 fbfa 	bl	80082e8 <pbuf_ref>
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8007af4:	4b1d      	ldr	r3, [pc, #116]	; (8007b6c <ip4_frag+0x170>)
      left_to_copy -= newpbuflen;
 8007af6:	fa1f f989 	uxth.w	r9, r9
      pcr->original = p;
 8007afa:	f8ca 7014 	str.w	r7, [sl, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8007afe:	f8ca 3010 	str.w	r3, [sl, #16]
      pbuf_cat(rambuf, newpbuf);
 8007b02:	4640      	mov	r0, r8
 8007b04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b06:	f000 fbfc 	bl	8008302 <pbuf_cat>
      if (left_to_copy) {
 8007b0a:	f1b9 0f00 	cmp.w	r9, #0
 8007b0e:	d1cd      	bne.n	8007aac <ip4_frag+0xb0>
    tmp = (IP_OFFMASK & (ofo));
 8007b10:	9b04      	ldr	r3, [sp, #16]
    poff += newpbuflen;
 8007b12:	4426      	add	r6, r4
    tmp = (IP_OFFMASK & (ofo));
 8007b14:	f3c3 000c 	ubfx	r0, r3, #0, #13
    last = (left <= netif->mtu - IP_HLEN);
 8007b18:	f8bb 3026 	ldrh.w	r3, [fp, #38]	; 0x26
    poff += newpbuflen;
 8007b1c:	b2b6      	uxth	r6, r6
    last = (left <= netif->mtu - IP_HLEN);
 8007b1e:	3b13      	subs	r3, #19
    if (!last) {
 8007b20:	429d      	cmp	r5, r3
      tmp = tmp | IP_MF;
 8007b22:	bfa8      	it	ge
 8007b24:	f440 5000 	orrge.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8007b28:	f7fe f8b8 	bl	8005c9c <lwip_htons>
 8007b2c:	9b03      	ldr	r3, [sp, #12]
 8007b2e:	80d8      	strh	r0, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8007b30:	9b05      	ldr	r3, [sp, #20]
 8007b32:	f103 0014 	add.w	r0, r3, #20
 8007b36:	b280      	uxth	r0, r0
 8007b38:	f7fe f8b0 	bl	8005c9c <lwip_htons>
 8007b3c:	9b03      	ldr	r3, [sp, #12]
    IPH_CHKSUM_SET(iphdr, 0);
 8007b3e:	f04f 0200 	mov.w	r2, #0
    netif->output(netif, rambuf, dest);
 8007b42:	4641      	mov	r1, r8
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8007b44:	8058      	strh	r0, [r3, #2]
    netif->output(netif, rambuf, dest);
 8007b46:	4658      	mov	r0, fp
    IPH_CHKSUM_SET(iphdr, 0);
 8007b48:	729a      	strb	r2, [r3, #10]
 8007b4a:	72da      	strb	r2, [r3, #11]
    netif->output(netif, rambuf, dest);
 8007b4c:	f8db 3014 	ldr.w	r3, [fp, #20]
 8007b50:	9a08      	ldr	r2, [sp, #32]
 8007b52:	4798      	blx	r3
    pbuf_free(rambuf);
 8007b54:	4640      	mov	r0, r8
 8007b56:	f000 fade 	bl	8008116 <pbuf_free>
    left -= fragsize;
 8007b5a:	9b05      	ldr	r3, [sp, #20]
    ofo += nfb;
 8007b5c:	9a06      	ldr	r2, [sp, #24]
    left -= fragsize;
 8007b5e:	1aed      	subs	r5, r5, r3
    ofo += nfb;
 8007b60:	9b04      	ldr	r3, [sp, #16]
 8007b62:	4413      	add	r3, r2
    left -= fragsize;
 8007b64:	b2ad      	uxth	r5, r5
    ofo += nfb;
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	9304      	str	r3, [sp, #16]
 8007b6a:	e776      	b.n	8007a5a <ip4_frag+0x5e>
 8007b6c:	080075f1 	.word	0x080075f1

08007b70 <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8007b70:	4b0c      	ldr	r3, [pc, #48]	; (8007ba4 <mem_init+0x34>)
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
  mem->prev = 0;
 8007b72:	2100      	movs	r1, #0
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8007b74:	4a0c      	ldr	r2, [pc, #48]	; (8007ba8 <mem_init+0x38>)
 8007b76:	f023 0303 	bic.w	r3, r3, #3
 8007b7a:	6013      	str	r3, [r2, #0]
  mem->next = MEM_SIZE_ALIGNED;
 8007b7c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
  mem->prev = 0;
 8007b80:	8059      	strh	r1, [r3, #2]
  mem->used = 0;
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8007b82:	1898      	adds	r0, r3, r2
  mem->used = 0;
 8007b84:	7119      	strb	r1, [r3, #4]
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8007b86:	4909      	ldr	r1, [pc, #36]	; (8007bac <mem_init+0x3c>)
  mem->next = MEM_SIZE_ALIGNED;
 8007b88:	801a      	strh	r2, [r3, #0]
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8007b8a:	6008      	str	r0, [r1, #0]
  ram_end->used = 1;
 8007b8c:	2101      	movs	r1, #1
  ram_end->next = MEM_SIZE_ALIGNED;
 8007b8e:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
  ram_end->prev = MEM_SIZE_ALIGNED;
 8007b92:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8007b96:	4a06      	ldr	r2, [pc, #24]	; (8007bb0 <mem_init+0x40>)
  ram_end->used = 1;
 8007b98:	f883 1644 	strb.w	r1, [r3, #1604]	; 0x644

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8007b9c:	4805      	ldr	r0, [pc, #20]	; (8007bb4 <mem_init+0x44>)
  lfree = (struct mem *)(void *)ram;
 8007b9e:	6013      	str	r3, [r2, #0]
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8007ba0:	f003 b906 	b.w	800adb0 <sys_mutex_new>
 8007ba4:	2000401b 	.word	0x2000401b
 8007ba8:	20003f28 	.word	0x20003f28
 8007bac:	20003f2c 	.word	0x20003f2c
 8007bb0:	20003f20 	.word	0x20003f20
 8007bb4:	20003f24 	.word	0x20003f24

08007bb8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8007bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8007bba:	4604      	mov	r4, r0
 8007bbc:	2800      	cmp	r0, #0
 8007bbe:	d049      	beq.n	8007c54 <mem_free+0x9c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8007bc0:	4d25      	ldr	r5, [pc, #148]	; (8007c58 <mem_free+0xa0>)
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8007bc2:	682a      	ldr	r2, [r5, #0]
 8007bc4:	4290      	cmp	r0, r2
 8007bc6:	d303      	bcc.n	8007bd0 <mem_free+0x18>
 8007bc8:	4f24      	ldr	r7, [pc, #144]	; (8007c5c <mem_free+0xa4>)
 8007bca:	683a      	ldr	r2, [r7, #0]
 8007bcc:	4290      	cmp	r0, r2
 8007bce:	d305      	bcc.n	8007bdc <mem_free+0x24>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 8007bd0:	f003 f916 	bl	800ae00 <sys_arch_protect>
  plug_holes(mem);
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8007bd4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    SYS_ARCH_UNPROTECT(lev);
 8007bd8:	f003 b91e 	b.w	800ae18 <sys_arch_unprotect>
  LWIP_MEM_FREE_PROTECT();
 8007bdc:	4820      	ldr	r0, [pc, #128]	; (8007c60 <mem_free+0xa8>)
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8007bde:	f1a4 0608 	sub.w	r6, r4, #8
  LWIP_MEM_FREE_PROTECT();
 8007be2:	f003 f8f4 	bl	800adce <sys_mutex_lock>
  mem->used = 0;
 8007be6:	2300      	movs	r3, #0
  if (mem < lfree) {
 8007be8:	4a1e      	ldr	r2, [pc, #120]	; (8007c64 <mem_free+0xac>)
  mem->used = 0;
 8007bea:	f804 3c04 	strb.w	r3, [r4, #-4]
  if (mem < lfree) {
 8007bee:	6813      	ldr	r3, [r2, #0]
  nmem = (struct mem *)(void *)&ram[mem->next];
 8007bf0:	f834 0c08 	ldrh.w	r0, [r4, #-8]
  if (mem < lfree) {
 8007bf4:	429e      	cmp	r6, r3
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8007bf6:	682b      	ldr	r3, [r5, #0]
  nmem = (struct mem *)(void *)&ram[mem->next];
 8007bf8:	eb03 0100 	add.w	r1, r3, r0
    lfree = mem;
 8007bfc:	bf38      	it	cc
 8007bfe:	6016      	strcc	r6, [r2, #0]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8007c00:	428e      	cmp	r6, r1
 8007c02:	d010      	beq.n	8007c26 <mem_free+0x6e>
 8007c04:	790d      	ldrb	r5, [r1, #4]
 8007c06:	b975      	cbnz	r5, 8007c26 <mem_free+0x6e>
 8007c08:	683d      	ldr	r5, [r7, #0]
 8007c0a:	428d      	cmp	r5, r1
 8007c0c:	d00b      	beq.n	8007c26 <mem_free+0x6e>
    if (lfree == nmem) {
 8007c0e:	6815      	ldr	r5, [r2, #0]
 8007c10:	42a9      	cmp	r1, r5
    mem->next = nmem->next;
 8007c12:	5a19      	ldrh	r1, [r3, r0]
 8007c14:	f824 1c08 	strh.w	r1, [r4, #-8]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8007c18:	5a19      	ldrh	r1, [r3, r0]
 8007c1a:	eba6 0003 	sub.w	r0, r6, r3
      lfree = mem;
 8007c1e:	bf08      	it	eq
 8007c20:	6016      	streq	r6, [r2, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8007c22:	4419      	add	r1, r3
 8007c24:	8048      	strh	r0, [r1, #2]
  pmem = (struct mem *)(void *)&ram[mem->prev];
 8007c26:	f834 1c06 	ldrh.w	r1, [r4, #-6]
 8007c2a:	1858      	adds	r0, r3, r1
  if (pmem != mem && pmem->used == 0) {
 8007c2c:	4286      	cmp	r6, r0
 8007c2e:	d00c      	beq.n	8007c4a <mem_free+0x92>
 8007c30:	7905      	ldrb	r5, [r0, #4]
 8007c32:	b955      	cbnz	r5, 8007c4a <mem_free+0x92>
    if (lfree == mem) {
 8007c34:	6815      	ldr	r5, [r2, #0]
 8007c36:	42ae      	cmp	r6, r5
      lfree = pmem;
 8007c38:	bf08      	it	eq
 8007c3a:	6010      	streq	r0, [r2, #0]
    pmem->next = mem->next;
 8007c3c:	f834 2c08 	ldrh.w	r2, [r4, #-8]
 8007c40:	525a      	strh	r2, [r3, r1]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 8007c42:	f834 2c08 	ldrh.w	r2, [r4, #-8]
 8007c46:	4413      	add	r3, r2
 8007c48:	8059      	strh	r1, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 8007c4a:	4805      	ldr	r0, [pc, #20]	; (8007c60 <mem_free+0xa8>)
}
 8007c4c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  LWIP_MEM_FREE_UNPROTECT();
 8007c50:	f003 b8c2 	b.w	800add8 <sys_mutex_unlock>
 8007c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c56:	bf00      	nop
 8007c58:	20003f28 	.word	0x20003f28
 8007c5c:	20003f2c 	.word	0x20003f2c
 8007c60:	20003f24 	.word	0x20003f24
 8007c64:	20003f20 	.word	0x20003f20

08007c68 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8007c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8007c6c:	3103      	adds	r1, #3
 8007c6e:	f64f 74fc 	movw	r4, #65532	; 0xfffc
{
 8007c72:	4605      	mov	r5, r0
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8007c74:	400c      	ands	r4, r1

  if (newsize < MIN_SIZE_ALIGNED) {
 8007c76:	2c0b      	cmp	r4, #11
 8007c78:	d904      	bls.n	8007c84 <mem_trim+0x1c>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 8007c7a:	f5b4 6fc8 	cmp.w	r4, #1600	; 0x640
 8007c7e:	d902      	bls.n	8007c86 <mem_trim+0x1e>
    return NULL;
 8007c80:	2500      	movs	r5, #0
 8007c82:	e00e      	b.n	8007ca2 <mem_trim+0x3a>
    newsize = MIN_SIZE_ALIGNED;
 8007c84:	240c      	movs	r4, #12
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8007c86:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8007d3c <mem_trim+0xd4>
 8007c8a:	f8d8 3000 	ldr.w	r3, [r8]
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8007c8e:	42ab      	cmp	r3, r5
 8007c90:	d803      	bhi.n	8007c9a <mem_trim+0x32>
 8007c92:	4a27      	ldr	r2, [pc, #156]	; (8007d30 <mem_trim+0xc8>)
 8007c94:	6812      	ldr	r2, [r2, #0]
 8007c96:	4295      	cmp	r5, r2
 8007c98:	d306      	bcc.n	8007ca8 <mem_trim+0x40>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 8007c9a:	f003 f8b1 	bl	800ae00 <sys_arch_protect>
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 8007c9e:	f003 f8bb 	bl	800ae18 <sys_arch_unprotect>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 8007ca2:	4628      	mov	r0, r5
 8007ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8007ca8:	f1a5 0608 	sub.w	r6, r5, #8
  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8007cac:	f835 7c08 	ldrh.w	r7, [r5, #-8]
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8007cb0:	1af6      	subs	r6, r6, r3
  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8007cb2:	3f08      	subs	r7, #8
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8007cb4:	b2b6      	uxth	r6, r6
  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8007cb6:	1bbf      	subs	r7, r7, r6
 8007cb8:	b2bf      	uxth	r7, r7
  if (newsize > size) {
 8007cba:	42a7      	cmp	r7, r4
 8007cbc:	d3e0      	bcc.n	8007c80 <mem_trim+0x18>
  if (newsize == size) {
 8007cbe:	d0f0      	beq.n	8007ca2 <mem_trim+0x3a>
  LWIP_MEM_FREE_PROTECT();
 8007cc0:	481c      	ldr	r0, [pc, #112]	; (8007d34 <mem_trim+0xcc>)
 8007cc2:	f003 f884 	bl	800adce <sys_mutex_lock>
  mem2 = (struct mem *)(void *)&ram[mem->next];
 8007cc6:	f8d8 3000 	ldr.w	r3, [r8]
 8007cca:	f835 1c08 	ldrh.w	r1, [r5, #-8]
 8007cce:	1858      	adds	r0, r3, r1
  if (mem2->used == 0) {
 8007cd0:	7902      	ldrb	r2, [r0, #4]
 8007cd2:	b9da      	cbnz	r2, 8007d0c <mem_trim+0xa4>
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8007cd4:	f106 0208 	add.w	r2, r6, #8
    next = mem2->next;
 8007cd8:	5a5f      	ldrh	r7, [r3, r1]
    if (lfree == mem2) {
 8007cda:	4917      	ldr	r1, [pc, #92]	; (8007d38 <mem_trim+0xd0>)
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8007cdc:	4414      	add	r4, r2
    if (lfree == mem2) {
 8007cde:	680a      	ldr	r2, [r1, #0]
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8007ce0:	b2a4      	uxth	r4, r4
    if (lfree == mem2) {
 8007ce2:	4290      	cmp	r0, r2
 8007ce4:	eb03 0204 	add.w	r2, r3, r4
      lfree = (struct mem *)(void *)&ram[ptr2];
 8007ce8:	bf08      	it	eq
 8007cea:	600a      	streq	r2, [r1, #0]
    mem2->used = 0;
 8007cec:	2100      	movs	r1, #0
 8007cee:	7111      	strb	r1, [r2, #4]
    mem2->next = next;
 8007cf0:	531f      	strh	r7, [r3, r4]
    mem2->prev = ptr;
 8007cf2:	8056      	strh	r6, [r2, #2]
    mem->next = ptr2;
 8007cf4:	f825 4c08 	strh.w	r4, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007cf8:	5b1a      	ldrh	r2, [r3, r4]
 8007cfa:	f5b2 6fc8 	cmp.w	r2, #1600	; 0x640
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8007cfe:	bf1c      	itt	ne
 8007d00:	189b      	addne	r3, r3, r2
 8007d02:	805c      	strhne	r4, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 8007d04:	480b      	ldr	r0, [pc, #44]	; (8007d34 <mem_trim+0xcc>)
 8007d06:	f003 f867 	bl	800add8 <sys_mutex_unlock>
  return rmem;
 8007d0a:	e7ca      	b.n	8007ca2 <mem_trim+0x3a>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8007d0c:	f104 0214 	add.w	r2, r4, #20
 8007d10:	42ba      	cmp	r2, r7
 8007d12:	d8f7      	bhi.n	8007d04 <mem_trim+0x9c>
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8007d14:	f106 0208 	add.w	r2, r6, #8
    if (mem2 < lfree) {
 8007d18:	4807      	ldr	r0, [pc, #28]	; (8007d38 <mem_trim+0xd0>)
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8007d1a:	4414      	add	r4, r2
    if (mem2 < lfree) {
 8007d1c:	6807      	ldr	r7, [r0, #0]
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8007d1e:	b2a4      	uxth	r4, r4
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8007d20:	191a      	adds	r2, r3, r4
    if (mem2 < lfree) {
 8007d22:	42ba      	cmp	r2, r7
      lfree = mem2;
 8007d24:	bf38      	it	cc
 8007d26:	6002      	strcc	r2, [r0, #0]
    mem2->used = 0;
 8007d28:	2000      	movs	r0, #0
 8007d2a:	7110      	strb	r0, [r2, #4]
    mem2->next = mem->next;
 8007d2c:	5319      	strh	r1, [r3, r4]
 8007d2e:	e7e0      	b.n	8007cf2 <mem_trim+0x8a>
 8007d30:	20003f2c 	.word	0x20003f2c
 8007d34:	20003f24 	.word	0x20003f24
 8007d38:	20003f20 	.word	0x20003f20
 8007d3c:	20003f28 	.word	0x20003f28

08007d40 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 8007d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8007d44:	b148      	cbz	r0, 8007d5a <mem_malloc+0x1a>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8007d46:	3003      	adds	r0, #3
 8007d48:	f64f 74fc 	movw	r4, #65532	; 0xfffc
 8007d4c:	4004      	ands	r4, r0

  if (size < MIN_SIZE_ALIGNED) {
 8007d4e:	2c0b      	cmp	r4, #11
 8007d50:	d905      	bls.n	8007d5e <mem_malloc+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
  }

  if (size > MEM_SIZE_ALIGNED) {
 8007d52:	f5b4 6fc8 	cmp.w	r4, #1600	; 0x640
 8007d56:	d903      	bls.n	8007d60 <mem_malloc+0x20>
    return NULL;
 8007d58:	2000      	movs	r0, #0
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
}
 8007d5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    size = MIN_SIZE_ALIGNED;
 8007d5e:	240c      	movs	r4, #12
  sys_mutex_lock(&mem_mutex);
 8007d60:	4827      	ldr	r0, [pc, #156]	; (8007e00 <mem_malloc+0xc0>)
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8007d62:	f5c4 68c8 	rsb	r8, r4, #1600	; 0x640
  sys_mutex_lock(&mem_mutex);
 8007d66:	f003 f832 	bl	800adce <sys_mutex_lock>
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8007d6a:	4926      	ldr	r1, [pc, #152]	; (8007e04 <mem_malloc+0xc4>)
 8007d6c:	4826      	ldr	r0, [pc, #152]	; (8007e08 <mem_malloc+0xc8>)
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8007d6e:	f06f 0907 	mvn.w	r9, #7
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8007d72:	680f      	ldr	r7, [r1, #0]
 8007d74:	6802      	ldr	r2, [r0, #0]
 8007d76:	1abb      	subs	r3, r7, r2
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	4543      	cmp	r3, r8
 8007d7c:	d303      	bcc.n	8007d86 <mem_malloc+0x46>
  sys_mutex_unlock(&mem_mutex);
 8007d7e:	4820      	ldr	r0, [pc, #128]	; (8007e00 <mem_malloc+0xc0>)
 8007d80:	f003 f82a 	bl	800add8 <sys_mutex_unlock>
 8007d84:	e7e8      	b.n	8007d58 <mem_malloc+0x18>
      mem = (struct mem *)(void *)&ram[ptr];
 8007d86:	18d5      	adds	r5, r2, r3
 8007d88:	f832 e003 	ldrh.w	lr, [r2, r3]
      if ((!mem->used) &&
 8007d8c:	f895 c004 	ldrb.w	ip, [r5, #4]
 8007d90:	f1bc 0f00 	cmp.w	ip, #0
 8007d94:	d132      	bne.n	8007dfc <mem_malloc+0xbc>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8007d96:	eba9 0603 	sub.w	r6, r9, r3
 8007d9a:	4476      	add	r6, lr
      if ((!mem->used) &&
 8007d9c:	42b4      	cmp	r4, r6
 8007d9e:	d82d      	bhi.n	8007dfc <mem_malloc+0xbc>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8007da0:	f104 0814 	add.w	r8, r4, #20
 8007da4:	4546      	cmp	r6, r8
 8007da6:	d323      	bcc.n	8007df0 <mem_malloc+0xb0>
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8007da8:	3408      	adds	r4, #8
 8007daa:	441c      	add	r4, r3
 8007dac:	b2a4      	uxth	r4, r4
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8007dae:	1916      	adds	r6, r2, r4
          mem2->used = 0;
 8007db0:	f886 c004 	strb.w	ip, [r6, #4]
          mem2->next = mem->next;
 8007db4:	f822 e004 	strh.w	lr, [r2, r4]
          mem2->prev = ptr;
 8007db8:	8073      	strh	r3, [r6, #2]
          mem->used = 1;
 8007dba:	2301      	movs	r3, #1
          mem->next = ptr2;
 8007dbc:	802c      	strh	r4, [r5, #0]
          mem->used = 1;
 8007dbe:	712b      	strb	r3, [r5, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8007dc0:	5b13      	ldrh	r3, [r2, r4]
 8007dc2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007dc6:	d001      	beq.n	8007dcc <mem_malloc+0x8c>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8007dc8:	441a      	add	r2, r3
 8007dca:	8054      	strh	r4, [r2, #2]
        if (mem == lfree) {
 8007dcc:	42af      	cmp	r7, r5
 8007dce:	d108      	bne.n	8007de2 <mem_malloc+0xa2>
          while (cur->used && cur != ram_end) {
 8007dd0:	4b0e      	ldr	r3, [pc, #56]	; (8007e0c <mem_malloc+0xcc>)
            cur = (struct mem *)(void *)&ram[cur->next];
 8007dd2:	6800      	ldr	r0, [r0, #0]
          while (cur->used && cur != ram_end) {
 8007dd4:	681a      	ldr	r2, [r3, #0]
            cur = (struct mem *)(void *)&ram[cur->next];
 8007dd6:	462b      	mov	r3, r5
          while (cur->used && cur != ram_end) {
 8007dd8:	791c      	ldrb	r4, [r3, #4]
 8007dda:	b10c      	cbz	r4, 8007de0 <mem_malloc+0xa0>
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d10a      	bne.n	8007df6 <mem_malloc+0xb6>
          lfree = cur;
 8007de0:	600b      	str	r3, [r1, #0]
        sys_mutex_unlock(&mem_mutex);
 8007de2:	4807      	ldr	r0, [pc, #28]	; (8007e00 <mem_malloc+0xc0>)
 8007de4:	f002 fff8 	bl	800add8 <sys_mutex_unlock>
        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8007de8:	f105 0008 	add.w	r0, r5, #8
 8007dec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          mem->used = 1;
 8007df0:	2301      	movs	r3, #1
 8007df2:	712b      	strb	r3, [r5, #4]
 8007df4:	e7ea      	b.n	8007dcc <mem_malloc+0x8c>
            cur = (struct mem *)(void *)&ram[cur->next];
 8007df6:	881b      	ldrh	r3, [r3, #0]
 8007df8:	4403      	add	r3, r0
 8007dfa:	e7ed      	b.n	8007dd8 <mem_malloc+0x98>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 8007dfc:	4673      	mov	r3, lr
 8007dfe:	e7bc      	b.n	8007d7a <mem_malloc+0x3a>
 8007e00:	20003f24 	.word	0x20003f24
 8007e04:	20003f20 	.word	0x20003f20
 8007e08:	20003f28 	.word	0x20003f28
 8007e0c:	20003f2c 	.word	0x20003f2c

08007e10 <do_memp_malloc_pool.isra.0>:
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}

static void*
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
 8007e10:	b510      	push	{r4, lr}
 8007e12:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8007e14:	f002 fff4 	bl	800ae00 <sys_arch_protect>

  memp = *desc->tab;
 8007e18:	6823      	ldr	r3, [r4, #0]
 8007e1a:	681c      	ldr	r4, [r3, #0]
  memp_overflow_check_element_overflow(memp, desc);
  memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8007e1c:	b10c      	cbz	r4, 8007e22 <do_memp_malloc_pool.isra.0+0x12>
#if !MEMP_MEM_MALLOC
    *desc->tab = memp->next;
 8007e1e:	6822      	ldr	r2, [r4, #0]
 8007e20:	601a      	str	r2, [r3, #0]
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 8007e22:	f002 fff9 	bl	800ae18 <sys_arch_unprotect>
  return NULL;
}
 8007e26:	4620      	mov	r0, r4
 8007e28:	bd10      	pop	{r4, pc}

08007e2a <memp_init_pool>:
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8007e2a:	6843      	ldr	r3, [r0, #4]
  *desc->tab = NULL;
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	6881      	ldr	r1, [r0, #8]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8007e30:	3303      	adds	r3, #3
{
 8007e32:	b530      	push	{r4, r5, lr}
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8007e34:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 8007e38:	8844      	ldrh	r4, [r0, #2]
  *desc->tab = NULL;
 8007e3a:	600a      	str	r2, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 8007e3c:	42a2      	cmp	r2, r4
 8007e3e:	db00      	blt.n	8007e42 <memp_init_pool+0x18>
}
 8007e40:	bd30      	pop	{r4, r5, pc}
    memp->next = *desc->tab;
 8007e42:	680d      	ldr	r5, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 8007e44:	3201      	adds	r2, #1
    memp->next = *desc->tab;
 8007e46:	601d      	str	r5, [r3, #0]
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8007e48:	8805      	ldrh	r5, [r0, #0]
    *desc->tab = memp;
 8007e4a:	600b      	str	r3, [r1, #0]
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8007e4c:	442b      	add	r3, r5
 8007e4e:	e7f5      	b.n	8007e3c <memp_init_pool+0x12>

08007e50 <memp_init>:
{
 8007e50:	b538      	push	{r3, r4, r5, lr}
 8007e52:	2400      	movs	r4, #0
    memp_init_pool(memp_pools[i]);
 8007e54:	4d04      	ldr	r5, [pc, #16]	; (8007e68 <memp_init+0x18>)
 8007e56:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8007e5a:	3401      	adds	r4, #1
 8007e5c:	f7ff ffe5 	bl	8007e2a <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007e60:	2c0d      	cmp	r4, #13
 8007e62:	d1f8      	bne.n	8007e56 <memp_init+0x6>
}
 8007e64:	bd38      	pop	{r3, r4, r5, pc}
 8007e66:	bf00      	nop
 8007e68:	0800cb28 	.word	0x0800cb28

08007e6c <memp_malloc>:
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8007e6c:	280c      	cmp	r0, #12
 8007e6e:	d805      	bhi.n	8007e7c <memp_malloc+0x10>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8007e70:	4b03      	ldr	r3, [pc, #12]	; (8007e80 <memp_malloc+0x14>)
 8007e72:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8007e76:	3008      	adds	r0, #8
 8007e78:	f7ff bfca 	b.w	8007e10 <do_memp_malloc_pool.isra.0>
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
}
 8007e7c:	2000      	movs	r0, #0
 8007e7e:	4770      	bx	lr
 8007e80:	0800cb28 	.word	0x0800cb28

08007e84 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8007e84:	280c      	cmp	r0, #12
{
 8007e86:	b538      	push	{r3, r4, r5, lr}
 8007e88:	460c      	mov	r4, r1
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8007e8a:	d80d      	bhi.n	8007ea8 <memp_free+0x24>

  if (mem == NULL) {
 8007e8c:	b161      	cbz	r1, 8007ea8 <memp_free+0x24>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8007e8e:	4b07      	ldr	r3, [pc, #28]	; (8007eac <memp_free+0x28>)
 8007e90:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
  SYS_ARCH_PROTECT(old_level);
 8007e94:	f002 ffb4 	bl	800ae00 <sys_arch_protect>
  memp->next = *desc->tab;
 8007e98:	68ab      	ldr	r3, [r5, #8]
 8007e9a:	681a      	ldr	r2, [r3, #0]
 8007e9c:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 8007e9e:	601c      	str	r4, [r3, #0]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8007ea0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  SYS_ARCH_UNPROTECT(old_level);
 8007ea4:	f002 bfb8 	b.w	800ae18 <sys_arch_unprotect>
 8007ea8:	bd38      	pop	{r3, r4, r5, pc}
 8007eaa:	bf00      	nop
 8007eac:	0800cb28 	.word	0x0800cb28

08007eb0 <netif_issue_reports.part.0>:
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8007eb0:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
netif_issue_reports(struct netif* netif, u8_t report_type)
 8007eb4:	4601      	mov	r1, r0
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8007eb6:	071b      	lsls	r3, r3, #28
 8007eb8:	d502      	bpl.n	8007ec0 <netif_issue_reports.part.0+0x10>
      etharp_gratuitous(netif);
 8007eba:	3104      	adds	r1, #4
 8007ebc:	f7fe bfec 	b.w	8006e98 <etharp_request>
 8007ec0:	4770      	bx	lr

08007ec2 <netif_init>:
{
 8007ec2:	4770      	bx	lr

08007ec4 <netif_set_ipaddr>:
{
 8007ec4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007ec6:	4605      	mov	r5, r0
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8007ec8:	460c      	mov	r4, r1
 8007eca:	b1b9      	cbz	r1, 8007efc <netif_set_ipaddr+0x38>
 8007ecc:	680b      	ldr	r3, [r1, #0]
 8007ece:	9301      	str	r3, [sp, #4]
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8007ed0:	9a01      	ldr	r2, [sp, #4]
 8007ed2:	686b      	ldr	r3, [r5, #4]
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d00f      	beq.n	8007ef8 <netif_set_ipaddr+0x34>
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8007ed8:	1d2e      	adds	r6, r5, #4
 8007eda:	a901      	add	r1, sp, #4
 8007edc:	4630      	mov	r0, r6
 8007ede:	f000 ff5b 	bl	8008d98 <tcp_netif_ip_addr_changed>
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8007ee2:	a901      	add	r1, sp, #4
 8007ee4:	4630      	mov	r0, r6
 8007ee6:	f002 fe81 	bl	800abec <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8007eea:	b104      	cbz	r4, 8007eee <netif_set_ipaddr+0x2a>
 8007eec:	6824      	ldr	r4, [r4, #0]
 8007eee:	606c      	str	r4, [r5, #4]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007ef0:	b114      	cbz	r4, 8007ef8 <netif_set_ipaddr+0x34>
 8007ef2:	4628      	mov	r0, r5
 8007ef4:	f7ff ffdc 	bl	8007eb0 <netif_issue_reports.part.0>
}
 8007ef8:	b002      	add	sp, #8
 8007efa:	bd70      	pop	{r4, r5, r6, pc}
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8007efc:	4b01      	ldr	r3, [pc, #4]	; (8007f04 <netif_set_ipaddr+0x40>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	e7e5      	b.n	8007ece <netif_set_ipaddr+0xa>
 8007f02:	bf00      	nop
 8007f04:	0800ca84 	.word	0x0800ca84

08007f08 <netif_set_addr>:
{
 8007f08:	b570      	push	{r4, r5, r6, lr}
 8007f0a:	4606      	mov	r6, r0
 8007f0c:	4615      	mov	r5, r2
 8007f0e:	461c      	mov	r4, r3
  if (ip4_addr_isany(ipaddr)) {
 8007f10:	b109      	cbz	r1, 8007f16 <netif_set_addr+0xe>
 8007f12:	680b      	ldr	r3, [r1, #0]
 8007f14:	b94b      	cbnz	r3, 8007f2a <netif_set_addr+0x22>
    netif_set_ipaddr(netif, ipaddr);
 8007f16:	4630      	mov	r0, r6
 8007f18:	f7ff ffd4 	bl	8007ec4 <netif_set_ipaddr>
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8007f1c:	b105      	cbz	r5, 8007f20 <netif_set_addr+0x18>
 8007f1e:	682d      	ldr	r5, [r5, #0]
 8007f20:	60b5      	str	r5, [r6, #8]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8007f22:	b104      	cbz	r4, 8007f26 <netif_set_addr+0x1e>
 8007f24:	6824      	ldr	r4, [r4, #0]
 8007f26:	60f4      	str	r4, [r6, #12]
 8007f28:	bd70      	pop	{r4, r5, r6, pc}
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8007f2a:	b102      	cbz	r2, 8007f2e <netif_set_addr+0x26>
 8007f2c:	6815      	ldr	r5, [r2, #0]
 8007f2e:	60b5      	str	r5, [r6, #8]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8007f30:	b104      	cbz	r4, 8007f34 <netif_set_addr+0x2c>
 8007f32:	6824      	ldr	r4, [r4, #0]
 8007f34:	60f4      	str	r4, [r6, #12]
    netif_set_ipaddr(netif, ipaddr);
 8007f36:	4630      	mov	r0, r6
}
 8007f38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    netif_set_ipaddr(netif, ipaddr);
 8007f3c:	f7ff bfc2 	b.w	8007ec4 <netif_set_ipaddr>

08007f40 <netif_add>:
{
 8007f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8007f42:	2603      	movs	r6, #3
  netif->num = netif_num++;
 8007f44:	4f11      	ldr	r7, [pc, #68]	; (8007f8c <netif_add+0x4c>)
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8007f46:	2500      	movs	r5, #0
{
 8007f48:	4604      	mov	r4, r0
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8007f4a:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
  netif->state = state;
 8007f4e:	9e06      	ldr	r6, [sp, #24]
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8007f50:	6045      	str	r5, [r0, #4]
  netif->state = state;
 8007f52:	61c6      	str	r6, [r0, #28]
  netif->num = netif_num++;
 8007f54:	783e      	ldrb	r6, [r7, #0]
  ip_addr_set_zero_ip4(&netif->netmask);
 8007f56:	6085      	str	r5, [r0, #8]
  netif->num = netif_num++;
 8007f58:	f106 0e01 	add.w	lr, r6, #1
 8007f5c:	f880 6032 	strb.w	r6, [r0, #50]	; 0x32
  netif->input = input;
 8007f60:	9e08      	ldr	r6, [sp, #32]
  ip_addr_set_zero_ip4(&netif->gw);
 8007f62:	60c5      	str	r5, [r0, #12]
  netif->flags = 0;
 8007f64:	f880 502f 	strb.w	r5, [r0, #47]	; 0x2f
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8007f68:	6205      	str	r5, [r0, #32]
  netif->input = input;
 8007f6a:	6106      	str	r6, [r0, #16]
  netif->num = netif_num++;
 8007f6c:	f887 e000 	strb.w	lr, [r7]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8007f70:	f7ff ffca 	bl	8007f08 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 8007f74:	4620      	mov	r0, r4
 8007f76:	9b07      	ldr	r3, [sp, #28]
 8007f78:	4798      	blx	r3
 8007f7a:	b928      	cbnz	r0, 8007f88 <netif_add+0x48>
  netif->next = netif_list;
 8007f7c:	4b04      	ldr	r3, [pc, #16]	; (8007f90 <netif_add+0x50>)
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	6022      	str	r2, [r4, #0]
  netif_list = netif;
 8007f82:	601c      	str	r4, [r3, #0]
}
 8007f84:	4620      	mov	r0, r4
 8007f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return NULL;
 8007f88:	462c      	mov	r4, r5
 8007f8a:	e7fb      	b.n	8007f84 <netif_add+0x44>
 8007f8c:	20003f64 	.word	0x20003f64
 8007f90:	20007714 	.word	0x20007714

08007f94 <netif_set_default>:
  netif_default = netif;
 8007f94:	4b01      	ldr	r3, [pc, #4]	; (8007f9c <netif_set_default+0x8>)
 8007f96:	6018      	str	r0, [r3, #0]
 8007f98:	4770      	bx	lr
 8007f9a:	bf00      	nop
 8007f9c:	20007718 	.word	0x20007718

08007fa0 <netif_set_up>:
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8007fa0:	f890 202f 	ldrb.w	r2, [r0, #47]	; 0x2f
 8007fa4:	07d1      	lsls	r1, r2, #31
 8007fa6:	d409      	bmi.n	8007fbc <netif_set_up+0x1c>
    netif->flags |= NETIF_FLAG_UP;
 8007fa8:	f042 0101 	orr.w	r1, r2, #1
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8007fac:	0752      	lsls	r2, r2, #29
    netif->flags |= NETIF_FLAG_UP;
 8007fae:	f880 102f 	strb.w	r1, [r0, #47]	; 0x2f
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8007fb2:	d503      	bpl.n	8007fbc <netif_set_up+0x1c>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007fb4:	6843      	ldr	r3, [r0, #4]
 8007fb6:	b10b      	cbz	r3, 8007fbc <netif_set_up+0x1c>
 8007fb8:	f7ff bf7a 	b.w	8007eb0 <netif_issue_reports.part.0>
 8007fbc:	4770      	bx	lr

08007fbe <netif_set_down>:
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
  if (netif->flags & NETIF_FLAG_UP) {
 8007fbe:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 8007fc2:	07d9      	lsls	r1, r3, #31
 8007fc4:	d507      	bpl.n	8007fd6 <netif_set_down+0x18>
    netif->flags &= ~NETIF_FLAG_UP;
 8007fc6:	f023 0101 	bic.w	r1, r3, #1
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8007fca:	071b      	lsls	r3, r3, #28
    netif->flags &= ~NETIF_FLAG_UP;
 8007fcc:	f880 102f 	strb.w	r1, [r0, #47]	; 0x2f
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8007fd0:	d501      	bpl.n	8007fd6 <netif_set_down+0x18>
      etharp_cleanup_netif(netif);
 8007fd2:	f7fe beb3 	b.w	8006d3c <etharp_cleanup_netif>
 8007fd6:	4770      	bx	lr

08007fd8 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8007fd8:	b510      	push	{r4, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8007fda:	f002 ff11 	bl	800ae00 <sys_arch_protect>
 8007fde:	4b09      	ldr	r3, [pc, #36]	; (8008004 <pbuf_free_ooseq_callback+0x2c>)
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	701a      	strb	r2, [r3, #0]
 8007fe4:	f002 ff18 	bl	800ae18 <sys_arch_unprotect>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007fe8:	4b07      	ldr	r3, [pc, #28]	; (8008008 <pbuf_free_ooseq_callback+0x30>)
 8007fea:	681c      	ldr	r4, [r3, #0]
 8007fec:	b904      	cbnz	r4, 8007ff0 <pbuf_free_ooseq_callback+0x18>
 8007fee:	bd10      	pop	{r4, pc}
    if (NULL != pcb->ooseq) {
 8007ff0:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8007ff2:	b120      	cbz	r0, 8007ffe <pbuf_free_ooseq_callback+0x26>
      tcp_segs_free(pcb->ooseq);
 8007ff4:	f000 fa65 	bl	80084c2 <tcp_segs_free>
      pcb->ooseq = NULL;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	6723      	str	r3, [r4, #112]	; 0x70
 8007ffc:	bd10      	pop	{r4, pc}
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007ffe:	68e4      	ldr	r4, [r4, #12]
 8008000:	e7f4      	b.n	8007fec <pbuf_free_ooseq_callback+0x14>
 8008002:	bf00      	nop
 8008004:	2000771c 	.word	0x2000771c
 8008008:	20007724 	.word	0x20007724

0800800c <pbuf_header_impl.part.0>:
  LWIP_ASSERT("p != NULL", p != NULL);
  if ((header_size_increment == 0) || (p == NULL)) {
    return 0;
  }

  if (header_size_increment < 0) {
 800800c:	2900      	cmp	r1, #0
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
 800800e:	b530      	push	{r4, r5, lr}
  if (header_size_increment < 0) {
 8008010:	da06      	bge.n	8008020 <pbuf_header_impl.part.0+0x14>
    increment_magnitude = -header_size_increment;
 8008012:	424c      	negs	r4, r1
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8008014:	8943      	ldrh	r3, [r0, #10]
    increment_magnitude = -header_size_increment;
 8008016:	b2a4      	uxth	r4, r4
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8008018:	42a3      	cmp	r3, r4
 800801a:	d202      	bcs.n	8008022 <pbuf_header_impl.part.0+0x16>
 800801c:	2001      	movs	r0, #1

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
}
 800801e:	bd30      	pop	{r4, r5, pc}
    increment_magnitude = header_size_increment;
 8008020:	b28c      	uxth	r4, r1
  type = p->type;
 8008022:	7b05      	ldrb	r5, [r0, #12]
  payload = p->payload;
 8008024:	6843      	ldr	r3, [r0, #4]
  if (type == PBUF_RAM || type == PBUF_POOL) {
 8008026:	b10d      	cbz	r5, 800802c <pbuf_header_impl.part.0+0x20>
 8008028:	2d03      	cmp	r5, #3
 800802a:	d10e      	bne.n	800804a <pbuf_header_impl.part.0+0x3e>
    p->payload = (u8_t *)p->payload - header_size_increment;
 800802c:	1a5b      	subs	r3, r3, r1
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800802e:	f100 0210 	add.w	r2, r0, #16
 8008032:	4293      	cmp	r3, r2
 8008034:	d3f2      	bcc.n	800801c <pbuf_header_impl.part.0+0x10>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8008036:	6043      	str	r3, [r0, #4]
  p->len += header_size_increment;
 8008038:	b289      	uxth	r1, r1
 800803a:	8943      	ldrh	r3, [r0, #10]
 800803c:	440b      	add	r3, r1
 800803e:	8143      	strh	r3, [r0, #10]
  p->tot_len += header_size_increment;
 8008040:	8903      	ldrh	r3, [r0, #8]
 8008042:	4419      	add	r1, r3
 8008044:	8101      	strh	r1, [r0, #8]
  return 0;
 8008046:	2000      	movs	r0, #0
 8008048:	bd30      	pop	{r4, r5, pc}
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 800804a:	3d01      	subs	r5, #1
 800804c:	2d01      	cmp	r5, #1
 800804e:	d8e5      	bhi.n	800801c <pbuf_header_impl.part.0+0x10>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8008050:	2900      	cmp	r1, #0
 8008052:	da04      	bge.n	800805e <pbuf_header_impl.part.0+0x52>
 8008054:	8942      	ldrh	r2, [r0, #10]
 8008056:	42a2      	cmp	r2, r4
 8008058:	d3e0      	bcc.n	800801c <pbuf_header_impl.part.0+0x10>
      p->payload = (u8_t *)p->payload - header_size_increment;
 800805a:	1a5b      	subs	r3, r3, r1
 800805c:	e7eb      	b.n	8008036 <pbuf_header_impl.part.0+0x2a>
    } else if ((header_size_increment > 0) && force) {
 800805e:	d0dd      	beq.n	800801c <pbuf_header_impl.part.0+0x10>
 8008060:	2a00      	cmp	r2, #0
 8008062:	d1fa      	bne.n	800805a <pbuf_header_impl.part.0+0x4e>
 8008064:	e7da      	b.n	800801c <pbuf_header_impl.part.0+0x10>
	...

08008068 <pbuf_pool_is_empty>:
{
 8008068:	b538      	push	{r3, r4, r5, lr}
  queued = pbuf_free_ooseq_pending;
 800806a:	4d0c      	ldr	r5, [pc, #48]	; (800809c <pbuf_pool_is_empty+0x34>)
  SYS_ARCH_PROTECT(old_level);
 800806c:	f002 fec8 	bl	800ae00 <sys_arch_protect>
  pbuf_free_ooseq_pending = 1;
 8008070:	2301      	movs	r3, #1
  queued = pbuf_free_ooseq_pending;
 8008072:	782c      	ldrb	r4, [r5, #0]
  pbuf_free_ooseq_pending = 1;
 8008074:	702b      	strb	r3, [r5, #0]
  queued = pbuf_free_ooseq_pending;
 8008076:	b2e4      	uxtb	r4, r4
  SYS_ARCH_UNPROTECT(old_level);
 8008078:	f002 fece 	bl	800ae18 <sys_arch_unprotect>
  if (!queued) {
 800807c:	b964      	cbnz	r4, 8008098 <pbuf_pool_is_empty+0x30>
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800807e:	4622      	mov	r2, r4
 8008080:	4621      	mov	r1, r4
 8008082:	4807      	ldr	r0, [pc, #28]	; (80080a0 <pbuf_pool_is_empty+0x38>)
 8008084:	f7fd fdbe 	bl	8005c04 <tcpip_callback_with_block>
 8008088:	b130      	cbz	r0, 8008098 <pbuf_pool_is_empty+0x30>
 800808a:	f002 feb9 	bl	800ae00 <sys_arch_protect>
 800808e:	702c      	strb	r4, [r5, #0]
}
 8008090:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8008094:	f002 bec0 	b.w	800ae18 <sys_arch_unprotect>
 8008098:	bd38      	pop	{r3, r4, r5, pc}
 800809a:	bf00      	nop
 800809c:	2000771c 	.word	0x2000771c
 80080a0:	08007fd9 	.word	0x08007fd9

080080a4 <pbuf_alloced_custom>:
{
 80080a4:	b570      	push	{r4, r5, r6, lr}
 80080a6:	9d04      	ldr	r5, [sp, #16]
  switch (l) {
 80080a8:	2804      	cmp	r0, #4
 80080aa:	d824      	bhi.n	80080f6 <pbuf_alloced_custom+0x52>
 80080ac:	e8df f000 	tbb	[pc, r0]
 80080b0:	1d1b031f 	.word	0x1d1b031f
 80080b4:	1d          	.byte	0x1d
 80080b5:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 80080b6:	2422      	movs	r4, #34	; 0x22
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80080b8:	3403      	adds	r4, #3
 80080ba:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 80080be:	f024 0403 	bic.w	r4, r4, #3
 80080c2:	190e      	adds	r6, r1, r4
 80080c4:	4286      	cmp	r6, r0
 80080c6:	f04f 0000 	mov.w	r0, #0
 80080ca:	d815      	bhi.n	80080f8 <pbuf_alloced_custom+0x54>
  p->pbuf.next = NULL;
 80080cc:	6018      	str	r0, [r3, #0]
  if (payload_mem != NULL) {
 80080ce:	b185      	cbz	r5, 80080f2 <pbuf_alloced_custom+0x4e>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80080d0:	442c      	add	r4, r5
 80080d2:	605c      	str	r4, [r3, #4]
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 80080d4:	2002      	movs	r0, #2
  p->pbuf.type = type;
 80080d6:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 80080d8:	2201      	movs	r2, #1
  p->pbuf.len = p->pbuf.tot_len = length;
 80080da:	8119      	strh	r1, [r3, #8]
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 80080dc:	7358      	strb	r0, [r3, #13]
  return &p->pbuf;
 80080de:	4618      	mov	r0, r3
  p->pbuf.len = p->pbuf.tot_len = length;
 80080e0:	8159      	strh	r1, [r3, #10]
  p->pbuf.ref = 1;
 80080e2:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 80080e4:	bd70      	pop	{r4, r5, r6, pc}
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 80080e6:	240e      	movs	r4, #14
    break;
 80080e8:	e7e6      	b.n	80080b8 <pbuf_alloced_custom+0x14>
    offset = 0;
 80080ea:	2400      	movs	r4, #0
    break;
 80080ec:	e7e4      	b.n	80080b8 <pbuf_alloced_custom+0x14>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 80080ee:	2436      	movs	r4, #54	; 0x36
 80080f0:	e7e2      	b.n	80080b8 <pbuf_alloced_custom+0x14>
    p->pbuf.payload = NULL;
 80080f2:	605d      	str	r5, [r3, #4]
 80080f4:	e7ee      	b.n	80080d4 <pbuf_alloced_custom+0x30>
    return NULL;
 80080f6:	2000      	movs	r0, #0
}
 80080f8:	bd70      	pop	{r4, r5, r6, pc}

080080fa <pbuf_header>:
  if ((header_size_increment == 0) || (p == NULL)) {
 80080fa:	b119      	cbz	r1, 8008104 <pbuf_header+0xa>
 80080fc:	b110      	cbz	r0, 8008104 <pbuf_header+0xa>
 80080fe:	2200      	movs	r2, #0
 8008100:	f7ff bf84 	b.w	800800c <pbuf_header_impl.part.0>
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
   return pbuf_header_impl(p, header_size_increment, 0);
}
 8008104:	2000      	movs	r0, #0
 8008106:	4770      	bx	lr

08008108 <pbuf_header_force>:
  if ((header_size_increment == 0) || (p == NULL)) {
 8008108:	b119      	cbz	r1, 8008112 <pbuf_header_force+0xa>
 800810a:	b110      	cbz	r0, 8008112 <pbuf_header_force+0xa>
 800810c:	2201      	movs	r2, #1
 800810e:	f7ff bf7d 	b.w	800800c <pbuf_header_impl.part.0>
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
   return pbuf_header_impl(p, header_size_increment, 1);
}
 8008112:	2000      	movs	r0, #0
 8008114:	4770      	bx	lr

08008116 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8008116:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8008118:	4604      	mov	r4, r0
 800811a:	b350      	cbz	r0, 8008172 <pbuf_free+0x5c>
 800811c:	2600      	movs	r6, #0
 800811e:	b2f7      	uxtb	r7, r6
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8008120:	b90c      	cbnz	r4, 8008126 <pbuf_free+0x10>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 8008122:	4638      	mov	r0, r7
 8008124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SYS_ARCH_PROTECT(old_level);
 8008126:	f002 fe6b 	bl	800ae00 <sys_arch_protect>
    ref = --(p->ref);
 800812a:	89e5      	ldrh	r5, [r4, #14]
 800812c:	3d01      	subs	r5, #1
 800812e:	b2ad      	uxth	r5, r5
 8008130:	81e5      	strh	r5, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 8008132:	f002 fe71 	bl	800ae18 <sys_arch_unprotect>
    if (ref == 0) {
 8008136:	2d00      	cmp	r5, #0
 8008138:	d1f3      	bne.n	8008122 <pbuf_free+0xc>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800813a:	7b63      	ldrb	r3, [r4, #13]
      q = p->next;
 800813c:	6825      	ldr	r5, [r4, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800813e:	079b      	lsls	r3, r3, #30
 8008140:	d505      	bpl.n	800814e <pbuf_free+0x38>
        pc->custom_free_function(p);
 8008142:	6923      	ldr	r3, [r4, #16]
 8008144:	4620      	mov	r0, r4
 8008146:	4798      	blx	r3
 8008148:	3601      	adds	r6, #1
      p = q;
 800814a:	462c      	mov	r4, r5
 800814c:	e7e7      	b.n	800811e <pbuf_free+0x8>
      type = p->type;
 800814e:	7b23      	ldrb	r3, [r4, #12]
        if (type == PBUF_POOL) {
 8008150:	2b03      	cmp	r3, #3
 8008152:	d104      	bne.n	800815e <pbuf_free+0x48>
          memp_free(MEMP_PBUF_POOL, p);
 8008154:	4621      	mov	r1, r4
 8008156:	200c      	movs	r0, #12
          memp_free(MEMP_PBUF, p);
 8008158:	f7ff fe94 	bl	8007e84 <memp_free>
 800815c:	e7f4      	b.n	8008148 <pbuf_free+0x32>
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 800815e:	3b01      	subs	r3, #1
 8008160:	2b01      	cmp	r3, #1
 8008162:	d802      	bhi.n	800816a <pbuf_free+0x54>
          memp_free(MEMP_PBUF, p);
 8008164:	4621      	mov	r1, r4
 8008166:	200b      	movs	r0, #11
 8008168:	e7f6      	b.n	8008158 <pbuf_free+0x42>
          mem_free(p);
 800816a:	4620      	mov	r0, r4
 800816c:	f7ff fd24 	bl	8007bb8 <mem_free>
 8008170:	e7ea      	b.n	8008148 <pbuf_free+0x32>
    return 0;
 8008172:	4607      	mov	r7, r0
 8008174:	e7d5      	b.n	8008122 <pbuf_free+0xc>

08008176 <pbuf_alloc>:
{
 8008176:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800817a:	460e      	mov	r6, r1
 800817c:	4617      	mov	r7, r2
  switch (layer) {
 800817e:	2804      	cmp	r0, #4
 8008180:	d843      	bhi.n	800820a <pbuf_alloc+0x94>
 8008182:	e8df f000 	tbb	[pc, r0]
 8008186:	030e      	.short	0x030e
 8008188:	0c0a      	.short	0x0c0a
 800818a:	0c          	.byte	0x0c
 800818b:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800818c:	2522      	movs	r5, #34	; 0x22
  switch (type) {
 800818e:	2f03      	cmp	r7, #3
 8008190:	d83b      	bhi.n	800820a <pbuf_alloc+0x94>
 8008192:	e8df f007 	tbb	[pc, r7]
 8008196:	6b52      	.short	0x6b52
 8008198:	086b      	.short	0x086b
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800819a:	250e      	movs	r5, #14
    break;
 800819c:	e7f7      	b.n	800818e <pbuf_alloc+0x18>
    offset = 0;
 800819e:	2500      	movs	r5, #0
    break;
 80081a0:	e7f5      	b.n	800818e <pbuf_alloc+0x18>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 80081a2:	2536      	movs	r5, #54	; 0x36
 80081a4:	e7f3      	b.n	800818e <pbuf_alloc+0x18>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80081a6:	200c      	movs	r0, #12
 80081a8:	f7ff fe60 	bl	8007e6c <memp_malloc>
    if (p == NULL) {
 80081ac:	4604      	mov	r4, r0
 80081ae:	b920      	cbnz	r0, 80081ba <pbuf_alloc+0x44>
      PBUF_POOL_IS_EMPTY();
 80081b0:	f7ff ff5a 	bl	8008068 <pbuf_pool_is_empty>
}
 80081b4:	4620      	mov	r0, r4
 80081b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    p->type = type;
 80081ba:	2203      	movs	r2, #3
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 80081bc:	1943      	adds	r3, r0, r5
    p->next = NULL;
 80081be:	2700      	movs	r7, #0
    while (rem_len > 0) {
 80081c0:	4681      	mov	r9, r0
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 80081c2:	4415      	add	r5, r2
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 80081c4:	3313      	adds	r3, #19
      q->type = type;
 80081c6:	4690      	mov	r8, r2
    p->type = type;
 80081c8:	7302      	strb	r2, [r0, #12]
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 80081ca:	f025 0503 	bic.w	r5, r5, #3
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 80081ce:	f023 0303 	bic.w	r3, r3, #3
    p->next = NULL;
 80081d2:	6007      	str	r7, [r0, #0]
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 80081d4:	f5c5 7514 	rsb	r5, r5, #592	; 0x250
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 80081d8:	6043      	str	r3, [r0, #4]
    p->ref = 1;
 80081da:	2301      	movs	r3, #1
    p->tot_len = length;
 80081dc:	8106      	strh	r6, [r0, #8]
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 80081de:	42b5      	cmp	r5, r6
    p->ref = 1;
 80081e0:	81c3      	strh	r3, [r0, #14]
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 80081e2:	bf28      	it	cs
 80081e4:	4635      	movcs	r5, r6
 80081e6:	8145      	strh	r5, [r0, #10]
    rem_len = length - p->len;
 80081e8:	1b75      	subs	r5, r6, r5
    while (rem_len > 0) {
 80081ea:	2d00      	cmp	r5, #0
 80081ec:	dc04      	bgt.n	80081f8 <pbuf_alloc+0x82>
  p->ref = 1;
 80081ee:	2301      	movs	r3, #1
 80081f0:	81e3      	strh	r3, [r4, #14]
  p->flags = 0;
 80081f2:	2300      	movs	r3, #0
 80081f4:	7363      	strb	r3, [r4, #13]
  return p;
 80081f6:	e7dd      	b.n	80081b4 <pbuf_alloc+0x3e>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80081f8:	200c      	movs	r0, #12
 80081fa:	f7ff fe37 	bl	8007e6c <memp_malloc>
      if (q == NULL) {
 80081fe:	b930      	cbnz	r0, 800820e <pbuf_alloc+0x98>
        PBUF_POOL_IS_EMPTY();
 8008200:	f7ff ff32 	bl	8008068 <pbuf_pool_is_empty>
        pbuf_free(p);
 8008204:	4620      	mov	r0, r4
 8008206:	f7ff ff86 	bl	8008116 <pbuf_free>
    return NULL;
 800820a:	2400      	movs	r4, #0
 800820c:	e7d2      	b.n	80081b4 <pbuf_alloc+0x3e>
      q->tot_len = (u16_t)rem_len;
 800820e:	b2ab      	uxth	r3, r5
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8008210:	f100 0210 	add.w	r2, r0, #16
      q->type = type;
 8008214:	f880 800c 	strb.w	r8, [r0, #12]
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8008218:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
      q->flags = 0;
 800821c:	7347      	strb	r7, [r0, #13]
      q->next = NULL;
 800821e:	6007      	str	r7, [r0, #0]
      r->next = q;
 8008220:	f8c9 0000 	str.w	r0, [r9]
      rem_len -= q->len;
 8008224:	4681      	mov	r9, r0
      q->tot_len = (u16_t)rem_len;
 8008226:	8103      	strh	r3, [r0, #8]
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8008228:	bf28      	it	cs
 800822a:	f44f 7314 	movcs.w	r3, #592	; 0x250
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 800822e:	6042      	str	r2, [r0, #4]
      q->ref = 1;
 8008230:	2201      	movs	r2, #1
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8008232:	8143      	strh	r3, [r0, #10]
      rem_len -= q->len;
 8008234:	1aed      	subs	r5, r5, r3
      q->ref = 1;
 8008236:	81c2      	strh	r2, [r0, #14]
 8008238:	e7d7      	b.n	80081ea <pbuf_alloc+0x74>
    p = (struct pbuf*)mem_malloc(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length));
 800823a:	f105 0013 	add.w	r0, r5, #19
 800823e:	1cf3      	adds	r3, r6, #3
 8008240:	f020 0003 	bic.w	r0, r0, #3
 8008244:	f023 0303 	bic.w	r3, r3, #3
 8008248:	4418      	add	r0, r3
 800824a:	b280      	uxth	r0, r0
 800824c:	f7ff fd78 	bl	8007d40 <mem_malloc>
    if (p == NULL) {
 8008250:	4604      	mov	r4, r0
 8008252:	2800      	cmp	r0, #0
 8008254:	d0d9      	beq.n	800820a <pbuf_alloc+0x94>
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8008256:	4405      	add	r5, r0
    p->next = NULL;
 8008258:	2300      	movs	r3, #0
    p->len = p->tot_len = length;
 800825a:	8106      	strh	r6, [r0, #8]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800825c:	3513      	adds	r5, #19
    p->len = p->tot_len = length;
 800825e:	8146      	strh	r6, [r0, #10]
    p->next = NULL;
 8008260:	6003      	str	r3, [r0, #0]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8008262:	f025 0503 	bic.w	r5, r5, #3
    p->type = type;
 8008266:	7303      	strb	r3, [r0, #12]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8008268:	6045      	str	r5, [r0, #4]
    break;
 800826a:	e7c0      	b.n	80081ee <pbuf_alloc+0x78>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800826c:	200b      	movs	r0, #11
 800826e:	f7ff fdfd 	bl	8007e6c <memp_malloc>
    if (p == NULL) {
 8008272:	4604      	mov	r4, r0
 8008274:	2800      	cmp	r0, #0
 8008276:	d0c8      	beq.n	800820a <pbuf_alloc+0x94>
    p->payload = NULL;
 8008278:	2300      	movs	r3, #0
    p->len = p->tot_len = length;
 800827a:	8106      	strh	r6, [r0, #8]
 800827c:	8146      	strh	r6, [r0, #10]
    p->payload = NULL;
 800827e:	6043      	str	r3, [r0, #4]
    p->next = NULL;
 8008280:	6003      	str	r3, [r0, #0]
    p->type = type;
 8008282:	7307      	strb	r7, [r0, #12]
    break;
 8008284:	e7b3      	b.n	80081ee <pbuf_alloc+0x78>

08008286 <pbuf_realloc>:
{
 8008286:	b538      	push	{r3, r4, r5, lr}
  if (new_len >= p->tot_len) {
 8008288:	8903      	ldrh	r3, [r0, #8]
{
 800828a:	4604      	mov	r4, r0
  if (new_len >= p->tot_len) {
 800828c:	428b      	cmp	r3, r1
 800828e:	d91b      	bls.n	80082c8 <pbuf_realloc+0x42>
 8008290:	460d      	mov	r5, r1
    q->tot_len += (u16_t)grow;
 8008292:	1acb      	subs	r3, r1, r3
  while (rem_len > q->len) {
 8008294:	8961      	ldrh	r1, [r4, #10]
 8008296:	428d      	cmp	r5, r1
 8008298:	d817      	bhi.n	80082ca <pbuf_realloc+0x44>
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 800829a:	7b23      	ldrb	r3, [r4, #12]
 800829c:	b963      	cbnz	r3, 80082b8 <pbuf_realloc+0x32>
 800829e:	428d      	cmp	r5, r1
 80082a0:	d00a      	beq.n	80082b8 <pbuf_realloc+0x32>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80082a2:	7b63      	ldrb	r3, [r4, #13]
 80082a4:	079b      	lsls	r3, r3, #30
 80082a6:	d407      	bmi.n	80082b8 <pbuf_realloc+0x32>
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 80082a8:	6861      	ldr	r1, [r4, #4]
 80082aa:	4620      	mov	r0, r4
 80082ac:	1b09      	subs	r1, r1, r4
 80082ae:	4429      	add	r1, r5
 80082b0:	b289      	uxth	r1, r1
 80082b2:	f7ff fcd9 	bl	8007c68 <mem_trim>
 80082b6:	4604      	mov	r4, r0
  if (q->next != NULL) {
 80082b8:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 80082ba:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 80082bc:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 80082be:	b108      	cbz	r0, 80082c4 <pbuf_realloc+0x3e>
    pbuf_free(q->next);
 80082c0:	f7ff ff29 	bl	8008116 <pbuf_free>
  q->next = NULL;
 80082c4:	2300      	movs	r3, #0
 80082c6:	6023      	str	r3, [r4, #0]
 80082c8:	bd38      	pop	{r3, r4, r5, pc}
    q->tot_len += (u16_t)grow;
 80082ca:	8922      	ldrh	r2, [r4, #8]
    rem_len -= q->len;
 80082cc:	1a6d      	subs	r5, r5, r1
    q->tot_len += (u16_t)grow;
 80082ce:	441a      	add	r2, r3
    rem_len -= q->len;
 80082d0:	b2ad      	uxth	r5, r5
    q->tot_len += (u16_t)grow;
 80082d2:	8122      	strh	r2, [r4, #8]
    q = q->next;
 80082d4:	6824      	ldr	r4, [r4, #0]
 80082d6:	e7dd      	b.n	8008294 <pbuf_realloc+0xe>

080082d8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80082d8:	4603      	mov	r3, r0
  u16_t len;

  len = 0;
  while (p != NULL) {
 80082da:	2200      	movs	r2, #0
 80082dc:	b290      	uxth	r0, r2
 80082de:	3201      	adds	r2, #1
 80082e0:	b903      	cbnz	r3, 80082e4 <pbuf_clen+0xc>
    ++len;
    p = p->next;
  }
  return len;
}
 80082e2:	4770      	bx	lr
    p = p->next;
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	e7f9      	b.n	80082dc <pbuf_clen+0x4>

080082e8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80082e8:	b510      	push	{r4, lr}
  /* pbuf given? */
  if (p != NULL) {
 80082ea:	4604      	mov	r4, r0
 80082ec:	b140      	cbz	r0, 8008300 <pbuf_ref+0x18>
    SYS_ARCH_INC(p->ref, 1);
 80082ee:	f002 fd87 	bl	800ae00 <sys_arch_protect>
 80082f2:	89e3      	ldrh	r3, [r4, #14]
 80082f4:	3301      	adds	r3, #1
 80082f6:	81e3      	strh	r3, [r4, #14]
  }
}
 80082f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SYS_ARCH_INC(p->ref, 1);
 80082fc:	f002 bd8c 	b.w	800ae18 <sys_arch_unprotect>
 8008300:	bd10      	pop	{r4, pc}

08008302 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8008302:	b510      	push	{r4, lr}
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8008304:	b150      	cbz	r0, 800831c <pbuf_cat+0x1a>
 8008306:	b909      	cbnz	r1, 800830c <pbuf_cat+0xa>
 8008308:	bd10      	pop	{r4, pc}
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 800830a:	4620      	mov	r0, r4
 800830c:	8903      	ldrh	r3, [r0, #8]
 800830e:	890a      	ldrh	r2, [r1, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8008310:	6804      	ldr	r4, [r0, #0]
    p->tot_len += t->tot_len;
 8008312:	4413      	add	r3, r2
 8008314:	8103      	strh	r3, [r0, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8008316:	2c00      	cmp	r4, #0
 8008318:	d1f7      	bne.n	800830a <pbuf_cat+0x8>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800831a:	6001      	str	r1, [r0, #0]
 800831c:	bd10      	pop	{r4, pc}

0800831e <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800831e:	b510      	push	{r4, lr}
  pbuf_cat(h, t);
 8008320:	f7ff ffef 	bl	8008302 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8008324:	4608      	mov	r0, r1
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8008326:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pbuf_ref(t);
 800832a:	f7ff bfdd 	b.w	80082e8 <pbuf_ref>

0800832e <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800832e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008332:	460c      	mov	r4, r1

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8008334:	4605      	mov	r5, r0
 8008336:	b918      	cbnz	r0, 8008340 <pbuf_copy+0x12>
 8008338:	f06f 000f 	mvn.w	r0, #15
 800833c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008340:	2900      	cmp	r1, #0
 8008342:	d0f9      	beq.n	8008338 <pbuf_copy+0xa>
 8008344:	8902      	ldrh	r2, [r0, #8]
 8008346:	890b      	ldrh	r3, [r1, #8]
 8008348:	429a      	cmp	r2, r3
 800834a:	d3f5      	bcc.n	8008338 <pbuf_copy+0xa>
 800834c:	f04f 0800 	mov.w	r8, #0
 8008350:	4647      	mov	r7, r8

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8008352:	8963      	ldrh	r3, [r4, #10]
 8008354:	896e      	ldrh	r6, [r5, #10]
 8008356:	eba3 0308 	sub.w	r3, r3, r8
      len = p_from->len - offset_from;
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800835a:	6868      	ldr	r0, [r5, #4]
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800835c:	1bf6      	subs	r6, r6, r7
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800835e:	6861      	ldr	r1, [r4, #4]
 8008360:	4438      	add	r0, r7
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8008362:	429e      	cmp	r6, r3
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8008364:	4441      	add	r1, r8
      len = p_from->len - offset_from;
 8008366:	bfac      	ite	ge
 8008368:	b29e      	uxthge	r6, r3
      len = p_to->len - offset_to;
 800836a:	b2b6      	uxthlt	r6, r6
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800836c:	4632      	mov	r2, r6
    offset_to += len;
 800836e:	4437      	add	r7, r6
    offset_from += len;
 8008370:	4446      	add	r6, r8
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8008372:	f003 fbfa 	bl	800bb6a <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
    if (offset_from >= p_from->len) {
 8008376:	8962      	ldrh	r2, [r4, #10]
    offset_to += len;
 8008378:	b2bf      	uxth	r7, r7
    offset_from += len;
 800837a:	fa1f f886 	uxth.w	r8, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800837e:	896b      	ldrh	r3, [r5, #10]
    if (offset_from >= p_from->len) {
 8008380:	4542      	cmp	r2, r8
      /* on to next p_from (if any) */
      offset_from = 0;
      p_from = p_from->next;
 8008382:	bf9c      	itt	ls
 8008384:	6824      	ldrls	r4, [r4, #0]
      offset_from = 0;
 8008386:	f04f 0800 	movls.w	r8, #0
    }
    if (offset_to == p_to->len) {
 800838a:	429f      	cmp	r7, r3
 800838c:	d10b      	bne.n	80083a6 <pbuf_copy+0x78>
      /* on to next p_to (if any) */
      offset_to = 0;
      p_to = p_to->next;
 800838e:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8008390:	b945      	cbnz	r5, 80083a4 <pbuf_copy+0x76>
 8008392:	2c00      	cmp	r4, #0
 8008394:	d1d0      	bne.n	8008338 <pbuf_copy+0xa>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8008396:	4620      	mov	r0, r4
 8008398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800839c:	f06f 0005 	mvn.w	r0, #5
 80083a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      offset_to = 0;
 80083a4:	2700      	movs	r7, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80083a6:	b134      	cbz	r4, 80083b6 <pbuf_copy+0x88>
 80083a8:	8962      	ldrh	r2, [r4, #10]
 80083aa:	8923      	ldrh	r3, [r4, #8]
 80083ac:	429a      	cmp	r2, r3
 80083ae:	d102      	bne.n	80083b6 <pbuf_copy+0x88>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80083b0:	6823      	ldr	r3, [r4, #0]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d1f2      	bne.n	800839c <pbuf_copy+0x6e>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80083b6:	896a      	ldrh	r2, [r5, #10]
 80083b8:	892b      	ldrh	r3, [r5, #8]
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d102      	bne.n	80083c4 <pbuf_copy+0x96>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80083be:	682b      	ldr	r3, [r5, #0]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d1eb      	bne.n	800839c <pbuf_copy+0x6e>
  } while (p_from);
 80083c4:	2c00      	cmp	r4, #0
 80083c6:	d1c4      	bne.n	8008352 <pbuf_copy+0x24>
 80083c8:	e7e5      	b.n	8008396 <pbuf_copy+0x68>

080083ca <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80083ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083ce:	460f      	mov	r7, r1
 80083d0:	4690      	mov	r8, r2
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80083d2:	4606      	mov	r6, r0
 80083d4:	b320      	cbz	r0, 8008420 <pbuf_copy_partial+0x56>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80083d6:	b329      	cbz	r1, 8008424 <pbuf_copy_partial+0x5a>
 80083d8:	2500      	movs	r5, #0
  if ((buf == NULL) || (dataptr == NULL)) {
    return 0;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80083da:	f1b8 0f00 	cmp.w	r8, #0
 80083de:	d000      	beq.n	80083e2 <pbuf_copy_partial+0x18>
 80083e0:	b916      	cbnz	r6, 80083e8 <pbuf_copy_partial+0x1e>
      len -= buf_copy_len;
      offset = 0;
    }
  }
  return copied_total;
}
 80083e2:	4628      	mov	r0, r5
 80083e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((offset != 0) && (offset >= p->len)) {
 80083e8:	b133      	cbz	r3, 80083f8 <pbuf_copy_partial+0x2e>
 80083ea:	8971      	ldrh	r1, [r6, #10]
 80083ec:	428b      	cmp	r3, r1
 80083ee:	d303      	bcc.n	80083f8 <pbuf_copy_partial+0x2e>
      offset -= p->len;
 80083f0:	1a5b      	subs	r3, r3, r1
 80083f2:	b29b      	uxth	r3, r3
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80083f4:	6836      	ldr	r6, [r6, #0]
 80083f6:	e7f0      	b.n	80083da <pbuf_copy_partial+0x10>
      buf_copy_len = p->len - offset;
 80083f8:	8974      	ldrh	r4, [r6, #10]
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 80083fa:	1978      	adds	r0, r7, r5
 80083fc:	6871      	ldr	r1, [r6, #4]
      buf_copy_len = p->len - offset;
 80083fe:	1ae4      	subs	r4, r4, r3
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8008400:	4419      	add	r1, r3
      buf_copy_len = p->len - offset;
 8008402:	b2a4      	uxth	r4, r4
 8008404:	4544      	cmp	r4, r8
 8008406:	bf28      	it	cs
 8008408:	4644      	movcs	r4, r8
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800840a:	4622      	mov	r2, r4
      copied_total += buf_copy_len;
 800840c:	4425      	add	r5, r4
      len -= buf_copy_len;
 800840e:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8008412:	f003 fbaa 	bl	800bb6a <memcpy>
      copied_total += buf_copy_len;
 8008416:	b2ad      	uxth	r5, r5
      offset = 0;
 8008418:	2300      	movs	r3, #0
      len -= buf_copy_len;
 800841a:	fa1f f884 	uxth.w	r8, r4
 800841e:	e7e9      	b.n	80083f4 <pbuf_copy_partial+0x2a>
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8008420:	4605      	mov	r5, r0
 8008422:	e7de      	b.n	80083e2 <pbuf_copy_partial+0x18>
 8008424:	460d      	mov	r5, r1
 8008426:	e7dc      	b.n	80083e2 <pbuf_copy_partial+0x18>

08008428 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8008428:	4770      	bx	lr

0800842a <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800842a:	b530      	push	{r4, r5, lr}
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800842c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
{
 800842e:	4602      	mov	r2, r0
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8008430:	8d05      	ldrh	r5, [r0, #40]	; 0x28
 8008432:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008434:	1a6b      	subs	r3, r5, r1
 8008436:	1918      	adds	r0, r3, r4
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8008438:	8e53      	ldrh	r3, [r2, #50]	; 0x32
 800843a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800843e:	bf94      	ite	ls
 8008440:	1ac3      	subls	r3, r0, r3
 8008442:	f5a0 6386 	subhi.w	r3, r0, #1072	; 0x430
 8008446:	2b00      	cmp	r3, #0
 8008448:	db01      	blt.n	800844e <tcp_update_rcv_ann_wnd+0x24>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800844a:	8555      	strh	r5, [r2, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800844c:	bd30      	pop	{r4, r5, pc}
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800844e:	1a63      	subs	r3, r4, r1
 8008450:	2000      	movs	r0, #0
 8008452:	2b00      	cmp	r3, #0
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8008454:	bfd6      	itet	le
 8008456:	1b09      	suble	r1, r1, r4
      pcb->rcv_ann_wnd = 0;
 8008458:	8550      	strhgt	r0, [r2, #42]	; 0x2a
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800845a:	8551      	strhle	r1, [r2, #42]	; 0x2a
    }
    return 0;
  }
}
 800845c:	bd30      	pop	{r4, r5, pc}

0800845e <tcp_recved>:

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 800845e:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8008460:	4419      	add	r1, r3
 8008462:	b289      	uxth	r1, r1
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8008464:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
{
 8008468:	b510      	push	{r4, lr}
 800846a:	4604      	mov	r4, r0
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 800846c:	d911      	bls.n	8008492 <tcp_recved+0x34>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800846e:	f44f 6306 	mov.w	r3, #2144	; 0x860
 8008472:	8523      	strh	r3, [r4, #40]	; 0x28
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8008474:	4620      	mov	r0, r4
 8008476:	f7ff ffd8 	bl	800842a <tcp_update_rcv_ann_wnd>

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800847a:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 800847e:	db11      	blt.n	80084a4 <tcp_recved+0x46>
    tcp_ack_now(pcb);
 8008480:	7ea3      	ldrb	r3, [r4, #26]
    tcp_output(pcb);
 8008482:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 8008484:	f043 0302 	orr.w	r3, r3, #2
 8008488:	76a3      	strb	r3, [r4, #26]
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800848a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tcp_output(pcb);
 800848e:	f001 be8b 	b.w	800a1a8 <tcp_output>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8008492:	7d03      	ldrb	r3, [r0, #20]
  } else if (pcb->rcv_wnd == 0) {
 8008494:	b109      	cbz	r1, 800849a <tcp_recved+0x3c>
  pcb->rcv_wnd += len;
 8008496:	8521      	strh	r1, [r4, #40]	; 0x28
 8008498:	e7ec      	b.n	8008474 <tcp_recved+0x16>
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 800849a:	2b07      	cmp	r3, #7
 800849c:	d0e7      	beq.n	800846e <tcp_recved+0x10>
 800849e:	2b09      	cmp	r3, #9
 80084a0:	d1f9      	bne.n	8008496 <tcp_recved+0x38>
 80084a2:	e7e4      	b.n	800846e <tcp_recved+0x10>
 80084a4:	bd10      	pop	{r4, pc}

080084a6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80084a6:	b510      	push	{r4, lr}
  if (seg != NULL) {
 80084a8:	4604      	mov	r4, r0
 80084aa:	b148      	cbz	r0, 80084c0 <tcp_seg_free+0x1a>
    if (seg->p != NULL) {
 80084ac:	6840      	ldr	r0, [r0, #4]
 80084ae:	b108      	cbz	r0, 80084b4 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 80084b0:	f7ff fe31 	bl	8008116 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80084b4:	4621      	mov	r1, r4
 80084b6:	2003      	movs	r0, #3
  }
}
 80084b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 80084bc:	f7ff bce2 	b.w	8007e84 <memp_free>
 80084c0:	bd10      	pop	{r4, pc}

080084c2 <tcp_segs_free>:
{
 80084c2:	b510      	push	{r4, lr}
  while (seg != NULL) {
 80084c4:	b900      	cbnz	r0, 80084c8 <tcp_segs_free+0x6>
}
 80084c6:	bd10      	pop	{r4, pc}
    struct tcp_seg *next = seg->next;
 80084c8:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 80084ca:	f7ff ffec 	bl	80084a6 <tcp_seg_free>
    seg = next;
 80084ce:	4620      	mov	r0, r4
 80084d0:	e7f8      	b.n	80084c4 <tcp_segs_free+0x2>

080084d2 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80084d2:	b538      	push	{r3, r4, r5, lr}
 80084d4:	4604      	mov	r4, r0
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80084d6:	2003      	movs	r0, #3
 80084d8:	f7ff fcc8 	bl	8007e6c <memp_malloc>
  if (cseg == NULL) {
 80084dc:	4605      	mov	r5, r0
 80084de:	b160      	cbz	r0, 80084fa <tcp_seg_copy+0x28>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80084e0:	4620      	mov	r0, r4
 80084e2:	462b      	mov	r3, r5
 80084e4:	f104 0210 	add.w	r2, r4, #16
 80084e8:	f850 1b04 	ldr.w	r1, [r0], #4
 80084ec:	4290      	cmp	r0, r2
 80084ee:	f843 1b04 	str.w	r1, [r3], #4
 80084f2:	d1f9      	bne.n	80084e8 <tcp_seg_copy+0x16>
  pbuf_ref(cseg->p);
 80084f4:	6868      	ldr	r0, [r5, #4]
 80084f6:	f7ff fef7 	bl	80082e8 <pbuf_ref>
  return cseg;
}
 80084fa:	4628      	mov	r0, r5
 80084fc:	bd38      	pop	{r3, r4, r5, pc}

080084fe <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80084fe:	b538      	push	{r3, r4, r5, lr}
  if (pcb->state != CLOSED &&
 8008500:	7d03      	ldrb	r3, [r0, #20]
{
 8008502:	4604      	mov	r4, r0
  if (pcb->state != CLOSED &&
 8008504:	2b01      	cmp	r3, #1
 8008506:	d919      	bls.n	800853c <tcp_pcb_purge+0x3e>
 8008508:	2b0a      	cmp	r3, #10
 800850a:	d017      	beq.n	800853c <tcp_pcb_purge+0x3e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800850c:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800850e:	b118      	cbz	r0, 8008518 <tcp_pcb_purge+0x1a>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8008510:	f7ff fe01 	bl	8008116 <pbuf_free>
      pcb->refused_data = NULL;
 8008514:	2300      	movs	r3, #0
 8008516:	6763      	str	r3, [r4, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 8008518:	6f20      	ldr	r0, [r4, #112]	; 0x70
    pcb->ooseq = NULL;
 800851a:	2500      	movs	r5, #0
    tcp_segs_free(pcb->ooseq);
 800851c:	f7ff ffd1 	bl	80084c2 <tcp_segs_free>
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8008520:	f64f 73ff 	movw	r3, #65535	; 0xffff

    tcp_segs_free(pcb->unsent);
 8008524:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    pcb->rtime = -1;
 8008526:	8623      	strh	r3, [r4, #48]	; 0x30
    pcb->ooseq = NULL;
 8008528:	6725      	str	r5, [r4, #112]	; 0x70
    tcp_segs_free(pcb->unsent);
 800852a:	f7ff ffca 	bl	80084c2 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800852e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8008530:	f7ff ffc7 	bl	80084c2 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8008534:	66a5      	str	r5, [r4, #104]	; 0x68
 8008536:	66e5      	str	r5, [r4, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8008538:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
 800853c:	bd38      	pop	{r3, r4, r5, pc}
	...

08008540 <tcp_slowtmr>:
{
 8008540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 8008544:	4db3      	ldr	r5, [pc, #716]	; (8008814 <tcp_slowtmr+0x2d4>)
{
 8008546:	b085      	sub	sp, #20
      tcp_active_pcbs_changed = 0;
 8008548:	f8df 82e4 	ldr.w	r8, [pc, #740]	; 8008830 <tcp_slowtmr+0x2f0>
  ++tcp_ticks;
 800854c:	682b      	ldr	r3, [r5, #0]
 800854e:	3301      	adds	r3, #1
 8008550:	602b      	str	r3, [r5, #0]
  ++tcp_timer_ctr;
 8008552:	4bb1      	ldr	r3, [pc, #708]	; (8008818 <tcp_slowtmr+0x2d8>)
 8008554:	781a      	ldrb	r2, [r3, #0]
 8008556:	469b      	mov	fp, r3
 8008558:	3201      	adds	r2, #1
 800855a:	701a      	strb	r2, [r3, #0]
  pcb = tcp_active_pcbs;
 800855c:	4faf      	ldr	r7, [pc, #700]	; (800881c <tcp_slowtmr+0x2dc>)
  prev = NULL;
 800855e:	2600      	movs	r6, #0
  pcb = tcp_active_pcbs;
 8008560:	683c      	ldr	r4, [r7, #0]
  while (pcb != NULL) {
 8008562:	b93c      	cbnz	r4, 8008574 <tcp_slowtmr+0x34>
  pcb = tcp_tw_pcbs;
 8008564:	4fae      	ldr	r7, [pc, #696]	; (8008820 <tcp_slowtmr+0x2e0>)
 8008566:	683e      	ldr	r6, [r7, #0]
  while (pcb != NULL) {
 8008568:	2e00      	cmp	r6, #0
 800856a:	f040 8139 	bne.w	80087e0 <tcp_slowtmr+0x2a0>
}
 800856e:	b005      	add	sp, #20
 8008570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (pcb->last_timer == tcp_timer_ctr) {
 8008574:	f89b 3000 	ldrb.w	r3, [fp]
 8008578:	7f62      	ldrb	r2, [r4, #29]
 800857a:	429a      	cmp	r2, r3
 800857c:	d105      	bne.n	800858a <tcp_slowtmr+0x4a>
      pcb = pcb->next;
 800857e:	f8d4 900c 	ldr.w	r9, [r4, #12]
 8008582:	4634      	mov	r4, r6
      continue;
 8008584:	4626      	mov	r6, r4
 8008586:	464c      	mov	r4, r9
 8008588:	e7eb      	b.n	8008562 <tcp_slowtmr+0x22>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800858a:	7d21      	ldrb	r1, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 800858c:	7763      	strb	r3, [r4, #29]
    if (pcb->state == SYN_SENT && pcb->nrtx == TCP_SYNMAXRTX) {
 800858e:	2902      	cmp	r1, #2
 8008590:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8008594:	d102      	bne.n	800859c <tcp_slowtmr+0x5c>
 8008596:	2a06      	cmp	r2, #6
 8008598:	f000 80de 	beq.w	8008758 <tcp_slowtmr+0x218>
    else if (pcb->nrtx == TCP_MAXRTX) {
 800859c:	2a0c      	cmp	r2, #12
 800859e:	f000 80db 	beq.w	8008758 <tcp_slowtmr+0x218>
      if (pcb->persist_backoff > 0) {
 80085a2:	f894 a095 	ldrb.w	sl, [r4, #149]	; 0x95
 80085a6:	f1ba 0f00 	cmp.w	sl, #0
 80085aa:	f000 809e 	beq.w	80086ea <tcp_slowtmr+0x1aa>
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 80085ae:	489d      	ldr	r0, [pc, #628]	; (8008824 <tcp_slowtmr+0x2e4>)
        if (pcb->persist_cnt < backoff_cnt) {
 80085b0:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 80085b4:	4482      	add	sl, r0
 80085b6:	f81a 2c01 	ldrb.w	r2, [sl, #-1]
        if (pcb->persist_cnt < backoff_cnt) {
 80085ba:	429a      	cmp	r2, r3
          pcb->persist_cnt++;
 80085bc:	bf84      	itt	hi
 80085be:	3301      	addhi	r3, #1
 80085c0:	f884 3094 	strbhi.w	r3, [r4, #148]	; 0x94
        if (pcb->persist_cnt >= backoff_cnt) {
 80085c4:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d27d      	bcs.n	80086c8 <tcp_slowtmr+0x188>
    pcb_remove = 0;
 80085cc:	f04f 0a00 	mov.w	sl, #0
    if (pcb->state == FIN_WAIT_2) {
 80085d0:	7d23      	ldrb	r3, [r4, #20]
 80085d2:	2b06      	cmp	r3, #6
 80085d4:	d10b      	bne.n	80085ee <tcp_slowtmr+0xae>
      if (pcb->flags & TF_RXCLOSED) {
 80085d6:	7ea2      	ldrb	r2, [r4, #26]
 80085d8:	06d2      	lsls	r2, r2, #27
 80085da:	d508      	bpl.n	80085ee <tcp_slowtmr+0xae>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80085dc:	682a      	ldr	r2, [r5, #0]
 80085de:	6a21      	ldr	r1, [r4, #32]
 80085e0:	1a52      	subs	r2, r2, r1
 80085e2:	2a28      	cmp	r2, #40	; 0x28
          ++pcb_remove;
 80085e4:	bf84      	itt	hi
 80085e6:	f10a 0a01 	addhi.w	sl, sl, #1
 80085ea:	fa5f fa8a 	uxtbhi.w	sl, sl
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80085ee:	f894 9008 	ldrb.w	r9, [r4, #8]
 80085f2:	f019 0908 	ands.w	r9, r9, #8
 80085f6:	d01a      	beq.n	800862e <tcp_slowtmr+0xee>
 80085f8:	2b04      	cmp	r3, #4
 80085fa:	d002      	beq.n	8008602 <tcp_slowtmr+0xc2>
       ((pcb->state == ESTABLISHED) ||
 80085fc:	2b07      	cmp	r3, #7
 80085fe:	f040 80c0 	bne.w	8008782 <tcp_slowtmr+0x242>
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8008602:	f8d4 e090 	ldr.w	lr, [r4, #144]	; 0x90
 8008606:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800860a:	6829      	ldr	r1, [r5, #0]
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800860c:	f50e 2224 	add.w	r2, lr, #671744	; 0xa4000
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008610:	6a23      	ldr	r3, [r4, #32]
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8008612:	f602 42b8 	addw	r2, r2, #3256	; 0xcb8
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008616:	1ac9      	subs	r1, r1, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8008618:	fbb2 f2f0 	udiv	r2, r2, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800861c:	4291      	cmp	r1, r2
 800861e:	f240 809e 	bls.w	800875e <tcp_slowtmr+0x21e>
        ++pcb_remove;
 8008622:	f10a 0a01 	add.w	sl, sl, #1
        ++pcb_reset;
 8008626:	f04f 0901 	mov.w	r9, #1
        ++pcb_remove;
 800862a:	fa5f fa8a 	uxtb.w	sl, sl
    if (pcb->ooseq != NULL &&
 800862e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8008630:	b168      	cbz	r0, 800864e <tcp_slowtmr+0x10e>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 8008632:	682b      	ldr	r3, [r5, #0]
 8008634:	6a22      	ldr	r2, [r4, #32]
 8008636:	1a9a      	subs	r2, r3, r2
 8008638:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 800863c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
 8008640:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 8008644:	d303      	bcc.n	800864e <tcp_slowtmr+0x10e>
      tcp_segs_free(pcb->ooseq);
 8008646:	f7ff ff3c 	bl	80084c2 <tcp_segs_free>
      pcb->ooseq = NULL;
 800864a:	2300      	movs	r3, #0
 800864c:	6723      	str	r3, [r4, #112]	; 0x70
    if (pcb->state == SYN_RCVD) {
 800864e:	7d23      	ldrb	r3, [r4, #20]
 8008650:	2b03      	cmp	r3, #3
 8008652:	f040 8099 	bne.w	8008788 <tcp_slowtmr+0x248>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008656:	682b      	ldr	r3, [r5, #0]
 8008658:	6a22      	ldr	r2, [r4, #32]
 800865a:	1a9b      	subs	r3, r3, r2
 800865c:	2b28      	cmp	r3, #40	; 0x28
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800865e:	d803      	bhi.n	8008668 <tcp_slowtmr+0x128>
    if (pcb_remove) {
 8008660:	f1ba 0f00 	cmp.w	sl, #0
 8008664:	f000 809a 	beq.w	800879c <tcp_slowtmr+0x25c>
      tcp_pcb_purge(pcb);
 8008668:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 800866a:	f8d4 a08c 	ldr.w	sl, [r4, #140]	; 0x8c
      tcp_pcb_purge(pcb);
 800866e:	f7ff ff46 	bl	80084fe <tcp_pcb_purge>
 8008672:	68e3      	ldr	r3, [r4, #12]
      if (prev != NULL) {
 8008674:	2e00      	cmp	r6, #0
 8008676:	f000 808f 	beq.w	8008798 <tcp_slowtmr+0x258>
        prev->next = pcb->next;
 800867a:	60f3      	str	r3, [r6, #12]
      if (pcb_reset) {
 800867c:	f1b9 0f00 	cmp.w	r9, #0
 8008680:	d009      	beq.n	8008696 <tcp_slowtmr+0x156>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008682:	8b23      	ldrh	r3, [r4, #24]
 8008684:	4622      	mov	r2, r4
 8008686:	9301      	str	r3, [sp, #4]
 8008688:	8ae3      	ldrh	r3, [r4, #22]
 800868a:	9300      	str	r3, [sp, #0]
 800868c:	1d23      	adds	r3, r4, #4
 800868e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008690:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8008692:	f001 fecb 	bl	800a42c <tcp_rst>
      err_arg = pcb->callback_arg;
 8008696:	6923      	ldr	r3, [r4, #16]
      memp_free(MEMP_TCP_PCB, pcb2);
 8008698:	4621      	mov	r1, r4
 800869a:	2001      	movs	r0, #1
      pcb = pcb->next;
 800869c:	f8d4 900c 	ldr.w	r9, [r4, #12]
      err_arg = pcb->callback_arg;
 80086a0:	9303      	str	r3, [sp, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 80086a2:	f7ff fbef 	bl	8007e84 <memp_free>
      tcp_active_pcbs_changed = 0;
 80086a6:	2200      	movs	r2, #0
 80086a8:	f888 2000 	strb.w	r2, [r8]
      TCP_EVENT_ERR(err_fn, err_arg, ERR_ABRT);
 80086ac:	f1ba 0f00 	cmp.w	sl, #0
 80086b0:	d004      	beq.n	80086bc <tcp_slowtmr+0x17c>
 80086b2:	9b03      	ldr	r3, [sp, #12]
 80086b4:	f06f 010c 	mvn.w	r1, #12
 80086b8:	4618      	mov	r0, r3
 80086ba:	47d0      	blx	sl
      if (tcp_active_pcbs_changed) {
 80086bc:	f898 3000 	ldrb.w	r3, [r8]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	f43f af5e 	beq.w	8008582 <tcp_slowtmr+0x42>
 80086c6:	e749      	b.n	800855c <tcp_slowtmr+0x1c>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 80086c8:	4620      	mov	r0, r4
 80086ca:	f001 ff8c 	bl	800a5e6 <tcp_zero_window_probe>
 80086ce:	2800      	cmp	r0, #0
 80086d0:	f47f af7c 	bne.w	80085cc <tcp_slowtmr+0x8c>
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80086d4:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
            pcb->persist_cnt = 0;
 80086d8:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80086dc:	2b06      	cmp	r3, #6
 80086de:	f63f af75 	bhi.w	80085cc <tcp_slowtmr+0x8c>
              pcb->persist_backoff++;
 80086e2:	3301      	adds	r3, #1
 80086e4:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 80086e8:	e770      	b.n	80085cc <tcp_slowtmr+0x8c>
        if (pcb->rtime >= 0) {
 80086ea:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 80086ee:	2b00      	cmp	r3, #0
          ++pcb->rtime;
 80086f0:	bfa4      	itt	ge
 80086f2:	3301      	addge	r3, #1
 80086f4:	8623      	strhge	r3, [r4, #48]	; 0x30
        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 80086f6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	f43f af67 	beq.w	80085cc <tcp_slowtmr+0x8c>
 80086fe:	f9b4 0030 	ldrsh.w	r0, [r4, #48]	; 0x30
 8008702:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8008706:	4298      	cmp	r0, r3
 8008708:	f6ff af60 	blt.w	80085cc <tcp_slowtmr+0x8c>
          if (pcb->state != SYN_SENT) {
 800870c:	2902      	cmp	r1, #2
 800870e:	d00a      	beq.n	8008726 <tcp_slowtmr+0x1e6>
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[pcb->nrtx];
 8008710:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 8008714:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 8008718:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 800871c:	4942      	ldr	r1, [pc, #264]	; (8008828 <tcp_slowtmr+0x2e8>)
 800871e:	5c8a      	ldrb	r2, [r1, r2]
 8008720:	4093      	lsls	r3, r2
 8008722:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
          pcb->rtime = 0;
 8008726:	2300      	movs	r3, #0
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8008728:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800872c:	8e61      	ldrh	r1, [r4, #50]	; 0x32
          tcp_rexmit_rto(pcb);
 800872e:	4620      	mov	r0, r4
          pcb->rtime = 0;
 8008730:	8623      	strh	r3, [r4, #48]	; 0x30
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8008732:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
          pcb->cwnd = pcb->mss;
 8008736:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
          pcb->ssthresh = eff_wnd >> 1;
 800873a:	4293      	cmp	r3, r2
 800873c:	bf28      	it	cs
 800873e:	4613      	movcs	r3, r2
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8008740:	004a      	lsls	r2, r1, #1
          pcb->ssthresh = eff_wnd >> 1;
 8008742:	085b      	lsrs	r3, r3, #1
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8008744:	b292      	uxth	r2, r2
          pcb->ssthresh = eff_wnd >> 1;
 8008746:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800874a:	4293      	cmp	r3, r2
            pcb->ssthresh = (pcb->mss << 1);
 800874c:	bf38      	it	cc
 800874e:	f8a4 204a 	strhcc.w	r2, [r4, #74]	; 0x4a
          tcp_rexmit_rto(pcb);
 8008752:	f001 feb3 	bl	800a4bc <tcp_rexmit_rto>
 8008756:	e73b      	b.n	80085d0 <tcp_slowtmr+0x90>
      ++pcb_remove;
 8008758:	f04f 0a01 	mov.w	sl, #1
 800875c:	e738      	b.n	80085d0 <tcp_slowtmr+0x90>
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800875e:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 8008762:	4a32      	ldr	r2, [pc, #200]	; (800882c <tcp_slowtmr+0x2ec>)
 8008764:	fb02 e303 	mla	r3, r2, r3, lr
                / TCP_SLOW_INTERVAL)
 8008768:	fbb3 f3f0 	udiv	r3, r3, r0
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800876c:	4299      	cmp	r1, r3
 800876e:	d908      	bls.n	8008782 <tcp_slowtmr+0x242>
        err = tcp_keepalive(pcb);
 8008770:	4620      	mov	r0, r4
 8008772:	f001 ff0e 	bl	800a592 <tcp_keepalive>
        if (err == ERR_OK) {
 8008776:	b920      	cbnz	r0, 8008782 <tcp_slowtmr+0x242>
          pcb->keep_cnt_sent++;
 8008778:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 800877c:	3301      	adds	r3, #1
 800877e:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
    pcb_reset = 0;
 8008782:	f04f 0900 	mov.w	r9, #0
 8008786:	e752      	b.n	800862e <tcp_slowtmr+0xee>
    if (pcb->state == LAST_ACK) {
 8008788:	2b09      	cmp	r3, #9
 800878a:	f47f af69 	bne.w	8008660 <tcp_slowtmr+0x120>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800878e:	682b      	ldr	r3, [r5, #0]
 8008790:	6a22      	ldr	r2, [r4, #32]
 8008792:	1a9b      	subs	r3, r3, r2
 8008794:	2bf0      	cmp	r3, #240	; 0xf0
 8008796:	e762      	b.n	800865e <tcp_slowtmr+0x11e>
        tcp_active_pcbs = pcb->next;
 8008798:	603b      	str	r3, [r7, #0]
 800879a:	e76f      	b.n	800867c <tcp_slowtmr+0x13c>
      ++prev->polltmr;
 800879c:	7ee3      	ldrb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 800879e:	7f22      	ldrb	r2, [r4, #28]
      ++prev->polltmr;
 80087a0:	3301      	adds	r3, #1
      pcb = pcb->next;
 80087a2:	f8d4 900c 	ldr.w	r9, [r4, #12]
      ++prev->polltmr;
 80087a6:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 80087a8:	429a      	cmp	r2, r3
      ++prev->polltmr;
 80087aa:	76e3      	strb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 80087ac:	f63f aeea 	bhi.w	8008584 <tcp_slowtmr+0x44>
        TCP_EVENT_POLL(prev, err);
 80087b0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
        prev->polltmr = 0;
 80087b4:	f884 a01b 	strb.w	sl, [r4, #27]
        tcp_active_pcbs_changed = 0;
 80087b8:	f888 a000 	strb.w	sl, [r8]
        TCP_EVENT_POLL(prev, err);
 80087bc:	b173      	cbz	r3, 80087dc <tcp_slowtmr+0x29c>
 80087be:	4621      	mov	r1, r4
 80087c0:	6920      	ldr	r0, [r4, #16]
 80087c2:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 80087c4:	f898 3000 	ldrb.w	r3, [r8]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	f47f aec7 	bne.w	800855c <tcp_slowtmr+0x1c>
        if (err == ERR_OK) {
 80087ce:	2800      	cmp	r0, #0
 80087d0:	f47f aed8 	bne.w	8008584 <tcp_slowtmr+0x44>
          tcp_output(prev);
 80087d4:	4620      	mov	r0, r4
 80087d6:	f001 fce7 	bl	800a1a8 <tcp_output>
 80087da:	e6d3      	b.n	8008584 <tcp_slowtmr+0x44>
        TCP_EVENT_POLL(prev, err);
 80087dc:	4650      	mov	r0, sl
 80087de:	e7f1      	b.n	80087c4 <tcp_slowtmr+0x284>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80087e0:	682b      	ldr	r3, [r5, #0]
 80087e2:	6a32      	ldr	r2, [r6, #32]
 80087e4:	1a9b      	subs	r3, r3, r2
 80087e6:	2bf0      	cmp	r3, #240	; 0xf0
 80087e8:	d80b      	bhi.n	8008802 <tcp_slowtmr+0x2c2>
      pcb = pcb->next;
 80087ea:	4634      	mov	r4, r6
 80087ec:	68f6      	ldr	r6, [r6, #12]
 80087ee:	e6bb      	b.n	8008568 <tcp_slowtmr+0x28>
        prev->next = pcb->next;
 80087f0:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
 80087f2:	f8d6 800c 	ldr.w	r8, [r6, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 80087f6:	4631      	mov	r1, r6
 80087f8:	2001      	movs	r0, #1
 80087fa:	f7ff fb43 	bl	8007e84 <memp_free>
      pcb = pcb->next;
 80087fe:	4646      	mov	r6, r8
 8008800:	e6b2      	b.n	8008568 <tcp_slowtmr+0x28>
      tcp_pcb_purge(pcb);
 8008802:	4630      	mov	r0, r6
 8008804:	f7ff fe7b 	bl	80084fe <tcp_pcb_purge>
 8008808:	68f3      	ldr	r3, [r6, #12]
      if (prev != NULL) {
 800880a:	2c00      	cmp	r4, #0
 800880c:	d1f0      	bne.n	80087f0 <tcp_slowtmr+0x2b0>
        tcp_tw_pcbs = pcb->next;
 800880e:	603b      	str	r3, [r7, #0]
 8008810:	e7ef      	b.n	80087f2 <tcp_slowtmr+0x2b2>
 8008812:	bf00      	nop
 8008814:	20007728 	.word	0x20007728
 8008818:	20003f66 	.word	0x20003f66
 800881c:	20007724 	.word	0x20007724
 8008820:	20007734 	.word	0x20007734
 8008824:	0800cb7c 	.word	0x0800cb7c
 8008828:	0800cb5c 	.word	0x0800cb5c
 800882c:	000124f8 	.word	0x000124f8
 8008830:	20007720 	.word	0x20007720

08008834 <tcp_pcb_remove>:
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
  TCP_RMV(pcblist, pcb);
 8008834:	6803      	ldr	r3, [r0, #0]
 8008836:	428b      	cmp	r3, r1
{
 8008838:	b510      	push	{r4, lr}
 800883a:	460c      	mov	r4, r1
  TCP_RMV(pcblist, pcb);
 800883c:	d119      	bne.n	8008872 <tcp_pcb_remove+0x3e>
 800883e:	68cb      	ldr	r3, [r1, #12]
 8008840:	6003      	str	r3, [r0, #0]
 8008842:	2300      	movs	r3, #0

  tcp_pcb_purge(pcb);
 8008844:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
 8008846:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 8008848:	f7ff fe59 	bl	80084fe <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 800884c:	7d23      	ldrb	r3, [r4, #20]
 800884e:	2b0a      	cmp	r3, #10
 8008850:	d00a      	beq.n	8008868 <tcp_pcb_remove+0x34>
 8008852:	2b01      	cmp	r3, #1
 8008854:	d008      	beq.n	8008868 <tcp_pcb_remove+0x34>
     pcb->state != LISTEN &&
     pcb->flags & TF_ACK_DELAY) {
 8008856:	7ea3      	ldrb	r3, [r4, #26]
     pcb->state != LISTEN &&
 8008858:	07da      	lsls	r2, r3, #31
 800885a:	d505      	bpl.n	8008868 <tcp_pcb_remove+0x34>
    pcb->flags |= TF_ACK_NOW;
 800885c:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
 8008860:	4620      	mov	r0, r4
    pcb->flags |= TF_ACK_NOW;
 8008862:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 8008864:	f001 fca0 	bl	800a1a8 <tcp_output>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8008868:	2300      	movs	r3, #0
 800886a:	7523      	strb	r3, [r4, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800886c:	82e3      	strh	r3, [r4, #22]
 800886e:	bd10      	pop	{r4, pc}
 8008870:	4613      	mov	r3, r2
  TCP_RMV(pcblist, pcb);
 8008872:	2b00      	cmp	r3, #0
 8008874:	d0e5      	beq.n	8008842 <tcp_pcb_remove+0xe>
 8008876:	68da      	ldr	r2, [r3, #12]
 8008878:	4294      	cmp	r4, r2
 800887a:	d1f9      	bne.n	8008870 <tcp_pcb_remove+0x3c>
 800887c:	68e2      	ldr	r2, [r4, #12]
 800887e:	60da      	str	r2, [r3, #12]
 8008880:	e7df      	b.n	8008842 <tcp_pcb_remove+0xe>
	...

08008884 <tcp_close_shutdown>:
{
 8008884:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008886:	7d03      	ldrb	r3, [r0, #20]
 8008888:	4604      	mov	r4, r0
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800888a:	2900      	cmp	r1, #0
 800888c:	d03f      	beq.n	800890e <tcp_close_shutdown+0x8a>
 800888e:	2b04      	cmp	r3, #4
 8008890:	d001      	beq.n	8008896 <tcp_close_shutdown+0x12>
 8008892:	2b07      	cmp	r3, #7
 8008894:	d13b      	bne.n	800890e <tcp_close_shutdown+0x8a>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8008896:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8008898:	b91a      	cbnz	r2, 80088a2 <tcp_close_shutdown+0x1e>
 800889a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800889c:	f5b2 6f06 	cmp.w	r2, #2144	; 0x860
 80088a0:	d035      	beq.n	800890e <tcp_close_shutdown+0x8a>
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80088a2:	8b23      	ldrh	r3, [r4, #24]
 80088a4:	4622      	mov	r2, r4
 80088a6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80088a8:	9301      	str	r3, [sp, #4]
 80088aa:	8ae3      	ldrh	r3, [r4, #22]
 80088ac:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80088ae:	9300      	str	r3, [sp, #0]
 80088b0:	1d23      	adds	r3, r4, #4
 80088b2:	f001 fdbb 	bl	800a42c <tcp_rst>
      tcp_pcb_purge(pcb);
 80088b6:	4620      	mov	r0, r4
 80088b8:	f7ff fe21 	bl	80084fe <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80088bc:	4a43      	ldr	r2, [pc, #268]	; (80089cc <tcp_close_shutdown+0x148>)
 80088be:	6813      	ldr	r3, [r2, #0]
 80088c0:	429c      	cmp	r4, r3
 80088c2:	d115      	bne.n	80088f0 <tcp_close_shutdown+0x6c>
 80088c4:	68e3      	ldr	r3, [r4, #12]
 80088c6:	6013      	str	r3, [r2, #0]
 80088c8:	4b41      	ldr	r3, [pc, #260]	; (80089d0 <tcp_close_shutdown+0x14c>)
 80088ca:	2201      	movs	r2, #1
 80088cc:	2500      	movs	r5, #0
 80088ce:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 80088d0:	7d23      	ldrb	r3, [r4, #20]
      TCP_RMV_ACTIVE(pcb);
 80088d2:	60e5      	str	r5, [r4, #12]
      if (pcb->state == ESTABLISHED) {
 80088d4:	2b04      	cmp	r3, #4
 80088d6:	d113      	bne.n	8008900 <tcp_close_shutdown+0x7c>
        pcb->state = TIME_WAIT;
 80088d8:	230a      	movs	r3, #10
 80088da:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80088dc:	4b3d      	ldr	r3, [pc, #244]	; (80089d4 <tcp_close_shutdown+0x150>)
 80088de:	681a      	ldr	r2, [r3, #0]
 80088e0:	601c      	str	r4, [r3, #0]
 80088e2:	60e2      	str	r2, [r4, #12]
 80088e4:	f001 ff20 	bl	800a728 <tcp_timer_needed>
    tcp_output(pcb);
 80088e8:	2000      	movs	r0, #0
}
 80088ea:	b003      	add	sp, #12
 80088ec:	bd30      	pop	{r4, r5, pc}
 80088ee:	4613      	mov	r3, r2
      TCP_RMV_ACTIVE(pcb);
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d0e9      	beq.n	80088c8 <tcp_close_shutdown+0x44>
 80088f4:	68da      	ldr	r2, [r3, #12]
 80088f6:	4294      	cmp	r4, r2
 80088f8:	d1f9      	bne.n	80088ee <tcp_close_shutdown+0x6a>
 80088fa:	68e2      	ldr	r2, [r4, #12]
 80088fc:	60da      	str	r2, [r3, #12]
 80088fe:	e7e3      	b.n	80088c8 <tcp_close_shutdown+0x44>
        if (tcp_input_pcb == pcb) {
 8008900:	4b35      	ldr	r3, [pc, #212]	; (80089d8 <tcp_close_shutdown+0x154>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	429c      	cmp	r4, r3
 8008906:	d121      	bne.n	800894c <tcp_close_shutdown+0xc8>
          tcp_trigger_input_pcb_close();
 8008908:	f001 fb22 	bl	8009f50 <tcp_trigger_input_pcb_close>
 800890c:	e7ec      	b.n	80088e8 <tcp_close_shutdown+0x64>
  switch (pcb->state) {
 800890e:	2b07      	cmp	r3, #7
 8008910:	d8ea      	bhi.n	80088e8 <tcp_close_shutdown+0x64>
 8008912:	a201      	add	r2, pc, #4	; (adr r2, 8008918 <tcp_close_shutdown+0x94>)
 8008914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008918:	08008939 	.word	0x08008939
 800891c:	08008969 	.word	0x08008969
 8008920:	08008997 	.word	0x08008997
 8008924:	080089a9 	.word	0x080089a9
 8008928:	080089a9 	.word	0x080089a9
 800892c:	080088e9 	.word	0x080088e9
 8008930:	080088e9 	.word	0x080088e9
 8008934:	080089bf 	.word	0x080089bf
    if (pcb->local_port != 0) {
 8008938:	8ae3      	ldrh	r3, [r4, #22]
 800893a:	b13b      	cbz	r3, 800894c <tcp_close_shutdown+0xc8>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800893c:	4a27      	ldr	r2, [pc, #156]	; (80089dc <tcp_close_shutdown+0x158>)
 800893e:	6813      	ldr	r3, [r2, #0]
 8008940:	429c      	cmp	r4, r3
 8008942:	d109      	bne.n	8008958 <tcp_close_shutdown+0xd4>
 8008944:	68e3      	ldr	r3, [r4, #12]
 8008946:	6013      	str	r3, [r2, #0]
 8008948:	2300      	movs	r3, #0
 800894a:	60e3      	str	r3, [r4, #12]
          memp_free(MEMP_TCP_PCB, pcb);
 800894c:	4621      	mov	r1, r4
 800894e:	2001      	movs	r0, #1
    memp_free(MEMP_TCP_PCB, pcb);
 8008950:	f7ff fa98 	bl	8007e84 <memp_free>
 8008954:	e7c8      	b.n	80088e8 <tcp_close_shutdown+0x64>
 8008956:	4613      	mov	r3, r2
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8008958:	2b00      	cmp	r3, #0
 800895a:	d0f5      	beq.n	8008948 <tcp_close_shutdown+0xc4>
 800895c:	68da      	ldr	r2, [r3, #12]
 800895e:	4294      	cmp	r4, r2
 8008960:	d1f9      	bne.n	8008956 <tcp_close_shutdown+0xd2>
 8008962:	68e2      	ldr	r2, [r4, #12]
 8008964:	60da      	str	r2, [r3, #12]
 8008966:	e7ef      	b.n	8008948 <tcp_close_shutdown+0xc4>
  switch (pcb->state) {
 8008968:	2301      	movs	r3, #1
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 800896a:	4a1d      	ldr	r2, [pc, #116]	; (80089e0 <tcp_close_shutdown+0x15c>)
         pcb->listener = NULL;
 800896c:	2100      	movs	r1, #0
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 800896e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008972:	6805      	ldr	r5, [r0, #0]
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008974:	b94d      	cbnz	r5, 800898a <tcp_close_shutdown+0x106>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008976:	3301      	adds	r3, #1
 8008978:	2b04      	cmp	r3, #4
 800897a:	d1f8      	bne.n	800896e <tcp_close_shutdown+0xea>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800897c:	4621      	mov	r1, r4
 800897e:	4819      	ldr	r0, [pc, #100]	; (80089e4 <tcp_close_shutdown+0x160>)
 8008980:	f7ff ff58 	bl	8008834 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8008984:	4621      	mov	r1, r4
 8008986:	2002      	movs	r0, #2
 8008988:	e7e2      	b.n	8008950 <tcp_close_shutdown+0xcc>
      if (pcb->listener == lpcb) {
 800898a:	6fa8      	ldr	r0, [r5, #120]	; 0x78
 800898c:	4284      	cmp	r4, r0
         pcb->listener = NULL;
 800898e:	bf08      	it	eq
 8008990:	67a9      	streq	r1, [r5, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008992:	68ed      	ldr	r5, [r5, #12]
 8008994:	e7ee      	b.n	8008974 <tcp_close_shutdown+0xf0>
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8008996:	4621      	mov	r1, r4
 8008998:	480c      	ldr	r0, [pc, #48]	; (80089cc <tcp_close_shutdown+0x148>)
 800899a:	f7ff ff4b 	bl	8008834 <tcp_pcb_remove>
 800899e:	2001      	movs	r0, #1
 80089a0:	4b0b      	ldr	r3, [pc, #44]	; (80089d0 <tcp_close_shutdown+0x14c>)
    memp_free(MEMP_TCP_PCB, pcb);
 80089a2:	4621      	mov	r1, r4
    TCP_PCB_REMOVE_ACTIVE(pcb);
 80089a4:	7018      	strb	r0, [r3, #0]
 80089a6:	e7d3      	b.n	8008950 <tcp_close_shutdown+0xcc>
    err = tcp_send_fin(pcb);
 80089a8:	4620      	mov	r0, r4
 80089aa:	f001 fba6 	bl	800a0fa <tcp_send_fin>
    if (err == ERR_OK) {
 80089ae:	2800      	cmp	r0, #0
 80089b0:	d19b      	bne.n	80088ea <tcp_close_shutdown+0x66>
      pcb->state = FIN_WAIT_1;
 80089b2:	2305      	movs	r3, #5
      pcb->state = LAST_ACK;
 80089b4:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 80089b6:	4620      	mov	r0, r4
 80089b8:	f001 fbf6 	bl	800a1a8 <tcp_output>
 80089bc:	e794      	b.n	80088e8 <tcp_close_shutdown+0x64>
    err = tcp_send_fin(pcb);
 80089be:	4620      	mov	r0, r4
 80089c0:	f001 fb9b 	bl	800a0fa <tcp_send_fin>
    if (err == ERR_OK) {
 80089c4:	2800      	cmp	r0, #0
 80089c6:	d190      	bne.n	80088ea <tcp_close_shutdown+0x66>
      pcb->state = LAST_ACK;
 80089c8:	2309      	movs	r3, #9
 80089ca:	e7f3      	b.n	80089b4 <tcp_close_shutdown+0x130>
 80089cc:	20007724 	.word	0x20007724
 80089d0:	20007720 	.word	0x20007720
 80089d4:	20007734 	.word	0x20007734
 80089d8:	20007738 	.word	0x20007738
 80089dc:	20007730 	.word	0x20007730
 80089e0:	0800cb6c 	.word	0x0800cb6c
 80089e4:	2000772c 	.word	0x2000772c

080089e8 <tcp_close>:
  if (pcb->state != LISTEN) {
 80089e8:	7d03      	ldrb	r3, [r0, #20]
  return tcp_close_shutdown(pcb, 1);
 80089ea:	2101      	movs	r1, #1
  if (pcb->state != LISTEN) {
 80089ec:	2b01      	cmp	r3, #1
    pcb->flags |= TF_RXCLOSED;
 80089ee:	bf1e      	ittt	ne
 80089f0:	7e83      	ldrbne	r3, [r0, #26]
 80089f2:	f043 0310 	orrne.w	r3, r3, #16
 80089f6:	7683      	strbne	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 80089f8:	f7ff bf44 	b.w	8008884 <tcp_close_shutdown>

080089fc <tcp_recv_null>:
{
 80089fc:	b510      	push	{r4, lr}
 80089fe:	4608      	mov	r0, r1
  if (p != NULL) {
 8008a00:	4614      	mov	r4, r2
 8008a02:	b13a      	cbz	r2, 8008a14 <tcp_recv_null+0x18>
    tcp_recved(pcb, p->tot_len);
 8008a04:	8911      	ldrh	r1, [r2, #8]
 8008a06:	f7ff fd2a 	bl	800845e <tcp_recved>
    pbuf_free(p);
 8008a0a:	4620      	mov	r0, r4
 8008a0c:	f7ff fb83 	bl	8008116 <pbuf_free>
}
 8008a10:	2000      	movs	r0, #0
 8008a12:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d1fb      	bne.n	8008a10 <tcp_recv_null+0x14>
}
 8008a18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tcp_close(pcb);
 8008a1c:	f7ff bfe4 	b.w	80089e8 <tcp_close>

08008a20 <tcp_process_refused_data>:
{
 8008a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    u8_t refused_flags = pcb->refused_data->flags;
 8008a22:	6f46      	ldr	r6, [r0, #116]	; 0x74
    pcb->refused_data = NULL;
 8008a24:	2300      	movs	r3, #0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8008a26:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
{
 8008a2a:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 8008a2c:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 8008a2e:	6743      	str	r3, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8008a30:	b1dd      	cbz	r5, 8008a6a <tcp_process_refused_data+0x4a>
 8008a32:	4601      	mov	r1, r0
 8008a34:	4632      	mov	r2, r6
 8008a36:	6900      	ldr	r0, [r0, #16]
 8008a38:	47a8      	blx	r5
 8008a3a:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 8008a3c:	b9e0      	cbnz	r0, 8008a78 <tcp_process_refused_data+0x58>
      if (refused_flags & PBUF_FLAG_TCP_FIN
 8008a3e:	06bb      	lsls	r3, r7, #26
 8008a40:	d511      	bpl.n	8008a66 <tcp_process_refused_data+0x46>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008a42:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 8008a44:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008a48:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
          pcb->rcv_wnd++;
 8008a4c:	bf1c      	itt	ne
 8008a4e:	3301      	addne	r3, #1
 8008a50:	8523      	strhne	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 8008a52:	b146      	cbz	r6, 8008a66 <tcp_process_refused_data+0x46>
 8008a54:	2300      	movs	r3, #0
 8008a56:	4621      	mov	r1, r4
 8008a58:	6920      	ldr	r0, [r4, #16]
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 8008a5e:	300d      	adds	r0, #13
 8008a60:	d101      	bne.n	8008a66 <tcp_process_refused_data+0x46>
          return ERR_ABRT;
 8008a62:	f06f 050c 	mvn.w	r5, #12
}
 8008a66:	4628      	mov	r0, r5
 8008a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8008a6a:	4601      	mov	r1, r0
 8008a6c:	462b      	mov	r3, r5
 8008a6e:	4632      	mov	r2, r6
 8008a70:	4628      	mov	r0, r5
 8008a72:	f7ff ffc3 	bl	80089fc <tcp_recv_null>
 8008a76:	e7e0      	b.n	8008a3a <tcp_process_refused_data+0x1a>
    } else if (err == ERR_ABRT) {
 8008a78:	f110 050d 	adds.w	r5, r0, #13
 8008a7c:	d0f1      	beq.n	8008a62 <tcp_process_refused_data+0x42>
      pcb->refused_data = refused_data;
 8008a7e:	6766      	str	r6, [r4, #116]	; 0x74
      return ERR_INPROGRESS;
 8008a80:	f06f 0504 	mvn.w	r5, #4
 8008a84:	e7ef      	b.n	8008a66 <tcp_process_refused_data+0x46>
	...

08008a88 <tcp_fasttmr>:
{
 8008a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 8008a8c:	4d17      	ldr	r5, [pc, #92]	; (8008aec <tcp_fasttmr+0x64>)
  pcb = tcp_active_pcbs;
 8008a8e:	4f18      	ldr	r7, [pc, #96]	; (8008af0 <tcp_fasttmr+0x68>)
  ++tcp_timer_ctr;
 8008a90:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 8008a92:	4e18      	ldr	r6, [pc, #96]	; (8008af4 <tcp_fasttmr+0x6c>)
  ++tcp_timer_ctr;
 8008a94:	3301      	adds	r3, #1
 8008a96:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 8008a98:	683c      	ldr	r4, [r7, #0]
        tcp_active_pcbs_changed = 0;
 8008a9a:	f04f 0800 	mov.w	r8, #0
  while (pcb != NULL) {
 8008a9e:	b90c      	cbnz	r4, 8008aa4 <tcp_fasttmr+0x1c>
}
 8008aa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (pcb->last_timer != tcp_timer_ctr) {
 8008aa4:	782b      	ldrb	r3, [r5, #0]
 8008aa6:	7f62      	ldrb	r2, [r4, #29]
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d01b      	beq.n	8008ae4 <tcp_fasttmr+0x5c>
      pcb->last_timer = tcp_timer_ctr;
 8008aac:	7763      	strb	r3, [r4, #29]
      if (pcb->flags & TF_ACK_DELAY) {
 8008aae:	7ea3      	ldrb	r3, [r4, #26]
 8008ab0:	07da      	lsls	r2, r3, #31
 8008ab2:	d509      	bpl.n	8008ac8 <tcp_fasttmr+0x40>
        tcp_ack_now(pcb);
 8008ab4:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
 8008ab8:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 8008aba:	76a3      	strb	r3, [r4, #26]
        tcp_output(pcb);
 8008abc:	f001 fb74 	bl	800a1a8 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8008ac0:	7ea3      	ldrb	r3, [r4, #26]
 8008ac2:	f023 0303 	bic.w	r3, r3, #3
 8008ac6:	76a3      	strb	r3, [r4, #26]
      if (pcb->refused_data != NULL) {
 8008ac8:	6f63      	ldr	r3, [r4, #116]	; 0x74
      next = pcb->next;
 8008aca:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 8008ace:	b13b      	cbz	r3, 8008ae0 <tcp_fasttmr+0x58>
        tcp_process_refused_data(pcb);
 8008ad0:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 8008ad2:	f886 8000 	strb.w	r8, [r6]
        tcp_process_refused_data(pcb);
 8008ad6:	f7ff ffa3 	bl	8008a20 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8008ada:	7833      	ldrb	r3, [r6, #0]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d1db      	bne.n	8008a98 <tcp_fasttmr+0x10>
{
 8008ae0:	464c      	mov	r4, r9
 8008ae2:	e7dc      	b.n	8008a9e <tcp_fasttmr+0x16>
      pcb = pcb->next;
 8008ae4:	f8d4 900c 	ldr.w	r9, [r4, #12]
 8008ae8:	e7fa      	b.n	8008ae0 <tcp_fasttmr+0x58>
 8008aea:	bf00      	nop
 8008aec:	20003f66 	.word	0x20003f66
 8008af0:	20007724 	.word	0x20007724
 8008af4:	20007720 	.word	0x20007720

08008af8 <tcp_tmr>:
{
 8008af8:	b508      	push	{r3, lr}
  tcp_fasttmr();
 8008afa:	f7ff ffc5 	bl	8008a88 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 8008afe:	4a06      	ldr	r2, [pc, #24]	; (8008b18 <tcp_tmr+0x20>)
 8008b00:	7813      	ldrb	r3, [r2, #0]
 8008b02:	3301      	adds	r3, #1
 8008b04:	b2db      	uxtb	r3, r3
 8008b06:	7013      	strb	r3, [r2, #0]
 8008b08:	07db      	lsls	r3, r3, #31
 8008b0a:	d503      	bpl.n	8008b14 <tcp_tmr+0x1c>
}
 8008b0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 8008b10:	f7ff bd16 	b.w	8008540 <tcp_slowtmr>
 8008b14:	bd08      	pop	{r3, pc}
 8008b16:	bf00      	nop
 8008b18:	20003f65 	.word	0x20003f65

08008b1c <tcp_abandon>:
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8008b1c:	7d03      	ldrb	r3, [r0, #20]
  if (pcb->state == TIME_WAIT) {
 8008b1e:	2b0a      	cmp	r3, #10
{
 8008b20:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b24:	4604      	mov	r4, r0
 8008b26:	460e      	mov	r6, r1
  if (pcb->state == TIME_WAIT) {
 8008b28:	d10a      	bne.n	8008b40 <tcp_abandon+0x24>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8008b2a:	4601      	mov	r1, r0
 8008b2c:	482a      	ldr	r0, [pc, #168]	; (8008bd8 <tcp_abandon+0xbc>)
 8008b2e:	f7ff fe81 	bl	8008834 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8008b32:	4621      	mov	r1, r4
 8008b34:	2001      	movs	r0, #1
}
 8008b36:	b002      	add	sp, #8
 8008b38:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    memp_free(MEMP_TCP_PCB, pcb);
 8008b3c:	f7ff b9a2 	b.w	8007e84 <memp_free>
    seqno = pcb->snd_nxt;
 8008b40:	f8d0 904c 	ldr.w	r9, [r0, #76]	; 0x4c
    ackno = pcb->rcv_nxt;
 8008b44:	f8d0 a024 	ldr.w	sl, [r0, #36]	; 0x24
    errf = pcb->errf;
 8008b48:	f8d0 708c 	ldr.w	r7, [r0, #140]	; 0x8c
    errf_arg = pcb->callback_arg;
 8008b4c:	f8d0 8010 	ldr.w	r8, [r0, #16]
 8008b50:	8ac5      	ldrh	r5, [r0, #22]
    if (pcb->state == CLOSED) {
 8008b52:	b99b      	cbnz	r3, 8008b7c <tcp_abandon+0x60>
      if (pcb->local_port != 0) {
 8008b54:	b13d      	cbz	r5, 8008b66 <tcp_abandon+0x4a>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008b56:	4a21      	ldr	r2, [pc, #132]	; (8008bdc <tcp_abandon+0xc0>)
 8008b58:	6813      	ldr	r3, [r2, #0]
 8008b5a:	4298      	cmp	r0, r3
 8008b5c:	d106      	bne.n	8008b6c <tcp_abandon+0x50>
 8008b5e:	68c3      	ldr	r3, [r0, #12]
 8008b60:	6013      	str	r3, [r2, #0]
 8008b62:	2500      	movs	r5, #0
 8008b64:	60e5      	str	r5, [r4, #12]
    int send_rst = 0;
 8008b66:	462e      	mov	r6, r5
 8008b68:	e00f      	b.n	8008b8a <tcp_abandon+0x6e>
 8008b6a:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d0f8      	beq.n	8008b62 <tcp_abandon+0x46>
 8008b70:	68da      	ldr	r2, [r3, #12]
 8008b72:	4294      	cmp	r4, r2
 8008b74:	d1f9      	bne.n	8008b6a <tcp_abandon+0x4e>
 8008b76:	68e2      	ldr	r2, [r4, #12]
 8008b78:	60da      	str	r2, [r3, #12]
 8008b7a:	e7f2      	b.n	8008b62 <tcp_abandon+0x46>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008b7c:	4601      	mov	r1, r0
 8008b7e:	4818      	ldr	r0, [pc, #96]	; (8008be0 <tcp_abandon+0xc4>)
 8008b80:	f7ff fe58 	bl	8008834 <tcp_pcb_remove>
 8008b84:	2201      	movs	r2, #1
 8008b86:	4b17      	ldr	r3, [pc, #92]	; (8008be4 <tcp_abandon+0xc8>)
 8008b88:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 8008b8a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8008b8c:	b108      	cbz	r0, 8008b92 <tcp_abandon+0x76>
      tcp_segs_free(pcb->unacked);
 8008b8e:	f7ff fc98 	bl	80084c2 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8008b92:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8008b94:	b108      	cbz	r0, 8008b9a <tcp_abandon+0x7e>
      tcp_segs_free(pcb->unsent);
 8008b96:	f7ff fc94 	bl	80084c2 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 8008b9a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8008b9c:	b108      	cbz	r0, 8008ba2 <tcp_abandon+0x86>
      tcp_segs_free(pcb->ooseq);
 8008b9e:	f7ff fc90 	bl	80084c2 <tcp_segs_free>
    if (send_rst) {
 8008ba2:	b146      	cbz	r6, 8008bb6 <tcp_abandon+0x9a>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8008ba4:	8b23      	ldrh	r3, [r4, #24]
 8008ba6:	4622      	mov	r2, r4
 8008ba8:	9500      	str	r5, [sp, #0]
 8008baa:	4651      	mov	r1, sl
 8008bac:	9301      	str	r3, [sp, #4]
 8008bae:	4648      	mov	r0, r9
 8008bb0:	1d23      	adds	r3, r4, #4
 8008bb2:	f001 fc3b 	bl	800a42c <tcp_rst>
    memp_free(MEMP_TCP_PCB, pcb);
 8008bb6:	4621      	mov	r1, r4
 8008bb8:	2001      	movs	r0, #1
 8008bba:	f7ff f963 	bl	8007e84 <memp_free>
    TCP_EVENT_ERR(errf, errf_arg, ERR_ABRT);
 8008bbe:	b13f      	cbz	r7, 8008bd0 <tcp_abandon+0xb4>
 8008bc0:	f06f 010c 	mvn.w	r1, #12
 8008bc4:	4640      	mov	r0, r8
 8008bc6:	463b      	mov	r3, r7
}
 8008bc8:	b002      	add	sp, #8
 8008bca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    TCP_EVENT_ERR(errf, errf_arg, ERR_ABRT);
 8008bce:	4718      	bx	r3
}
 8008bd0:	b002      	add	sp, #8
 8008bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bd6:	bf00      	nop
 8008bd8:	20007734 	.word	0x20007734
 8008bdc:	20007730 	.word	0x20007730
 8008be0:	20007724 	.word	0x20007724
 8008be4:	20007720 	.word	0x20007720

08008be8 <tcp_abort>:
  tcp_abandon(pcb, 1);
 8008be8:	2101      	movs	r1, #1
 8008bea:	f7ff bf97 	b.w	8008b1c <tcp_abandon>

08008bee <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 8008bee:	b538      	push	{r3, r4, r5, lr}
 8008bf0:	4605      	mov	r5, r0
  struct tcp_pcb *pcb;
  pcb = pcb_list;
  while (pcb != NULL) {
 8008bf2:	b901      	cbnz	r1, 8008bf6 <tcp_netif_ip_addr_changed_pcblist+0x8>
      pcb = next;
    } else {
      pcb = pcb->next;
    }
  }
}
 8008bf4:	bd38      	pop	{r3, r4, r5, pc}
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8008bf6:	680a      	ldr	r2, [r1, #0]
 8008bf8:	682b      	ldr	r3, [r5, #0]
 8008bfa:	68cc      	ldr	r4, [r1, #12]
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	d102      	bne.n	8008c06 <tcp_netif_ip_addr_changed_pcblist+0x18>
      tcp_abort(pcb);
 8008c00:	4608      	mov	r0, r1
 8008c02:	f7ff fff1 	bl	8008be8 <tcp_abort>
      pcb = pcb->next;
 8008c06:	4621      	mov	r1, r4
 8008c08:	e7f3      	b.n	8008bf2 <tcp_netif_ip_addr_changed_pcblist+0x4>
	...

08008c0c <tcp_kill_state>:
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008c0c:	4b0c      	ldr	r3, [pc, #48]	; (8008c40 <tcp_kill_state+0x34>)
{
 8008c0e:	b430      	push	{r4, r5}
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008c10:	6819      	ldr	r1, [r3, #0]
  inactivity = 0;
 8008c12:	2400      	movs	r4, #0
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008c14:	4b0b      	ldr	r3, [pc, #44]	; (8008c44 <tcp_kill_state+0x38>)
  inactive = NULL;
 8008c16:	4622      	mov	r2, r4
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008c18:	681d      	ldr	r5, [r3, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008c1a:	b921      	cbnz	r1, 8008c26 <tcp_kill_state+0x1a>
  if (inactive != NULL) {
 8008c1c:	b172      	cbz	r2, 8008c3c <tcp_kill_state+0x30>
    tcp_abandon(inactive, 0);
 8008c1e:	4610      	mov	r0, r2
}
 8008c20:	bc30      	pop	{r4, r5}
    tcp_abandon(inactive, 0);
 8008c22:	f7ff bf7b 	b.w	8008b1c <tcp_abandon>
    if (pcb->state == state) {
 8008c26:	7d0b      	ldrb	r3, [r1, #20]
 8008c28:	4283      	cmp	r3, r0
 8008c2a:	d105      	bne.n	8008c38 <tcp_kill_state+0x2c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008c2c:	6a0b      	ldr	r3, [r1, #32]
 8008c2e:	1aeb      	subs	r3, r5, r3
 8008c30:	429c      	cmp	r4, r3
 8008c32:	bf9c      	itt	ls
 8008c34:	461c      	movls	r4, r3
 8008c36:	460a      	movls	r2, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008c38:	68c9      	ldr	r1, [r1, #12]
 8008c3a:	e7ee      	b.n	8008c1a <tcp_kill_state+0xe>
}
 8008c3c:	bc30      	pop	{r4, r5}
 8008c3e:	4770      	bx	lr
 8008c40:	20007724 	.word	0x20007724
 8008c44:	20007728 	.word	0x20007728

08008c48 <tcp_next_iss>:
  iss += tcp_ticks;       /* XXX */
 8008c48:	4b03      	ldr	r3, [pc, #12]	; (8008c58 <tcp_next_iss+0x10>)
 8008c4a:	4a04      	ldr	r2, [pc, #16]	; (8008c5c <tcp_next_iss+0x14>)
 8008c4c:	6818      	ldr	r0, [r3, #0]
 8008c4e:	6812      	ldr	r2, [r2, #0]
 8008c50:	4410      	add	r0, r2
 8008c52:	6018      	str	r0, [r3, #0]
}
 8008c54:	4770      	bx	lr
 8008c56:	bf00      	nop
 8008c58:	20000024 	.word	0x20000024
 8008c5c:	20007728 	.word	0x20007728

08008c60 <tcp_alloc>:
{
 8008c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c62:	4606      	mov	r6, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008c64:	2001      	movs	r0, #1
 8008c66:	f7ff f901 	bl	8007e6c <memp_malloc>
 8008c6a:	4d3d      	ldr	r5, [pc, #244]	; (8008d60 <tcp_alloc+0x100>)
  if (pcb == NULL) {
 8008c6c:	4604      	mov	r4, r0
 8008c6e:	bb90      	cbnz	r0, 8008cd6 <tcp_alloc+0x76>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008c70:	4b3c      	ldr	r3, [pc, #240]	; (8008d64 <tcp_alloc+0x104>)
  inactivity = 0;
 8008c72:	4621      	mov	r1, r4
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008c74:	6828      	ldr	r0, [r5, #0]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d15c      	bne.n	8008d36 <tcp_alloc+0xd6>
  if (inactive != NULL) {
 8008c7c:	b114      	cbz	r4, 8008c84 <tcp_alloc+0x24>
    tcp_abort(inactive);
 8008c7e:	4620      	mov	r0, r4
 8008c80:	f7ff ffb2 	bl	8008be8 <tcp_abort>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008c84:	2001      	movs	r0, #1
 8008c86:	f7ff f8f1 	bl	8007e6c <memp_malloc>
    if (pcb == NULL) {
 8008c8a:	4604      	mov	r4, r0
 8008c8c:	bb18      	cbnz	r0, 8008cd6 <tcp_alloc+0x76>
      tcp_kill_state(LAST_ACK);
 8008c8e:	2009      	movs	r0, #9
 8008c90:	f7ff ffbc 	bl	8008c0c <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008c94:	2001      	movs	r0, #1
 8008c96:	f7ff f8e9 	bl	8007e6c <memp_malloc>
      if (pcb == NULL) {
 8008c9a:	4604      	mov	r4, r0
 8008c9c:	b9d8      	cbnz	r0, 8008cd6 <tcp_alloc+0x76>
        tcp_kill_state(CLOSING);
 8008c9e:	2008      	movs	r0, #8
 8008ca0:	f7ff ffb4 	bl	8008c0c <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008ca4:	2001      	movs	r0, #1
 8008ca6:	f7ff f8e1 	bl	8007e6c <memp_malloc>
        if (pcb == NULL) {
 8008caa:	4604      	mov	r4, r0
 8008cac:	b998      	cbnz	r0, 8008cd6 <tcp_alloc+0x76>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8008cae:	f016 0f80 	tst.w	r6, #128	; 0x80
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008cb2:	4b2d      	ldr	r3, [pc, #180]	; (8008d68 <tcp_alloc+0x108>)
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008cb4:	f8d5 e000 	ldr.w	lr, [r5]
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8008cb8:	bf0c      	ite	eq
 8008cba:	4631      	moveq	r1, r6
 8008cbc:	217f      	movne	r1, #127	; 0x7f
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d140      	bne.n	8008d46 <tcp_alloc+0xe6>
  if (inactive != NULL) {
 8008cc4:	b114      	cbz	r4, 8008ccc <tcp_alloc+0x6c>
    tcp_abort(inactive);
 8008cc6:	4620      	mov	r0, r4
 8008cc8:	f7ff ff8e 	bl	8008be8 <tcp_abort>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008ccc:	2001      	movs	r0, #1
 8008cce:	f7ff f8cd 	bl	8007e6c <memp_malloc>
  if (pcb != NULL) {
 8008cd2:	4604      	mov	r4, r0
 8008cd4:	b368      	cbz	r0, 8008d32 <tcp_alloc+0xd2>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8008cd6:	2298      	movs	r2, #152	; 0x98
 8008cd8:	2100      	movs	r1, #0
 8008cda:	4620      	mov	r0, r4
 8008cdc:	f002 ff50 	bl	800bb80 <memset>
    pcb->snd_buf = TCP_SND_BUF;
 8008ce0:	f44f 6386 	mov.w	r3, #1072	; 0x430
    pcb->prio = prio;
 8008ce4:	7566      	strb	r6, [r4, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8008ce6:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8008cea:	f44f 6306 	mov.w	r3, #2144	; 0x860
 8008cee:	8563      	strh	r3, [r4, #42]	; 0x2a
 8008cf0:	8523      	strh	r3, [r4, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8008cf2:	23ff      	movs	r3, #255	; 0xff
 8008cf4:	72a3      	strb	r3, [r4, #10]
    pcb->mss = INITIAL_MSS;
 8008cf6:	f44f 7306 	mov.w	r3, #536	; 0x218
 8008cfa:	8663      	strh	r3, [r4, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8008cfc:	2306      	movs	r3, #6
 8008cfe:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8008d02:	87e3      	strh	r3, [r4, #62]	; 0x3e
    pcb->rtime = -1;
 8008d04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008d08:	8623      	strh	r3, [r4, #48]	; 0x30
    pcb->cwnd = 1;
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    iss = tcp_next_iss();
 8008d10:	f7ff ff9a 	bl	8008c48 <tcp_next_iss>
    pcb->tmr = tcp_ticks;
 8008d14:	682b      	ldr	r3, [r5, #0]
    pcb->snd_wl2 = iss;
 8008d16:	6560      	str	r0, [r4, #84]	; 0x54
    pcb->tmr = tcp_ticks;
 8008d18:	6223      	str	r3, [r4, #32]
    pcb->last_timer = tcp_timer_ctr;
 8008d1a:	4b14      	ldr	r3, [pc, #80]	; (8008d6c <tcp_alloc+0x10c>)
    pcb->snd_nxt = iss;
 8008d1c:	64e0      	str	r0, [r4, #76]	; 0x4c
    pcb->last_timer = tcp_timer_ctr;
 8008d1e:	781b      	ldrb	r3, [r3, #0]
    pcb->lastack = iss;
 8008d20:	6460      	str	r0, [r4, #68]	; 0x44
    pcb->last_timer = tcp_timer_ctr;
 8008d22:	7763      	strb	r3, [r4, #29]
    pcb->recv = tcp_recv_null;
 8008d24:	4b12      	ldr	r3, [pc, #72]	; (8008d70 <tcp_alloc+0x110>)
    pcb->snd_lbb = iss;
 8008d26:	65a0      	str	r0, [r4, #88]	; 0x58
    pcb->recv = tcp_recv_null;
 8008d28:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8008d2c:	4b11      	ldr	r3, [pc, #68]	; (8008d74 <tcp_alloc+0x114>)
 8008d2e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
}
 8008d32:	4620      	mov	r0, r4
 8008d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008d36:	6a1a      	ldr	r2, [r3, #32]
 8008d38:	1a82      	subs	r2, r0, r2
 8008d3a:	428a      	cmp	r2, r1
 8008d3c:	bf24      	itt	cs
 8008d3e:	461c      	movcs	r4, r3
 8008d40:	4611      	movcs	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008d42:	68db      	ldr	r3, [r3, #12]
 8008d44:	e798      	b.n	8008c78 <tcp_alloc+0x18>
    if (pcb->prio <= mprio &&
 8008d46:	7d5f      	ldrb	r7, [r3, #21]
 8008d48:	428f      	cmp	r7, r1
 8008d4a:	d807      	bhi.n	8008d5c <tcp_alloc+0xfc>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008d4c:	6a1a      	ldr	r2, [r3, #32]
 8008d4e:	ebae 0202 	sub.w	r2, lr, r2
    if (pcb->prio <= mprio &&
 8008d52:	4282      	cmp	r2, r0
 8008d54:	bf22      	ittt	cs
 8008d56:	4639      	movcs	r1, r7
 8008d58:	4610      	movcs	r0, r2
 8008d5a:	461c      	movcs	r4, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008d5c:	68db      	ldr	r3, [r3, #12]
 8008d5e:	e7af      	b.n	8008cc0 <tcp_alloc+0x60>
 8008d60:	20007728 	.word	0x20007728
 8008d64:	20007734 	.word	0x20007734
 8008d68:	20007724 	.word	0x20007724
 8008d6c:	20003f66 	.word	0x20003f66
 8008d70:	080089fd 	.word	0x080089fd
 8008d74:	006ddd00 	.word	0x006ddd00

08008d78 <tcp_eff_send_mss_impl>:
{
 8008d78:	b510      	push	{r4, lr}
 8008d7a:	4604      	mov	r4, r0
  outif = ip_route(src, dest);
 8008d7c:	4608      	mov	r0, r1
 8008d7e:	f7fe fab9 	bl	80072f4 <ip4_route>
    if (outif == NULL) {
 8008d82:	b130      	cbz	r0, 8008d92 <tcp_eff_send_mss_impl+0x1a>
    mtu = outif->mtu;
 8008d84:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
  if (mtu != 0) {
 8008d86:	b123      	cbz	r3, 8008d92 <tcp_eff_send_mss_impl+0x1a>
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 8008d88:	3b28      	subs	r3, #40	; 0x28
    sendmss = LWIP_MIN(sendmss, mss_s);
 8008d8a:	b29b      	uxth	r3, r3
 8008d8c:	429c      	cmp	r4, r3
 8008d8e:	bf28      	it	cs
 8008d90:	461c      	movcs	r4, r3
}
 8008d92:	4620      	mov	r0, r4
 8008d94:	bd10      	pop	{r4, pc}
	...

08008d98 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8008d98:	b538      	push	{r3, r4, r5, lr}
 8008d9a:	460d      	mov	r5, r1
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 8008d9c:	4604      	mov	r4, r0
 8008d9e:	b180      	cbz	r0, 8008dc2 <tcp_netif_ip_addr_changed+0x2a>
 8008da0:	6803      	ldr	r3, [r0, #0]
 8008da2:	b173      	cbz	r3, 8008dc2 <tcp_netif_ip_addr_changed+0x2a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8008da4:	4b0c      	ldr	r3, [pc, #48]	; (8008dd8 <tcp_netif_ip_addr_changed+0x40>)
 8008da6:	6819      	ldr	r1, [r3, #0]
 8008da8:	f7ff ff21 	bl	8008bee <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8008dac:	4b0b      	ldr	r3, [pc, #44]	; (8008ddc <tcp_netif_ip_addr_changed+0x44>)
 8008dae:	4620      	mov	r0, r4
 8008db0:	6819      	ldr	r1, [r3, #0]
 8008db2:	f7ff ff1c 	bl	8008bee <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8008db6:	b125      	cbz	r5, 8008dc2 <tcp_netif_ip_addr_changed+0x2a>
 8008db8:	682b      	ldr	r3, [r5, #0]
 8008dba:	b113      	cbz	r3, 8008dc2 <tcp_netif_ip_addr_changed+0x2a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8008dbc:	4b08      	ldr	r3, [pc, #32]	; (8008de0 <tcp_netif_ip_addr_changed+0x48>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	b903      	cbnz	r3, 8008dc4 <tcp_netif_ip_addr_changed+0x2c>
 8008dc2:	bd38      	pop	{r3, r4, r5, pc}
        next = lpcb->next;
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8008dc4:	6818      	ldr	r0, [r3, #0]
 8008dc6:	6821      	ldr	r1, [r4, #0]
        next = lpcb->next;
 8008dc8:	68da      	ldr	r2, [r3, #12]
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8008dca:	4288      	cmp	r0, r1
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8008dcc:	bf04      	itt	eq
 8008dce:	6829      	ldreq	r1, [r5, #0]
 8008dd0:	6019      	streq	r1, [r3, #0]
{
 8008dd2:	4613      	mov	r3, r2
 8008dd4:	e7f4      	b.n	8008dc0 <tcp_netif_ip_addr_changed+0x28>
 8008dd6:	bf00      	nop
 8008dd8:	20007724 	.word	0x20007724
 8008ddc:	20007730 	.word	0x20007730
 8008de0:	2000772c 	.word	0x2000772c

08008de4 <tcp_oos_insert_segment>:
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8008de4:	68c3      	ldr	r3, [r0, #12]
{
 8008de6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dea:	4605      	mov	r5, r0
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8008dec:	8998      	ldrh	r0, [r3, #12]
{
 8008dee:	460c      	mov	r4, r1
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8008df0:	f7fc ff54 	bl	8005c9c <lwip_htons>
 8008df4:	07c2      	lsls	r2, r0, #31
 8008df6:	d415      	bmi.n	8008e24 <tcp_oos_insert_segment+0x40>
    next = NULL;
  } else {
    /* delete some following segments
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
 8008df8:	4e18      	ldr	r6, [pc, #96]	; (8008e5c <tcp_oos_insert_segment+0x78>)
    while (next &&
 8008dfa:	b1bc      	cbz	r4, 8008e2c <tcp_oos_insert_segment+0x48>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8008dfc:	68e7      	ldr	r7, [r4, #12]
 8008dfe:	6830      	ldr	r0, [r6, #0]
 8008e00:	892b      	ldrh	r3, [r5, #8]
 8008e02:	6879      	ldr	r1, [r7, #4]
 8008e04:	8922      	ldrh	r2, [r4, #8]
 8008e06:	4403      	add	r3, r0
 8008e08:	440a      	add	r2, r1
 8008e0a:	1a9a      	subs	r2, r3, r2
    while (next &&
 8008e0c:	2a00      	cmp	r2, #0
 8008e0e:	da10      	bge.n	8008e32 <tcp_oos_insert_segment+0x4e>
      old_seg = next;
      next = next->next;
      tcp_seg_free(old_seg);
    }
    if (next &&
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8008e10:	1a5b      	subs	r3, r3, r1
    if (next &&
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	dd0a      	ble.n	8008e2c <tcp_oos_insert_segment+0x48>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8008e16:	1a09      	subs	r1, r1, r0
      pbuf_realloc(cseg->p, cseg->len);
 8008e18:	6868      	ldr	r0, [r5, #4]
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8008e1a:	b289      	uxth	r1, r1
 8008e1c:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8008e1e:	f7ff fa32 	bl	8008286 <pbuf_realloc>
 8008e22:	e003      	b.n	8008e2c <tcp_oos_insert_segment+0x48>
    tcp_segs_free(next);
 8008e24:	4620      	mov	r0, r4
    next = NULL;
 8008e26:	2400      	movs	r4, #0
    tcp_segs_free(next);
 8008e28:	f7ff fb4b 	bl	80084c2 <tcp_segs_free>
    }
  }
  cseg->next = next;
 8008e2c:	602c      	str	r4, [r5, #0]
}
 8008e2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008e32:	89b8      	ldrh	r0, [r7, #12]
 8008e34:	f7fc ff32 	bl	8005c9c <lwip_htons>
 8008e38:	07c3      	lsls	r3, r0, #31
 8008e3a:	d509      	bpl.n	8008e50 <tcp_oos_insert_segment+0x6c>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8008e3c:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8008e40:	2001      	movs	r0, #1
 8008e42:	f8b8 700c 	ldrh.w	r7, [r8, #12]
 8008e46:	f7fc ff29 	bl	8005c9c <lwip_htons>
 8008e4a:	4338      	orrs	r0, r7
 8008e4c:	f8a8 000c 	strh.w	r0, [r8, #12]
      next = next->next;
 8008e50:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 8008e52:	4620      	mov	r0, r4
 8008e54:	f7ff fb27 	bl	80084a6 <tcp_seg_free>
      next = next->next;
 8008e58:	463c      	mov	r4, r7
 8008e5a:	e7ce      	b.n	8008dfa <tcp_oos_insert_segment+0x16>
 8008e5c:	20003f8c 	.word	0x20003f8c

08008e60 <tcp_receive>:
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);

  if (flags & TCP_ACK) {
 8008e60:	4ba9      	ldr	r3, [pc, #676]	; (8009108 <tcp_receive+0x2a8>)
{
 8008e62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (flags & TCP_ACK) {
 8008e66:	781b      	ldrb	r3, [r3, #0]
{
 8008e68:	4604      	mov	r4, r0
 8008e6a:	4ea8      	ldr	r6, [pc, #672]	; (800910c <tcp_receive+0x2ac>)
  if (flags & TCP_ACK) {
 8008e6c:	f013 0f10 	tst.w	r3, #16
 8008e70:	d074      	beq.n	8008f5c <tcp_receive+0xfc>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008e72:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008e74:	6835      	ldr	r5, [r6, #0]
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8008e76:	7d00      	ldrb	r0, [r0, #20]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008e78:	1b5f      	subs	r7, r3, r5
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8008e7a:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 8008e7e:	6d61      	ldr	r1, [r4, #84]	; 0x54
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008e80:	2f00      	cmp	r7, #0
 8008e82:	4fa3      	ldr	r7, [pc, #652]	; (8009110 <tcp_receive+0x2b0>)
 8008e84:	db0d      	blt.n	8008ea2 <tcp_receive+0x42>
 8008e86:	42ab      	cmp	r3, r5
 8008e88:	d103      	bne.n	8008e92 <tcp_receive+0x32>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	1acb      	subs	r3, r1, r3
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	db07      	blt.n	8008ea2 <tcp_receive+0x42>
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	4299      	cmp	r1, r3
 8008e96:	d11f      	bne.n	8008ed8 <tcp_receive+0x78>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008e98:	4b9e      	ldr	r3, [pc, #632]	; (8009114 <tcp_receive+0x2b4>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	89db      	ldrh	r3, [r3, #14]
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d91a      	bls.n	8008ed8 <tcp_receive+0x78>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8008ea2:	4b9c      	ldr	r3, [pc, #624]	; (8009114 <tcp_receive+0x2b4>)
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8008ea4:	f8b4 c05e 	ldrh.w	ip, [r4, #94]	; 0x5e
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f8b3 e00e 	ldrh.w	lr, [r3, #14]
        pcb->snd_wnd_max = pcb->snd_wnd;
      }
      pcb->snd_wl1 = seqno;
 8008eae:	6525      	str	r5, [r4, #80]	; 0x50
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8008eb0:	45f4      	cmp	ip, lr
      pcb->snd_wl2 = ackno;
 8008eb2:	683d      	ldr	r5, [r7, #0]
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8008eb4:	4673      	mov	r3, lr
 8008eb6:	f8a4 e05c 	strh.w	lr, [r4, #92]	; 0x5c
      pcb->snd_wl2 = ackno;
 8008eba:	6565      	str	r5, [r4, #84]	; 0x54
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008ebc:	bf38      	it	cc
 8008ebe:	f8a4 e05e 	strhcc.w	lr, [r4, #94]	; 0x5e
 8008ec2:	f894 5095 	ldrb.w	r5, [r4, #149]	; 0x95
      if (pcb->snd_wnd == 0) {
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	f040 8113 	bne.w	80090f2 <tcp_receive+0x292>
        if (pcb->persist_backoff == 0) {
 8008ecc:	b925      	cbnz	r5, 8008ed8 <tcp_receive+0x78>
          /* start persist timer */
          pcb->persist_cnt = 0;
          pcb->persist_backoff = 1;
 8008ece:	2301      	movs	r3, #1
          pcb->persist_cnt = 0;
 8008ed0:	f884 e094 	strb.w	lr, [r4, #148]	; 0x94
        }
      } else if (pcb->persist_backoff > 0) {
        /* stop persist timer */
          pcb->persist_backoff = 0;
 8008ed4:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	f8d4 e044 	ldr.w	lr, [r4, #68]	; 0x44
 8008ede:	eba3 050e 	sub.w	r5, r3, lr
 8008ee2:	2d00      	cmp	r5, #0
 8008ee4:	4d8c      	ldr	r5, [pc, #560]	; (8009118 <tcp_receive+0x2b8>)
 8008ee6:	f300 811d 	bgt.w	8009124 <tcp_receive+0x2c4>
      /* Clause 2 */
      if (tcplen == 0) {
 8008eea:	488c      	ldr	r0, [pc, #560]	; (800911c <tcp_receive+0x2bc>)
 8008eec:	8800      	ldrh	r0, [r0, #0]
 8008eee:	2800      	cmp	r0, #0
 8008ef0:	f040 8388 	bne.w	8009604 <tcp_receive+0x7a4>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8008ef4:	440a      	add	r2, r1
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8008ef6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008ef8:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8008efc:	4401      	add	r1, r0
 8008efe:	428a      	cmp	r2, r1
 8008f00:	f040 8380 	bne.w	8009604 <tcp_receive+0x7a4>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8008f04:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 8008f08:	2a00      	cmp	r2, #0
 8008f0a:	f2c0 837b 	blt.w	8009604 <tcp_receive+0x7a4>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8008f0e:	4573      	cmp	r3, lr
 8008f10:	f040 8378 	bne.w	8009604 <tcp_receive+0x7a4>
              found_dupack = 1;
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8008f14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008f18:	1c53      	adds	r3, r2, #1
 8008f1a:	b2db      	uxtb	r3, r3
 8008f1c:	429a      	cmp	r2, r3
                ++pcb->dupacks;
 8008f1e:	bf38      	it	cc
 8008f20:	f884 3043 	strbcc.w	r3, [r4, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8008f24:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008f28:	2b03      	cmp	r3, #3
 8008f2a:	f240 80e7 	bls.w	80090fc <tcp_receive+0x29c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8008f2e:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8008f32:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8008f34:	4413      	add	r3, r2
 8008f36:	b29b      	uxth	r3, r3
 8008f38:	429a      	cmp	r2, r3
 8008f3a:	d201      	bcs.n	8008f40 <tcp_receive+0xe0>
                  pcb->cwnd += pcb->mss;
 8008f3c:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 8008f40:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	f040 8161 	bne.w	800920a <tcp_receive+0x3aa>
      if (pcb->snd_queuelen != 0) {
        LWIP_ASSERT("tcp_receive: valid queue length",
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 8008f48:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8008f4c:	882a      	ldrh	r2, [r5, #0]
 8008f4e:	4413      	add	r3, r2
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8008f50:	6b62      	ldr	r2, [r4, #52]	; 0x34
    pcb->snd_buf += recv_acked;
 8008f52:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8008f56:	2a00      	cmp	r2, #0
 8008f58:	f040 8197 	bne.w	800928a <tcp_receive+0x42a>

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8008f5c:	4f6f      	ldr	r7, [pc, #444]	; (800911c <tcp_receive+0x2bc>)
 8008f5e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008f60:	8838      	ldrh	r0, [r7, #0]
 8008f62:	2800      	cmp	r0, #0
 8008f64:	f000 8342 	beq.w	80095ec <tcp_receive+0x78c>
 8008f68:	7d23      	ldrb	r3, [r4, #20]
 8008f6a:	2b06      	cmp	r3, #6
 8008f6c:	f200 833e 	bhi.w	80095ec <tcp_receive+0x78c>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008f70:	6833      	ldr	r3, [r6, #0]
 8008f72:	eba2 0e03 	sub.w	lr, r2, r3
 8008f76:	f1be 0f01 	cmp.w	lr, #1
 8008f7a:	f100 81b4 	bmi.w	80092e6 <tcp_receive+0x486>
 8008f7e:	f1c3 0101 	rsb	r1, r3, #1
 8008f82:	1a09      	subs	r1, r1, r0
 8008f84:	4411      	add	r1, r2
 8008f86:	2900      	cmp	r1, #0
 8008f88:	f300 81ad 	bgt.w	80092e6 <tcp_receive+0x486>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8008f8c:	4d64      	ldr	r5, [pc, #400]	; (8009120 <tcp_receive+0x2c0>)
      off = pcb->rcv_nxt - seqno;
 8008f8e:	4671      	mov	r1, lr
      struct pbuf *p = inseg.p;
 8008f90:	6868      	ldr	r0, [r5, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
      if (inseg.p->len < off) {
 8008f92:	8943      	ldrh	r3, [r0, #10]
 8008f94:	459e      	cmp	lr, r3
 8008f96:	f340 81a3 	ble.w	80092e0 <tcp_receive+0x480>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8008f9a:	8903      	ldrh	r3, [r0, #8]
          off -= p->len;
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
          p->len = 0;
 8008f9c:	f04f 0e00 	mov.w	lr, #0
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8008fa0:	1a5b      	subs	r3, r3, r1
 8008fa2:	b29b      	uxth	r3, r3
        while (p->len < off) {
 8008fa4:	8942      	ldrh	r2, [r0, #10]
 8008fa6:	4291      	cmp	r1, r2
 8008fa8:	f300 8194 	bgt.w	80092d4 <tcp_receive+0x474>
          p = p->next;
        }
        if (pbuf_header(p, (s16_t)-off)) {
 8008fac:	4249      	negs	r1, r1
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 8008fae:	b209      	sxth	r1, r1
 8008fb0:	f7ff f8a3 	bl	80080fa <pbuf_header>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8008fb4:	8929      	ldrh	r1, [r5, #8]
 8008fb6:	6833      	ldr	r3, [r6, #0]
 8008fb8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008fba:	440b      	add	r3, r1
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8008fbc:	6032      	str	r2, [r6, #0]
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8008fbe:	1a9b      	subs	r3, r3, r2
 8008fc0:	812b      	strh	r3, [r5, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8008fc2:	68eb      	ldr	r3, [r5, #12]
 8008fc4:	605a      	str	r2, [r3, #4]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008fc6:	6831      	ldr	r1, [r6, #0]
 8008fc8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008fca:	1a8b      	subs	r3, r1, r2
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	f2c0 8308 	blt.w	80095e2 <tcp_receive+0x782>
 8008fd2:	1c4b      	adds	r3, r1, #1
 8008fd4:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 8008fd6:	1a9b      	subs	r3, r3, r2
 8008fd8:	1a1b      	subs	r3, r3, r0
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	f300 8301 	bgt.w	80095e2 <tcp_receive+0x782>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8008fe0:	4291      	cmp	r1, r2
 8008fe2:	f040 8234 	bne.w	800944e <tcp_receive+0x5ee>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8008fe6:	4d4e      	ldr	r5, [pc, #312]	; (8009120 <tcp_receive+0x2c0>)
 8008fe8:	68eb      	ldr	r3, [r5, #12]
 8008fea:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 8008fee:	8998      	ldrh	r0, [r3, #12]
 8008ff0:	f7fc fe54 	bl	8005c9c <lwip_htons>
 8008ff4:	f010 0003 	ands.w	r0, r0, #3

        if (tcplen > pcb->rcv_wnd) {
 8008ff8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 8008ffa:	bf18      	it	ne
 8008ffc:	2001      	movne	r0, #1
 8008ffe:	4440      	add	r0, r8
 8009000:	b280      	uxth	r0, r0
        if (tcplen > pcb->rcv_wnd) {
 8009002:	4283      	cmp	r3, r0
        tcplen = TCP_TCPLEN(&inseg);
 8009004:	8038      	strh	r0, [r7, #0]
        if (tcplen > pcb->rcv_wnd) {
 8009006:	d233      	bcs.n	8009070 <tcp_receive+0x210>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009008:	68eb      	ldr	r3, [r5, #12]
 800900a:	8998      	ldrh	r0, [r3, #12]
 800900c:	f7fc fe46 	bl	8005c9c <lwip_htons>
 8009010:	07c2      	lsls	r2, r0, #31
 8009012:	d510      	bpl.n	8009036 <tcp_receive+0x1d6>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8009014:	f8d5 900c 	ldr.w	r9, [r5, #12]
 8009018:	f8b9 800c 	ldrh.w	r8, [r9, #12]
 800901c:	4640      	mov	r0, r8
 800901e:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 8009022:	f7fc fe3b 	bl	8005c9c <lwip_htons>
 8009026:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800902a:	f7fc fe37 	bl	8005c9c <lwip_htons>
 800902e:	ea40 0808 	orr.w	r8, r0, r8
 8009032:	f8a9 800c 	strh.w	r8, [r9, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8009036:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8009038:	812b      	strh	r3, [r5, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800903a:	68eb      	ldr	r3, [r5, #12]
 800903c:	8998      	ldrh	r0, [r3, #12]
 800903e:	f7fc fe2d 	bl	8005c9c <lwip_htons>
 8009042:	0783      	lsls	r3, r0, #30
            inseg.len -= 1;
          }
          pbuf_realloc(inseg.p, inseg.len);
 8009044:	6868      	ldr	r0, [r5, #4]
            inseg.len -= 1;
 8009046:	bf42      	ittt	mi
 8009048:	892b      	ldrhmi	r3, [r5, #8]
 800904a:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800904e:	812b      	strhmi	r3, [r5, #8]
          pbuf_realloc(inseg.p, inseg.len);
 8009050:	8929      	ldrh	r1, [r5, #8]
 8009052:	f7ff f918 	bl	8008286 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8009056:	68eb      	ldr	r3, [r5, #12]
 8009058:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 800905c:	8998      	ldrh	r0, [r3, #12]
 800905e:	f7fc fe1d 	bl	8005c9c <lwip_htons>
 8009062:	f010 0003 	ands.w	r0, r0, #3
 8009066:	bf18      	it	ne
 8009068:	2001      	movne	r0, #1
 800906a:	4480      	add	r8, r0
 800906c:	f8a7 8000 	strh.w	r8, [r7]
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8009070:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8009072:	2b00      	cmp	r3, #0
 8009074:	f000 8146 	beq.w	8009304 <tcp_receive+0x4a4>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009078:	68eb      	ldr	r3, [r5, #12]
 800907a:	8998      	ldrh	r0, [r3, #12]
 800907c:	f7fc fe0e 	bl	8005c9c <lwip_htons>
 8009080:	07c0      	lsls	r0, r0, #31
 8009082:	f100 813c 	bmi.w	80092fe <tcp_receive+0x49e>
              struct tcp_seg *old_ooseq = pcb->ooseq;
              pcb->ooseq = pcb->ooseq->next;
              tcp_seg_free(old_ooseq);
            }
          } else {
            next = pcb->ooseq;
 8009086:	f8d4 8070 	ldr.w	r8, [r4, #112]	; 0x70
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800908a:	f1b8 0f00 	cmp.w	r8, #0
 800908e:	d02d      	beq.n	80090ec <tcp_receive+0x28c>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8009090:	f8d8 e00c 	ldr.w	lr, [r8, #12]
 8009094:	6830      	ldr	r0, [r6, #0]
 8009096:	883b      	ldrh	r3, [r7, #0]
 8009098:	f8de 2004 	ldr.w	r2, [lr, #4]
 800909c:	f8b8 1008 	ldrh.w	r1, [r8, #8]
 80090a0:	4403      	add	r3, r0
 80090a2:	4411      	add	r1, r2
 80090a4:	1a59      	subs	r1, r3, r1
            while (next &&
 80090a6:	2900      	cmp	r1, #0
 80090a8:	f280 815c 	bge.w	8009364 <tcp_receive+0x504>
              tcp_seg_free(prev);
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
                TCP_SEQ_GT(seqno + tcplen,
 80090ac:	1a9b      	subs	r3, r3, r2
            if (next &&
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	dd1c      	ble.n	80090ec <tcp_receive+0x28c>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80090b2:	68eb      	ldr	r3, [r5, #12]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80090b4:	1a12      	subs	r2, r2, r0
 80090b6:	812a      	strh	r2, [r5, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80090b8:	8998      	ldrh	r0, [r3, #12]
 80090ba:	f7fc fdef 	bl	8005c9c <lwip_htons>
 80090be:	0783      	lsls	r3, r0, #30
                inseg.len -= 1;
              }
              pbuf_realloc(inseg.p, inseg.len);
 80090c0:	6868      	ldr	r0, [r5, #4]
                inseg.len -= 1;
 80090c2:	bf42      	ittt	mi
 80090c4:	892b      	ldrhmi	r3, [r5, #8]
 80090c6:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80090ca:	812b      	strhmi	r3, [r5, #8]
              pbuf_realloc(inseg.p, inseg.len);
 80090cc:	8929      	ldrh	r1, [r5, #8]
 80090ce:	f7ff f8da 	bl	8008286 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80090d2:	68eb      	ldr	r3, [r5, #12]
 80090d4:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 80090d8:	8998      	ldrh	r0, [r3, #12]
 80090da:	f7fc fddf 	bl	8005c9c <lwip_htons>
 80090de:	f010 0003 	ands.w	r0, r0, #3
 80090e2:	bf18      	it	ne
 80090e4:	2001      	movne	r0, #1
 80090e6:	4481      	add	r9, r0
 80090e8:	f8a7 9000 	strh.w	r9, [r7]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80090ec:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
 80090f0:	e108      	b.n	8009304 <tcp_receive+0x4a4>
      } else if (pcb->persist_backoff > 0) {
 80090f2:	2d00      	cmp	r5, #0
 80090f4:	f43f aef0 	beq.w	8008ed8 <tcp_receive+0x78>
          pcb->persist_backoff = 0;
 80090f8:	2300      	movs	r3, #0
 80090fa:	e6eb      	b.n	8008ed4 <tcp_receive+0x74>
              } else if (pcb->dupacks == 3) {
 80090fc:	f47f af20 	bne.w	8008f40 <tcp_receive+0xe0>
                tcp_rexmit_fast(pcb);
 8009100:	4620      	mov	r0, r4
 8009102:	f001 fa1b 	bl	800a53c <tcp_rexmit_fast>
 8009106:	e71b      	b.n	8008f40 <tcp_receive+0xe0>
 8009108:	20003f6c 	.word	0x20003f6c
 800910c:	20003f8c 	.word	0x20003f8c
 8009110:	20003f68 	.word	0x20003f68
 8009114:	20003f94 	.word	0x20003f94
 8009118:	20003f80 	.word	0x20003f80
 800911c:	20003fa2 	.word	0x20003fa2
 8009120:	20003f70 	.word	0x20003f70
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8009124:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8009126:	1a9a      	subs	r2, r3, r2
 8009128:	2a00      	cmp	r2, #0
 800912a:	dc6a      	bgt.n	8009202 <tcp_receive+0x3a2>
      if (pcb->flags & TF_INFR) {
 800912c:	7ea2      	ldrb	r2, [r4, #26]
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800912e:	f9b4 e03c 	ldrsh.w	lr, [r4, #60]	; 0x3c
      if (pcb->flags & TF_INFR) {
 8009132:	0751      	lsls	r1, r2, #29
      pcb->nrtx = 0;
 8009134:	f04f 0100 	mov.w	r1, #0
      pcb->lastack = ackno;
 8009138:	6463      	str	r3, [r4, #68]	; 0x44
        pcb->flags &= ~TF_INFR;
 800913a:	bf48      	it	mi
 800913c:	f022 0204 	bicmi.w	r2, r2, #4
      pcb->nrtx = 0;
 8009140:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
      pcb->dupacks = 0;
 8009144:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
        pcb->flags &= ~TF_INFR;
 8009148:	bf42      	ittt	mi
 800914a:	76a2      	strbmi	r2, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 800914c:	f8b4 204a 	ldrhmi.w	r2, [r4, #74]	; 0x4a
 8009150:	f8a4 2048 	strhmi.w	r2, [r4, #72]	; 0x48
      if (pcb->state >= ESTABLISHED) {
 8009154:	2803      	cmp	r0, #3
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8009156:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8009158:	eb02 02ee 	add.w	r2, r2, lr, asr #3
 800915c:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      if (pcb->state >= ESTABLISHED) {
 8009160:	d90f      	bls.n	8009182 <tcp_receive+0x322>
        if (pcb->cwnd < pcb->ssthresh) {
 8009162:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8009166:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 800916a:	4293      	cmp	r3, r2
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800916c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 800916e:	bf9c      	itt	ls
 8009170:	435b      	mulls	r3, r3
 8009172:	fb93 f3f2 	sdivls	r3, r3, r2
 8009176:	4413      	add	r3, r2
 8009178:	b29b      	uxth	r3, r3
          if (new_cwnd > pcb->cwnd) {
 800917a:	429a      	cmp	r2, r3
 800917c:	d201      	bcs.n	8009182 <tcp_receive+0x322>
            pcb->cwnd = new_cwnd;
 800917e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      while (pcb->unacked != NULL &&
 8009182:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009184:	b943      	cbnz	r3, 8009198 <tcp_receive+0x338>
      if (pcb->unacked == NULL) {
 8009186:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8009188:	2300      	movs	r3, #0
 800918a:	2a00      	cmp	r2, #0
 800918c:	d137      	bne.n	80091fe <tcp_receive+0x39e>
        pcb->rtime = -1;
 800918e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009192:	8622      	strh	r2, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 8009194:	76e3      	strb	r3, [r4, #27]
 8009196:	e6d3      	b.n	8008f40 <tcp_receive+0xe0>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8009198:	68db      	ldr	r3, [r3, #12]
 800919a:	6858      	ldr	r0, [r3, #4]
 800919c:	f7fc fd81 	bl	8005ca2 <lwip_htonl>
 80091a0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80091a2:	4681      	mov	r9, r0
 80091a4:	f8b3 8008 	ldrh.w	r8, [r3, #8]
 80091a8:	68db      	ldr	r3, [r3, #12]
 80091aa:	8998      	ldrh	r0, [r3, #12]
 80091ac:	f7fc fd76 	bl	8005c9c <lwip_htons>
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	f010 0003 	ands.w	r0, r0, #3
 80091b6:	eba8 0803 	sub.w	r8, r8, r3
 80091ba:	bf18      	it	ne
 80091bc:	2001      	movne	r0, #1
 80091be:	44c8      	add	r8, r9
 80091c0:	4480      	add	r8, r0
      while (pcb->unacked != NULL &&
 80091c2:	f1b8 0f00 	cmp.w	r8, #0
 80091c6:	dcde      	bgt.n	8009186 <tcp_receive+0x326>
        next = pcb->unacked;
 80091c8:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
        pcb->unacked = pcb->unacked->next;
 80091cc:	f8d8 3000 	ldr.w	r3, [r8]
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80091d0:	f8d8 0004 	ldr.w	r0, [r8, #4]
        pcb->unacked = pcb->unacked->next;
 80091d4:	66e3      	str	r3, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80091d6:	f7ff f87f 	bl	80082d8 <pbuf_clen>
        pcb->snd_queuelen -= pbuf_clen(next->p);
 80091da:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80091de:	f7ff f87b 	bl	80082d8 <pbuf_clen>
 80091e2:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
        recv_acked += next->len;
 80091e6:	882a      	ldrh	r2, [r5, #0]
        pcb->snd_queuelen -= pbuf_clen(next->p);
 80091e8:	1a18      	subs	r0, r3, r0
        recv_acked += next->len;
 80091ea:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 80091ee:	4413      	add	r3, r2
        pcb->snd_queuelen -= pbuf_clen(next->p);
 80091f0:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
        tcp_seg_free(next);
 80091f4:	4640      	mov	r0, r8
        recv_acked += next->len;
 80091f6:	802b      	strh	r3, [r5, #0]
        tcp_seg_free(next);
 80091f8:	f7ff f955 	bl	80084a6 <tcp_seg_free>
 80091fc:	e7c1      	b.n	8009182 <tcp_receive+0x322>
        pcb->rtime = 0;
 80091fe:	8623      	strh	r3, [r4, #48]	; 0x30
 8009200:	e7c8      	b.n	8009194 <tcp_receive+0x334>
      tcp_send_empty_ack(pcb);
 8009202:	4620      	mov	r0, r4
 8009204:	f000 ff9b 	bl	800a13e <tcp_send_empty_ack>
 8009208:	e69a      	b.n	8008f40 <tcp_receive+0xe0>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800920a:	68db      	ldr	r3, [r3, #12]
 800920c:	f8d7 8000 	ldr.w	r8, [r7]
 8009210:	6858      	ldr	r0, [r3, #4]
 8009212:	f7fc fd46 	bl	8005ca2 <lwip_htonl>
 8009216:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8009218:	4681      	mov	r9, r0
 800921a:	f8b3 a008 	ldrh.w	sl, [r3, #8]
 800921e:	68db      	ldr	r3, [r3, #12]
 8009220:	eba8 080a 	sub.w	r8, r8, sl
 8009224:	8998      	ldrh	r0, [r3, #12]
 8009226:	f7fc fd39 	bl	8005c9c <lwip_htons>
 800922a:	f010 0003 	ands.w	r0, r0, #3
 800922e:	eba8 0809 	sub.w	r8, r8, r9
 8009232:	bf18      	it	ne
 8009234:	2001      	movne	r0, #1
 8009236:	eba8 0800 	sub.w	r8, r8, r0
    while (pcb->unsent != NULL &&
 800923a:	f1b8 0f00 	cmp.w	r8, #0
 800923e:	f6ff ae83 	blt.w	8008f48 <tcp_receive+0xe8>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8009246:	1a9b      	subs	r3, r3, r2
 8009248:	2b00      	cmp	r3, #0
 800924a:	f73f ae7d 	bgt.w	8008f48 <tcp_receive+0xe8>
      next = pcb->unsent;
 800924e:	f8d4 8068 	ldr.w	r8, [r4, #104]	; 0x68
      pcb->unsent = pcb->unsent->next;
 8009252:	f8d8 3000 	ldr.w	r3, [r8]
 8009256:	66a3      	str	r3, [r4, #104]	; 0x68
      if (pcb->unsent == NULL) {
 8009258:	b90b      	cbnz	r3, 800925e <tcp_receive+0x3fe>
        pcb->unsent_oversize = 0;
 800925a:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800925e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009262:	f7ff f839 	bl	80082d8 <pbuf_clen>
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8009266:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800926a:	f7ff f835 	bl	80082d8 <pbuf_clen>
 800926e:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      recv_acked += next->len;
 8009272:	882a      	ldrh	r2, [r5, #0]
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8009274:	1a18      	subs	r0, r3, r0
      recv_acked += next->len;
 8009276:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800927a:	4413      	add	r3, r2
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800927c:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
      tcp_seg_free(next);
 8009280:	4640      	mov	r0, r8
      recv_acked += next->len;
 8009282:	802b      	strh	r3, [r5, #0]
      tcp_seg_free(next);
 8009284:	f7ff f90f 	bl	80084a6 <tcp_seg_free>
 8009288:	e65a      	b.n	8008f40 <tcp_receive+0xe0>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800928a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800928c:	6839      	ldr	r1, [r7, #0]
 800928e:	1a5b      	subs	r3, r3, r1
 8009290:	2b00      	cmp	r3, #0
 8009292:	f6bf ae63 	bge.w	8008f5c <tcp_receive+0xfc>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8009296:	4ba1      	ldr	r3, [pc, #644]	; (800951c <tcp_receive+0x6bc>)
      m = m - (pcb->sa >> 3);
 8009298:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800929c:	6819      	ldr	r1, [r3, #0]
 800929e:	1a89      	subs	r1, r1, r2
      m = m - (pcb->sv >> 2);
 80092a0:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
      m = m - (pcb->sa >> 3);
 80092a4:	eba1 01e0 	sub.w	r1, r1, r0, asr #3
      pcb->sv += m;
 80092a8:	eba2 02a2 	sub.w	r2, r2, r2, asr #2
      m = m - (pcb->sa >> 3);
 80092ac:	b289      	uxth	r1, r1
 80092ae:	b20b      	sxth	r3, r1
      pcb->sa += m;
 80092b0:	4408      	add	r0, r1
      if (m < 0) {
 80092b2:	2b00      	cmp	r3, #0
      pcb->sa += m;
 80092b4:	b200      	sxth	r0, r0
        m = -m;
 80092b6:	bfb8      	it	lt
 80092b8:	4249      	neglt	r1, r1
      pcb->sa += m;
 80092ba:	87a0      	strh	r0, [r4, #60]	; 0x3c
        m = -m;
 80092bc:	bfb8      	it	lt
 80092be:	b20b      	sxthlt	r3, r1
      pcb->sv += m;
 80092c0:	4413      	add	r3, r2
 80092c2:	b29b      	uxth	r3, r3
 80092c4:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 80092c6:	eb03 03e0 	add.w	r3, r3, r0, asr #3
 80092ca:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 80092ce:	2300      	movs	r3, #0
 80092d0:	6363      	str	r3, [r4, #52]	; 0x34
 80092d2:	e643      	b.n	8008f5c <tcp_receive+0xfc>
          p->tot_len = new_tot_len;
 80092d4:	8103      	strh	r3, [r0, #8]
          off -= p->len;
 80092d6:	1a89      	subs	r1, r1, r2
          p->len = 0;
 80092d8:	f8a0 e00a 	strh.w	lr, [r0, #10]
          p = p->next;
 80092dc:	6800      	ldr	r0, [r0, #0]
 80092de:	e661      	b.n	8008fa4 <tcp_receive+0x144>
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 80092e0:	f1ce 0100 	rsb	r1, lr, #0
 80092e4:	e663      	b.n	8008fae <tcp_receive+0x14e>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80092e6:	1a9b      	subs	r3, r3, r2
 80092e8:	2b00      	cmp	r3, #0
        tcp_ack_now(pcb);
 80092ea:	bfbe      	ittt	lt
 80092ec:	7ea3      	ldrblt	r3, [r4, #26]
 80092ee:	f043 0302 	orrlt.w	r3, r3, #2
 80092f2:	76a3      	strblt	r3, [r4, #26]
 80092f4:	e667      	b.n	8008fc6 <tcp_receive+0x166>
              pcb->ooseq = pcb->ooseq->next;
 80092f6:	6803      	ldr	r3, [r0, #0]
 80092f8:	6723      	str	r3, [r4, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 80092fa:	f7ff f8d4 	bl	80084a6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80092fe:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8009300:	2800      	cmp	r0, #0
 8009302:	d1f8      	bne.n	80092f6 <tcp_receive+0x496>
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8009304:	8839      	ldrh	r1, [r7, #0]

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
        pcb->rcv_wnd -= tcplen;

        tcp_update_rcv_ann_wnd(pcb);
 8009306:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
 8009308:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        pcb->rcv_nxt = seqno + tcplen;
 800930a:	6832      	ldr	r2, [r6, #0]
        pcb->rcv_wnd -= tcplen;
 800930c:	1a5b      	subs	r3, r3, r1
        pcb->rcv_nxt = seqno + tcplen;
 800930e:	440a      	add	r2, r1
        pcb->rcv_wnd -= tcplen;
 8009310:	8523      	strh	r3, [r4, #40]	; 0x28
        pcb->rcv_nxt = seqno + tcplen;
 8009312:	6262      	str	r2, [r4, #36]	; 0x24
        tcp_update_rcv_ann_wnd(pcb);
 8009314:	f7ff f889 	bl	800842a <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8009318:	686b      	ldr	r3, [r5, #4]
 800931a:	891a      	ldrh	r2, [r3, #8]
 800931c:	b11a      	cbz	r2, 8009326 <tcp_receive+0x4c6>
          recv_data = inseg.p;
 800931e:	4a80      	ldr	r2, [pc, #512]	; (8009520 <tcp_receive+0x6c0>)
 8009320:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8009322:	2300      	movs	r3, #0
 8009324:	606b      	str	r3, [r5, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009326:	68eb      	ldr	r3, [r5, #12]
            if (recv_data) {
              pbuf_cat(recv_data, cseg->p);
            } else {
              recv_data = cseg->p;
            }
            cseg->p = NULL;
 8009328:	f04f 0900 	mov.w	r9, #0
            if (recv_data) {
 800932c:	4f7c      	ldr	r7, [pc, #496]	; (8009520 <tcp_receive+0x6c0>)
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800932e:	8998      	ldrh	r0, [r3, #12]
 8009330:	f7fc fcb4 	bl	8005c9c <lwip_htons>
 8009334:	07c5      	lsls	r5, r0, #31
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8009336:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 8009524 <tcp_receive+0x6c4>
          recv_flags |= TF_GOT_FIN;
 800933a:	bf41      	itttt	mi
 800933c:	4a79      	ldrmi	r2, [pc, #484]	; (8009524 <tcp_receive+0x6c4>)
 800933e:	7813      	ldrbmi	r3, [r2, #0]
 8009340:	f043 0320 	orrmi.w	r3, r3, #32
 8009344:	7013      	strbmi	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
 8009346:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8009348:	b125      	cbz	r5, 8009354 <tcp_receive+0x4f4>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800934a:	68e9      	ldr	r1, [r5, #12]
        while (pcb->ooseq != NULL &&
 800934c:	6a62      	ldr	r2, [r4, #36]	; 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800934e:	684b      	ldr	r3, [r1, #4]
        while (pcb->ooseq != NULL &&
 8009350:	4293      	cmp	r3, r2
 8009352:	d032      	beq.n	80093ba <tcp_receive+0x55a>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8009354:	7ea3      	ldrb	r3, [r4, #26]
 8009356:	07d9      	lsls	r1, r3, #31
 8009358:	d574      	bpl.n	8009444 <tcp_receive+0x5e4>
 800935a:	f023 0301 	bic.w	r3, r3, #1
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      tcp_ack_now(pcb);
 800935e:	f043 0302 	orr.w	r3, r3, #2
 8009362:	e071      	b.n	8009448 <tcp_receive+0x5e8>
              if (TCPH_FLAGS(next->tcphdr) & TCP_FIN &&
 8009364:	f8be 000c 	ldrh.w	r0, [lr, #12]
 8009368:	f7fc fc98 	bl	8005c9c <lwip_htons>
 800936c:	07c1      	lsls	r1, r0, #31
 800936e:	d51d      	bpl.n	80093ac <tcp_receive+0x54c>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8009370:	68eb      	ldr	r3, [r5, #12]
 8009372:	8998      	ldrh	r0, [r3, #12]
 8009374:	f7fc fc92 	bl	8005c9c <lwip_htons>
              if (TCPH_FLAGS(next->tcphdr) & TCP_FIN &&
 8009378:	0782      	lsls	r2, r0, #30
 800937a:	d417      	bmi.n	80093ac <tcp_receive+0x54c>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800937c:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8009380:	2001      	movs	r0, #1
 8009382:	f8ba 900c 	ldrh.w	r9, [sl, #12]
 8009386:	f7fc fc89 	bl	8005c9c <lwip_htons>
                tcplen = TCP_TCPLEN(&inseg);
 800938a:	68eb      	ldr	r3, [r5, #12]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800938c:	ea49 0000 	orr.w	r0, r9, r0
                tcplen = TCP_TCPLEN(&inseg);
 8009390:	f8b5 9008 	ldrh.w	r9, [r5, #8]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8009394:	f8aa 000c 	strh.w	r0, [sl, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8009398:	8998      	ldrh	r0, [r3, #12]
 800939a:	f7fc fc7f 	bl	8005c9c <lwip_htons>
 800939e:	f010 0003 	ands.w	r0, r0, #3
 80093a2:	bf18      	it	ne
 80093a4:	2001      	movne	r0, #1
 80093a6:	4481      	add	r9, r0
 80093a8:	f8a7 9000 	strh.w	r9, [r7]
              next = next->next;
 80093ac:	f8d8 9000 	ldr.w	r9, [r8]
              tcp_seg_free(prev);
 80093b0:	4640      	mov	r0, r8
 80093b2:	f7ff f878 	bl	80084a6 <tcp_seg_free>
              next = next->next;
 80093b6:	46c8      	mov	r8, r9
 80093b8:	e667      	b.n	800908a <tcp_receive+0x22a>
          seqno = pcb->ooseq->tcphdr->seqno;
 80093ba:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80093bc:	8988      	ldrh	r0, [r1, #12]
 80093be:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 80093c2:	f7fc fc6b 	bl	8005c9c <lwip_htons>
 80093c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093c8:	f010 0003 	ands.w	r0, r0, #3
 80093cc:	4453      	add	r3, sl
 80093ce:	bf18      	it	ne
 80093d0:	2001      	movne	r0, #1
 80093d2:	4418      	add	r0, r3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80093d4:	68eb      	ldr	r3, [r5, #12]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80093d6:	6260      	str	r0, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80093d8:	8998      	ldrh	r0, [r3, #12]
 80093da:	f7fc fc5f 	bl	8005c9c <lwip_htons>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80093de:	68eb      	ldr	r3, [r5, #12]
 80093e0:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 80093e4:	8998      	ldrh	r0, [r3, #12]
 80093e6:	f7fc fc59 	bl	8005c9c <lwip_htons>
 80093ea:	f010 0003 	ands.w	r0, r0, #3
 80093ee:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80093f0:	bf18      	it	ne
 80093f2:	2001      	movne	r0, #1
 80093f4:	4450      	add	r0, sl
 80093f6:	1a18      	subs	r0, r3, r0
 80093f8:	8520      	strh	r0, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 80093fa:	4620      	mov	r0, r4
 80093fc:	f7ff f815 	bl	800842a <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 8009400:	6869      	ldr	r1, [r5, #4]
 8009402:	890b      	ldrh	r3, [r1, #8]
 8009404:	b12b      	cbz	r3, 8009412 <tcp_receive+0x5b2>
            if (recv_data) {
 8009406:	6838      	ldr	r0, [r7, #0]
 8009408:	b1d0      	cbz	r0, 8009440 <tcp_receive+0x5e0>
              pbuf_cat(recv_data, cseg->p);
 800940a:	f7fe ff7a 	bl	8008302 <pbuf_cat>
            cseg->p = NULL;
 800940e:	f8c5 9004 	str.w	r9, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009412:	68eb      	ldr	r3, [r5, #12]
 8009414:	8998      	ldrh	r0, [r3, #12]
 8009416:	f7fc fc41 	bl	8005c9c <lwip_htons>
 800941a:	07c0      	lsls	r0, r0, #31
 800941c:	d50a      	bpl.n	8009434 <tcp_receive+0x5d4>
            recv_flags |= TF_GOT_FIN;
 800941e:	f898 3000 	ldrb.w	r3, [r8]
 8009422:	f043 0320 	orr.w	r3, r3, #32
 8009426:	f888 3000 	strb.w	r3, [r8]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800942a:	7d23      	ldrb	r3, [r4, #20]
 800942c:	2b04      	cmp	r3, #4
              pcb->state = CLOSE_WAIT;
 800942e:	bf04      	itt	eq
 8009430:	2307      	moveq	r3, #7
 8009432:	7523      	strbeq	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 8009434:	682b      	ldr	r3, [r5, #0]
          tcp_seg_free(cseg);
 8009436:	4628      	mov	r0, r5
          pcb->ooseq = cseg->next;
 8009438:	6723      	str	r3, [r4, #112]	; 0x70
          tcp_seg_free(cseg);
 800943a:	f7ff f834 	bl	80084a6 <tcp_seg_free>
 800943e:	e782      	b.n	8009346 <tcp_receive+0x4e6>
              recv_data = cseg->p;
 8009440:	6039      	str	r1, [r7, #0]
 8009442:	e7e4      	b.n	800940e <tcp_receive+0x5ae>
        tcp_ack(pcb);
 8009444:	f043 0301 	orr.w	r3, r3, #1
      tcp_ack_now(pcb);
 8009448:	76a3      	strb	r3, [r4, #26]
    }
  }
}
 800944a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        tcp_send_empty_ack(pcb);
 800944e:	4620      	mov	r0, r4
 8009450:	f000 fe75 	bl	800a13e <tcp_send_empty_ack>
        if (pcb->ooseq == NULL) {
 8009454:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8009456:	b92d      	cbnz	r5, 8009464 <tcp_receive+0x604>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8009458:	4833      	ldr	r0, [pc, #204]	; (8009528 <tcp_receive+0x6c8>)
 800945a:	f7ff f83a 	bl	80084d2 <tcp_seg_copy>
 800945e:	6720      	str	r0, [r4, #112]	; 0x70
 8009460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            if (seqno == next->tcphdr->seqno) {
 8009464:	6833      	ldr	r3, [r6, #0]
 8009466:	f04f 0800 	mov.w	r8, #0
 800946a:	f103 3eff 	add.w	lr, r3, #4294967295
 800946e:	f103 0c01 	add.w	ip, r3, #1
 8009472:	68e8      	ldr	r0, [r5, #12]
 8009474:	6842      	ldr	r2, [r0, #4]
 8009476:	429a      	cmp	r2, r3
 8009478:	d118      	bne.n	80094ac <tcp_receive+0x64c>
              if (inseg.len > next->len) {
 800947a:	482b      	ldr	r0, [pc, #172]	; (8009528 <tcp_receive+0x6c8>)
 800947c:	892b      	ldrh	r3, [r5, #8]
 800947e:	8902      	ldrh	r2, [r0, #8]
 8009480:	429a      	cmp	r2, r3
 8009482:	f240 80c3 	bls.w	800960c <tcp_receive+0x7ac>
                cseg = tcp_seg_copy(&inseg);
 8009486:	f7ff f824 	bl	80084d2 <tcp_seg_copy>
                if (cseg != NULL) {
 800948a:	2800      	cmp	r0, #0
 800948c:	f000 80be 	beq.w	800960c <tcp_receive+0x7ac>
                  if (prev != NULL) {
 8009490:	f1b8 0f00 	cmp.w	r8, #0
 8009494:	d008      	beq.n	80094a8 <tcp_receive+0x648>
                    prev->next = cseg;
 8009496:	f8c8 0000 	str.w	r0, [r8]
                    tcp_oos_insert_segment(cseg, next);
 800949a:	4629      	mov	r1, r5
}
 800949c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
                    tcp_oos_insert_segment(cseg, next);
 80094a0:	f7ff bca0 	b.w	8008de4 <tcp_oos_insert_segment>
 80094a4:	460d      	mov	r5, r1
 80094a6:	e7e4      	b.n	8009472 <tcp_receive+0x612>
                    pcb->ooseq = cseg;
 80094a8:	6720      	str	r0, [r4, #112]	; 0x70
 80094aa:	e7f6      	b.n	800949a <tcp_receive+0x63a>
              if (prev == NULL) {
 80094ac:	f1b8 0f00 	cmp.w	r8, #0
 80094b0:	d10a      	bne.n	80094c8 <tcp_receive+0x668>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80094b2:	1a99      	subs	r1, r3, r2
 80094b4:	2900      	cmp	r1, #0
 80094b6:	da39      	bge.n	800952c <tcp_receive+0x6cc>
                  cseg = tcp_seg_copy(&inseg);
 80094b8:	481b      	ldr	r0, [pc, #108]	; (8009528 <tcp_receive+0x6c8>)
 80094ba:	f7ff f80a 	bl	80084d2 <tcp_seg_copy>
                  if (cseg != NULL) {
 80094be:	2800      	cmp	r0, #0
 80094c0:	f000 80a4 	beq.w	800960c <tcp_receive+0x7ac>
                    pcb->ooseq = cseg;
 80094c4:	6720      	str	r0, [r4, #112]	; 0x70
 80094c6:	e7e8      	b.n	800949a <tcp_receive+0x63a>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 80094c8:	f8d8 100c 	ldr.w	r1, [r8, #12]
 80094cc:	6849      	ldr	r1, [r1, #4]
 80094ce:	ebae 0101 	sub.w	r1, lr, r1
 80094d2:	2900      	cmp	r1, #0
 80094d4:	db2a      	blt.n	800952c <tcp_receive+0x6cc>
 80094d6:	ebac 0102 	sub.w	r1, ip, r2
 80094da:	2900      	cmp	r1, #0
 80094dc:	dc26      	bgt.n	800952c <tcp_receive+0x6cc>
                  cseg = tcp_seg_copy(&inseg);
 80094de:	4812      	ldr	r0, [pc, #72]	; (8009528 <tcp_receive+0x6c8>)
 80094e0:	f7fe fff7 	bl	80084d2 <tcp_seg_copy>
                  if (cseg != NULL) {
 80094e4:	4604      	mov	r4, r0
 80094e6:	2800      	cmp	r0, #0
 80094e8:	f000 8090 	beq.w	800960c <tcp_receive+0x7ac>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80094ec:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80094f0:	6831      	ldr	r1, [r6, #0]
 80094f2:	685a      	ldr	r2, [r3, #4]
 80094f4:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 80094f8:	4413      	add	r3, r2
 80094fa:	1a5b      	subs	r3, r3, r1
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	dd07      	ble.n	8009510 <tcp_receive+0x6b0>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8009500:	1a89      	subs	r1, r1, r2
                      pbuf_realloc(prev->p, prev->len);
 8009502:	f8d8 0004 	ldr.w	r0, [r8, #4]
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8009506:	b289      	uxth	r1, r1
 8009508:	f8a8 1008 	strh.w	r1, [r8, #8]
                      pbuf_realloc(prev->p, prev->len);
 800950c:	f7fe febb 	bl	8008286 <pbuf_realloc>
                    prev->next = cseg;
 8009510:	f8c8 4000 	str.w	r4, [r8]
                    tcp_oos_insert_segment(cseg, next);
 8009514:	4629      	mov	r1, r5
 8009516:	4620      	mov	r0, r4
 8009518:	e7c0      	b.n	800949c <tcp_receive+0x63c>
 800951a:	bf00      	nop
 800951c:	20007728 	.word	0x20007728
 8009520:	20003f84 	.word	0x20003f84
 8009524:	20003f88 	.word	0x20003f88
 8009528:	20003f70 	.word	0x20003f70
              if (next->next == NULL &&
 800952c:	6829      	ldr	r1, [r5, #0]
 800952e:	46a8      	mov	r8, r5
 8009530:	2900      	cmp	r1, #0
 8009532:	d1b7      	bne.n	80094a4 <tcp_receive+0x644>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8009534:	1a9b      	subs	r3, r3, r2
              if (next->next == NULL &&
 8009536:	2b00      	cmp	r3, #0
 8009538:	dd68      	ble.n	800960c <tcp_receive+0x7ac>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800953a:	8980      	ldrh	r0, [r0, #12]
 800953c:	f7fc fbae 	bl	8005c9c <lwip_htons>
 8009540:	07c2      	lsls	r2, r0, #31
 8009542:	d463      	bmi.n	800960c <tcp_receive+0x7ac>
                next->next = tcp_seg_copy(&inseg);
 8009544:	4832      	ldr	r0, [pc, #200]	; (8009610 <tcp_receive+0x7b0>)
 8009546:	f7fe ffc4 	bl	80084d2 <tcp_seg_copy>
 800954a:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 800954c:	2800      	cmp	r0, #0
 800954e:	d05d      	beq.n	800960c <tcp_receive+0x7ac>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8009550:	68eb      	ldr	r3, [r5, #12]
 8009552:	6831      	ldr	r1, [r6, #0]
 8009554:	685a      	ldr	r2, [r3, #4]
 8009556:	892b      	ldrh	r3, [r5, #8]
 8009558:	4413      	add	r3, r2
 800955a:	1a5b      	subs	r3, r3, r1
 800955c:	2b00      	cmp	r3, #0
 800955e:	dd05      	ble.n	800956c <tcp_receive+0x70c>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8009560:	1a89      	subs	r1, r1, r2
                    pbuf_realloc(next->p, next->len);
 8009562:	6868      	ldr	r0, [r5, #4]
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8009564:	b289      	uxth	r1, r1
 8009566:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 8009568:	f7fe fe8d 	bl	8008286 <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800956c:	6832      	ldr	r2, [r6, #0]
 800956e:	883b      	ldrh	r3, [r7, #0]
 8009570:	4413      	add	r3, r2
 8009572:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009574:	1a9b      	subs	r3, r3, r2
 8009576:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8009578:	1a9b      	subs	r3, r3, r2
 800957a:	2b00      	cmp	r3, #0
 800957c:	dd46      	ble.n	800960c <tcp_receive+0x7ac>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800957e:	682b      	ldr	r3, [r5, #0]
 8009580:	68db      	ldr	r3, [r3, #12]
 8009582:	8998      	ldrh	r0, [r3, #12]
 8009584:	f7fc fb8a 	bl	8005c9c <lwip_htons>
 8009588:	07c3      	lsls	r3, r0, #31
 800958a:	d511      	bpl.n	80095b0 <tcp_receive+0x750>
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800958c:	682b      	ldr	r3, [r5, #0]
 800958e:	f8d3 900c 	ldr.w	r9, [r3, #12]
 8009592:	f8b9 800c 	ldrh.w	r8, [r9, #12]
 8009596:	4640      	mov	r0, r8
 8009598:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 800959c:	f7fc fb7e 	bl	8005c9c <lwip_htons>
 80095a0:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 80095a4:	f7fc fb7a 	bl	8005c9c <lwip_htons>
 80095a8:	ea40 0808 	orr.w	r8, r0, r8
 80095ac:	f8a9 800c 	strh.w	r8, [r9, #12]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80095b0:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 80095b2:	6832      	ldr	r2, [r6, #0]
 80095b4:	682b      	ldr	r3, [r5, #0]
 80095b6:	1a89      	subs	r1, r1, r2
 80095b8:	6a62      	ldr	r2, [r4, #36]	; 0x24
                    pbuf_realloc(next->next->p, next->next->len);
 80095ba:	6858      	ldr	r0, [r3, #4]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80095bc:	4411      	add	r1, r2
 80095be:	b289      	uxth	r1, r1
 80095c0:	8119      	strh	r1, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80095c2:	f7fe fe60 	bl	8008286 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80095c6:	682b      	ldr	r3, [r5, #0]
 80095c8:	891c      	ldrh	r4, [r3, #8]
 80095ca:	68db      	ldr	r3, [r3, #12]
 80095cc:	8998      	ldrh	r0, [r3, #12]
 80095ce:	f7fc fb65 	bl	8005c9c <lwip_htons>
 80095d2:	f010 0003 	ands.w	r0, r0, #3
 80095d6:	bf18      	it	ne
 80095d8:	2001      	movne	r0, #1
 80095da:	4404      	add	r4, r0
 80095dc:	803c      	strh	r4, [r7, #0]
 80095de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      tcp_send_empty_ack(pcb);
 80095e2:	4620      	mov	r0, r4
}
 80095e4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      tcp_send_empty_ack(pcb);
 80095e8:	f000 bda9 	b.w	800a13e <tcp_send_empty_ack>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80095ec:	6833      	ldr	r3, [r6, #0]
 80095ee:	1a99      	subs	r1, r3, r2
 80095f0:	2900      	cmp	r1, #0
 80095f2:	db05      	blt.n	8009600 <tcp_receive+0x7a0>
 80095f4:	3301      	adds	r3, #1
 80095f6:	1a9b      	subs	r3, r3, r2
 80095f8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80095fa:	1a9b      	subs	r3, r3, r2
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	dd05      	ble.n	800960c <tcp_receive+0x7ac>
      tcp_ack_now(pcb);
 8009600:	7ea3      	ldrb	r3, [r4, #26]
 8009602:	e6ac      	b.n	800935e <tcp_receive+0x4fe>
        pcb->dupacks = 0;
 8009604:	2300      	movs	r3, #0
 8009606:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800960a:	e499      	b.n	8008f40 <tcp_receive+0xe0>
 800960c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009610:	20003f70 	.word	0x20003f70

08009614 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8009614:	4b0b      	ldr	r3, [pc, #44]	; (8009644 <tcp_getoptbyte+0x30>)
 8009616:	4a0c      	ldr	r2, [pc, #48]	; (8009648 <tcp_getoptbyte+0x34>)
 8009618:	6819      	ldr	r1, [r3, #0]
{
 800961a:	b510      	push	{r4, lr}
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 800961c:	b121      	cbz	r1, 8009628 <tcp_getoptbyte+0x14>
 800961e:	480b      	ldr	r0, [pc, #44]	; (800964c <tcp_getoptbyte+0x38>)
 8009620:	8813      	ldrh	r3, [r2, #0]
 8009622:	8800      	ldrh	r0, [r0, #0]
 8009624:	4283      	cmp	r3, r0
 8009626:	d207      	bcs.n	8009638 <tcp_getoptbyte+0x24>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8009628:	4b09      	ldr	r3, [pc, #36]	; (8009650 <tcp_getoptbyte+0x3c>)
    return opts[tcp_optidx++];
 800962a:	8811      	ldrh	r1, [r2, #0]
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 800962c:	681b      	ldr	r3, [r3, #0]
    return opts[tcp_optidx++];
 800962e:	1c48      	adds	r0, r1, #1
 8009630:	440b      	add	r3, r1
 8009632:	8010      	strh	r0, [r2, #0]
 8009634:	7d18      	ldrb	r0, [r3, #20]
 8009636:	bd10      	pop	{r4, pc}
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8009638:	1c5c      	adds	r4, r3, #1
 800963a:	1a1b      	subs	r3, r3, r0
    return tcphdr_opt2[idx];
 800963c:	b2db      	uxtb	r3, r3
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 800963e:	8014      	strh	r4, [r2, #0]
    return tcphdr_opt2[idx];
 8009640:	5cc8      	ldrb	r0, [r1, r3]
  }
}
 8009642:	bd10      	pop	{r4, pc}
 8009644:	20003f9c 	.word	0x20003f9c
 8009648:	20003f90 	.word	0x20003f90
 800964c:	20003f98 	.word	0x20003f98
 8009650:	20003f94 	.word	0x20003f94

08009654 <tcp_parseopt.isra.1.part.2>:
 * Currently, only the MSS option is supported!
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
 8009654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009656:	4d19      	ldr	r5, [pc, #100]	; (80096bc <tcp_parseopt.isra.1.part.2+0x68>)
 8009658:	2300      	movs	r3, #0
tcp_parseopt(struct tcp_pcb *pcb)
 800965a:	4607      	mov	r7, r0
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800965c:	4e18      	ldr	r6, [pc, #96]	; (80096c0 <tcp_parseopt.isra.1.part.2+0x6c>)
 800965e:	802b      	strh	r3, [r5, #0]
 8009660:	8834      	ldrh	r4, [r6, #0]
 8009662:	882b      	ldrh	r3, [r5, #0]
 8009664:	42a3      	cmp	r3, r4
 8009666:	d300      	bcc.n	800966a <tcp_parseopt.isra.1.part.2+0x16>
 8009668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      u8_t opt = tcp_getoptbyte();
 800966a:	f7ff ffd3 	bl	8009614 <tcp_getoptbyte>
      switch (opt) {
 800966e:	2801      	cmp	r0, #1
 8009670:	d0f6      	beq.n	8009660 <tcp_parseopt.isra.1.part.2+0xc>
 8009672:	d3f9      	bcc.n	8009668 <tcp_parseopt.isra.1.part.2+0x14>
 8009674:	2802      	cmp	r0, #2
 8009676:	d117      	bne.n	80096a8 <tcp_parseopt.isra.1.part.2+0x54>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8009678:	f7ff ffcc 	bl	8009614 <tcp_getoptbyte>
 800967c:	2804      	cmp	r0, #4
 800967e:	d1f3      	bne.n	8009668 <tcp_parseopt.isra.1.part.2+0x14>
 8009680:	882b      	ldrh	r3, [r5, #0]
 8009682:	3301      	adds	r3, #1
 8009684:	42a3      	cmp	r3, r4
 8009686:	daef      	bge.n	8009668 <tcp_parseopt.isra.1.part.2+0x14>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 8009688:	f7ff ffc4 	bl	8009614 <tcp_getoptbyte>
 800968c:	0200      	lsls	r0, r0, #8
 800968e:	b284      	uxth	r4, r0
        mss |= tcp_getoptbyte();
 8009690:	f7ff ffc0 	bl	8009614 <tcp_getoptbyte>
 8009694:	4320      	orrs	r0, r4
 8009696:	b280      	uxth	r0, r0
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8009698:	1e43      	subs	r3, r0, #1
 800969a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800969e:	bf28      	it	cs
 80096a0:	f44f 7006 	movcs.w	r0, #536	; 0x218
 80096a4:	8038      	strh	r0, [r7, #0]
 80096a6:	e7db      	b.n	8009660 <tcp_parseopt.isra.1.part.2+0xc>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 80096a8:	f7ff ffb4 	bl	8009614 <tcp_getoptbyte>
        if (data < 2) {
 80096ac:	2801      	cmp	r0, #1
 80096ae:	d9db      	bls.n	8009668 <tcp_parseopt.isra.1.part.2+0x14>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 80096b0:	882b      	ldrh	r3, [r5, #0]
 80096b2:	3b02      	subs	r3, #2
 80096b4:	4418      	add	r0, r3
 80096b6:	8028      	strh	r0, [r5, #0]
 80096b8:	e7d2      	b.n	8009660 <tcp_parseopt.isra.1.part.2+0xc>
 80096ba:	bf00      	nop
 80096bc:	20003f90 	.word	0x20003f90
 80096c0:	20003fa0 	.word	0x20003fa0

080096c4 <tcp_input>:
{
 80096c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  tcphdr = (struct tcp_hdr *)p->payload;
 80096c8:	6843      	ldr	r3, [r0, #4]
{
 80096ca:	b089      	sub	sp, #36	; 0x24
  tcphdr = (struct tcp_hdr *)p->payload;
 80096cc:	4da8      	ldr	r5, [pc, #672]	; (8009970 <tcp_input+0x2ac>)
{
 80096ce:	4681      	mov	r9, r0
  tcphdr = (struct tcp_hdr *)p->payload;
 80096d0:	602b      	str	r3, [r5, #0]
  if (p->len < TCP_HLEN) {
 80096d2:	8943      	ldrh	r3, [r0, #10]
 80096d4:	2b13      	cmp	r3, #19
 80096d6:	f240 8144 	bls.w	8009962 <tcp_input+0x29e>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80096da:	4ea6      	ldr	r6, [pc, #664]	; (8009974 <tcp_input+0x2b0>)
 80096dc:	6831      	ldr	r1, [r6, #0]
 80096de:	6970      	ldr	r0, [r6, #20]
 80096e0:	f7fd ff6d 	bl	80075be <ip4_addr_isbroadcast_u32>
 80096e4:	4604      	mov	r4, r0
 80096e6:	2800      	cmp	r0, #0
 80096e8:	f040 813b 	bne.w	8009962 <tcp_input+0x29e>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80096ec:	6973      	ldr	r3, [r6, #20]
 80096ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80096f2:	2be0      	cmp	r3, #224	; 0xe0
 80096f4:	f000 8135 	beq.w	8009962 <tcp_input+0x29e>
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 80096f8:	682b      	ldr	r3, [r5, #0]
 80096fa:	8998      	ldrh	r0, [r3, #12]
 80096fc:	f7fc face 	bl	8005c9c <lwip_htons>
 8009700:	0a81      	lsrs	r1, r0, #10
 8009702:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8009706:	2913      	cmp	r1, #19
 8009708:	f240 812b 	bls.w	8009962 <tcp_input+0x29e>
 800970c:	b289      	uxth	r1, r1
 800970e:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 8009712:	428b      	cmp	r3, r1
 8009714:	f0c0 8125 	bcc.w	8009962 <tcp_input+0x29e>
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8009718:	f1a1 0314 	sub.w	r3, r1, #20
  if (p->len >= hdrlen_bytes) {
 800971c:	f8b9 200a 	ldrh.w	r2, [r9, #10]
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8009720:	f8df 8280 	ldr.w	r8, [pc, #640]	; 80099a4 <tcp_input+0x2e0>
 8009724:	b29b      	uxth	r3, r3
  tcphdr_opt2 = NULL;
 8009726:	4f94      	ldr	r7, [pc, #592]	; (8009978 <tcp_input+0x2b4>)
  if (p->len >= hdrlen_bytes) {
 8009728:	428a      	cmp	r2, r1
  tcphdr_opt2 = NULL;
 800972a:	603c      	str	r4, [r7, #0]
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800972c:	f8a8 3000 	strh.w	r3, [r8]
 8009730:	4c92      	ldr	r4, [pc, #584]	; (800997c <tcp_input+0x2b8>)
  if (p->len >= hdrlen_bytes) {
 8009732:	d34b      	bcc.n	80097cc <tcp_input+0x108>
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8009734:	4249      	negs	r1, r1
 8009736:	4648      	mov	r0, r9
    tcphdr_opt1len = tcphdr_optlen;
 8009738:	8023      	strh	r3, [r4, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 800973a:	f7fe fcde 	bl	80080fa <pbuf_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800973e:	682c      	ldr	r4, [r5, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8009740:	f8df b268 	ldr.w	fp, [pc, #616]	; 80099ac <tcp_input+0x2e8>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8009744:	8820      	ldrh	r0, [r4, #0]
 8009746:	f7fc faa9 	bl	8005c9c <lwip_htons>
 800974a:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800974c:	682c      	ldr	r4, [r5, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800974e:	f8df 8260 	ldr.w	r8, [pc, #608]	; 80099b0 <tcp_input+0x2ec>
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8009752:	8860      	ldrh	r0, [r4, #2]
 8009754:	f7fc faa2 	bl	8005c9c <lwip_htons>
 8009758:	8060      	strh	r0, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800975a:	682c      	ldr	r4, [r5, #0]
 800975c:	6860      	ldr	r0, [r4, #4]
 800975e:	f7fc faa0 	bl	8005ca2 <lwip_htonl>
 8009762:	6060      	str	r0, [r4, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8009764:	682c      	ldr	r4, [r5, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8009766:	f8cb 0000 	str.w	r0, [fp]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800976a:	68a0      	ldr	r0, [r4, #8]
 800976c:	f7fc fa99 	bl	8005ca2 <lwip_htonl>
 8009770:	60a0      	str	r0, [r4, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8009772:	682c      	ldr	r4, [r5, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8009774:	f8c8 0000 	str.w	r0, [r8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8009778:	89e0      	ldrh	r0, [r4, #14]
 800977a:	f7fc fa8f 	bl	8005c9c <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 800977e:	682b      	ldr	r3, [r5, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8009780:	81e0      	strh	r0, [r4, #14]
  flags = TCPH_FLAGS(tcphdr);
 8009782:	8998      	ldrh	r0, [r3, #12]
 8009784:	f7fc fa8a 	bl	8005c9c <lwip_htons>
 8009788:	4a7d      	ldr	r2, [pc, #500]	; (8009980 <tcp_input+0x2bc>)
 800978a:	b2c3      	uxtb	r3, r0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800978c:	4c7d      	ldr	r4, [pc, #500]	; (8009984 <tcp_input+0x2c0>)
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800978e:	487e      	ldr	r0, [pc, #504]	; (8009988 <tcp_input+0x2c4>)
  prev = NULL;
 8009790:	f04f 0e00 	mov.w	lr, #0
  flags = TCPH_FLAGS(tcphdr);
 8009794:	f003 013f 	and.w	r1, r3, #63	; 0x3f
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009798:	6824      	ldr	r4, [r4, #0]
    if (pcb->remote_port == tcphdr->src &&
 800979a:	682f      	ldr	r7, [r5, #0]
  flags = TCPH_FLAGS(tcphdr);
 800979c:	7011      	strb	r1, [r2, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800979e:	f013 0103 	ands.w	r1, r3, #3
 80097a2:	f8b9 2008 	ldrh.w	r2, [r9, #8]
 80097a6:	bf18      	it	ne
 80097a8:	2101      	movne	r1, #1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80097aa:	9406      	str	r4, [sp, #24]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80097ac:	6934      	ldr	r4, [r6, #16]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 80097ae:	4411      	add	r1, r2
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80097b0:	f8d6 a014 	ldr.w	sl, [r6, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80097b4:	9407      	str	r4, [sp, #28]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 80097b6:	b289      	uxth	r1, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80097b8:	9c06      	ldr	r4, [sp, #24]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 80097ba:	9205      	str	r2, [sp, #20]
 80097bc:	8001      	strh	r1, [r0, #0]
 80097be:	f8cd 800c 	str.w	r8, [sp, #12]
 80097c2:	9004      	str	r0, [sp, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80097c4:	bb2c      	cbnz	r4, 8009812 <tcp_input+0x14e>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80097c6:	4871      	ldr	r0, [pc, #452]	; (800998c <tcp_input+0x2c8>)
 80097c8:	6800      	ldr	r0, [r0, #0]
 80097ca:	e0f6      	b.n	80099ba <tcp_input+0x2f6>
    pbuf_header(p, -TCP_HLEN);
 80097cc:	f06f 0113 	mvn.w	r1, #19
 80097d0:	4648      	mov	r0, r9
 80097d2:	f7fe fc92 	bl	80080fa <pbuf_header>
    tcphdr_opt1len = p->len;
 80097d6:	f8b9 100a 	ldrh.w	r1, [r9, #10]
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 80097da:	4648      	mov	r0, r9
    tcphdr_opt1len = p->len;
 80097dc:	8021      	strh	r1, [r4, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 80097de:	f8b8 4000 	ldrh.w	r4, [r8]
 80097e2:	1a64      	subs	r4, r4, r1
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 80097e4:	4249      	negs	r1, r1
 80097e6:	b209      	sxth	r1, r1
 80097e8:	f7fe fc87 	bl	80080fa <pbuf_header>
    if (opt2len > p->next->len) {
 80097ec:	f8d9 0000 	ldr.w	r0, [r9]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 80097f0:	b2a4      	uxth	r4, r4
    if (opt2len > p->next->len) {
 80097f2:	8943      	ldrh	r3, [r0, #10]
 80097f4:	42a3      	cmp	r3, r4
 80097f6:	f0c0 80b4 	bcc.w	8009962 <tcp_input+0x29e>
    pbuf_header(p->next, -(s16_t)opt2len);
 80097fa:	4261      	negs	r1, r4
    tcphdr_opt2 = (u8_t*)p->next->payload;
 80097fc:	6843      	ldr	r3, [r0, #4]
    pbuf_header(p->next, -(s16_t)opt2len);
 80097fe:	b209      	sxth	r1, r1
    tcphdr_opt2 = (u8_t*)p->next->payload;
 8009800:	603b      	str	r3, [r7, #0]
    pbuf_header(p->next, -(s16_t)opt2len);
 8009802:	f7fe fc7a 	bl	80080fa <pbuf_header>
    p->tot_len -= opt2len;
 8009806:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 800980a:	1b1c      	subs	r4, r3, r4
 800980c:	f8a9 4008 	strh.w	r4, [r9, #8]
 8009810:	e795      	b.n	800973e <tcp_input+0x7a>
    if (pcb->remote_port == tcphdr->src &&
 8009812:	f8b4 c018 	ldrh.w	ip, [r4, #24]
 8009816:	8838      	ldrh	r0, [r7, #0]
 8009818:	4584      	cmp	ip, r0
 800981a:	d169      	bne.n	80098f0 <tcp_input+0x22c>
 800981c:	f8b4 c016 	ldrh.w	ip, [r4, #22]
 8009820:	8878      	ldrh	r0, [r7, #2]
 8009822:	4584      	cmp	ip, r0
 8009824:	d164      	bne.n	80098f0 <tcp_input+0x22c>
        pcb->local_port == tcphdr->dest &&
 8009826:	6862      	ldr	r2, [r4, #4]
 8009828:	9807      	ldr	r0, [sp, #28]
 800982a:	4282      	cmp	r2, r0
 800982c:	d160      	bne.n	80098f0 <tcp_input+0x22c>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800982e:	6820      	ldr	r0, [r4, #0]
 8009830:	4550      	cmp	r0, sl
 8009832:	d15d      	bne.n	80098f0 <tcp_input+0x22c>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8009834:	68e1      	ldr	r1, [r4, #12]
      if (prev != NULL) {
 8009836:	f1be 0f00 	cmp.w	lr, #0
 800983a:	d005      	beq.n	8009848 <tcp_input+0x184>
        prev->next = pcb->next;
 800983c:	f8ce 100c 	str.w	r1, [lr, #12]
        pcb->next = tcp_active_pcbs;
 8009840:	9906      	ldr	r1, [sp, #24]
 8009842:	60e1      	str	r1, [r4, #12]
        tcp_active_pcbs = pcb;
 8009844:	494f      	ldr	r1, [pc, #316]	; (8009984 <tcp_input+0x2c0>)
 8009846:	600c      	str	r4, [r1, #0]
    inseg.next = NULL;
 8009848:	4851      	ldr	r0, [pc, #324]	; (8009990 <tcp_input+0x2cc>)
 800984a:	2100      	movs	r1, #0
    inseg.len = p->tot_len;
 800984c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    if (flags & TCP_PSH) {
 8009850:	f013 0f08 	tst.w	r3, #8
    inseg.tcphdr = tcphdr;
 8009854:	60c7      	str	r7, [r0, #12]
    recv_flags = 0;
 8009856:	4e4f      	ldr	r6, [pc, #316]	; (8009994 <tcp_input+0x2d0>)
    recv_data = NULL;
 8009858:	4f4f      	ldr	r7, [pc, #316]	; (8009998 <tcp_input+0x2d4>)
    recv_acked = 0;
 800985a:	f8df 8158 	ldr.w	r8, [pc, #344]	; 80099b4 <tcp_input+0x2f0>
    recv_data = NULL;
 800985e:	6039      	str	r1, [r7, #0]
 8009860:	46ba      	mov	sl, r7
    inseg.next = NULL;
 8009862:	6001      	str	r1, [r0, #0]
 8009864:	4607      	mov	r7, r0
    inseg.len = p->tot_len;
 8009866:	8102      	strh	r2, [r0, #8]
    inseg.p = p;
 8009868:	f8c0 9004 	str.w	r9, [r0, #4]
    recv_flags = 0;
 800986c:	7031      	strb	r1, [r6, #0]
    recv_acked = 0;
 800986e:	f8a8 1000 	strh.w	r1, [r8]
    if (flags & TCP_PSH) {
 8009872:	d005      	beq.n	8009880 <tcp_input+0x1bc>
      p->flags |= PBUF_FLAG_PUSH;
 8009874:	f899 300d 	ldrb.w	r3, [r9, #13]
 8009878:	f043 0301 	orr.w	r3, r3, #1
 800987c:	f889 300d 	strb.w	r3, [r9, #13]
    if (pcb->refused_data != NULL) {
 8009880:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8009882:	2b00      	cmp	r3, #0
 8009884:	f040 8116 	bne.w	8009ab4 <tcp_input+0x3f0>
    tcp_input_pcb = pcb;
 8009888:	4b44      	ldr	r3, [pc, #272]	; (800999c <tcp_input+0x2d8>)
  if (flags & TCP_RST) {
 800988a:	493d      	ldr	r1, [pc, #244]	; (8009980 <tcp_input+0x2bc>)
    tcp_input_pcb = pcb;
 800988c:	601c      	str	r4, [r3, #0]
  if (flags & TCP_RST) {
 800988e:	780b      	ldrb	r3, [r1, #0]
 8009890:	4689      	mov	r9, r1
 8009892:	f013 0f04 	tst.w	r3, #4
 8009896:	f040 8128 	bne.w	8009aea <tcp_input+0x426>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800989a:	f013 0102 	ands.w	r1, r3, #2
 800989e:	d004      	beq.n	80098aa <tcp_input+0x1e6>
 80098a0:	7d20      	ldrb	r0, [r4, #20]
 80098a2:	3802      	subs	r0, #2
 80098a4:	2801      	cmp	r0, #1
 80098a6:	f200 813c 	bhi.w	8009b22 <tcp_input+0x45e>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80098aa:	7ea0      	ldrb	r0, [r4, #26]
 80098ac:	06c0      	lsls	r0, r0, #27
    pcb->tmr = tcp_ticks;
 80098ae:	bf5e      	ittt	pl
 80098b0:	483b      	ldrpl	r0, [pc, #236]	; (80099a0 <tcp_input+0x2dc>)
 80098b2:	6800      	ldrpl	r0, [r0, #0]
 80098b4:	6220      	strpl	r0, [r4, #32]
  pcb->keep_cnt_sent = 0;
 80098b6:	2000      	movs	r0, #0
 80098b8:	f884 0096 	strb.w	r0, [r4, #150]	; 0x96
  if (tcphdr_optlen != 0) {
 80098bc:	4839      	ldr	r0, [pc, #228]	; (80099a4 <tcp_input+0x2e0>)
 80098be:	8800      	ldrh	r0, [r0, #0]
 80098c0:	b138      	cbz	r0, 80098d2 <tcp_input+0x20e>
 80098c2:	f104 0032 	add.w	r0, r4, #50	; 0x32
 80098c6:	9106      	str	r1, [sp, #24]
 80098c8:	9305      	str	r3, [sp, #20]
 80098ca:	f7ff fec3 	bl	8009654 <tcp_parseopt.isra.1.part.2>
 80098ce:	9906      	ldr	r1, [sp, #24]
 80098d0:	9b05      	ldr	r3, [sp, #20]
  switch (pcb->state) {
 80098d2:	7d20      	ldrb	r0, [r4, #20]
 80098d4:	3802      	subs	r0, #2
 80098d6:	2807      	cmp	r0, #7
 80098d8:	f200 8192 	bhi.w	8009c00 <tcp_input+0x53c>
 80098dc:	e8df f010 	tbh	[pc, r0, lsl #1]
 80098e0:	01a40126 	.word	0x01a40126
 80098e4:	02190215 	.word	0x02190215
 80098e8:	02150263 	.word	0x02150263
 80098ec:	029c027c 	.word	0x029c027c
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80098f0:	46a6      	mov	lr, r4
 80098f2:	68e4      	ldr	r4, [r4, #12]
 80098f4:	e766      	b.n	80097c4 <tcp_input+0x100>
      if (pcb->remote_port == tcphdr->src &&
 80098f6:	8b04      	ldrh	r4, [r0, #24]
 80098f8:	f8b7 c000 	ldrh.w	ip, [r7]
 80098fc:	45a4      	cmp	ip, r4
 80098fe:	d15b      	bne.n	80099b8 <tcp_input+0x2f4>
          pcb->local_port == tcphdr->dest &&
 8009900:	8ac4      	ldrh	r4, [r0, #22]
      if (pcb->remote_port == tcphdr->src &&
 8009902:	f8b7 e002 	ldrh.w	lr, [r7, #2]
 8009906:	45a6      	cmp	lr, r4
 8009908:	d156      	bne.n	80099b8 <tcp_input+0x2f4>
          pcb->local_port == tcphdr->dest &&
 800990a:	6844      	ldr	r4, [r0, #4]
 800990c:	9a07      	ldr	r2, [sp, #28]
 800990e:	42a2      	cmp	r2, r4
 8009910:	d152      	bne.n	80099b8 <tcp_input+0x2f4>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009912:	6804      	ldr	r4, [r0, #0]
 8009914:	45a2      	cmp	sl, r4
 8009916:	d14f      	bne.n	80099b8 <tcp_input+0x2f4>
  if (flags & TCP_RST) {
 8009918:	075e      	lsls	r6, r3, #29
 800991a:	d422      	bmi.n	8009962 <tcp_input+0x29e>
  if (flags & TCP_SYN) {
 800991c:	079d      	lsls	r5, r3, #30
 800991e:	d514      	bpl.n	800994a <tcp_input+0x286>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8009920:	f8db 4000 	ldr.w	r4, [fp]
 8009924:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009926:	1ae3      	subs	r3, r4, r3
 8009928:	d414      	bmi.n	8009954 <tcp_input+0x290>
 800992a:	8d02      	ldrh	r2, [r0, #40]	; 0x28
 800992c:	1a9b      	subs	r3, r3, r2
 800992e:	2b00      	cmp	r3, #0
 8009930:	dc10      	bgt.n	8009954 <tcp_input+0x290>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009932:	4b1d      	ldr	r3, [pc, #116]	; (80099a8 <tcp_input+0x2e4>)
 8009934:	4421      	add	r1, r4
 8009936:	f8cd c004 	str.w	ip, [sp, #4]
 800993a:	1d1a      	adds	r2, r3, #4
 800993c:	f8cd e000 	str.w	lr, [sp]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009940:	9803      	ldr	r0, [sp, #12]
 8009942:	6800      	ldr	r0, [r0, #0]
 8009944:	f000 fd72 	bl	800a42c <tcp_rst>
 8009948:	e00b      	b.n	8009962 <tcp_input+0x29e>
  } else if (flags & TCP_FIN) {
 800994a:	07dc      	lsls	r4, r3, #31
    pcb->tmr = tcp_ticks;
 800994c:	bf42      	ittt	mi
 800994e:	4b14      	ldrmi	r3, [pc, #80]	; (80099a0 <tcp_input+0x2dc>)
 8009950:	681b      	ldrmi	r3, [r3, #0]
 8009952:	6203      	strmi	r3, [r0, #32]
  if ((tcplen > 0)) {
 8009954:	b129      	cbz	r1, 8009962 <tcp_input+0x29e>
    pcb->flags |= TF_ACK_NOW;
 8009956:	7e83      	ldrb	r3, [r0, #26]
 8009958:	f043 0302 	orr.w	r3, r3, #2
 800995c:	7683      	strb	r3, [r0, #26]
    tcp_output(pcb);
 800995e:	f000 fc23 	bl	800a1a8 <tcp_output>
  pbuf_free(p);
 8009962:	4648      	mov	r0, r9
}
 8009964:	b009      	add	sp, #36	; 0x24
 8009966:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 800996a:	f7fe bbd4 	b.w	8008116 <pbuf_free>
 800996e:	bf00      	nop
 8009970:	20003f94 	.word	0x20003f94
 8009974:	20003fcc 	.word	0x20003fcc
 8009978:	20003f9c 	.word	0x20003f9c
 800997c:	20003f98 	.word	0x20003f98
 8009980:	20003f6c 	.word	0x20003f6c
 8009984:	20007724 	.word	0x20007724
 8009988:	20003fa2 	.word	0x20003fa2
 800998c:	20007734 	.word	0x20007734
 8009990:	20003f70 	.word	0x20003f70
 8009994:	20003f88 	.word	0x20003f88
 8009998:	20003f84 	.word	0x20003f84
 800999c:	20007738 	.word	0x20007738
 80099a0:	20007728 	.word	0x20007728
 80099a4:	20003fa0 	.word	0x20003fa0
 80099a8:	20003fdc 	.word	0x20003fdc
 80099ac:	20003f8c 	.word	0x20003f8c
 80099b0:	20003f68 	.word	0x20003f68
 80099b4:	20003f80 	.word	0x20003f80
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80099b8:	68c0      	ldr	r0, [r0, #12]
 80099ba:	2800      	cmp	r0, #0
 80099bc:	d19b      	bne.n	80098f6 <tcp_input+0x232>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80099be:	4ca4      	ldr	r4, [pc, #656]	; (8009c50 <tcp_input+0x58c>)
 80099c0:	f8d4 c000 	ldr.w	ip, [r4]
 80099c4:	4664      	mov	r4, ip
 80099c6:	b974      	cbnz	r4, 80099e6 <tcp_input+0x322>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80099c8:	89b8      	ldrh	r0, [r7, #12]
 80099ca:	f7fc f967 	bl	8005c9c <lwip_htons>
 80099ce:	0743      	lsls	r3, r0, #29
 80099d0:	d4c7      	bmi.n	8009962 <tcp_input+0x29e>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80099d2:	682b      	ldr	r3, [r5, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80099d4:	9a04      	ldr	r2, [sp, #16]
 80099d6:	f8db 1000 	ldr.w	r1, [fp]
 80099da:	8810      	ldrh	r0, [r2, #0]
 80099dc:	881a      	ldrh	r2, [r3, #0]
 80099de:	9201      	str	r2, [sp, #4]
 80099e0:	885b      	ldrh	r3, [r3, #2]
 80099e2:	9300      	str	r3, [sp, #0]
 80099e4:	e2a0      	b.n	8009f28 <tcp_input+0x864>
      if (lpcb->local_port == tcphdr->dest) {
 80099e6:	f8b4 e016 	ldrh.w	lr, [r4, #22]
 80099ea:	f8b7 8002 	ldrh.w	r8, [r7, #2]
 80099ee:	45f0      	cmp	r8, lr
 80099f0:	d108      	bne.n	8009a04 <tcp_input+0x340>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80099f2:	f8d4 8000 	ldr.w	r8, [r4]
 80099f6:	45c2      	cmp	sl, r8
 80099f8:	f000 8283 	beq.w	8009f02 <tcp_input+0x83e>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80099fc:	f1b8 0f00 	cmp.w	r8, #0
 8009a00:	f000 827f 	beq.w	8009f02 <tcp_input+0x83e>
 8009a04:	4620      	mov	r0, r4
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009a06:	68e4      	ldr	r4, [r4, #12]
 8009a08:	e7dd      	b.n	80099c6 <tcp_input+0x302>
  } else if (flags & TCP_SYN) {
 8009a0a:	079f      	lsls	r7, r3, #30
 8009a0c:	d5a9      	bpl.n	8009962 <tcp_input+0x29e>
    npcb = tcp_alloc(pcb->prio);
 8009a0e:	7d60      	ldrb	r0, [r4, #21]
 8009a10:	f7ff f926 	bl	8008c60 <tcp_alloc>
    if (npcb == NULL) {
 8009a14:	4607      	mov	r7, r0
 8009a16:	b940      	cbnz	r0, 8009a2a <tcp_input+0x366>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009a18:	69a3      	ldr	r3, [r4, #24]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d0a1      	beq.n	8009962 <tcp_input+0x29e>
 8009a1e:	4601      	mov	r1, r0
 8009a20:	f04f 32ff 	mov.w	r2, #4294967295
 8009a24:	6920      	ldr	r0, [r4, #16]
 8009a26:	4798      	blx	r3
 8009a28:	e79b      	b.n	8009962 <tcp_input+0x29e>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8009a2a:	6973      	ldr	r3, [r6, #20]
    npcb->remote_port = tcphdr->src;
 8009a2c:	6829      	ldr	r1, [r5, #0]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8009a2e:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8009a30:	6933      	ldr	r3, [r6, #16]
 8009a32:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 8009a34:	8ae3      	ldrh	r3, [r4, #22]
 8009a36:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 8009a38:	780b      	ldrb	r3, [r1, #0]
 8009a3a:	7849      	ldrb	r1, [r1, #1]
 8009a3c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8009a40:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 8009a42:	2303      	movs	r3, #3
 8009a44:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 8009a46:	f8db 3000 	ldr.w	r3, [fp]
 8009a4a:	1c5a      	adds	r2, r3, #1
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8009a4c:	3b01      	subs	r3, #1
 8009a4e:	6503      	str	r3, [r0, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 8009a50:	6923      	ldr	r3, [r4, #16]
    npcb->rcv_nxt = seqno + 1;
 8009a52:	6242      	str	r2, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8009a54:	62c2      	str	r2, [r0, #44]	; 0x2c
    npcb->callback_arg = pcb->callback_arg;
 8009a56:	6103      	str	r3, [r0, #16]
    npcb->listener = pcb;
 8009a58:	6784      	str	r4, [r0, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8009a5a:	7a23      	ldrb	r3, [r4, #8]
 8009a5c:	f003 030c 	and.w	r3, r3, #12
 8009a60:	7203      	strb	r3, [r0, #8]
    TCP_REG_ACTIVE(npcb);
 8009a62:	4b7c      	ldr	r3, [pc, #496]	; (8009c54 <tcp_input+0x590>)
 8009a64:	681a      	ldr	r2, [r3, #0]
 8009a66:	6018      	str	r0, [r3, #0]
 8009a68:	60c2      	str	r2, [r0, #12]
 8009a6a:	f000 fe5d 	bl	800a728 <tcp_timer_needed>
 8009a6e:	4b7a      	ldr	r3, [pc, #488]	; (8009c58 <tcp_input+0x594>)
 8009a70:	2201      	movs	r2, #1
 8009a72:	701a      	strb	r2, [r3, #0]
  if (tcphdr_optlen != 0) {
 8009a74:	4b79      	ldr	r3, [pc, #484]	; (8009c5c <tcp_input+0x598>)
 8009a76:	881b      	ldrh	r3, [r3, #0]
 8009a78:	b11b      	cbz	r3, 8009a82 <tcp_input+0x3be>
 8009a7a:	f107 0032 	add.w	r0, r7, #50	; 0x32
 8009a7e:	f7ff fde9 	bl	8009654 <tcp_parseopt.isra.1.part.2>
    npcb->snd_wnd = SND_WND_SCALE(npcb, tcphdr->wnd);
 8009a82:	682b      	ldr	r3, [r5, #0]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8009a84:	1d39      	adds	r1, r7, #4
 8009a86:	8e78      	ldrh	r0, [r7, #50]	; 0x32
    npcb->snd_wnd = SND_WND_SCALE(npcb, tcphdr->wnd);
 8009a88:	89db      	ldrh	r3, [r3, #14]
 8009a8a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 8009a8e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
    npcb->ssthresh = LWIP_TCP_INITIAL_SSTHRESH(npcb);
 8009a92:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8009a96:	f7ff f96f 	bl	8008d78 <tcp_eff_send_mss_impl>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8009a9a:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8009a9c:	8678      	strh	r0, [r7, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8009a9e:	4638      	mov	r0, r7
 8009aa0:	f000 fae1 	bl	800a066 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 8009aa4:	b120      	cbz	r0, 8009ab0 <tcp_input+0x3ec>
      tcp_abandon(npcb, 0);
 8009aa6:	2100      	movs	r1, #0
 8009aa8:	4638      	mov	r0, r7
 8009aaa:	f7ff f837 	bl	8008b1c <tcp_abandon>
 8009aae:	e758      	b.n	8009962 <tcp_input+0x29e>
    tcp_output(npcb);
 8009ab0:	4638      	mov	r0, r7
 8009ab2:	e754      	b.n	800995e <tcp_input+0x29a>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009ab4:	4620      	mov	r0, r4
 8009ab6:	f7fe ffb3 	bl	8008a20 <tcp_process_refused_data>
 8009aba:	300d      	adds	r0, #13
 8009abc:	d008      	beq.n	8009ad0 <tcp_input+0x40c>
 8009abe:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	f43f aee1 	beq.w	8009888 <tcp_input+0x1c4>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009ac6:	4b66      	ldr	r3, [pc, #408]	; (8009c60 <tcp_input+0x59c>)
 8009ac8:	881b      	ldrh	r3, [r3, #0]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	f43f aedc 	beq.w	8009888 <tcp_input+0x1c4>
    tcp_input_pcb = NULL;
 8009ad0:	2400      	movs	r4, #0
 8009ad2:	4b64      	ldr	r3, [pc, #400]	; (8009c64 <tcp_input+0x5a0>)
    if (inseg.p != NULL)
 8009ad4:	6878      	ldr	r0, [r7, #4]
    tcp_input_pcb = NULL;
 8009ad6:	601c      	str	r4, [r3, #0]
    recv_data = NULL;
 8009ad8:	f8ca 4000 	str.w	r4, [sl]
    if (inseg.p != NULL)
 8009adc:	b110      	cbz	r0, 8009ae4 <tcp_input+0x420>
      pbuf_free(inseg.p);
 8009ade:	f7fe fb1a 	bl	8008116 <pbuf_free>
      inseg.p = NULL;
 8009ae2:	607c      	str	r4, [r7, #4]
}
 8009ae4:	b009      	add	sp, #36	; 0x24
 8009ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (pcb->state == SYN_SENT) {
 8009aea:	7d23      	ldrb	r3, [r4, #20]
 8009aec:	2b02      	cmp	r3, #2
 8009aee:	d10d      	bne.n	8009b0c <tcp_input+0x448>
      if (ackno == pcb->snd_nxt) {
 8009af0:	4b5d      	ldr	r3, [pc, #372]	; (8009c68 <tcp_input+0x5a4>)
 8009af2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	429a      	cmp	r2, r3
 8009af8:	f040 8082 	bne.w	8009c00 <tcp_input+0x53c>
      recv_flags |= TF_RESET;
 8009afc:	7833      	ldrb	r3, [r6, #0]
 8009afe:	f043 0308 	orr.w	r3, r3, #8
 8009b02:	7033      	strb	r3, [r6, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 8009b04:	7ea3      	ldrb	r3, [r4, #26]
 8009b06:	f023 0301 	bic.w	r3, r3, #1
 8009b0a:	e00d      	b.n	8009b28 <tcp_input+0x464>
      if (seqno == pcb->rcv_nxt) {
 8009b0c:	4b57      	ldr	r3, [pc, #348]	; (8009c6c <tcp_input+0x5a8>)
 8009b0e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	429a      	cmp	r2, r3
 8009b14:	d0f2      	beq.n	8009afc <tcp_input+0x438>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009b16:	1a9b      	subs	r3, r3, r2
 8009b18:	d472      	bmi.n	8009c00 <tcp_input+0x53c>
 8009b1a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8009b1c:	1a9b      	subs	r3, r3, r2
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	dc6e      	bgt.n	8009c00 <tcp_input+0x53c>
      tcp_ack_now(pcb);
 8009b22:	7ea3      	ldrb	r3, [r4, #26]
 8009b24:	f043 0302 	orr.w	r3, r3, #2
      pcb->flags &= ~TF_ACK_DELAY;
 8009b28:	76a3      	strb	r3, [r4, #26]
 8009b2a:	e069      	b.n	8009c00 <tcp_input+0x53c>
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8009b2c:	f003 0112 	and.w	r1, r3, #18
 8009b30:	2912      	cmp	r1, #18
 8009b32:	d14e      	bne.n	8009bd2 <tcp_input+0x50e>
        && (ackno == pcb->lastack + 1)) {
 8009b34:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009b36:	484c      	ldr	r0, [pc, #304]	; (8009c68 <tcp_input+0x5a4>)
 8009b38:	3101      	adds	r1, #1
 8009b3a:	6800      	ldr	r0, [r0, #0]
 8009b3c:	4281      	cmp	r1, r0
 8009b3e:	d148      	bne.n	8009bd2 <tcp_input+0x50e>
      pcb->rcv_nxt = seqno + 1;
 8009b40:	f8db 3000 	ldr.w	r3, [fp]
      pcb->lastack = ackno;
 8009b44:	6461      	str	r1, [r4, #68]	; 0x44
      pcb->rcv_nxt = seqno + 1;
 8009b46:	1c5a      	adds	r2, r3, #1
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8009b48:	3b01      	subs	r3, #1
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8009b4a:	8e60      	ldrh	r0, [r4, #50]	; 0x32
      pcb->rcv_nxt = seqno + 1;
 8009b4c:	6262      	str	r2, [r4, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8009b4e:	62e2      	str	r2, [r4, #44]	; 0x2c
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8009b50:	682a      	ldr	r2, [r5, #0]
 8009b52:	89d2      	ldrh	r2, [r2, #14]
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8009b54:	6523      	str	r3, [r4, #80]	; 0x50
      pcb->state = ESTABLISHED;
 8009b56:	2304      	movs	r3, #4
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8009b58:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 8009b5c:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8009b60:	18e1      	adds	r1, r4, r3
      pcb->state = ESTABLISHED;
 8009b62:	7523      	strb	r3, [r4, #20]
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8009b64:	f7ff f908 	bl	8008d78 <tcp_eff_send_mss_impl>
      pcb->ssthresh = LWIP_TCP_INITIAL_SSTHRESH(pcb);
 8009b68:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009b6c:	f241 121c 	movw	r2, #4380	; 0x111c
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8009b70:	8660      	strh	r0, [r4, #50]	; 0x32
      pcb->ssthresh = LWIP_TCP_INITIAL_SSTHRESH(pcb);
 8009b72:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009b76:	0043      	lsls	r3, r0, #1
 8009b78:	0080      	lsls	r0, r0, #2
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	bf38      	it	cc
 8009b7e:	4613      	movcc	r3, r2
 8009b80:	4283      	cmp	r3, r0
 8009b82:	bf28      	it	cs
 8009b84:	4603      	movcs	r3, r0
      rseg = pcb->unacked;
 8009b86:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009b88:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      --pcb->snd_queuelen;
 8009b8c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8009b90:	3b01      	subs	r3, #1
 8009b92:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      if (rseg == NULL) {
 8009b96:	b9a0      	cbnz	r0, 8009bc2 <tcp_input+0x4fe>
        rseg = pcb->unsent;
 8009b98:	6ea0      	ldr	r0, [r4, #104]	; 0x68
        pcb->unsent = rseg->next;
 8009b9a:	6803      	ldr	r3, [r0, #0]
 8009b9c:	66a3      	str	r3, [r4, #104]	; 0x68
      tcp_seg_free(rseg);
 8009b9e:	f7fe fc82 	bl	80084a6 <tcp_seg_free>
      if (pcb->unacked == NULL) {
 8009ba2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009ba4:	b983      	cbnz	r3, 8009bc8 <tcp_input+0x504>
        pcb->rtime = -1;
 8009ba6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009baa:	8623      	strh	r3, [r4, #48]	; 0x30
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8009bac:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d0b6      	beq.n	8009b22 <tcp_input+0x45e>
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	4621      	mov	r1, r4
 8009bb8:	6920      	ldr	r0, [r4, #16]
 8009bba:	4798      	blx	r3
      if (err == ERR_ABRT) {
 8009bbc:	300d      	adds	r0, #13
 8009bbe:	d1b0      	bne.n	8009b22 <tcp_input+0x45e>
 8009bc0:	e786      	b.n	8009ad0 <tcp_input+0x40c>
        pcb->unacked = rseg->next;
 8009bc2:	6803      	ldr	r3, [r0, #0]
 8009bc4:	66e3      	str	r3, [r4, #108]	; 0x6c
 8009bc6:	e7ea      	b.n	8009b9e <tcp_input+0x4da>
        pcb->rtime = 0;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	8623      	strh	r3, [r4, #48]	; 0x30
        pcb->nrtx = 0;
 8009bcc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009bd0:	e7ec      	b.n	8009bac <tcp_input+0x4e8>
    else if (flags & TCP_ACK) {
 8009bd2:	06da      	lsls	r2, r3, #27
 8009bd4:	d514      	bpl.n	8009c00 <tcp_input+0x53c>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009bd6:	682b      	ldr	r3, [r5, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009bd8:	9a04      	ldr	r2, [sp, #16]
 8009bda:	f8db 1000 	ldr.w	r1, [fp]
 8009bde:	8810      	ldrh	r0, [r2, #0]
 8009be0:	881a      	ldrh	r2, [r3, #0]
 8009be2:	4401      	add	r1, r0
 8009be4:	9803      	ldr	r0, [sp, #12]
 8009be6:	9201      	str	r2, [sp, #4]
 8009be8:	885b      	ldrh	r3, [r3, #2]
 8009bea:	9300      	str	r3, [sp, #0]
 8009bec:	4b20      	ldr	r3, [pc, #128]	; (8009c70 <tcp_input+0x5ac>)
 8009bee:	6800      	ldr	r0, [r0, #0]
 8009bf0:	1d1a      	adds	r2, r3, #4
 8009bf2:	f000 fc1b 	bl	800a42c <tcp_rst>
      pcb->rtime = 0;
 8009bf6:	2300      	movs	r3, #0
      tcp_rexmit_rto(pcb);
 8009bf8:	4620      	mov	r0, r4
      pcb->rtime = 0;
 8009bfa:	8623      	strh	r3, [r4, #48]	; 0x30
      tcp_rexmit_rto(pcb);
 8009bfc:	f000 fc5e 	bl	800a4bc <tcp_rexmit_rto>
      if (recv_flags & TF_RESET) {
 8009c00:	7833      	ldrb	r3, [r6, #0]
 8009c02:	071d      	lsls	r5, r3, #28
 8009c04:	f140 811f 	bpl.w	8009e46 <tcp_input+0x782>
        TCP_EVENT_ERR(pcb->errf, pcb->callback_arg, ERR_RST);
 8009c08:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009c0c:	b11b      	cbz	r3, 8009c16 <tcp_input+0x552>
 8009c0e:	f06f 010d 	mvn.w	r1, #13
            TCP_EVENT_ERR(pcb->errf, pcb->callback_arg, ERR_CLSD);
 8009c12:	6920      	ldr	r0, [r4, #16]
 8009c14:	4798      	blx	r3
          tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009c16:	4621      	mov	r1, r4
 8009c18:	480e      	ldr	r0, [pc, #56]	; (8009c54 <tcp_input+0x590>)
 8009c1a:	f7fe fe0b 	bl	8008834 <tcp_pcb_remove>
          memp_free(MEMP_TCP_PCB, pcb);
 8009c1e:	4621      	mov	r1, r4
 8009c20:	2001      	movs	r0, #1
 8009c22:	f7fe f92f 	bl	8007e84 <memp_free>
          goto aborted;
 8009c26:	e753      	b.n	8009ad0 <tcp_input+0x40c>
    if (flags & TCP_ACK) {
 8009c28:	06db      	lsls	r3, r3, #27
 8009c2a:	d561      	bpl.n	8009cf0 <tcp_input+0x62c>
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8009c2c:	4b0e      	ldr	r3, [pc, #56]	; (8009c68 <tcp_input+0x5a4>)
 8009c2e:	6818      	ldr	r0, [r3, #0]
 8009c30:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009c32:	43db      	mvns	r3, r3
 8009c34:	42c3      	cmn	r3, r0
 8009c36:	d44c      	bmi.n	8009cd2 <tcp_input+0x60e>
 8009c38:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009c3a:	1ac3      	subs	r3, r0, r3
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	dc48      	bgt.n	8009cd2 <tcp_input+0x60e>
        pcb->state = ESTABLISHED;
 8009c40:	2304      	movs	r3, #4
 8009c42:	7523      	strb	r3, [r4, #20]
        LWIP_ASSERT("pcb->listener->accept != NULL",
 8009c44:	6fa3      	ldr	r3, [r4, #120]	; 0x78
        if (pcb->listener == NULL) {
 8009c46:	b9ab      	cbnz	r3, 8009c74 <tcp_input+0x5b0>
            tcp_abort(pcb);
 8009c48:	4620      	mov	r0, r4
 8009c4a:	f7fe ffcd 	bl	8008be8 <tcp_abort>
            goto aborted;
 8009c4e:	e73f      	b.n	8009ad0 <tcp_input+0x40c>
 8009c50:	2000772c 	.word	0x2000772c
 8009c54:	20007724 	.word	0x20007724
 8009c58:	20007720 	.word	0x20007720
 8009c5c:	20003fa0 	.word	0x20003fa0
 8009c60:	20003fa2 	.word	0x20003fa2
 8009c64:	20007738 	.word	0x20007738
 8009c68:	20003f68 	.word	0x20003f68
 8009c6c:	20003f8c 	.word	0x20003f8c
 8009c70:	20003fdc 	.word	0x20003fdc
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8009c74:	699b      	ldr	r3, [r3, #24]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d0e6      	beq.n	8009c48 <tcp_input+0x584>
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	4621      	mov	r1, r4
 8009c7e:	6920      	ldr	r0, [r4, #16]
 8009c80:	4798      	blx	r3
        if (err != ERR_OK) {
 8009c82:	b110      	cbz	r0, 8009c8a <tcp_input+0x5c6>
          if (err != ERR_ABRT) {
 8009c84:	300d      	adds	r0, #13
 8009c86:	d1df      	bne.n	8009c48 <tcp_input+0x584>
 8009c88:	e722      	b.n	8009ad0 <tcp_input+0x40c>
        tcp_receive(pcb);
 8009c8a:	4620      	mov	r0, r4
 8009c8c:	f7ff f8e8 	bl	8008e60 <tcp_receive>
        pcb->ssthresh = LWIP_TCP_INITIAL_SSTHRESH(pcb);
 8009c90:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 8009c94:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
        if (recv_acked != 0) {
 8009c98:	f8b8 3000 	ldrh.w	r3, [r8]
 8009c9c:	b113      	cbz	r3, 8009ca4 <tcp_input+0x5e0>
          recv_acked--;
 8009c9e:	3b01      	subs	r3, #1
 8009ca0:	f8a8 3000 	strh.w	r3, [r8]
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009ca4:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8009ca6:	f241 111c 	movw	r1, #4380	; 0x111c
 8009caa:	0053      	lsls	r3, r2, #1
 8009cac:	0092      	lsls	r2, r2, #2
 8009cae:	428b      	cmp	r3, r1
 8009cb0:	bf38      	it	cc
 8009cb2:	460b      	movcc	r3, r1
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	bf28      	it	cs
 8009cb8:	4613      	movcs	r3, r2
 8009cba:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 8009cbe:	7833      	ldrb	r3, [r6, #0]
 8009cc0:	069d      	lsls	r5, r3, #26
 8009cc2:	d59d      	bpl.n	8009c00 <tcp_input+0x53c>
      tcp_ack_now(pcb);
 8009cc4:	7ea3      	ldrb	r3, [r4, #26]
 8009cc6:	f043 0302 	orr.w	r3, r3, #2
 8009cca:	76a3      	strb	r3, [r4, #26]
      pcb->state = CLOSE_WAIT;
 8009ccc:	2307      	movs	r3, #7
      pcb->state = FIN_WAIT_2;
 8009cce:	7523      	strb	r3, [r4, #20]
 8009cd0:	e796      	b.n	8009c00 <tcp_input+0x53c>
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009cd2:	682b      	ldr	r3, [r5, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009cd4:	9a04      	ldr	r2, [sp, #16]
 8009cd6:	f8db 1000 	ldr.w	r1, [fp]
 8009cda:	8815      	ldrh	r5, [r2, #0]
 8009cdc:	881a      	ldrh	r2, [r3, #0]
 8009cde:	4429      	add	r1, r5
 8009ce0:	9201      	str	r2, [sp, #4]
 8009ce2:	885b      	ldrh	r3, [r3, #2]
 8009ce4:	9300      	str	r3, [sp, #0]
 8009ce6:	4b92      	ldr	r3, [pc, #584]	; (8009f30 <tcp_input+0x86c>)
 8009ce8:	1d1a      	adds	r2, r3, #4
 8009cea:	f000 fb9f 	bl	800a42c <tcp_rst>
 8009cee:	e787      	b.n	8009c00 <tcp_input+0x53c>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8009cf0:	2900      	cmp	r1, #0
 8009cf2:	d085      	beq.n	8009c00 <tcp_input+0x53c>
 8009cf4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009cf6:	4a8f      	ldr	r2, [pc, #572]	; (8009f34 <tcp_input+0x870>)
 8009cf8:	3b01      	subs	r3, #1
 8009cfa:	6812      	ldr	r2, [r2, #0]
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	f47f af7f 	bne.w	8009c00 <tcp_input+0x53c>
      tcp_rexmit(pcb);
 8009d02:	4620      	mov	r0, r4
 8009d04:	f000 fbf3 	bl	800a4ee <tcp_rexmit>
 8009d08:	e77a      	b.n	8009c00 <tcp_input+0x53c>
    tcp_receive(pcb);
 8009d0a:	4620      	mov	r0, r4
 8009d0c:	f7ff f8a8 	bl	8008e60 <tcp_receive>
 8009d10:	e7d5      	b.n	8009cbe <tcp_input+0x5fa>
    tcp_receive(pcb);
 8009d12:	4620      	mov	r0, r4
 8009d14:	f7ff f8a4 	bl	8008e60 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8009d18:	7833      	ldrb	r3, [r6, #0]
 8009d1a:	f013 0f20 	tst.w	r3, #32
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009d1e:	f899 3000 	ldrb.w	r3, [r9]
    if (recv_flags & TF_GOT_FIN) {
 8009d22:	d031      	beq.n	8009d88 <tcp_input+0x6c4>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009d24:	f013 0f10 	tst.w	r3, #16
 8009d28:	7ea3      	ldrb	r3, [r4, #26]
 8009d2a:	d028      	beq.n	8009d7e <tcp_input+0x6ba>
 8009d2c:	4a82      	ldr	r2, [pc, #520]	; (8009f38 <tcp_input+0x874>)
 8009d2e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8009d30:	6812      	ldr	r2, [r2, #0]
 8009d32:	4291      	cmp	r1, r2
 8009d34:	d123      	bne.n	8009d7e <tcp_input+0x6ba>
 8009d36:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8009d38:	bb0a      	cbnz	r2, 8009d7e <tcp_input+0x6ba>
        tcp_ack_now(pcb);
 8009d3a:	f043 0302 	orr.w	r3, r3, #2
        tcp_pcb_purge(pcb);
 8009d3e:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 8009d40:	76a3      	strb	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 8009d42:	f7fe fbdc 	bl	80084fe <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009d46:	4a7d      	ldr	r2, [pc, #500]	; (8009f3c <tcp_input+0x878>)
 8009d48:	6813      	ldr	r3, [r2, #0]
 8009d4a:	429c      	cmp	r4, r3
 8009d4c:	d109      	bne.n	8009d62 <tcp_input+0x69e>
      TCP_RMV_ACTIVE(pcb);
 8009d4e:	68e3      	ldr	r3, [r4, #12]
 8009d50:	6013      	str	r3, [r2, #0]
 8009d52:	e008      	b.n	8009d66 <tcp_input+0x6a2>
        TCP_RMV_ACTIVE(pcb);
 8009d54:	68da      	ldr	r2, [r3, #12]
 8009d56:	4294      	cmp	r4, r2
 8009d58:	d102      	bne.n	8009d60 <tcp_input+0x69c>
      TCP_RMV_ACTIVE(pcb);
 8009d5a:	68e2      	ldr	r2, [r4, #12]
 8009d5c:	60da      	str	r2, [r3, #12]
 8009d5e:	e002      	b.n	8009d66 <tcp_input+0x6a2>
        TCP_RMV_ACTIVE(pcb);
 8009d60:	4613      	mov	r3, r2
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d1f6      	bne.n	8009d54 <tcp_input+0x690>
      TCP_RMV_ACTIVE(pcb);
 8009d66:	2201      	movs	r2, #1
 8009d68:	4b75      	ldr	r3, [pc, #468]	; (8009f40 <tcp_input+0x87c>)
 8009d6a:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8009d6c:	230a      	movs	r3, #10
 8009d6e:	7523      	strb	r3, [r4, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8009d70:	4b74      	ldr	r3, [pc, #464]	; (8009f44 <tcp_input+0x880>)
 8009d72:	681a      	ldr	r2, [r3, #0]
 8009d74:	601c      	str	r4, [r3, #0]
 8009d76:	60e2      	str	r2, [r4, #12]
 8009d78:	f000 fcd6 	bl	800a728 <tcp_timer_needed>
 8009d7c:	e740      	b.n	8009c00 <tcp_input+0x53c>
        tcp_ack_now(pcb);
 8009d7e:	f043 0302 	orr.w	r3, r3, #2
 8009d82:	76a3      	strb	r3, [r4, #26]
        pcb->state = CLOSING;
 8009d84:	2308      	movs	r3, #8
 8009d86:	e7a2      	b.n	8009cce <tcp_input+0x60a>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009d88:	06d8      	lsls	r0, r3, #27
 8009d8a:	f57f af39 	bpl.w	8009c00 <tcp_input+0x53c>
 8009d8e:	4b6a      	ldr	r3, [pc, #424]	; (8009f38 <tcp_input+0x874>)
 8009d90:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	429a      	cmp	r2, r3
 8009d96:	f47f af33 	bne.w	8009c00 <tcp_input+0x53c>
 8009d9a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	f47f af2f 	bne.w	8009c00 <tcp_input+0x53c>
      pcb->state = FIN_WAIT_2;
 8009da2:	2306      	movs	r3, #6
 8009da4:	e793      	b.n	8009cce <tcp_input+0x60a>
    tcp_receive(pcb);
 8009da6:	4620      	mov	r0, r4
 8009da8:	f7ff f85a 	bl	8008e60 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8009dac:	7833      	ldrb	r3, [r6, #0]
 8009dae:	0699      	lsls	r1, r3, #26
 8009db0:	f57f af26 	bpl.w	8009c00 <tcp_input+0x53c>
      tcp_ack_now(pcb);
 8009db4:	7ea3      	ldrb	r3, [r4, #26]
      tcp_pcb_purge(pcb);
 8009db6:	4620      	mov	r0, r4
      tcp_ack_now(pcb);
 8009db8:	f043 0302 	orr.w	r3, r3, #2
 8009dbc:	76a3      	strb	r3, [r4, #26]
      tcp_pcb_purge(pcb);
 8009dbe:	f7fe fb9e 	bl	80084fe <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8009dc2:	4a5e      	ldr	r2, [pc, #376]	; (8009f3c <tcp_input+0x878>)
 8009dc4:	6813      	ldr	r3, [r2, #0]
 8009dc6:	429c      	cmp	r4, r3
 8009dc8:	d0c1      	beq.n	8009d4e <tcp_input+0x68a>
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d0cb      	beq.n	8009d66 <tcp_input+0x6a2>
 8009dce:	68da      	ldr	r2, [r3, #12]
 8009dd0:	4294      	cmp	r4, r2
 8009dd2:	d0c2      	beq.n	8009d5a <tcp_input+0x696>
 8009dd4:	4613      	mov	r3, r2
 8009dd6:	e7f8      	b.n	8009dca <tcp_input+0x706>
    tcp_receive(pcb);
 8009dd8:	4620      	mov	r0, r4
 8009dda:	f7ff f841 	bl	8008e60 <tcp_receive>
    if (flags & TCP_ACK && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009dde:	f899 3000 	ldrb.w	r3, [r9]
 8009de2:	06da      	lsls	r2, r3, #27
 8009de4:	f57f af0c 	bpl.w	8009c00 <tcp_input+0x53c>
 8009de8:	4b53      	ldr	r3, [pc, #332]	; (8009f38 <tcp_input+0x874>)
 8009dea:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	429a      	cmp	r2, r3
 8009df0:	f47f af06 	bne.w	8009c00 <tcp_input+0x53c>
 8009df4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	f47f af02 	bne.w	8009c00 <tcp_input+0x53c>
      tcp_pcb_purge(pcb);
 8009dfc:	4620      	mov	r0, r4
 8009dfe:	f7fe fb7e 	bl	80084fe <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8009e02:	4a4e      	ldr	r2, [pc, #312]	; (8009f3c <tcp_input+0x878>)
 8009e04:	6813      	ldr	r3, [r2, #0]
 8009e06:	429c      	cmp	r4, r3
 8009e08:	d0a1      	beq.n	8009d4e <tcp_input+0x68a>
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d0ab      	beq.n	8009d66 <tcp_input+0x6a2>
 8009e0e:	68da      	ldr	r2, [r3, #12]
 8009e10:	4294      	cmp	r4, r2
 8009e12:	d0a2      	beq.n	8009d5a <tcp_input+0x696>
 8009e14:	4613      	mov	r3, r2
 8009e16:	e7f8      	b.n	8009e0a <tcp_input+0x746>
    tcp_receive(pcb);
 8009e18:	4620      	mov	r0, r4
 8009e1a:	f7ff f821 	bl	8008e60 <tcp_receive>
    if (flags & TCP_ACK && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009e1e:	f899 3000 	ldrb.w	r3, [r9]
 8009e22:	06db      	lsls	r3, r3, #27
 8009e24:	f57f aeec 	bpl.w	8009c00 <tcp_input+0x53c>
 8009e28:	4b43      	ldr	r3, [pc, #268]	; (8009f38 <tcp_input+0x874>)
 8009e2a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	429a      	cmp	r2, r3
 8009e30:	f47f aee6 	bne.w	8009c00 <tcp_input+0x53c>
 8009e34:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	f47f aee2 	bne.w	8009c00 <tcp_input+0x53c>
      recv_flags |= TF_CLOSED;
 8009e3c:	7833      	ldrb	r3, [r6, #0]
 8009e3e:	f043 0310 	orr.w	r3, r3, #16
 8009e42:	7033      	strb	r3, [r6, #0]
 8009e44:	e6dc      	b.n	8009c00 <tcp_input+0x53c>
        if (recv_acked > 0) {
 8009e46:	f8b8 2000 	ldrh.w	r2, [r8]
 8009e4a:	b122      	cbz	r2, 8009e56 <tcp_input+0x792>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8009e4c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8009e4e:	b98b      	cbnz	r3, 8009e74 <tcp_input+0x7b0>
          recv_acked = 0;
 8009e50:	2300      	movs	r3, #0
 8009e52:	f8a8 3000 	strh.w	r3, [r8]
        if (recv_flags & TF_CLOSED) {
 8009e56:	7833      	ldrb	r3, [r6, #0]
 8009e58:	06d8      	lsls	r0, r3, #27
 8009e5a:	d511      	bpl.n	8009e80 <tcp_input+0x7bc>
          if (!(pcb->flags & TF_RXCLOSED)) {
 8009e5c:	7ea3      	ldrb	r3, [r4, #26]
 8009e5e:	06d9      	lsls	r1, r3, #27
 8009e60:	f53f aed9 	bmi.w	8009c16 <tcp_input+0x552>
            TCP_EVENT_ERR(pcb->errf, pcb->callback_arg, ERR_CLSD);
 8009e64:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	f43f aed4 	beq.w	8009c16 <tcp_input+0x552>
 8009e6e:	f06f 010e 	mvn.w	r1, #14
 8009e72:	e6ce      	b.n	8009c12 <tcp_input+0x54e>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8009e74:	4621      	mov	r1, r4
 8009e76:	6920      	ldr	r0, [r4, #16]
 8009e78:	4798      	blx	r3
            if (err == ERR_ABRT) {
 8009e7a:	300d      	adds	r0, #13
 8009e7c:	d1e8      	bne.n	8009e50 <tcp_input+0x78c>
 8009e7e:	e627      	b.n	8009ad0 <tcp_input+0x40c>
        if (recv_data != NULL) {
 8009e80:	f8da 2000 	ldr.w	r2, [sl]
 8009e84:	b1aa      	cbz	r2, 8009eb2 <tcp_input+0x7ee>
          if (pcb->flags & TF_RXCLOSED) {
 8009e86:	7ea3      	ldrb	r3, [r4, #26]
 8009e88:	f013 0310 	ands.w	r3, r3, #16
 8009e8c:	d003      	beq.n	8009e96 <tcp_input+0x7d2>
            pbuf_free(recv_data);
 8009e8e:	4610      	mov	r0, r2
 8009e90:	f7fe f941 	bl	8008116 <pbuf_free>
 8009e94:	e6d8      	b.n	8009c48 <tcp_input+0x584>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8009e96:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8009e9a:	b1d5      	cbz	r5, 8009ed2 <tcp_input+0x80e>
 8009e9c:	4621      	mov	r1, r4
 8009e9e:	6920      	ldr	r0, [r4, #16]
 8009ea0:	47a8      	blx	r5
          if (err == ERR_ABRT) {
 8009ea2:	f110 0f0d 	cmn.w	r0, #13
 8009ea6:	f43f ae13 	beq.w	8009ad0 <tcp_input+0x40c>
          if (err != ERR_OK) {
 8009eaa:	b110      	cbz	r0, 8009eb2 <tcp_input+0x7ee>
            pcb->refused_data = recv_data;
 8009eac:	f8da 3000 	ldr.w	r3, [sl]
 8009eb0:	6763      	str	r3, [r4, #116]	; 0x74
        if (recv_flags & TF_GOT_FIN) {
 8009eb2:	7833      	ldrb	r3, [r6, #0]
 8009eb4:	069a      	lsls	r2, r3, #26
 8009eb6:	d505      	bpl.n	8009ec4 <tcp_input+0x800>
          if (pcb->refused_data != NULL) {
 8009eb8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8009eba:	b183      	cbz	r3, 8009ede <tcp_input+0x81a>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8009ebc:	7b5a      	ldrb	r2, [r3, #13]
 8009ebe:	f042 0220 	orr.w	r2, r2, #32
 8009ec2:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	4a20      	ldr	r2, [pc, #128]	; (8009f48 <tcp_input+0x884>)
        tcp_output(pcb);
 8009ec8:	4620      	mov	r0, r4
        tcp_input_pcb = NULL;
 8009eca:	6013      	str	r3, [r2, #0]
        tcp_output(pcb);
 8009ecc:	f000 f96c 	bl	800a1a8 <tcp_output>
 8009ed0:	e5fe      	b.n	8009ad0 <tcp_input+0x40c>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8009ed2:	462b      	mov	r3, r5
 8009ed4:	4621      	mov	r1, r4
 8009ed6:	4628      	mov	r0, r5
 8009ed8:	f7fe fd90 	bl	80089fc <tcp_recv_null>
 8009edc:	e7e1      	b.n	8009ea2 <tcp_input+0x7de>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009ede:	8d23      	ldrh	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 8009ee0:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009ee4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
              pcb->rcv_wnd++;
 8009ee8:	bf1c      	itt	ne
 8009eea:	3301      	addne	r3, #1
 8009eec:	8523      	strhne	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 8009eee:	2d00      	cmp	r5, #0
 8009ef0:	d0e8      	beq.n	8009ec4 <tcp_input+0x800>
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	4621      	mov	r1, r4
 8009ef6:	6920      	ldr	r0, [r4, #16]
 8009ef8:	461a      	mov	r2, r3
 8009efa:	47a8      	blx	r5
            if (err == ERR_ABRT) {
 8009efc:	300d      	adds	r0, #13
 8009efe:	d1e1      	bne.n	8009ec4 <tcp_input+0x800>
 8009f00:	e5e6      	b.n	8009ad0 <tcp_input+0x40c>
      if (prev != NULL) {
 8009f02:	b128      	cbz	r0, 8009f10 <tcp_input+0x84c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8009f04:	68e2      	ldr	r2, [r4, #12]
 8009f06:	60c2      	str	r2, [r0, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8009f08:	4810      	ldr	r0, [pc, #64]	; (8009f4c <tcp_input+0x888>)
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8009f0a:	f8c4 c00c 	str.w	ip, [r4, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8009f0e:	6004      	str	r4, [r0, #0]
  if (flags & TCP_RST) {
 8009f10:	0758      	lsls	r0, r3, #29
 8009f12:	f53f ad26 	bmi.w	8009962 <tcp_input+0x29e>
  if (flags & TCP_ACK) {
 8009f16:	06da      	lsls	r2, r3, #27
 8009f18:	f57f ad77 	bpl.w	8009a0a <tcp_input+0x346>
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009f1c:	883b      	ldrh	r3, [r7, #0]
 8009f1e:	f8db 0000 	ldr.w	r0, [fp]
 8009f22:	9301      	str	r3, [sp, #4]
 8009f24:	f8cd e000 	str.w	lr, [sp]
 8009f28:	4b01      	ldr	r3, [pc, #4]	; (8009f30 <tcp_input+0x86c>)
 8009f2a:	4401      	add	r1, r0
 8009f2c:	1d1a      	adds	r2, r3, #4
 8009f2e:	e507      	b.n	8009940 <tcp_input+0x27c>
 8009f30:	20003fdc 	.word	0x20003fdc
 8009f34:	20003f8c 	.word	0x20003f8c
 8009f38:	20003f68 	.word	0x20003f68
 8009f3c:	20007724 	.word	0x20007724
 8009f40:	20007720 	.word	0x20007720
 8009f44:	20007734 	.word	0x20007734
 8009f48:	20007738 	.word	0x20007738
 8009f4c:	2000772c 	.word	0x2000772c

08009f50 <tcp_trigger_input_pcb_close>:
}

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 8009f50:	4a02      	ldr	r2, [pc, #8]	; (8009f5c <tcp_trigger_input_pcb_close+0xc>)
 8009f52:	7813      	ldrb	r3, [r2, #0]
 8009f54:	f043 0310 	orr.w	r3, r3, #16
 8009f58:	7013      	strb	r3, [r2, #0]
 8009f5a:	4770      	bx	lr
 8009f5c:	20003f88 	.word	0x20003f88

08009f60 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 8009f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f64:	f89d 9020 	ldrb.w	r9, [sp, #32]
 8009f68:	4680      	mov	r8, r0
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8009f6a:	2003      	movs	r0, #3
{
 8009f6c:	460f      	mov	r7, r1
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8009f6e:	f019 0f01 	tst.w	r9, #1
{
 8009f72:	4616      	mov	r6, r2
 8009f74:	469a      	mov	sl, r3
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8009f76:	bf14      	ite	ne
 8009f78:	2504      	movne	r5, #4
 8009f7a:	2500      	moveq	r5, #0
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8009f7c:	f7fd ff76 	bl	8007e6c <memp_malloc>
 8009f80:	4604      	mov	r4, r0
 8009f82:	b928      	cbnz	r0, 8009f90 <tcp_create_segment+0x30>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8009f84:	4638      	mov	r0, r7
 8009f86:	f7fe f8c6 	bl	8008116 <pbuf_free>
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
  return seg;
}
 8009f8a:	4620      	mov	r0, r4
 8009f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  seg->flags = optflags;
 8009f90:	f880 900a 	strb.w	r9, [r0, #10]
  seg->next = NULL;
 8009f94:	f04f 0900 	mov.w	r9, #0
  seg->len = p->tot_len - optlen;
 8009f98:	893b      	ldrh	r3, [r7, #8]
  if (pbuf_header(p, TCP_HLEN)) {
 8009f9a:	2114      	movs	r1, #20
  seg->p = p;
 8009f9c:	6047      	str	r7, [r0, #4]
  seg->len = p->tot_len - optlen;
 8009f9e:	1b5b      	subs	r3, r3, r5
  seg->next = NULL;
 8009fa0:	f8c0 9000 	str.w	r9, [r0]
  seg->len = p->tot_len - optlen;
 8009fa4:	8103      	strh	r3, [r0, #8]
  if (pbuf_header(p, TCP_HLEN)) {
 8009fa6:	4638      	mov	r0, r7
 8009fa8:	f7fe f8a7 	bl	80080fa <pbuf_header>
 8009fac:	4607      	mov	r7, r0
 8009fae:	b120      	cbz	r0, 8009fba <tcp_create_segment+0x5a>
    tcp_seg_free(seg);
 8009fb0:	4620      	mov	r0, r4
    return NULL;
 8009fb2:	464c      	mov	r4, r9
    tcp_seg_free(seg);
 8009fb4:	f7fe fa77 	bl	80084a6 <tcp_seg_free>
    return NULL;
 8009fb8:	e7e7      	b.n	8009f8a <tcp_create_segment+0x2a>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8009fba:	6863      	ldr	r3, [r4, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8009fbc:	08ad      	lsrs	r5, r5, #2
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8009fbe:	f8b8 0016 	ldrh.w	r0, [r8, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8009fc2:	f8d3 9004 	ldr.w	r9, [r3, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8009fc6:	3505      	adds	r5, #5
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8009fc8:	f8c4 900c 	str.w	r9, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8009fcc:	ea46 3505 	orr.w	r5, r6, r5, lsl #12
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8009fd0:	f7fb fe64 	bl	8005c9c <lwip_htons>
 8009fd4:	f8a9 0000 	strh.w	r0, [r9]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8009fd8:	f8d4 900c 	ldr.w	r9, [r4, #12]
 8009fdc:	f8b8 0018 	ldrh.w	r0, [r8, #24]
 8009fe0:	f7fb fe5c 	bl	8005c9c <lwip_htons>
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8009fe4:	f8d4 800c 	ldr.w	r8, [r4, #12]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8009fe8:	f8a9 0002 	strh.w	r0, [r9, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8009fec:	4650      	mov	r0, sl
 8009fee:	f7fb fe58 	bl	8005ca2 <lwip_htonl>
 8009ff2:	f8c8 0004 	str.w	r0, [r8, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8009ff6:	b2a8      	uxth	r0, r5
 8009ff8:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8009ffc:	f7fb fe4e 	bl	8005c9c <lwip_htons>
  seg->tcphdr->urgp = 0;
 800a000:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800a002:	f8a8 000c 	strh.w	r0, [r8, #12]
  seg->tcphdr->urgp = 0;
 800a006:	749f      	strb	r7, [r3, #18]
 800a008:	74df      	strb	r7, [r3, #19]
  return seg;
 800a00a:	e7be      	b.n	8009f8a <tcp_create_segment+0x2a>

0800a00c <tcp_output_alloc_header.constprop.0>:
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800a00c:	3114      	adds	r1, #20
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 800a00e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800a010:	b289      	uxth	r1, r1
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 800a012:	4605      	mov	r5, r0
 800a014:	4617      	mov	r7, r2
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800a016:	2001      	movs	r0, #1
 800a018:	2200      	movs	r2, #0
 800a01a:	f7fe f8ac 	bl	8008176 <pbuf_alloc>
  if (p != NULL) {
 800a01e:	4606      	mov	r6, r0
 800a020:	b1f8      	cbz	r0, 800a062 <tcp_output_alloc_header.constprop.0+0x56>
    tcphdr = (struct tcp_hdr *)p->payload;
 800a022:	6844      	ldr	r4, [r0, #4]
    tcphdr->src = lwip_htons(pcb->local_port);
 800a024:	8ae8      	ldrh	r0, [r5, #22]
 800a026:	f7fb fe39 	bl	8005c9c <lwip_htons>
 800a02a:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 800a02c:	8b28      	ldrh	r0, [r5, #24]
 800a02e:	f7fb fe35 	bl	8005c9c <lwip_htons>
    tcphdr->seqno = seqno_be;
 800a032:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 800a034:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800a036:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800a038:	f7fb fe33 	bl	8005ca2 <lwip_htonl>
 800a03c:	60a0      	str	r0, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 800a03e:	f245 0010 	movw	r0, #20496	; 0x5010
 800a042:	f7fb fe2b 	bl	8005c9c <lwip_htons>
 800a046:	81a0      	strh	r0, [r4, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800a048:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
 800a04a:	f7fb fe27 	bl	8005c9c <lwip_htons>
    tcphdr->chksum = 0;
 800a04e:	2300      	movs	r3, #0
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a050:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
    tcphdr->chksum = 0;
 800a052:	7423      	strb	r3, [r4, #16]
 800a054:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 800a056:	74a3      	strb	r3, [r4, #18]
 800a058:	74e3      	strb	r3, [r4, #19]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a05a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800a05c:	81e0      	strh	r0, [r4, #14]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a05e:	4413      	add	r3, r2
 800a060:	62eb      	str	r3, [r5, #44]	; 0x2c
}
 800a062:	4630      	mov	r0, r6
 800a064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a066 <tcp_enqueue_flags>:

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800a066:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800a06a:	2b08      	cmp	r3, #8
{
 800a06c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a06e:	4604      	mov	r4, r0
 800a070:	460d      	mov	r5, r1
 800a072:	f001 0603 	and.w	r6, r1, #3
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800a076:	d909      	bls.n	800a08c <tcp_enqueue_flags+0x26>
 800a078:	07ca      	lsls	r2, r1, #31
 800a07a:	d407      	bmi.n	800a08c <tcp_enqueue_flags+0x26>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
    pcb->flags |= TF_NAGLEMEMERR;
 800a07c:	7ea3      	ldrb	r3, [r4, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a07e:	f04f 30ff 	mov.w	r0, #4294967295
    pcb->flags |= TF_NAGLEMEMERR;
 800a082:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a086:	76a3      	strb	r3, [r4, #26]
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
}
 800a088:	b003      	add	sp, #12
 800a08a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a08c:	f005 0302 	and.w	r3, r5, #2
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a090:	2200      	movs	r2, #0
  if (flags & TCP_SYN) {
 800a092:	2b00      	cmp	r3, #0
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a094:	4610      	mov	r0, r2
 800a096:	bf15      	itete	ne
 800a098:	2104      	movne	r1, #4
 800a09a:	4611      	moveq	r1, r2
  u8_t optflags = 0;
 800a09c:	2701      	movne	r7, #1
 800a09e:	2700      	moveq	r7, #0
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a0a0:	f7fe f869 	bl	8008176 <pbuf_alloc>
 800a0a4:	4601      	mov	r1, r0
 800a0a6:	2800      	cmp	r0, #0
 800a0a8:	d0e8      	beq.n	800a07c <tcp_enqueue_flags+0x16>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800a0aa:	9700      	str	r7, [sp, #0]
 800a0ac:	462a      	mov	r2, r5
 800a0ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a0b0:	4620      	mov	r0, r4
 800a0b2:	f7ff ff55 	bl	8009f60 <tcp_create_segment>
 800a0b6:	2800      	cmp	r0, #0
 800a0b8:	d0e0      	beq.n	800a07c <tcp_enqueue_flags+0x16>
  if (pcb->unsent == NULL) {
 800a0ba:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800a0bc:	b9c3      	cbnz	r3, 800a0f0 <tcp_enqueue_flags+0x8a>
    pcb->unsent = seg;
 800a0be:	66a0      	str	r0, [r4, #104]	; 0x68
  pcb->unsent_oversize = 0;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800a0c6:	b116      	cbz	r6, 800a0ce <tcp_enqueue_flags+0x68>
    pcb->snd_lbb++;
 800a0c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a0ca:	3301      	adds	r3, #1
 800a0cc:	65a3      	str	r3, [r4, #88]	; 0x58
  if (flags & TCP_FIN) {
 800a0ce:	07eb      	lsls	r3, r5, #31
    pcb->flags |= TF_FIN;
 800a0d0:	bf42      	ittt	mi
 800a0d2:	7ea3      	ldrbmi	r3, [r4, #26]
 800a0d4:	f043 0320 	orrmi.w	r3, r3, #32
 800a0d8:	76a3      	strbmi	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a0da:	6840      	ldr	r0, [r0, #4]
 800a0dc:	f7fe f8fc 	bl	80082d8 <pbuf_clen>
 800a0e0:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800a0e4:	4418      	add	r0, r3
 800a0e6:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
  return ERR_OK;
 800a0ea:	2000      	movs	r0, #0
 800a0ec:	e7cc      	b.n	800a088 <tcp_enqueue_flags+0x22>
 800a0ee:	4613      	mov	r3, r2
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800a0f0:	681a      	ldr	r2, [r3, #0]
 800a0f2:	2a00      	cmp	r2, #0
 800a0f4:	d1fb      	bne.n	800a0ee <tcp_enqueue_flags+0x88>
    useg->next = seg;
 800a0f6:	6018      	str	r0, [r3, #0]
 800a0f8:	e7e2      	b.n	800a0c0 <tcp_enqueue_flags+0x5a>

0800a0fa <tcp_send_fin>:
{
 800a0fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pcb->unsent != NULL) {
 800a0fc:	6e84      	ldr	r4, [r0, #104]	; 0x68
{
 800a0fe:	4605      	mov	r5, r0
  if (pcb->unsent != NULL) {
 800a100:	b934      	cbnz	r4, 800a110 <tcp_send_fin+0x16>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800a102:	4628      	mov	r0, r5
 800a104:	2101      	movs	r1, #1
}
 800a106:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800a10a:	f7ff bfac 	b.w	800a066 <tcp_enqueue_flags>
 800a10e:	461c      	mov	r4, r3
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a110:	6823      	ldr	r3, [r4, #0]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d1fb      	bne.n	800a10e <tcp_send_fin+0x14>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800a116:	68e3      	ldr	r3, [r4, #12]
 800a118:	8998      	ldrh	r0, [r3, #12]
 800a11a:	f7fb fdbf 	bl	8005c9c <lwip_htons>
 800a11e:	f010 0707 	ands.w	r7, r0, #7
 800a122:	d1ee      	bne.n	800a102 <tcp_send_fin+0x8>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800a124:	68e6      	ldr	r6, [r4, #12]
 800a126:	2001      	movs	r0, #1
 800a128:	89b4      	ldrh	r4, [r6, #12]
 800a12a:	f7fb fdb7 	bl	8005c9c <lwip_htons>
 800a12e:	4320      	orrs	r0, r4
 800a130:	81b0      	strh	r0, [r6, #12]
}
 800a132:	4638      	mov	r0, r7
      pcb->flags |= TF_FIN;
 800a134:	7eab      	ldrb	r3, [r5, #26]
 800a136:	f043 0320 	orr.w	r3, r3, #32
 800a13a:	76ab      	strb	r3, [r5, #26]
}
 800a13c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a13e <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800a13e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800a140:	4604      	mov	r4, r0
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800a142:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800a144:	f7fb fdad 	bl	8005ca2 <lwip_htonl>
 800a148:	2100      	movs	r1, #0
 800a14a:	4602      	mov	r2, r0
 800a14c:	4620      	mov	r0, r4
 800a14e:	f7ff ff5d 	bl	800a00c <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800a152:	4606      	mov	r6, r0
 800a154:	b940      	cbnz	r0, 800a168 <tcp_send_empty_ack+0x2a>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800a156:	7ea3      	ldrb	r3, [r4, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800a158:	f06f 0501 	mvn.w	r5, #1
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800a15c:	f043 0303 	orr.w	r3, r3, #3
 800a160:	76a3      	strb	r3, [r4, #26]
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 800a162:	4628      	mov	r0, r5
 800a164:	b004      	add	sp, #16
 800a166:	bd70      	pop	{r4, r5, r6, pc}
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800a168:	1d25      	adds	r5, r4, #4
 800a16a:	4628      	mov	r0, r5
 800a16c:	f7fd f8c2 	bl	80072f4 <ip4_route>
  if (netif == NULL) {
 800a170:	b1a0      	cbz	r0, 800a19c <tcp_send_empty_ack+0x5e>
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 800a172:	2206      	movs	r2, #6
 800a174:	9002      	str	r0, [sp, #8]
 800a176:	7aa3      	ldrb	r3, [r4, #10]
 800a178:	4621      	mov	r1, r4
 800a17a:	9201      	str	r2, [sp, #4]
 800a17c:	4630      	mov	r0, r6
 800a17e:	7a62      	ldrb	r2, [r4, #9]
 800a180:	9200      	str	r2, [sp, #0]
 800a182:	462a      	mov	r2, r5
 800a184:	f7fd fa0a 	bl	800759c <ip4_output_if>
 800a188:	4605      	mov	r5, r0
  pbuf_free(p);
 800a18a:	4630      	mov	r0, r6
 800a18c:	f7fd ffc3 	bl	8008116 <pbuf_free>
 800a190:	7ea3      	ldrb	r3, [r4, #26]
  if (err != ERR_OK) {
 800a192:	b135      	cbz	r5, 800a1a2 <tcp_send_empty_ack+0x64>
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800a194:	f043 0303 	orr.w	r3, r3, #3
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800a198:	76a3      	strb	r3, [r4, #26]
 800a19a:	e7e2      	b.n	800a162 <tcp_send_empty_ack+0x24>
    err = ERR_RTE;
 800a19c:	f06f 0503 	mvn.w	r5, #3
 800a1a0:	e7f3      	b.n	800a18a <tcp_send_empty_ack+0x4c>
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800a1a2:	f023 0303 	bic.w	r3, r3, #3
 800a1a6:	e7f7      	b.n	800a198 <tcp_send_empty_ack+0x5a>

0800a1a8 <tcp_output>:

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800a1a8:	4b9e      	ldr	r3, [pc, #632]	; (800a424 <tcp_output+0x27c>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	4298      	cmp	r0, r3
{
 800a1ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1b2:	4604      	mov	r4, r0
 800a1b4:	b087      	sub	sp, #28
  if (tcp_input_pcb == pcb) {
 800a1b6:	d038      	beq.n	800a22a <tcp_output+0x82>
    return ERR_OK;
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800a1b8:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
 800a1bc:	f8b0 705c 	ldrh.w	r7, [r0, #92]	; 0x5c

  seg = pcb->unsent;
 800a1c0:	6e85      	ldr	r5, [r0, #104]	; 0x68
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800a1c2:	429f      	cmp	r7, r3
 800a1c4:	bf28      	it	cs
 800a1c6:	461f      	movcs	r7, r3
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 800a1c8:	7e83      	ldrb	r3, [r0, #26]
 800a1ca:	079a      	lsls	r2, r3, #30
 800a1cc:	d510      	bpl.n	800a1f0 <tcp_output+0x48>
 800a1ce:	b92d      	cbnz	r5, 800a1dc <tcp_output+0x34>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
     return tcp_send_empty_ack(pcb);
 800a1d0:	4620      	mov	r0, r4
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
  return ERR_OK;
}
 800a1d2:	b007      	add	sp, #28
 800a1d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     return tcp_send_empty_ack(pcb);
 800a1d8:	f7ff bfb1 	b.w	800a13e <tcp_send_empty_ack>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 800a1dc:	68eb      	ldr	r3, [r5, #12]
 800a1de:	6858      	ldr	r0, [r3, #4]
 800a1e0:	f7fb fd5f 	bl	8005ca2 <lwip_htonl>
 800a1e4:	892b      	ldrh	r3, [r5, #8]
 800a1e6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800a1e8:	1a9b      	subs	r3, r3, r2
 800a1ea:	4418      	add	r0, r3
     (seg == NULL ||
 800a1ec:	4287      	cmp	r7, r0
 800a1ee:	d3ef      	bcc.n	800a1d0 <tcp_output+0x28>
  useg = pcb->unacked;
 800a1f0:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
  if (useg != NULL) {
 800a1f2:	b9ee      	cbnz	r6, 800a230 <tcp_output+0x88>
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800a1f4:	f104 0904 	add.w	r9, r4, #4
 800a1f8:	4648      	mov	r0, r9
 800a1fa:	f7fd f87b 	bl	80072f4 <ip4_route>
  if (netif == NULL) {
 800a1fe:	4682      	mov	sl, r0
 800a200:	2800      	cmp	r0, #0
 800a202:	f000 8108 	beq.w	800a416 <tcp_output+0x26e>
  if (ip_addr_isany(&pcb->local_ip)) {
 800a206:	6823      	ldr	r3, [r4, #0]
 800a208:	b90b      	cbnz	r3, 800a20e <tcp_output+0x66>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800a20a:	6843      	ldr	r3, [r0, #4]
 800a20c:	6023      	str	r3, [r4, #0]
  seg->p->len -= len;
  seg->p->tot_len -= len;

  seg->p->payload = seg->tcphdr;

  seg->tcphdr->chksum = 0;
 800a20e:	f04f 0800 	mov.w	r8, #0
    pcb->rttest = tcp_ticks;
 800a212:	f8df b214 	ldr.w	fp, [pc, #532]	; 800a428 <tcp_output+0x280>
  while (seg != NULL &&
 800a216:	2d00      	cmp	r5, #0
 800a218:	d170      	bne.n	800a2fc <tcp_output+0x154>
  if (pcb->unsent == NULL) {
 800a21a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800a21c:	b90b      	cbnz	r3, 800a222 <tcp_output+0x7a>
    pcb->unsent_oversize = 0;
 800a21e:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  pcb->flags &= ~TF_NAGLEMEMERR;
 800a222:	7ea3      	ldrb	r3, [r4, #26]
 800a224:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a228:	76a3      	strb	r3, [r4, #26]
    return ERR_OK;
 800a22a:	2000      	movs	r0, #0
 800a22c:	e0f0      	b.n	800a410 <tcp_output+0x268>
 800a22e:	461e      	mov	r6, r3
    for (; useg->next != NULL; useg = useg->next);
 800a230:	6833      	ldr	r3, [r6, #0]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d1fb      	bne.n	800a22e <tcp_output+0x86>
 800a236:	e7dd      	b.n	800a1f4 <tcp_output+0x4c>
    pcb->unsent = seg->next;
 800a238:	682b      	ldr	r3, [r5, #0]
 800a23a:	66a3      	str	r3, [r4, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 800a23c:	7d23      	ldrb	r3, [r4, #20]
 800a23e:	2b02      	cmp	r3, #2
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800a240:	bf1e      	ittt	ne
 800a242:	7ea3      	ldrbne	r3, [r4, #26]
 800a244:	f023 0303 	bicne.w	r3, r3, #3
 800a248:	76a3      	strbne	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a24a:	68eb      	ldr	r3, [r5, #12]
 800a24c:	6858      	ldr	r0, [r3, #4]
 800a24e:	f7fb fd28 	bl	8005ca2 <lwip_htonl>
 800a252:	892a      	ldrh	r2, [r5, #8]
 800a254:	68e9      	ldr	r1, [r5, #12]
 800a256:	9204      	str	r2, [sp, #16]
 800a258:	9005      	str	r0, [sp, #20]
 800a25a:	8988      	ldrh	r0, [r1, #12]
 800a25c:	f7fb fd1e 	bl	8005c9c <lwip_htons>
 800a260:	9a04      	ldr	r2, [sp, #16]
 800a262:	f010 0003 	ands.w	r0, r0, #3
 800a266:	9b05      	ldr	r3, [sp, #20]
 800a268:	bf18      	it	ne
 800a26a:	2001      	movne	r0, #1
 800a26c:	4413      	add	r3, r2
    if (TCP_TCPLEN(seg) > 0) {
 800a26e:	68ea      	ldr	r2, [r5, #12]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a270:	4418      	add	r0, r3
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a272:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800a274:	1a1b      	subs	r3, r3, r0
 800a276:	2b00      	cmp	r3, #0
    if (TCP_TCPLEN(seg) > 0) {
 800a278:	892b      	ldrh	r3, [r5, #8]
      pcb->snd_nxt = snd_nxt;
 800a27a:	bfb8      	it	lt
 800a27c:	64e0      	strlt	r0, [r4, #76]	; 0x4c
    if (TCP_TCPLEN(seg) > 0) {
 800a27e:	9304      	str	r3, [sp, #16]
 800a280:	8990      	ldrh	r0, [r2, #12]
 800a282:	f7fb fd0b 	bl	8005c9c <lwip_htons>
 800a286:	f010 0003 	ands.w	r0, r0, #3
 800a28a:	9b04      	ldr	r3, [sp, #16]
 800a28c:	bf18      	it	ne
 800a28e:	2001      	movne	r0, #1
 800a290:	42d8      	cmn	r0, r3
 800a292:	d02f      	beq.n	800a2f4 <tcp_output+0x14c>
      if (pcb->unacked == NULL) {
 800a294:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
      seg->next = NULL;
 800a296:	f8c5 8000 	str.w	r8, [r5]
      if (pcb->unacked == NULL) {
 800a29a:	b913      	cbnz	r3, 800a2a2 <tcp_output+0xfa>
        pcb->unacked = seg;
 800a29c:	66e5      	str	r5, [r4, #108]	; 0x6c
          useg->next = seg;
 800a29e:	462e      	mov	r6, r5
 800a2a0:	e013      	b.n	800a2ca <tcp_output+0x122>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800a2a2:	68eb      	ldr	r3, [r5, #12]
 800a2a4:	6858      	ldr	r0, [r3, #4]
 800a2a6:	f7fb fcfc 	bl	8005ca2 <lwip_htonl>
 800a2aa:	68f2      	ldr	r2, [r6, #12]
 800a2ac:	9004      	str	r0, [sp, #16]
 800a2ae:	6850      	ldr	r0, [r2, #4]
 800a2b0:	f7fb fcf7 	bl	8005ca2 <lwip_htonl>
 800a2b4:	9b04      	ldr	r3, [sp, #16]
 800a2b6:	1a18      	subs	r0, r3, r0
 800a2b8:	2800      	cmp	r0, #0
 800a2ba:	da19      	bge.n	800a2f0 <tcp_output+0x148>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800a2bc:	f104 036c 	add.w	r3, r4, #108	; 0x6c
          while (*cur_seg &&
 800a2c0:	681a      	ldr	r2, [r3, #0]
 800a2c2:	b922      	cbnz	r2, 800a2ce <tcp_output+0x126>
          seg->next = (*cur_seg);
 800a2c4:	681a      	ldr	r2, [r3, #0]
 800a2c6:	602a      	str	r2, [r5, #0]
          (*cur_seg) = seg;
 800a2c8:	601d      	str	r5, [r3, #0]
    seg = pcb->unsent;
 800a2ca:	6ea5      	ldr	r5, [r4, #104]	; 0x68
 800a2cc:	e7a3      	b.n	800a216 <tcp_output+0x6e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a2ce:	68d2      	ldr	r2, [r2, #12]
 800a2d0:	9305      	str	r3, [sp, #20]
 800a2d2:	6850      	ldr	r0, [r2, #4]
 800a2d4:	f7fb fce5 	bl	8005ca2 <lwip_htonl>
 800a2d8:	68e9      	ldr	r1, [r5, #12]
 800a2da:	9004      	str	r0, [sp, #16]
 800a2dc:	6848      	ldr	r0, [r1, #4]
 800a2de:	f7fb fce0 	bl	8005ca2 <lwip_htonl>
 800a2e2:	9a04      	ldr	r2, [sp, #16]
          while (*cur_seg &&
 800a2e4:	9b05      	ldr	r3, [sp, #20]
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a2e6:	1a10      	subs	r0, r2, r0
          while (*cur_seg &&
 800a2e8:	2800      	cmp	r0, #0
 800a2ea:	daeb      	bge.n	800a2c4 <tcp_output+0x11c>
              cur_seg = &((*cur_seg)->next );
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	e7e7      	b.n	800a2c0 <tcp_output+0x118>
          useg->next = seg;
 800a2f0:	6035      	str	r5, [r6, #0]
 800a2f2:	e7d4      	b.n	800a29e <tcp_output+0xf6>
      tcp_seg_free(seg);
 800a2f4:	4628      	mov	r0, r5
 800a2f6:	f7fe f8d6 	bl	80084a6 <tcp_seg_free>
 800a2fa:	e7e6      	b.n	800a2ca <tcp_output+0x122>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800a2fc:	68eb      	ldr	r3, [r5, #12]
 800a2fe:	6858      	ldr	r0, [r3, #4]
 800a300:	f7fb fccf 	bl	8005ca2 <lwip_htonl>
 800a304:	892b      	ldrh	r3, [r5, #8]
 800a306:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800a308:	1a9b      	subs	r3, r3, r2
 800a30a:	4418      	add	r0, r3
  while (seg != NULL &&
 800a30c:	4287      	cmp	r7, r0
 800a30e:	d384      	bcc.n	800a21a <tcp_output+0x72>
    LWIP_ASSERT("RST not expected here!",
 800a310:	68eb      	ldr	r3, [r5, #12]
 800a312:	8998      	ldrh	r0, [r3, #12]
 800a314:	f7fb fcc2 	bl	8005c9c <lwip_htons>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a318:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a31a:	b193      	cbz	r3, 800a342 <tcp_output+0x19a>
 800a31c:	7ea2      	ldrb	r2, [r4, #26]
 800a31e:	f012 0f44 	tst.w	r2, #68	; 0x44
 800a322:	d10e      	bne.n	800a342 <tcp_output+0x19a>
 800a324:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800a326:	b12b      	cbz	r3, 800a334 <tcp_output+0x18c>
 800a328:	6819      	ldr	r1, [r3, #0]
 800a32a:	b951      	cbnz	r1, 800a342 <tcp_output+0x19a>
 800a32c:	8919      	ldrh	r1, [r3, #8]
 800a32e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800a330:	4299      	cmp	r1, r3
 800a332:	d206      	bcs.n	800a342 <tcp_output+0x19a>
 800a334:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800a338:	b11b      	cbz	r3, 800a342 <tcp_output+0x19a>
 800a33a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800a33e:	2b08      	cmp	r3, #8
 800a340:	d96c      	bls.n	800a41c <tcp_output+0x274>
    if (pcb->state != SYN_SENT) {
 800a342:	7d23      	ldrb	r3, [r4, #20]
 800a344:	2b02      	cmp	r3, #2
 800a346:	d00a      	beq.n	800a35e <tcp_output+0x1b6>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800a348:	68ea      	ldr	r2, [r5, #12]
 800a34a:	2010      	movs	r0, #16
 800a34c:	8993      	ldrh	r3, [r2, #12]
 800a34e:	9205      	str	r2, [sp, #20]
 800a350:	9304      	str	r3, [sp, #16]
 800a352:	f7fb fca3 	bl	8005c9c <lwip_htons>
 800a356:	9b04      	ldr	r3, [sp, #16]
 800a358:	9a05      	ldr	r2, [sp, #20]
 800a35a:	4318      	orrs	r0, r3
 800a35c:	8190      	strh	r0, [r2, #12]
  if (seg->p->ref != 1) {
 800a35e:	686b      	ldr	r3, [r5, #4]
 800a360:	89db      	ldrh	r3, [r3, #14]
 800a362:	2b01      	cmp	r3, #1
 800a364:	f47f af68 	bne.w	800a238 <tcp_output+0x90>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800a368:	68eb      	ldr	r3, [r5, #12]
 800a36a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a36c:	9304      	str	r3, [sp, #16]
 800a36e:	f7fb fc98 	bl	8005ca2 <lwip_htonl>
 800a372:	9b04      	ldr	r3, [sp, #16]
 800a374:	6098      	str	r0, [r3, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800a376:	68eb      	ldr	r3, [r5, #12]
 800a378:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800a37a:	9304      	str	r3, [sp, #16]
 800a37c:	f7fb fc8e 	bl	8005c9c <lwip_htons>
 800a380:	9b04      	ldr	r3, [sp, #16]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a382:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800a384:	81d8      	strh	r0, [r3, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a386:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a388:	4413      	add	r3, r2
 800a38a:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800a38c:	7aab      	ldrb	r3, [r5, #10]
 800a38e:	07db      	lsls	r3, r3, #31
 800a390:	d50c      	bpl.n	800a3ac <tcp_output+0x204>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800a392:	68eb      	ldr	r3, [r5, #12]
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 800a394:	4649      	mov	r1, r9
 800a396:	f44f 7006 	mov.w	r0, #536	; 0x218
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800a39a:	9304      	str	r3, [sp, #16]
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 800a39c:	f7fe fcec 	bl	8008d78 <tcp_eff_send_mss_impl>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800a3a0:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 800a3a4:	f7fb fc7d 	bl	8005ca2 <lwip_htonl>
 800a3a8:	9b04      	ldr	r3, [sp, #16]
 800a3aa:	6158      	str	r0, [r3, #20]
  if (pcb->rtime < 0) {
 800a3ac:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 800a3b0:	2b00      	cmp	r3, #0
  if (pcb->rttest == 0) {
 800a3b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
    pcb->rtime = 0;
 800a3b4:	bfb8      	it	lt
 800a3b6:	f8a4 8030 	strhlt.w	r8, [r4, #48]	; 0x30
  if (pcb->rttest == 0) {
 800a3ba:	b93b      	cbnz	r3, 800a3cc <tcp_output+0x224>
    pcb->rttest = tcp_ticks;
 800a3bc:	f8db 3000 	ldr.w	r3, [fp]
 800a3c0:	6363      	str	r3, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800a3c2:	68eb      	ldr	r3, [r5, #12]
 800a3c4:	6858      	ldr	r0, [r3, #4]
 800a3c6:	f7fb fc6c 	bl	8005ca2 <lwip_htonl>
 800a3ca:	63a0      	str	r0, [r4, #56]	; 0x38
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800a3cc:	6868      	ldr	r0, [r5, #4]
 800a3ce:	68ea      	ldr	r2, [r5, #12]
 800a3d0:	6843      	ldr	r3, [r0, #4]
  seg->p->len -= len;
 800a3d2:	8941      	ldrh	r1, [r0, #10]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800a3d4:	1ad3      	subs	r3, r2, r3
  seg->p->payload = seg->tcphdr;
 800a3d6:	6042      	str	r2, [r0, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800a3d8:	b29b      	uxth	r3, r3
  seg->p->len -= len;
 800a3da:	1ac9      	subs	r1, r1, r3
 800a3dc:	8141      	strh	r1, [r0, #10]
  seg->p->tot_len -= len;
 800a3de:	8901      	ldrh	r1, [r0, #8]
 800a3e0:	1acb      	subs	r3, r1, r3
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800a3e2:	4621      	mov	r1, r4
  seg->p->tot_len -= len;
 800a3e4:	8103      	strh	r3, [r0, #8]
  seg->tcphdr->chksum = 0;
 800a3e6:	f882 8010 	strb.w	r8, [r2, #16]
 800a3ea:	f882 8011 	strb.w	r8, [r2, #17]
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800a3ee:	2206      	movs	r2, #6
 800a3f0:	7aa3      	ldrb	r3, [r4, #10]
 800a3f2:	9201      	str	r2, [sp, #4]
 800a3f4:	7a62      	ldrb	r2, [r4, #9]
 800a3f6:	f8cd a008 	str.w	sl, [sp, #8]
 800a3fa:	9200      	str	r2, [sp, #0]
 800a3fc:	464a      	mov	r2, r9
 800a3fe:	f7fd f8cd 	bl	800759c <ip4_output_if>
    if (err != ERR_OK) {
 800a402:	2800      	cmp	r0, #0
 800a404:	f43f af18 	beq.w	800a238 <tcp_output+0x90>
      pcb->flags |= TF_NAGLEMEMERR;
 800a408:	7ea3      	ldrb	r3, [r4, #26]
 800a40a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a40e:	76a3      	strb	r3, [r4, #26]
}
 800a410:	b007      	add	sp, #28
 800a412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return ERR_RTE;
 800a416:	f06f 0003 	mvn.w	r0, #3
 800a41a:	e7f9      	b.n	800a410 <tcp_output+0x268>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a41c:	f012 0fa0 	tst.w	r2, #160	; 0xa0
 800a420:	d18f      	bne.n	800a342 <tcp_output+0x19a>
 800a422:	e6fa      	b.n	800a21a <tcp_output+0x72>
 800a424:	20007738 	.word	0x20007738
 800a428:	20007728 	.word	0x20007728

0800a42c <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 800a42c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a430:	b085      	sub	sp, #20
 800a432:	4681      	mov	r9, r0
 800a434:	460d      	mov	r5, r1
 800a436:	4690      	mov	r8, r2
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800a438:	2114      	movs	r1, #20
 800a43a:	2200      	movs	r2, #0
 800a43c:	2001      	movs	r0, #1
{
 800a43e:	461f      	mov	r7, r3
 800a440:	f8bd b038 	ldrh.w	fp, [sp, #56]	; 0x38
 800a444:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800a448:	f7fd fe95 	bl	8008176 <pbuf_alloc>
  if (p == NULL) {
 800a44c:	4606      	mov	r6, r0
 800a44e:	b390      	cbz	r0, 800a4b6 <tcp_rst+0x8a>
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 800a450:	6844      	ldr	r4, [r0, #4]
  tcphdr->src = lwip_htons(local_port);
 800a452:	4658      	mov	r0, fp
 800a454:	f7fb fc22 	bl	8005c9c <lwip_htons>
 800a458:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_htons(remote_port);
 800a45a:	4650      	mov	r0, sl
 800a45c:	f7fb fc1e 	bl	8005c9c <lwip_htons>
 800a460:	8060      	strh	r0, [r4, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 800a462:	4648      	mov	r0, r9
 800a464:	f7fb fc1d 	bl	8005ca2 <lwip_htonl>
 800a468:	6060      	str	r0, [r4, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 800a46a:	4628      	mov	r0, r5
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800a46c:	2500      	movs	r5, #0
  tcphdr->ackno = lwip_htonl(ackno);
 800a46e:	f7fb fc18 	bl	8005ca2 <lwip_htonl>
 800a472:	60a0      	str	r0, [r4, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800a474:	f245 0014 	movw	r0, #20500	; 0x5014
 800a478:	f7fb fc10 	bl	8005c9c <lwip_htons>
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800a47c:	2308      	movs	r3, #8
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800a47e:	81a0      	strh	r0, [r4, #12]
  tcphdr->urgp = 0;

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 800a480:	4638      	mov	r0, r7
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800a482:	73a3      	strb	r3, [r4, #14]
 800a484:	2360      	movs	r3, #96	; 0x60
  tcphdr->chksum = 0;
 800a486:	7425      	strb	r5, [r4, #16]
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800a488:	73e3      	strb	r3, [r4, #15]
  tcphdr->chksum = 0;
 800a48a:	7465      	strb	r5, [r4, #17]
  tcphdr->urgp = 0;
 800a48c:	74a5      	strb	r5, [r4, #18]
 800a48e:	74e5      	strb	r5, [r4, #19]
  netif = ip_route(local_ip, remote_ip);
 800a490:	f7fc ff30 	bl	80072f4 <ip4_route>
  if (netif != NULL) {
 800a494:	b148      	cbz	r0, 800a4aa <tcp_rst+0x7e>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 800a496:	2306      	movs	r3, #6
 800a498:	9002      	str	r0, [sp, #8]
 800a49a:	9500      	str	r5, [sp, #0]
 800a49c:	463a      	mov	r2, r7
 800a49e:	9301      	str	r3, [sp, #4]
 800a4a0:	4641      	mov	r1, r8
 800a4a2:	23ff      	movs	r3, #255	; 0xff
 800a4a4:	4630      	mov	r0, r6
 800a4a6:	f7fd f879 	bl	800759c <ip4_output_if>
  }
  pbuf_free(p);
 800a4aa:	4630      	mov	r0, r6
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800a4ac:	b005      	add	sp, #20
 800a4ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 800a4b2:	f7fd be30 	b.w	8008116 <pbuf_free>
}
 800a4b6:	b005      	add	sp, #20
 800a4b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a4bc <tcp_rexmit_rto>:
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 800a4bc:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
{
 800a4be:	b410      	push	{r4}
  if (pcb->unacked == NULL) {
 800a4c0:	b192      	cbz	r2, 800a4e8 <tcp_rexmit_rto+0x2c>
 800a4c2:	4611      	mov	r1, r2
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 800a4c4:	680b      	ldr	r3, [r1, #0]
 800a4c6:	b96b      	cbnz	r3, 800a4e4 <tcp_rexmit_rto+0x28>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800a4c8:	6e84      	ldr	r4, [r0, #104]	; 0x68
 800a4ca:	600c      	str	r4, [r1, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800a4cc:	6682      	str	r2, [r0, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;

  /* increment number of retransmissions */
  ++pcb->nrtx;
 800a4ce:	f890 2042 	ldrb.w	r2, [r0, #66]	; 0x42
  pcb->unacked = NULL;
 800a4d2:	66c3      	str	r3, [r0, #108]	; 0x6c
  ++pcb->nrtx;
 800a4d4:	3201      	adds	r2, #1

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800a4d6:	6343      	str	r3, [r0, #52]	; 0x34
  ++pcb->nrtx;
 800a4d8:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42

  /* Do the actual retransmission */
  tcp_output(pcb);
}
 800a4dc:	f85d 4b04 	ldr.w	r4, [sp], #4
  tcp_output(pcb);
 800a4e0:	f7ff be62 	b.w	800a1a8 <tcp_output>
 800a4e4:	4619      	mov	r1, r3
 800a4e6:	e7ed      	b.n	800a4c4 <tcp_rexmit_rto+0x8>
}
 800a4e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4ec:	4770      	bx	lr

0800a4ee <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 800a4ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800a4f0:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
{
 800a4f2:	4604      	mov	r4, r0
  if (pcb->unacked == NULL) {
 800a4f4:	b19d      	cbz	r5, 800a51e <tcp_rexmit+0x30>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;
 800a4f6:	682b      	ldr	r3, [r5, #0]

  cur_seg = &(pcb->unsent);
 800a4f8:	f100 0668 	add.w	r6, r0, #104	; 0x68
  pcb->unacked = seg->next;
 800a4fc:	66c3      	str	r3, [r0, #108]	; 0x6c
  while (*cur_seg &&
 800a4fe:	6833      	ldr	r3, [r6, #0]
 800a500:	b973      	cbnz	r3, 800a520 <tcp_rexmit+0x32>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
  }
  seg->next = *cur_seg;
 800a502:	6833      	ldr	r3, [r6, #0]
 800a504:	602b      	str	r3, [r5, #0]
  *cur_seg = seg;
 800a506:	6035      	str	r5, [r6, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800a508:	682b      	ldr	r3, [r5, #0]
 800a50a:	b90b      	cbnz	r3, 800a510 <tcp_rexmit+0x22>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800a50c:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  ++pcb->nrtx;
 800a510:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800a514:	3301      	adds	r3, #1
 800a516:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800a51a:	2300      	movs	r3, #0
 800a51c:	6363      	str	r3, [r4, #52]	; 0x34
 800a51e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a520:	68db      	ldr	r3, [r3, #12]
 800a522:	6858      	ldr	r0, [r3, #4]
 800a524:	f7fb fbbd 	bl	8005ca2 <lwip_htonl>
 800a528:	68eb      	ldr	r3, [r5, #12]
 800a52a:	4607      	mov	r7, r0
 800a52c:	6858      	ldr	r0, [r3, #4]
 800a52e:	f7fb fbb8 	bl	8005ca2 <lwip_htonl>
 800a532:	1a38      	subs	r0, r7, r0
  while (*cur_seg &&
 800a534:	2800      	cmp	r0, #0
 800a536:	dae4      	bge.n	800a502 <tcp_rexmit+0x14>
      cur_seg = &((*cur_seg)->next );
 800a538:	6836      	ldr	r6, [r6, #0]
 800a53a:	e7e0      	b.n	800a4fe <tcp_rexmit+0x10>

0800a53c <tcp_rexmit_fast>:
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800a53c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
{
 800a53e:	b510      	push	{r4, lr}
 800a540:	4604      	mov	r4, r0
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800a542:	b32b      	cbz	r3, 800a590 <tcp_rexmit_fast+0x54>
 800a544:	7e83      	ldrb	r3, [r0, #26]
 800a546:	075b      	lsls	r3, r3, #29
 800a548:	d422      	bmi.n	800a590 <tcp_rexmit_fast+0x54>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 800a54a:	f7ff ffd0 	bl	800a4ee <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    if (pcb->cwnd > pcb->snd_wnd) {
 800a54e:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800a552:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 800a556:	4293      	cmp	r3, r2
      pcb->ssthresh = pcb->snd_wnd / 2;
    } else {
      pcb->ssthresh = pcb->cwnd / 2;
 800a558:	bf96      	itet	ls
 800a55a:	085b      	lsrls	r3, r3, #1
      pcb->ssthresh = pcb->snd_wnd / 2;
 800a55c:	0852      	lsrhi	r2, r2, #1
      pcb->ssthresh = pcb->cwnd / 2;
 800a55e:	f8a4 304a 	strhls.w	r3, [r4, #74]	; 0x4a
    }

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800a562:	8e63      	ldrh	r3, [r4, #50]	; 0x32
      pcb->ssthresh = pcb->snd_wnd / 2;
 800a564:	bf88      	it	hi
 800a566:	f8a4 204a 	strhhi.w	r2, [r4, #74]	; 0x4a
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800a56a:	005a      	lsls	r2, r3, #1
 800a56c:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 800a570:	4291      	cmp	r1, r2
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800a572:	4413      	add	r3, r2
      pcb->ssthresh = 2*pcb->mss;
 800a574:	bf38      	it	cc
 800a576:	f8a4 204a 	strhcc.w	r2, [r4, #74]	; 0x4a
    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800a57a:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 800a57e:	4413      	add	r3, r2
 800a580:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    pcb->flags |= TF_INFR;
 800a584:	7ea3      	ldrb	r3, [r4, #26]
 800a586:	f043 0304 	orr.w	r3, r3, #4
 800a58a:	76a3      	strb	r3, [r4, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 800a58c:	2300      	movs	r3, #0
 800a58e:	8623      	strh	r3, [r4, #48]	; 0x30
 800a590:	bd10      	pop	{r4, pc}

0800a592 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800a592:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800a594:	4604      	mov	r4, r0
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 800a596:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800a598:	3801      	subs	r0, #1
 800a59a:	f7fb fb82 	bl	8005ca2 <lwip_htonl>
 800a59e:	2100      	movs	r1, #0
 800a5a0:	4602      	mov	r2, r0
 800a5a2:	4620      	mov	r0, r4
 800a5a4:	f7ff fd32 	bl	800a00c <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800a5a8:	4605      	mov	r5, r0
 800a5aa:	b1c8      	cbz	r0, 800a5e0 <tcp_keepalive+0x4e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800a5ac:	1d26      	adds	r6, r4, #4
 800a5ae:	4630      	mov	r0, r6
 800a5b0:	f7fc fea0 	bl	80072f4 <ip4_route>
  if (netif == NULL) {
 800a5b4:	b188      	cbz	r0, 800a5da <tcp_keepalive+0x48>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 800a5b6:	2100      	movs	r1, #0
 800a5b8:	2206      	movs	r2, #6
 800a5ba:	7aa3      	ldrb	r3, [r4, #10]
 800a5bc:	9002      	str	r0, [sp, #8]
 800a5be:	4628      	mov	r0, r5
 800a5c0:	e88d 0006 	stmia.w	sp, {r1, r2}
 800a5c4:	4621      	mov	r1, r4
 800a5c6:	4632      	mov	r2, r6
 800a5c8:	f7fc ffe8 	bl	800759c <ip4_output_if>
 800a5cc:	4604      	mov	r4, r0
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800a5ce:	4628      	mov	r0, r5
 800a5d0:	f7fd fda1 	bl	8008116 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800a5d4:	4620      	mov	r0, r4
 800a5d6:	b004      	add	sp, #16
 800a5d8:	bd70      	pop	{r4, r5, r6, pc}
    err = ERR_RTE;
 800a5da:	f06f 0403 	mvn.w	r4, #3
 800a5de:	e7f6      	b.n	800a5ce <tcp_keepalive+0x3c>
    return ERR_MEM;
 800a5e0:	f04f 34ff 	mov.w	r4, #4294967295
 800a5e4:	e7f6      	b.n	800a5d4 <tcp_keepalive+0x42>

0800a5e6 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800a5e6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 800a5ea:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
{
 800a5ec:	4606      	mov	r6, r0

  if (seg == NULL) {
 800a5ee:	b914      	cbnz	r4, 800a5f6 <tcp_zero_window_probe+0x10>
    seg = pcb->unsent;
 800a5f0:	6e84      	ldr	r4, [r0, #104]	; 0x68
  }
  if (seg == NULL) {
 800a5f2:	2c00      	cmp	r4, #0
 800a5f4:	d041      	beq.n	800a67a <tcp_zero_window_probe+0x94>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800a5f6:	68e3      	ldr	r3, [r4, #12]
 800a5f8:	8998      	ldrh	r0, [r3, #12]
 800a5fa:	f7fb fb4f 	bl	8005c9c <lwip_htons>
 800a5fe:	f010 0501 	ands.w	r5, r0, #1
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800a602:	68e3      	ldr	r3, [r4, #12]
 800a604:	4630      	mov	r0, r6
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800a606:	bf18      	it	ne
 800a608:	8925      	ldrhne	r5, [r4, #8]
  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800a60a:	685a      	ldr	r2, [r3, #4]
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800a60c:	bf1c      	itt	ne
 800a60e:	fab5 f585 	clzne	r5, r5
 800a612:	096d      	lsrne	r5, r5, #5
  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800a614:	f085 0101 	eor.w	r1, r5, #1
 800a618:	f7ff fcf8 	bl	800a00c <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800a61c:	4607      	mov	r7, r0
 800a61e:	2800      	cmp	r0, #0
 800a620:	d03d      	beq.n	800a69e <tcp_zero_window_probe+0xb8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800a622:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 800a626:	b365      	cbz	r5, 800a682 <tcp_zero_window_probe+0x9c>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800a628:	f8b8 500c 	ldrh.w	r5, [r8, #12]
 800a62c:	2011      	movs	r0, #17
 800a62e:	f7fb fb35 	bl	8005c9c <lwip_htons>
 800a632:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 800a636:	b2ad      	uxth	r5, r5
 800a638:	4328      	orrs	r0, r5
 800a63a:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800a63e:	68e3      	ldr	r3, [r4, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
    pcb->snd_nxt = snd_nxt;
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800a640:	1d34      	adds	r4, r6, #4
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800a642:	6858      	ldr	r0, [r3, #4]
 800a644:	f7fb fb2d 	bl	8005ca2 <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a648:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800a64a:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a64c:	1a1b      	subs	r3, r3, r0
 800a64e:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
 800a650:	bfb8      	it	lt
 800a652:	64f0      	strlt	r0, [r6, #76]	; 0x4c
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800a654:	4620      	mov	r0, r4
 800a656:	f7fc fe4d 	bl	80072f4 <ip4_route>
  if (netif == NULL) {
 800a65a:	b1e8      	cbz	r0, 800a698 <tcp_zero_window_probe+0xb2>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800a65c:	2100      	movs	r1, #0
 800a65e:	2206      	movs	r2, #6
 800a660:	9002      	str	r0, [sp, #8]
 800a662:	4638      	mov	r0, r7
 800a664:	7ab3      	ldrb	r3, [r6, #10]
 800a666:	e88d 0006 	stmia.w	sp, {r1, r2}
 800a66a:	4622      	mov	r2, r4
 800a66c:	4631      	mov	r1, r6
 800a66e:	f7fc ff95 	bl	800759c <ip4_output_if>
 800a672:	4604      	mov	r4, r0
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 800a674:	4638      	mov	r0, r7
 800a676:	f7fd fd4e 	bl	8008116 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800a67a:	4620      	mov	r0, r4
 800a67c:	b004      	add	sp, #16
 800a67e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800a682:	6860      	ldr	r0, [r4, #4]
 800a684:	f108 0114 	add.w	r1, r8, #20
 800a688:	8922      	ldrh	r2, [r4, #8]
 800a68a:	8903      	ldrh	r3, [r0, #8]
 800a68c:	1a9b      	subs	r3, r3, r2
 800a68e:	2201      	movs	r2, #1
 800a690:	b29b      	uxth	r3, r3
 800a692:	f7fd fe9a 	bl	80083ca <pbuf_copy_partial>
 800a696:	e7d2      	b.n	800a63e <tcp_zero_window_probe+0x58>
    err = ERR_RTE;
 800a698:	f06f 0403 	mvn.w	r4, #3
 800a69c:	e7ea      	b.n	800a674 <tcp_zero_window_probe+0x8e>
    return ERR_MEM;
 800a69e:	f04f 34ff 	mov.w	r4, #4294967295
 800a6a2:	e7ea      	b.n	800a67a <tcp_zero_window_probe+0x94>

0800a6a4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800a6a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6a6:	4605      	mov	r5, r0
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800a6a8:	200a      	movs	r0, #10
{
 800a6aa:	460f      	mov	r7, r1
 800a6ac:	4616      	mov	r6, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800a6ae:	f7fd fbdd 	bl	8007e6c <memp_malloc>
  if (timeout == NULL) {
 800a6b2:	4604      	mov	r4, r0
 800a6b4:	2800      	cmp	r0, #0
 800a6b6:	d032      	beq.n	800a71e <sys_timeout+0x7a>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }

  now = sys_now();
 800a6b8:	f000 fd84 	bl	800b1c4 <sys_now>
  if (next_timeout == NULL) {
 800a6bc:	4a18      	ldr	r2, [pc, #96]	; (800a720 <sys_timeout+0x7c>)
 800a6be:	4919      	ldr	r1, [pc, #100]	; (800a724 <sys_timeout+0x80>)
 800a6c0:	6813      	ldr	r3, [r2, #0]
 800a6c2:	b953      	cbnz	r3, 800a6da <sys_timeout+0x36>
    diff = 0;
    timeouts_last_time = now;
 800a6c4:	6008      	str	r0, [r1, #0]
    diff = 0;
 800a6c6:	4618      	mov	r0, r3
  } else {
    diff = now - timeouts_last_time;
  }

  timeout->next = NULL;
 800a6c8:	2100      	movs	r1, #0
  timeout->h = handler;
  timeout->arg = arg;
  timeout->time = msecs + diff;
 800a6ca:	4428      	add	r0, r5
  timeout->h = handler;
 800a6cc:	60a7      	str	r7, [r4, #8]
  timeout->next = NULL;
 800a6ce:	6021      	str	r1, [r4, #0]
  timeout->arg = arg;
 800a6d0:	60e6      	str	r6, [r4, #12]
  timeout->time = msecs + diff;
 800a6d2:	6060      	str	r0, [r4, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800a6d4:	b923      	cbnz	r3, 800a6e0 <sys_timeout+0x3c>
  }

  if (next_timeout->time > msecs) {
    next_timeout->time -= msecs;
    timeout->next = next_timeout;
    next_timeout = timeout;
 800a6d6:	6014      	str	r4, [r2, #0]
 800a6d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    diff = now - timeouts_last_time;
 800a6da:	6809      	ldr	r1, [r1, #0]
 800a6dc:	1a40      	subs	r0, r0, r1
 800a6de:	e7f3      	b.n	800a6c8 <sys_timeout+0x24>
  if (next_timeout->time > msecs) {
 800a6e0:	6859      	ldr	r1, [r3, #4]
 800a6e2:	428d      	cmp	r5, r1
 800a6e4:	d216      	bcs.n	800a714 <sys_timeout+0x70>
    next_timeout->time -= msecs;
 800a6e6:	1b4d      	subs	r5, r1, r5
 800a6e8:	605d      	str	r5, [r3, #4]
    timeout->next = next_timeout;
 800a6ea:	6023      	str	r3, [r4, #0]
 800a6ec:	e7f3      	b.n	800a6d6 <sys_timeout+0x32>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
      timeout->time -= t->time;
      if (t->next == NULL || t->next->time > timeout->time) {
 800a6ee:	6848      	ldr	r0, [r1, #4]
 800a6f0:	4282      	cmp	r2, r0
 800a6f2:	d311      	bcc.n	800a718 <sys_timeout+0x74>
 800a6f4:	460e      	mov	r6, r1
      timeout->time -= t->time;
 800a6f6:	6871      	ldr	r1, [r6, #4]
 800a6f8:	6862      	ldr	r2, [r4, #4]
 800a6fa:	1a52      	subs	r2, r2, r1
      if (t->next == NULL || t->next->time > timeout->time) {
 800a6fc:	6831      	ldr	r1, [r6, #0]
      timeout->time -= t->time;
 800a6fe:	6062      	str	r2, [r4, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800a700:	2900      	cmp	r1, #0
 800a702:	d1f4      	bne.n	800a6ee <sys_timeout+0x4a>
        if (t->next != NULL) {
          t->next->time -= timeout->time;
        } else if (timeout->time > msecs) {
 800a704:	4295      	cmp	r5, r2
 800a706:	d202      	bcs.n	800a70e <sys_timeout+0x6a>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 800a708:	685b      	ldr	r3, [r3, #4]
 800a70a:	441d      	add	r5, r3
 800a70c:	6065      	str	r5, [r4, #4]
        }
        timeout->next = t->next;
 800a70e:	6021      	str	r1, [r4, #0]
        t->next = timeout;
 800a710:	6034      	str	r4, [r6, #0]
        break;
 800a712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a714:	461e      	mov	r6, r3
 800a716:	e7ee      	b.n	800a6f6 <sys_timeout+0x52>
          t->next->time -= timeout->time;
 800a718:	1a82      	subs	r2, r0, r2
 800a71a:	604a      	str	r2, [r1, #4]
 800a71c:	e7f7      	b.n	800a70e <sys_timeout+0x6a>
 800a71e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a720:	20003fa4 	.word	0x20003fa4
 800a724:	20003fac 	.word	0x20003fac

0800a728 <tcp_timer_needed>:
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800a728:	4b08      	ldr	r3, [pc, #32]	; (800a74c <tcp_timer_needed+0x24>)
 800a72a:	681a      	ldr	r2, [r3, #0]
 800a72c:	b962      	cbnz	r2, 800a748 <tcp_timer_needed+0x20>
 800a72e:	4a08      	ldr	r2, [pc, #32]	; (800a750 <tcp_timer_needed+0x28>)
 800a730:	6812      	ldr	r2, [r2, #0]
 800a732:	b912      	cbnz	r2, 800a73a <tcp_timer_needed+0x12>
 800a734:	4a07      	ldr	r2, [pc, #28]	; (800a754 <tcp_timer_needed+0x2c>)
 800a736:	6812      	ldr	r2, [r2, #0]
 800a738:	b132      	cbz	r2, 800a748 <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 800a73a:	2201      	movs	r2, #1
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a73c:	4906      	ldr	r1, [pc, #24]	; (800a758 <tcp_timer_needed+0x30>)
 800a73e:	20fa      	movs	r0, #250	; 0xfa
    tcpip_tcp_timer_active = 1;
 800a740:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a742:	2200      	movs	r2, #0
 800a744:	f7ff bfae 	b.w	800a6a4 <sys_timeout>
 800a748:	4770      	bx	lr
 800a74a:	bf00      	nop
 800a74c:	20003fa8 	.word	0x20003fa8
 800a750:	20007724 	.word	0x20007724
 800a754:	20007734 	.word	0x20007734
 800a758:	0800a75d 	.word	0x0800a75d

0800a75c <tcpip_tcp_timer>:
{
 800a75c:	b508      	push	{r3, lr}
  tcp_tmr();
 800a75e:	f7fe f9cb 	bl	8008af8 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800a762:	4b08      	ldr	r3, [pc, #32]	; (800a784 <tcpip_tcp_timer+0x28>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	b913      	cbnz	r3, 800a76e <tcpip_tcp_timer+0x12>
 800a768:	4b07      	ldr	r3, [pc, #28]	; (800a788 <tcpip_tcp_timer+0x2c>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	b133      	cbz	r3, 800a77c <tcpip_tcp_timer+0x20>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a76e:	2200      	movs	r2, #0
 800a770:	4906      	ldr	r1, [pc, #24]	; (800a78c <tcpip_tcp_timer+0x30>)
 800a772:	20fa      	movs	r0, #250	; 0xfa
}
 800a774:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a778:	f7ff bf94 	b.w	800a6a4 <sys_timeout>
    tcpip_tcp_timer_active = 0;
 800a77c:	4a04      	ldr	r2, [pc, #16]	; (800a790 <tcpip_tcp_timer+0x34>)
 800a77e:	6013      	str	r3, [r2, #0]
 800a780:	bd08      	pop	{r3, pc}
 800a782:	bf00      	nop
 800a784:	20007724 	.word	0x20007724
 800a788:	20007734 	.word	0x20007734
 800a78c:	0800a75d 	.word	0x0800a75d
 800a790:	20003fa8 	.word	0x20003fa8

0800a794 <sys_timeouts_init>:
{
 800a794:	b538      	push	{r3, r4, r5, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, (void*)(size_t)&lwip_cyclic_timers[i]);
 800a796:	4d11      	ldr	r5, [pc, #68]	; (800a7dc <sys_timeouts_init+0x48>)
 800a798:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a79c:	4c10      	ldr	r4, [pc, #64]	; (800a7e0 <sys_timeouts_init+0x4c>)
 800a79e:	f105 0208 	add.w	r2, r5, #8
 800a7a2:	4621      	mov	r1, r4
 800a7a4:	f7ff ff7e 	bl	800a6a4 <sys_timeout>
 800a7a8:	f105 0210 	add.w	r2, r5, #16
 800a7ac:	4621      	mov	r1, r4
 800a7ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a7b2:	f7ff ff77 	bl	800a6a4 <sys_timeout>
 800a7b6:	f105 0218 	add.w	r2, r5, #24
 800a7ba:	4621      	mov	r1, r4
 800a7bc:	f64e 2060 	movw	r0, #60000	; 0xea60
 800a7c0:	f7ff ff70 	bl	800a6a4 <sys_timeout>
 800a7c4:	f105 0220 	add.w	r2, r5, #32
 800a7c8:	4621      	mov	r1, r4
 800a7ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a7ce:	f7ff ff69 	bl	800a6a4 <sys_timeout>
  timeouts_last_time = sys_now();
 800a7d2:	f000 fcf7 	bl	800b1c4 <sys_now>
 800a7d6:	4b03      	ldr	r3, [pc, #12]	; (800a7e4 <sys_timeouts_init+0x50>)
 800a7d8:	6018      	str	r0, [r3, #0]
 800a7da:	bd38      	pop	{r3, r4, r5, pc}
 800a7dc:	0800cb84 	.word	0x0800cb84
 800a7e0:	0800a7e9 	.word	0x0800a7e9
 800a7e4:	20003fac 	.word	0x20003fac

0800a7e8 <cyclic_timer>:
{
 800a7e8:	b510      	push	{r4, lr}
 800a7ea:	4604      	mov	r4, r0
  cyclic->handler();
 800a7ec:	6843      	ldr	r3, [r0, #4]
 800a7ee:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800a7f0:	4903      	ldr	r1, [pc, #12]	; (800a800 <cyclic_timer+0x18>)
 800a7f2:	4622      	mov	r2, r4
 800a7f4:	6820      	ldr	r0, [r4, #0]
}
 800a7f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800a7fa:	f7ff bf53 	b.w	800a6a4 <sys_timeout>
 800a7fe:	bf00      	nop
 800a800:	0800a7e9 	.word	0x0800a7e9

0800a804 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800a804:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u32_t sleeptime;

again:
  if (!next_timeout) {
 800a808:	4d24      	ldr	r5, [pc, #144]	; (800a89c <sys_timeouts_mbox_fetch+0x98>)
{
 800a80a:	4681      	mov	r9, r0
 800a80c:	468a      	mov	sl, r1
  diff = sys_now() - timeouts_last_time;
 800a80e:	4c24      	ldr	r4, [pc, #144]	; (800a8a0 <sys_timeouts_mbox_fetch+0x9c>)
 800a810:	462e      	mov	r6, r5
  if (!next_timeout) {
 800a812:	682a      	ldr	r2, [r5, #0]
 800a814:	b932      	cbnz	r2, 800a824 <sys_timeouts_mbox_fetch+0x20>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800a816:	4651      	mov	r1, sl
 800a818:	4648      	mov	r0, r9
       before a message could be fetched. */
    sys_check_timeouts();
    /* We try again to fetch a message from the mbox. */
    goto again;
  }
}
 800a81a:	b003      	add	sp, #12
 800a81c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    sys_arch_mbox_fetch(mbox, msg, 0);
 800a820:	f000 ba92 	b.w	800ad48 <sys_arch_mbox_fetch>
  diff = sys_now() - timeouts_last_time;
 800a824:	f000 fcce 	bl	800b1c4 <sys_now>
 800a828:	6822      	ldr	r2, [r4, #0]
  if (diff > next_timeout->time) {
 800a82a:	682b      	ldr	r3, [r5, #0]
  diff = sys_now() - timeouts_last_time;
 800a82c:	1a80      	subs	r0, r0, r2
  if (diff > next_timeout->time) {
 800a82e:	685a      	ldr	r2, [r3, #4]
 800a830:	4290      	cmp	r0, r2
 800a832:	d928      	bls.n	800a886 <sys_timeouts_mbox_fetch+0x82>
  if (next_timeout) {
 800a834:	6833      	ldr	r3, [r6, #0]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d0eb      	beq.n	800a812 <sys_timeouts_mbox_fetch+0xe>
    now = sys_now();
 800a83a:	f000 fcc3 	bl	800b1c4 <sys_now>
    diff = now - timeouts_last_time;
 800a83e:	6823      	ldr	r3, [r4, #0]
          LOCK_TCPIP_CORE();
 800a840:	4f18      	ldr	r7, [pc, #96]	; (800a8a4 <sys_timeouts_mbox_fetch+0xa0>)
    diff = now - timeouts_last_time;
 800a842:	eba0 0b03 	sub.w	fp, r0, r3
      tmptimeout = next_timeout;
 800a846:	6831      	ldr	r1, [r6, #0]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 800a848:	2900      	cmp	r1, #0
 800a84a:	d0e2      	beq.n	800a812 <sys_timeouts_mbox_fetch+0xe>
 800a84c:	684a      	ldr	r2, [r1, #4]
 800a84e:	455a      	cmp	r2, fp
 800a850:	d8df      	bhi.n	800a812 <sys_timeouts_mbox_fetch+0xe>
        timeouts_last_time += tmptimeout->time;
 800a852:	6820      	ldr	r0, [r4, #0]
        diff -= tmptimeout->time;
 800a854:	ebab 0b02 	sub.w	fp, fp, r2
        handler = tmptimeout->h;
 800a858:	f8d1 8008 	ldr.w	r8, [r1, #8]
        timeouts_last_time += tmptimeout->time;
 800a85c:	4410      	add	r0, r2
        arg = tmptimeout->arg;
 800a85e:	68cb      	ldr	r3, [r1, #12]
        next_timeout = tmptimeout->next;
 800a860:	680a      	ldr	r2, [r1, #0]
        timeouts_last_time += tmptimeout->time;
 800a862:	6020      	str	r0, [r4, #0]
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800a864:	200a      	movs	r0, #10
        next_timeout = tmptimeout->next;
 800a866:	6032      	str	r2, [r6, #0]
        arg = tmptimeout->arg;
 800a868:	9301      	str	r3, [sp, #4]
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800a86a:	f7fd fb0b 	bl	8007e84 <memp_free>
        if (handler != NULL) {
 800a86e:	f1b8 0f00 	cmp.w	r8, #0
 800a872:	d0e8      	beq.n	800a846 <sys_timeouts_mbox_fetch+0x42>
          LOCK_TCPIP_CORE();
 800a874:	4638      	mov	r0, r7
 800a876:	f000 faaa 	bl	800adce <sys_mutex_lock>
          handler(arg);
 800a87a:	9801      	ldr	r0, [sp, #4]
 800a87c:	47c0      	blx	r8
          UNLOCK_TCPIP_CORE();
 800a87e:	4638      	mov	r0, r7
 800a880:	f000 faaa 	bl	800add8 <sys_mutex_unlock>
 800a884:	e7df      	b.n	800a846 <sys_timeouts_mbox_fetch+0x42>
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 800a886:	1a12      	subs	r2, r2, r0
 800a888:	d0d4      	beq.n	800a834 <sys_timeouts_mbox_fetch+0x30>
 800a88a:	4651      	mov	r1, sl
 800a88c:	4648      	mov	r0, r9
 800a88e:	f000 fa5b 	bl	800ad48 <sys_arch_mbox_fetch>
 800a892:	3001      	adds	r0, #1
 800a894:	d0ce      	beq.n	800a834 <sys_timeouts_mbox_fetch+0x30>
}
 800a896:	b003      	add	sp, #12
 800a898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a89c:	20003fa4 	.word	0x20003fa4
 800a8a0:	20003fac 	.word	0x20003fac
 800a8a4:	20003fc8 	.word	0x20003fc8

0800a8a8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800a8a8:	4770      	bx	lr
	...

0800a8ac <udp_input>:
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800a8ac:	8943      	ldrh	r3, [r0, #10]
 800a8ae:	2b07      	cmp	r3, #7
{
 800a8b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8b4:	4606      	mov	r6, r0
 800a8b6:	b085      	sub	sp, #20
 800a8b8:	4689      	mov	r9, r1
  if (p->len < UDP_HLEN) {
 800a8ba:	d805      	bhi.n	800a8c8 <udp_input+0x1c>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800a8bc:	4630      	mov	r0, r6
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800a8be:	b005      	add	sp, #20
 800a8c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    pbuf_free(p);
 800a8c4:	f7fd bc27 	b.w	8008116 <pbuf_free>
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800a8c8:	4d3b      	ldr	r5, [pc, #236]	; (800a9b8 <udp_input+0x10c>)
  udphdr = (struct udp_hdr *)p->payload;
 800a8ca:	6844      	ldr	r4, [r0, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800a8cc:	6829      	ldr	r1, [r5, #0]
 800a8ce:	6968      	ldr	r0, [r5, #20]
 800a8d0:	f7fc fe75 	bl	80075be <ip4_addr_isbroadcast_u32>
 800a8d4:	4607      	mov	r7, r0
  src = lwip_ntohs(udphdr->src);
 800a8d6:	8820      	ldrh	r0, [r4, #0]
 800a8d8:	f7fb f9e0 	bl	8005c9c <lwip_htons>
 800a8dc:	4680      	mov	r8, r0
  dest = lwip_ntohs(udphdr->dest);
 800a8de:	8860      	ldrh	r0, [r4, #2]
  uncon_pcb = NULL;
 800a8e0:	2400      	movs	r4, #0
  dest = lwip_ntohs(udphdr->dest);
 800a8e2:	f7fb f9db 	bl	8005c9c <lwip_htons>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a8e6:	4a35      	ldr	r2, [pc, #212]	; (800a9bc <udp_input+0x110>)
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800a8e8:	692b      	ldr	r3, [r5, #16]
  dest = lwip_ntohs(udphdr->dest);
 800a8ea:	4682      	mov	sl, r0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a8ec:	6810      	ldr	r0, [r2, #0]
  prev = NULL;
 800a8ee:	46a4      	mov	ip, r4
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800a8f0:	9303      	str	r3, [sp, #12]
 800a8f2:	4693      	mov	fp, r2
       ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a8f4:	f8d5 e014 	ldr.w	lr, [r5, #20]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	b92b      	cbnz	r3, 800a908 <udp_input+0x5c>
  if (pcb != NULL) {
 800a8fc:	bb14      	cbnz	r4, 800a944 <udp_input+0x98>
  if (for_us) {
 800a8fe:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800a902:	4573      	cmp	r3, lr
 800a904:	d1da      	bne.n	800a8bc <udp_input+0x10>
 800a906:	e01d      	b.n	800a944 <udp_input+0x98>
    if ((pcb->local_port == dest) &&
 800a908:	8a5a      	ldrh	r2, [r3, #18]
 800a90a:	4552      	cmp	r2, sl
 800a90c:	d133      	bne.n	800a976 <udp_input+0xca>
 800a90e:	6819      	ldr	r1, [r3, #0]
    if (broadcast != 0) {
 800a910:	b36f      	cbz	r7, 800a96e <udp_input+0xc2>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800a912:	b141      	cbz	r1, 800a926 <udp_input+0x7a>
 800a914:	f1be 3fff 	cmp.w	lr, #4294967295
 800a918:	d005      	beq.n	800a926 <udp_input+0x7a>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800a91a:	ea81 010e 	eor.w	r1, r1, lr
 800a91e:	f8d9 2008 	ldr.w	r2, [r9, #8]
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800a922:	4211      	tst	r1, r2
 800a924:	d127      	bne.n	800a976 <udp_input+0xca>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 800a926:	7c1a      	ldrb	r2, [r3, #16]
 800a928:	0752      	lsls	r2, r2, #29
 800a92a:	d402      	bmi.n	800a932 <udp_input+0x86>
 800a92c:	2c00      	cmp	r4, #0
 800a92e:	bf08      	it	eq
 800a930:	461c      	moveq	r4, r3
      if ((pcb->remote_port == src) &&
 800a932:	8a9a      	ldrh	r2, [r3, #20]
 800a934:	4542      	cmp	r2, r8
 800a936:	d11e      	bne.n	800a976 <udp_input+0xca>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800a938:	685a      	ldr	r2, [r3, #4]
      if ((pcb->remote_port == src) &&
 800a93a:	b9fa      	cbnz	r2, 800a97c <udp_input+0xd0>
        if (prev != NULL) {
 800a93c:	f1bc 0f00 	cmp.w	ip, #0
 800a940:	d120      	bne.n	800a984 <udp_input+0xd8>
 800a942:	461c      	mov	r4, r3
    if (pbuf_header(p, -UDP_HLEN)) {
 800a944:	f06f 0107 	mvn.w	r1, #7
 800a948:	4630      	mov	r0, r6
 800a94a:	f7fd fbd6 	bl	80080fa <pbuf_header>
 800a94e:	2800      	cmp	r0, #0
 800a950:	d1b4      	bne.n	800a8bc <udp_input+0x10>
    if (pcb != NULL) {
 800a952:	b1f4      	cbz	r4, 800a992 <udp_input+0xe6>
      if (pcb->recv != NULL) {
 800a954:	69a5      	ldr	r5, [r4, #24]
 800a956:	2d00      	cmp	r5, #0
 800a958:	d0b0      	beq.n	800a8bc <udp_input+0x10>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800a95a:	f8cd 8000 	str.w	r8, [sp]
 800a95e:	4632      	mov	r2, r6
 800a960:	4b17      	ldr	r3, [pc, #92]	; (800a9c0 <udp_input+0x114>)
 800a962:	4621      	mov	r1, r4
 800a964:	69e0      	ldr	r0, [r4, #28]
 800a966:	47a8      	blx	r5
}
 800a968:	b005      	add	sp, #20
 800a96a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ip_addr_isany(&pcb->local_ip) ||
 800a96e:	2900      	cmp	r1, #0
 800a970:	d0d9      	beq.n	800a926 <udp_input+0x7a>
 800a972:	4571      	cmp	r1, lr
 800a974:	d0d7      	beq.n	800a926 <udp_input+0x7a>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a976:	469c      	mov	ip, r3
 800a978:	68db      	ldr	r3, [r3, #12]
 800a97a:	e7be      	b.n	800a8fa <udp_input+0x4e>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800a97c:	9903      	ldr	r1, [sp, #12]
 800a97e:	428a      	cmp	r2, r1
 800a980:	d1f9      	bne.n	800a976 <udp_input+0xca>
 800a982:	e7db      	b.n	800a93c <udp_input+0x90>
          prev->next = pcb->next;
 800a984:	68da      	ldr	r2, [r3, #12]
          udp_pcbs = pcb;
 800a986:	f8cb 3000 	str.w	r3, [fp]
          prev->next = pcb->next;
 800a98a:	f8cc 200c 	str.w	r2, [ip, #12]
          pcb->next = udp_pcbs;
 800a98e:	60d8      	str	r0, [r3, #12]
 800a990:	e7d7      	b.n	800a942 <udp_input+0x96>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800a992:	2f00      	cmp	r7, #0
 800a994:	d192      	bne.n	800a8bc <udp_input+0x10>
 800a996:	696b      	ldr	r3, [r5, #20]
 800a998:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a99c:	2be0      	cmp	r3, #224	; 0xe0
 800a99e:	d08d      	beq.n	800a8bc <udp_input+0x10>
        pbuf_header_force(p, ip_current_header_tot_len() + UDP_HLEN);
 800a9a0:	89a9      	ldrh	r1, [r5, #12]
 800a9a2:	4630      	mov	r0, r6
 800a9a4:	3108      	adds	r1, #8
 800a9a6:	b209      	sxth	r1, r1
 800a9a8:	f7fd fbae 	bl	8008108 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800a9ac:	2103      	movs	r1, #3
 800a9ae:	4630      	mov	r0, r6
 800a9b0:	f7fc fc96 	bl	80072e0 <icmp_dest_unreach>
 800a9b4:	e782      	b.n	800a8bc <udp_input+0x10>
 800a9b6:	bf00      	nop
 800a9b8:	20003fcc 	.word	0x20003fcc
 800a9bc:	2000773c 	.word	0x2000773c
 800a9c0:	20003fdc 	.word	0x20003fdc

0800a9c4 <udp_bind>:
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 800a9c4:	4b26      	ldr	r3, [pc, #152]	; (800aa60 <udp_bind+0x9c>)
{
 800a9c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ipaddr = IP4_ADDR_ANY;
 800a9ca:	2900      	cmp	r1, #0
 800a9cc:	bf08      	it	eq
 800a9ce:	4619      	moveq	r1, r3
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL) || !IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ipaddr)) {
 800a9d0:	2800      	cmp	r0, #0
 800a9d2:	d040      	beq.n	800aa56 <udp_bind+0x92>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800a9d4:	4e23      	ldr	r6, [pc, #140]	; (800aa64 <udp_bind+0xa0>)
 800a9d6:	f8d6 e000 	ldr.w	lr, [r6]
 800a9da:	4675      	mov	r5, lr
 800a9dc:	b96d      	cbnz	r5, 800a9fa <udp_bind+0x36>
      break;
    }
  }

  /* no port specified? */
  if (port == 0) {
 800a9de:	b192      	cbz	r2, 800aa06 <udp_bind+0x42>
 800a9e0:	4673      	mov	r3, lr
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800a9e2:	b1fb      	cbz	r3, 800aa24 <udp_bind+0x60>
      if (pcb != ipcb) {
 800a9e4:	4283      	cmp	r3, r0
 800a9e6:	d006      	beq.n	800a9f6 <udp_bind+0x32>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800a9e8:	8a5c      	ldrh	r4, [r3, #18]
 800a9ea:	4294      	cmp	r4, r2
 800a9ec:	d103      	bne.n	800a9f6 <udp_bind+0x32>
 800a9ee:	681f      	ldr	r7, [r3, #0]
 800a9f0:	680c      	ldr	r4, [r1, #0]
 800a9f2:	42a7      	cmp	r7, r4
 800a9f4:	d029      	beq.n	800aa4a <udp_bind+0x86>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800a9f6:	68db      	ldr	r3, [r3, #12]
 800a9f8:	e7f3      	b.n	800a9e2 <udp_bind+0x1e>
    if (pcb == ipcb) {
 800a9fa:	4285      	cmp	r5, r0
 800a9fc:	d001      	beq.n	800aa02 <udp_bind+0x3e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800a9fe:	68ed      	ldr	r5, [r5, #12]
 800aa00:	e7ec      	b.n	800a9dc <udp_bind+0x18>
      rebind = 1;
 800aa02:	2501      	movs	r5, #1
 800aa04:	e7eb      	b.n	800a9de <udp_bind+0x1a>
 800aa06:	4b18      	ldr	r3, [pc, #96]	; (800aa68 <udp_bind+0xa4>)
  if (port == 0) {
 800aa08:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800aa0c:	f64f 7cff 	movw	ip, #65535	; 0xffff
 800aa10:	881a      	ldrh	r2, [r3, #0]
 800aa12:	4562      	cmp	r2, ip
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800aa14:	4677      	mov	r7, lr
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800aa16:	bf16      	itet	ne
 800aa18:	3201      	addne	r2, #1
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800aa1a:	f44f 4240 	moveq.w	r2, #49152	; 0xc000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800aa1e:	b292      	uxthne	r2, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800aa20:	b957      	cbnz	r7, 800aa38 <udp_bind+0x74>
 800aa22:	801a      	strh	r2, [r3, #0]
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800aa24:	680b      	ldr	r3, [r1, #0]

  pcb->local_port = port;
 800aa26:	8242      	strh	r2, [r0, #18]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800aa28:	6003      	str	r3, [r0, #0]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800aa2a:	b915      	cbnz	r5, 800aa32 <udp_bind+0x6e>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800aa2c:	f8c0 e00c 	str.w	lr, [r0, #12]
    udp_pcbs = pcb;
 800aa30:	6030      	str	r0, [r6, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800aa32:	2000      	movs	r0, #0
 800aa34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (pcb->local_port == udp_port) {
 800aa38:	f8b7 8012 	ldrh.w	r8, [r7, #18]
 800aa3c:	4590      	cmp	r8, r2
 800aa3e:	d108      	bne.n	800aa52 <udp_bind+0x8e>
 800aa40:	3c01      	subs	r4, #1
 800aa42:	b2a4      	uxth	r4, r4
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800aa44:	2c00      	cmp	r4, #0
 800aa46:	d1e4      	bne.n	800aa12 <udp_bind+0x4e>
 800aa48:	801a      	strh	r2, [r3, #0]
      return ERR_USE;
 800aa4a:	f06f 0007 	mvn.w	r0, #7
 800aa4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800aa52:	68ff      	ldr	r7, [r7, #12]
 800aa54:	e7e4      	b.n	800aa20 <udp_bind+0x5c>
    return ERR_VAL;
 800aa56:	f06f 0005 	mvn.w	r0, #5
}
 800aa5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa5e:	bf00      	nop
 800aa60:	0800ca84 	.word	0x0800ca84
 800aa64:	2000773c 	.word	0x2000773c
 800aa68:	20000028 	.word	0x20000028

0800aa6c <udp_sendto_if_src>:
{
 800aa6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aa70:	460e      	mov	r6, r1
 800aa72:	b085      	sub	sp, #20
 800aa74:	4690      	mov	r8, r2
 800aa76:	4699      	mov	r9, r3
  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 800aa78:	4607      	mov	r7, r0
 800aa7a:	2800      	cmp	r0, #0
 800aa7c:	d044      	beq.n	800ab08 <udp_sendto_if_src+0x9c>
 800aa7e:	2a00      	cmp	r2, #0
 800aa80:	d042      	beq.n	800ab08 <udp_sendto_if_src+0x9c>
  if (pcb->local_port == 0) {
 800aa82:	8a42      	ldrh	r2, [r0, #18]
 800aa84:	b342      	cbz	r2, 800aad8 <udp_sendto_if_src+0x6c>
  if (pbuf_header(p, UDP_HLEN)) {
 800aa86:	2108      	movs	r1, #8
 800aa88:	4630      	mov	r0, r6
 800aa8a:	f7fd fb36 	bl	80080fa <pbuf_header>
 800aa8e:	bb68      	cbnz	r0, 800aaec <udp_sendto_if_src+0x80>
 800aa90:	4635      	mov	r5, r6
  udphdr = (struct udp_hdr *)q->payload;
 800aa92:	686c      	ldr	r4, [r5, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 800aa94:	8a78      	ldrh	r0, [r7, #18]
 800aa96:	f7fb f901 	bl	8005c9c <lwip_htons>
 800aa9a:	8020      	strh	r0, [r4, #0]
  udphdr->dest = lwip_htons(dst_port);
 800aa9c:	4648      	mov	r0, r9
 800aa9e:	f7fb f8fd 	bl	8005c9c <lwip_htons>
  udphdr->chksum = 0x0000;
 800aaa2:	2300      	movs	r3, #0
  udphdr->dest = lwip_htons(dst_port);
 800aaa4:	8060      	strh	r0, [r4, #2]
  udphdr->chksum = 0x0000;
 800aaa6:	71a3      	strb	r3, [r4, #6]
 800aaa8:	71e3      	strb	r3, [r4, #7]
    udphdr->len = lwip_htons(q->tot_len);
 800aaaa:	8928      	ldrh	r0, [r5, #8]
 800aaac:	f7fb f8f6 	bl	8005c9c <lwip_htons>
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800aab0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    udphdr->len = lwip_htons(q->tot_len);
 800aab2:	80a0      	strh	r0, [r4, #4]
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800aab4:	4628      	mov	r0, r5
 800aab6:	7abb      	ldrb	r3, [r7, #10]
 800aab8:	9202      	str	r2, [sp, #8]
 800aaba:	2211      	movs	r2, #17
 800aabc:	990d      	ldr	r1, [sp, #52]	; 0x34
 800aabe:	9201      	str	r2, [sp, #4]
 800aac0:	7a7a      	ldrb	r2, [r7, #9]
 800aac2:	9200      	str	r2, [sp, #0]
 800aac4:	4642      	mov	r2, r8
 800aac6:	f7fc fd0d 	bl	80074e4 <ip4_output_if_src>
  if (q != p) {
 800aaca:	42b5      	cmp	r5, r6
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800aacc:	4604      	mov	r4, r0
  if (q != p) {
 800aace:	d009      	beq.n	800aae4 <udp_sendto_if_src+0x78>
    pbuf_free(q);
 800aad0:	4628      	mov	r0, r5
 800aad2:	f7fd fb20 	bl	8008116 <pbuf_free>
 800aad6:	e005      	b.n	800aae4 <udp_sendto_if_src+0x78>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800aad8:	4601      	mov	r1, r0
 800aada:	f7ff ff73 	bl	800a9c4 <udp_bind>
    if (err != ERR_OK) {
 800aade:	4604      	mov	r4, r0
 800aae0:	2800      	cmp	r0, #0
 800aae2:	d0d0      	beq.n	800aa86 <udp_sendto_if_src+0x1a>
}
 800aae4:	4620      	mov	r0, r4
 800aae6:	b005      	add	sp, #20
 800aae8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800aaec:	2200      	movs	r2, #0
 800aaee:	2108      	movs	r1, #8
 800aaf0:	2001      	movs	r0, #1
 800aaf2:	f7fd fb40 	bl	8008176 <pbuf_alloc>
    if (q == NULL) {
 800aaf6:	4605      	mov	r5, r0
 800aaf8:	b148      	cbz	r0, 800ab0e <udp_sendto_if_src+0xa2>
    if (p->tot_len != 0) {
 800aafa:	8933      	ldrh	r3, [r6, #8]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d0c8      	beq.n	800aa92 <udp_sendto_if_src+0x26>
      pbuf_chain(q, p);
 800ab00:	4631      	mov	r1, r6
 800ab02:	f7fd fc0c 	bl	800831e <pbuf_chain>
 800ab06:	e7c4      	b.n	800aa92 <udp_sendto_if_src+0x26>
    return ERR_VAL;
 800ab08:	f06f 0405 	mvn.w	r4, #5
 800ab0c:	e7ea      	b.n	800aae4 <udp_sendto_if_src+0x78>
      return ERR_MEM;
 800ab0e:	f04f 34ff 	mov.w	r4, #4294967295
 800ab12:	e7e7      	b.n	800aae4 <udp_sendto_if_src+0x78>

0800ab14 <udp_sendto_if>:
{
 800ab14:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ab16:	9c06      	ldr	r4, [sp, #24]
  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800ab18:	b190      	cbz	r0, 800ab40 <udp_sendto_if+0x2c>
 800ab1a:	b18a      	cbz	r2, 800ab40 <udp_sendto_if+0x2c>
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ab1c:	6805      	ldr	r5, [r0, #0]
 800ab1e:	b11d      	cbz	r5, 800ab28 <udp_sendto_if+0x14>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800ab20:	f005 06f0 	and.w	r6, r5, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ab24:	2ee0      	cmp	r6, #224	; 0xe0
 800ab26:	d106      	bne.n	800ab36 <udp_sendto_if+0x22>
    src_ip = netif_ip_addr4(netif);
 800ab28:	1d25      	adds	r5, r4, #4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800ab2a:	e88d 0030 	stmia.w	sp, {r4, r5}
 800ab2e:	f7ff ff9d 	bl	800aa6c <udp_sendto_if_src>
}
 800ab32:	b002      	add	sp, #8
 800ab34:	bd70      	pop	{r4, r5, r6, pc}
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800ab36:	6866      	ldr	r6, [r4, #4]
 800ab38:	42b5      	cmp	r5, r6
 800ab3a:	d101      	bne.n	800ab40 <udp_sendto_if+0x2c>
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ab3c:	4605      	mov	r5, r0
 800ab3e:	e7f4      	b.n	800ab2a <udp_sendto_if+0x16>
    return ERR_VAL;
 800ab40:	f06f 0005 	mvn.w	r0, #5
 800ab44:	e7f5      	b.n	800ab32 <udp_sendto_if+0x1e>
	...

0800ab48 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800ab48:	b570      	push	{r4, r5, r6, lr}
 800ab4a:	460d      	mov	r5, r1
 800ab4c:	4616      	mov	r6, r2
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, ipaddr)) {
 800ab4e:	4604      	mov	r4, r0
 800ab50:	b1d0      	cbz	r0, 800ab88 <udp_connect+0x40>
 800ab52:	b1c9      	cbz	r1, 800ab88 <udp_connect+0x40>
    return ERR_VAL;
  }

  if (pcb->local_port == 0) {
 800ab54:	8a42      	ldrh	r2, [r0, #18]
 800ab56:	b16a      	cbz	r2, 800ab74 <udp_connect+0x2c>
    if (err != ERR_OK) {
      return err;
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800ab58:	682b      	ldr	r3, [r5, #0]
  pcb->remote_port = port;
 800ab5a:	82a6      	strh	r6, [r4, #20]
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800ab5c:	6063      	str	r3, [r4, #4]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800ab5e:	7c23      	ldrb	r3, [r4, #16]
 800ab60:	f043 0304 	orr.w	r3, r3, #4
 800ab64:	7423      	strb	r3, [r4, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ab66:	4b0b      	ldr	r3, [pc, #44]	; (800ab94 <udp_connect+0x4c>)
 800ab68:	681a      	ldr	r2, [r3, #0]
 800ab6a:	4610      	mov	r0, r2
 800ab6c:	b940      	cbnz	r0, 800ab80 <udp_connect+0x38>
      /* already on the list, just return */
      return ERR_OK;
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800ab6e:	60e2      	str	r2, [r4, #12]
  udp_pcbs = pcb;
 800ab70:	601c      	str	r4, [r3, #0]
  return ERR_OK;
 800ab72:	bd70      	pop	{r4, r5, r6, pc}
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800ab74:	4601      	mov	r1, r0
 800ab76:	f7ff ff25 	bl	800a9c4 <udp_bind>
    if (err != ERR_OK) {
 800ab7a:	2800      	cmp	r0, #0
 800ab7c:	d0ec      	beq.n	800ab58 <udp_connect+0x10>
 800ab7e:	bd70      	pop	{r4, r5, r6, pc}
    if (pcb == ipcb) {
 800ab80:	42a0      	cmp	r0, r4
 800ab82:	d004      	beq.n	800ab8e <udp_connect+0x46>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ab84:	68c0      	ldr	r0, [r0, #12]
 800ab86:	e7f1      	b.n	800ab6c <udp_connect+0x24>
    return ERR_VAL;
 800ab88:	f06f 0005 	mvn.w	r0, #5
 800ab8c:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_OK;
 800ab8e:	2000      	movs	r0, #0
}
 800ab90:	bd70      	pop	{r4, r5, r6, pc}
 800ab92:	bf00      	nop
 800ab94:	2000773c 	.word	0x2000773c

0800ab98 <udp_recv>:
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  /* remember recv() callback and user data */
  pcb->recv = recv;
 800ab98:	6181      	str	r1, [r0, #24]
  pcb->recv_arg = recv_arg;
 800ab9a:	61c2      	str	r2, [r0, #28]
 800ab9c:	4770      	bx	lr
	...

0800aba0 <udp_remove>:
{
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800aba0:	4a0a      	ldr	r2, [pc, #40]	; (800abcc <udp_remove+0x2c>)
{
 800aba2:	4601      	mov	r1, r0
  if (udp_pcbs == pcb) {
 800aba4:	6813      	ldr	r3, [r2, #0]
 800aba6:	4283      	cmp	r3, r0
 800aba8:	d104      	bne.n	800abb4 <udp_remove+0x14>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800abaa:	68c3      	ldr	r3, [r0, #12]
 800abac:	6013      	str	r3, [r2, #0]
        pcb2->next = pcb->next;
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800abae:	2000      	movs	r0, #0
 800abb0:	f7fd b968 	b.w	8007e84 <memp_free>
{
 800abb4:	461a      	mov	r2, r3
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d0f9      	beq.n	800abae <udp_remove+0xe>
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800abba:	68db      	ldr	r3, [r3, #12]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d0f6      	beq.n	800abae <udp_remove+0xe>
 800abc0:	4299      	cmp	r1, r3
 800abc2:	d1f7      	bne.n	800abb4 <udp_remove+0x14>
        pcb2->next = pcb->next;
 800abc4:	68cb      	ldr	r3, [r1, #12]
 800abc6:	60d3      	str	r3, [r2, #12]
        break;
 800abc8:	e7f1      	b.n	800abae <udp_remove+0xe>
 800abca:	bf00      	nop
 800abcc:	2000773c 	.word	0x2000773c

0800abd0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800abd0:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800abd2:	2000      	movs	r0, #0
 800abd4:	f7fd f94a 	bl	8007e6c <memp_malloc>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800abd8:	4604      	mov	r4, r0
 800abda:	b128      	cbz	r0, 800abe8 <udp_new+0x18>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800abdc:	2220      	movs	r2, #32
 800abde:	2100      	movs	r1, #0
 800abe0:	f000 ffce 	bl	800bb80 <memset>
    pcb->ttl = UDP_TTL;
 800abe4:	23ff      	movs	r3, #255	; 0xff
 800abe6:	72a3      	strb	r3, [r4, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 800abe8:	4620      	mov	r0, r4
 800abea:	bd10      	pop	{r4, pc}

0800abec <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800abec:	b510      	push	{r4, lr}
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800abee:	b138      	cbz	r0, 800ac00 <udp_netif_ip_addr_changed+0x14>
 800abf0:	6803      	ldr	r3, [r0, #0]
 800abf2:	b12b      	cbz	r3, 800ac00 <udp_netif_ip_addr_changed+0x14>
 800abf4:	b121      	cbz	r1, 800ac00 <udp_netif_ip_addr_changed+0x14>
 800abf6:	680b      	ldr	r3, [r1, #0]
 800abf8:	b113      	cbz	r3, 800ac00 <udp_netif_ip_addr_changed+0x14>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800abfa:	4b06      	ldr	r3, [pc, #24]	; (800ac14 <udp_netif_ip_addr_changed+0x28>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	b903      	cbnz	r3, 800ac02 <udp_netif_ip_addr_changed+0x16>
 800ac00:	bd10      	pop	{r4, pc}
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800ac02:	681c      	ldr	r4, [r3, #0]
 800ac04:	6802      	ldr	r2, [r0, #0]
 800ac06:	4294      	cmp	r4, r2
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800ac08:	bf04      	itt	eq
 800ac0a:	680a      	ldreq	r2, [r1, #0]
 800ac0c:	601a      	streq	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ac0e:	68db      	ldr	r3, [r3, #12]
 800ac10:	e7f5      	b.n	800abfe <udp_netif_ip_addr_changed+0x12>
 800ac12:	bf00      	nop
 800ac14:	2000773c 	.word	0x2000773c

0800ac18 <ethernet_input>:
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800ac18:	8943      	ldrh	r3, [r0, #10]
 800ac1a:	2b0e      	cmp	r3, #14
{
 800ac1c:	b570      	push	{r4, r5, r6, lr}
 800ac1e:	4604      	mov	r4, r0
 800ac20:	460d      	mov	r5, r1
  if (p->len <= SIZEOF_ETH_HDR) {
 800ac22:	d914      	bls.n	800ac4e <ethernet_input+0x36>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800ac24:	6840      	ldr	r0, [r0, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800ac26:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 800ac28:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 800ac2a:	07d9      	lsls	r1, r3, #31
 800ac2c:	d50a      	bpl.n	800ac44 <ethernet_input+0x2c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800ac2e:	2b01      	cmp	r3, #1
 800ac30:	d111      	bne.n	800ac56 <ethernet_input+0x3e>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800ac32:	7843      	ldrb	r3, [r0, #1]
 800ac34:	b933      	cbnz	r3, 800ac44 <ethernet_input+0x2c>
 800ac36:	7883      	ldrb	r3, [r0, #2]
 800ac38:	2b5e      	cmp	r3, #94	; 0x5e
 800ac3a:	d103      	bne.n	800ac44 <ethernet_input+0x2c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800ac3c:	7b63      	ldrb	r3, [r4, #13]
 800ac3e:	f043 0310 	orr.w	r3, r3, #16
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800ac42:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 800ac44:	2e08      	cmp	r6, #8
 800ac46:	d010      	beq.n	800ac6a <ethernet_input+0x52>
 800ac48:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 800ac4c:	d01e      	beq.n	800ac8c <ethernet_input+0x74>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 800ac4e:	4620      	mov	r0, r4
 800ac50:	f7fd fa61 	bl	8008116 <pbuf_free>
  return ERR_OK;
 800ac54:	e018      	b.n	800ac88 <ethernet_input+0x70>
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800ac56:	2206      	movs	r2, #6
 800ac58:	4914      	ldr	r1, [pc, #80]	; (800acac <ethernet_input+0x94>)
 800ac5a:	f000 ff77 	bl	800bb4c <memcmp>
 800ac5e:	2800      	cmp	r0, #0
 800ac60:	d1f0      	bne.n	800ac44 <ethernet_input+0x2c>
      p->flags |= PBUF_FLAG_LLBCAST;
 800ac62:	7b63      	ldrb	r3, [r4, #13]
 800ac64:	f043 0308 	orr.w	r3, r3, #8
 800ac68:	e7eb      	b.n	800ac42 <ethernet_input+0x2a>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800ac6a:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 800ac6e:	071a      	lsls	r2, r3, #28
 800ac70:	d5ed      	bpl.n	800ac4e <ethernet_input+0x36>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800ac72:	f06f 010d 	mvn.w	r1, #13
 800ac76:	4620      	mov	r0, r4
 800ac78:	f7fd fa3f 	bl	80080fa <pbuf_header>
 800ac7c:	2800      	cmp	r0, #0
 800ac7e:	d1e6      	bne.n	800ac4e <ethernet_input+0x36>
        ip4_input(p, netif);
 800ac80:	4629      	mov	r1, r5
 800ac82:	4620      	mov	r0, r4
 800ac84:	f7fc fb62 	bl	800734c <ip4_input>
}
 800ac88:	2000      	movs	r0, #0
 800ac8a:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800ac8c:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 800ac90:	071b      	lsls	r3, r3, #28
 800ac92:	d5dc      	bpl.n	800ac4e <ethernet_input+0x36>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800ac94:	f06f 010d 	mvn.w	r1, #13
 800ac98:	4620      	mov	r0, r4
 800ac9a:	f7fd fa2e 	bl	80080fa <pbuf_header>
 800ac9e:	2800      	cmp	r0, #0
 800aca0:	d1d5      	bne.n	800ac4e <ethernet_input+0x36>
        etharp_input(p, netif);
 800aca2:	4629      	mov	r1, r5
 800aca4:	4620      	mov	r0, r4
 800aca6:	f7fc f85d 	bl	8006d64 <etharp_input>
      break;
 800acaa:	e7ed      	b.n	800ac88 <ethernet_input+0x70>
 800acac:	0800cbac 	.word	0x0800cbac

0800acb0 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 800acb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acb4:	460c      	mov	r4, r1
 800acb6:	4605      	mov	r5, r0
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800acb8:	f8bd 0018 	ldrh.w	r0, [sp, #24]
{
 800acbc:	4616      	mov	r6, r2
 800acbe:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 800acc0:	f7fa ffec 	bl	8005c9c <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800acc4:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 800acc6:	4680      	mov	r8, r0
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800acc8:	4620      	mov	r0, r4
 800acca:	f7fd fa16 	bl	80080fa <pbuf_header>
 800acce:	b988      	cbnz	r0, 800acf4 <ethernet_output+0x44>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 800acd0:	6861      	ldr	r1, [r4, #4]
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800acd2:	4628      	mov	r0, r5
  ethhdr->type = eth_type_be;
 800acd4:	f8a1 800c 	strh.w	r8, [r1, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	600b      	str	r3, [r1, #0]
 800acdc:	88bb      	ldrh	r3, [r7, #4]
 800acde:	808b      	strh	r3, [r1, #4]
  ETHADDR16_COPY(&ethhdr->src,  src);
 800ace0:	6833      	ldr	r3, [r6, #0]
 800ace2:	f8c1 3006 	str.w	r3, [r1, #6]
 800ace6:	88b3      	ldrh	r3, [r6, #4]
 800ace8:	814b      	strh	r3, [r1, #10]
  return netif->linkoutput(netif, p);
 800acea:	4621      	mov	r1, r4
 800acec:	69ab      	ldr	r3, [r5, #24]
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 800acee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 800acf2:	4718      	bx	r3
}
 800acf4:	f06f 0001 	mvn.w	r0, #1
 800acf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800acfc <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 800acfc:	b513      	push	{r0, r1, r4, lr}
  osMessageQDef(QUEUE, size, void *);
 800acfe:	2304      	movs	r3, #4
{
 800ad00:	4604      	mov	r4, r0
  osMessageQDef(QUEUE, size, void *);
 800ad02:	9100      	str	r1, [sp, #0]
  
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800ad04:	4668      	mov	r0, sp
 800ad06:	2100      	movs	r1, #0
  osMessageQDef(QUEUE, size, void *);
 800ad08:	9301      	str	r3, [sp, #4]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800ad0a:	f7f9 fbb7 	bl	800447c <osMessageCreate>
 800ad0e:	6020      	str	r0, [r4, #0]
      ++lwip_stats.sys.mbox.used;
      if (lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used) {
         lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
	  }
#endif /* SYS_STATS */
 if (*mbox == NULL)
 800ad10:	fab0 f080 	clz	r0, r0
 800ad14:	0940      	lsrs	r0, r0, #5
  return ERR_MEM;
 
 return ERR_OK;
}
 800ad16:	4240      	negs	r0, r0
 800ad18:	b002      	add	sp, #8
 800ad1a:	bd10      	pop	{r4, pc}

0800ad1c <sys_mbox_post>:
}

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 800ad1c:	b538      	push	{r3, r4, r5, lr}
 800ad1e:	4604      	mov	r4, r0
 800ad20:	460d      	mov	r5, r1
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 800ad22:	f04f 32ff 	mov.w	r2, #4294967295
 800ad26:	4629      	mov	r1, r5
 800ad28:	6820      	ldr	r0, [r4, #0]
 800ad2a:	f7f9 fbab 	bl	8004484 <osMessagePut>
 800ad2e:	2800      	cmp	r0, #0
 800ad30:	d1f7      	bne.n	800ad22 <sys_mbox_post+0x6>
}
 800ad32:	bd38      	pop	{r3, r4, r5, pc}

0800ad34 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 800ad34:	b508      	push	{r3, lr}
err_t result;

   if ( osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 800ad36:	2200      	movs	r2, #0
 800ad38:	6800      	ldr	r0, [r0, #0]
 800ad3a:	f7f9 fba3 	bl	8004484 <osMessagePut>
 800ad3e:	3000      	adds	r0, #0
 800ad40:	bf18      	it	ne
 800ad42:	2001      	movne	r0, #1
#endif /* SYS_STATS */
			
   }

   return result;
}
 800ad44:	4240      	negs	r0, r0
 800ad46:	bd08      	pop	{r3, pc}

0800ad48 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 800ad48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad4a:	4617      	mov	r7, r2
 800ad4c:	b085      	sub	sp, #20
 800ad4e:	4606      	mov	r6, r0
 800ad50:	460d      	mov	r5, r1
  osEvent event;
  uint32_t starttime = osKernelSysTick();;
 800ad52:	f7f9 fadf 	bl	8004314 <osKernelSysTick>
 800ad56:	4604      	mov	r4, r0
  
  if(timeout != 0)
 800ad58:	b177      	cbz	r7, 800ad78 <sys_arch_mbox_fetch+0x30>
  { 
    event = osMessageGet (*mbox, timeout);
 800ad5a:	463a      	mov	r2, r7
 800ad5c:	6831      	ldr	r1, [r6, #0]
 800ad5e:	a801      	add	r0, sp, #4
 800ad60:	f7f9 fbb8 	bl	80044d4 <osMessageGet>
    
    if(event.status == osEventMessage)
 800ad64:	9b01      	ldr	r3, [sp, #4]
 800ad66:	2b10      	cmp	r3, #16
 800ad68:	d10d      	bne.n	800ad86 <sys_arch_mbox_fetch+0x3e>
    } 
  }
  else
  {
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
 800ad6a:	9b02      	ldr	r3, [sp, #8]
 800ad6c:	602b      	str	r3, [r5, #0]
    return (osKernelSysTick() - starttime);
 800ad6e:	f7f9 fad1 	bl	8004314 <osKernelSysTick>
 800ad72:	1b00      	subs	r0, r0, r4
  }
}
 800ad74:	b005      	add	sp, #20
 800ad76:	bdf0      	pop	{r4, r5, r6, r7, pc}
    event = osMessageGet (*mbox, osWaitForever);
 800ad78:	f04f 32ff 	mov.w	r2, #4294967295
 800ad7c:	6831      	ldr	r1, [r6, #0]
 800ad7e:	a801      	add	r0, sp, #4
 800ad80:	f7f9 fba8 	bl	80044d4 <osMessageGet>
 800ad84:	e7f1      	b.n	800ad6a <sys_arch_mbox_fetch+0x22>
      return SYS_ARCH_TIMEOUT;
 800ad86:	f04f 30ff 	mov.w	r0, #4294967295
 800ad8a:	e7f3      	b.n	800ad74 <sys_arch_mbox_fetch+0x2c>

0800ad8c <sys_mbox_valid>:
 800ad8c:	6800      	ldr	r0, [r0, #0]
 800ad8e:	3000      	adds	r0, #0
 800ad90:	bf18      	it	ne
 800ad92:	2001      	movne	r0, #1
 800ad94:	4770      	bx	lr
	...

0800ad98 <sys_init>:
/*-----------------------------------------------------------------------------------*/ 
osMutexId lwip_sys_mutex;
osMutexDef(lwip_sys_mutex);
// Initialize sys arch
void sys_init(void)
{
 800ad98:	b508      	push	{r3, lr}
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 800ad9a:	4803      	ldr	r0, [pc, #12]	; (800ada8 <sys_init+0x10>)
 800ad9c:	f7f9 fae1 	bl	8004362 <osMutexCreate>
 800ada0:	4b02      	ldr	r3, [pc, #8]	; (800adac <sys_init+0x14>)
 800ada2:	6018      	str	r0, [r3, #0]
 800ada4:	bd08      	pop	{r3, pc}
 800ada6:	bf00      	nop
 800ada8:	0800cbb8 	.word	0x0800cbb8
 800adac:	20007744 	.word	0x20007744

0800adb0 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800adb0:	b513      	push	{r0, r1, r4, lr}
  
  osMutexDef(MUTEX);
 800adb2:	2300      	movs	r3, #0
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800adb4:	4604      	mov	r4, r0
  osMutexDef(MUTEX);
 800adb6:	a802      	add	r0, sp, #8
 800adb8:	f840 3d04 	str.w	r3, [r0, #-4]!
  
  *mutex = osMutexCreate(osMutex(MUTEX));
 800adbc:	f7f9 fad1 	bl	8004362 <osMutexCreate>
 800adc0:	6020      	str	r0, [r4, #0]
  
  
  //*mutex = xSemaphoreCreateMutex();
  if(*mutex == NULL)
 800adc2:	fab0 f080 	clz	r0, r0
 800adc6:	0940      	lsrs	r0, r0, #5
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
}
 800adc8:	4240      	negs	r0, r0
 800adca:	b002      	add	sp, #8
 800adcc:	bd10      	pop	{r4, pc}

0800adce <sys_mutex_lock>:
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
  osMutexWait (*mutex, osWaitForever);
 800adce:	f04f 31ff 	mov.w	r1, #4294967295
 800add2:	6800      	ldr	r0, [r0, #0]
 800add4:	f7f9 bac8 	b.w	8004368 <osMutexWait>

0800add8 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 800add8:	6800      	ldr	r0, [r0, #0]
 800adda:	f7f9 bb4d 	b.w	8004478 <osMutexRelease>

0800adde <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 800adde:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 800ade0:	9102      	str	r1, [sp, #8]
 800ade2:	9908      	ldr	r1, [sp, #32]
 800ade4:	9001      	str	r0, [sp, #4]
  return osThreadCreate(&os_thread_def, arg);
 800ade6:	a801      	add	r0, sp, #4
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 800ade8:	f8ad 100c 	strh.w	r1, [sp, #12]
 800adec:	2100      	movs	r1, #0
 800adee:	9305      	str	r3, [sp, #20]
 800adf0:	9104      	str	r1, [sp, #16]
  return osThreadCreate(&os_thread_def, arg);
 800adf2:	4611      	mov	r1, r2
 800adf4:	f7f9 fa95 	bl	8004322 <osThreadCreate>
}
 800adf8:	b007      	add	sp, #28
 800adfa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800ae00 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 800ae00:	b508      	push	{r3, lr}
  osMutexWait(lwip_sys_mutex, osWaitForever);
 800ae02:	4b04      	ldr	r3, [pc, #16]	; (800ae14 <sys_arch_protect+0x14>)
 800ae04:	f04f 31ff 	mov.w	r1, #4294967295
 800ae08:	6818      	ldr	r0, [r3, #0]
 800ae0a:	f7f9 faad 	bl	8004368 <osMutexWait>
  return (sys_prot_t)1;
}
 800ae0e:	2001      	movs	r0, #1
 800ae10:	bd08      	pop	{r3, pc}
 800ae12:	bf00      	nop
 800ae14:	20007744 	.word	0x20007744

0800ae18 <sys_arch_unprotect>:
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 800ae18:	4b01      	ldr	r3, [pc, #4]	; (800ae20 <sys_arch_unprotect+0x8>)
 800ae1a:	6818      	ldr	r0, [r3, #0]
 800ae1c:	f7f9 bb2c 	b.w	8004478 <osMutexRelease>
 800ae20:	20007744 	.word	0x20007744

0800ae24 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800ae24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800ae28:	4a25      	ldr	r2, [pc, #148]	; (800aec0 <low_level_output+0x9c>)
  uint32_t framelength = 0;
  uint32_t bufferoffset = 0;
  uint32_t byteslefttocopy = 0;
  uint32_t payloadoffset = 0;
  DmaTxDesc = heth.TxDesc;
  bufferoffset = 0;
 800ae2a:	f04f 0800 	mov.w	r8, #0
{
 800ae2e:	460c      	mov	r4, r1
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
      payloadoffset = 0;
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800ae30:	f240 5bf4 	movw	fp, #1524	; 0x5f4
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800ae34:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
  uint32_t framelength = 0;
 800ae36:	4647      	mov	r7, r8
 800ae38:	9200      	str	r2, [sp, #0]
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800ae3a:	68ab      	ldr	r3, [r5, #8]
  for(q = p; q != NULL; q = q->next)
 800ae3c:	b92c      	cbnz	r4, 800ae4a <low_level_output+0x26>
      bufferoffset = bufferoffset + byteslefttocopy;
      framelength = framelength + byteslefttocopy;
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 800ae3e:	4639      	mov	r1, r7
 800ae40:	481f      	ldr	r0, [pc, #124]	; (800aec0 <low_level_output+0x9c>)
 800ae42:	f7f5 fbe1 	bl	8000608 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 800ae46:	4620      	mov	r0, r4
 800ae48:	e004      	b.n	800ae54 <low_level_output+0x30>
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800ae4a:	682a      	ldr	r2, [r5, #0]
 800ae4c:	2a00      	cmp	r2, #0
 800ae4e:	da11      	bge.n	800ae74 <low_level_output+0x50>
        errval = ERR_USE;
 800ae50:	f06f 0007 	mvn.w	r0, #7
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800ae54:	9b00      	ldr	r3, [sp, #0]
 800ae56:	f241 0214 	movw	r2, #4116	; 0x1014
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	5899      	ldr	r1, [r3, r2]
 800ae5e:	0689      	lsls	r1, r1, #26
 800ae60:	d505      	bpl.n	800ae6e <low_level_output+0x4a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800ae62:	2120      	movs	r1, #32
 800ae64:	5099      	str	r1, [r3, r2]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800ae66:	2100      	movs	r1, #0
 800ae68:	f241 0204 	movw	r2, #4100	; 0x1004
 800ae6c:	5099      	str	r1, [r3, r2]
  }
  return errval;
}
 800ae6e:	b003      	add	sp, #12
 800ae70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      byteslefttocopy = q->len;
 800ae74:	f8b4 900a 	ldrh.w	r9, [r4, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800ae78:	4646      	mov	r6, r8
      payloadoffset = 0;
 800ae7a:	f04f 0a00 	mov.w	sl, #0
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800ae7e:	eb06 0809 	add.w	r8, r6, r9
 800ae82:	1998      	adds	r0, r3, r6
 800ae84:	6861      	ldr	r1, [r4, #4]
 800ae86:	45d8      	cmp	r8, fp
 800ae88:	d808      	bhi.n	800ae9c <low_level_output+0x78>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800ae8a:	464a      	mov	r2, r9
 800ae8c:	4451      	add	r1, sl
 800ae8e:	9301      	str	r3, [sp, #4]
      framelength = framelength + byteslefttocopy;
 800ae90:	444f      	add	r7, r9
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800ae92:	f000 fe6a 	bl	800bb6a <memcpy>
  for(q = p; q != NULL; q = q->next)
 800ae96:	6824      	ldr	r4, [r4, #0]
 800ae98:	9b01      	ldr	r3, [sp, #4]
 800ae9a:	e7cf      	b.n	800ae3c <low_level_output+0x18>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800ae9c:	ebab 0606 	sub.w	r6, fp, r6
 800aea0:	4451      	add	r1, sl
 800aea2:	4632      	mov	r2, r6
 800aea4:	f000 fe61 	bl	800bb6a <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800aea8:	68ed      	ldr	r5, [r5, #12]
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800aeaa:	682b      	ldr	r3, [r5, #0]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	dbcf      	blt.n	800ae50 <low_level_output+0x2c>
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800aeb0:	44b2      	add	sl, r6
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800aeb2:	4437      	add	r7, r6
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800aeb4:	68ab      	ldr	r3, [r5, #8]
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800aeb6:	f2a8 59f4 	subw	r9, r8, #1524	; 0x5f4
        bufferoffset = 0;
 800aeba:	2600      	movs	r6, #0
 800aebc:	e7df      	b.n	800ae7e <low_level_output+0x5a>
 800aebe:	bf00      	nop
 800aec0:	20009018 	.word	0x20009018

0800aec4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input( void const * argument ) 
{
 800aec4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aec8:	4682      	mov	sl, r0
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
  
  for( ;; )
  {
    if (osSemaphoreWait( s_xSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 800aeca:	4c37      	ldr	r4, [pc, #220]	; (800afa8 <ethernetif_input+0xe4>)
 800aecc:	f04f 31ff 	mov.w	r1, #4294967295
 800aed0:	6820      	ldr	r0, [r4, #0]
 800aed2:	f7f9 fa85 	bl	80043e0 <osSemaphoreWait>
 800aed6:	2800      	cmp	r0, #0
 800aed8:	d1f8      	bne.n	800aecc <ethernetif_input+0x8>
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800aeda:	4c34      	ldr	r4, [pc, #208]	; (800afac <ethernetif_input+0xe8>)
 800aedc:	4620      	mov	r0, r4
 800aede:	f7f5 fc05 	bl	80006ec <HAL_ETH_GetReceivedFrame_IT>
 800aee2:	4605      	mov	r5, r0
 800aee4:	2800      	cmp	r0, #0
 800aee6:	d1f0      	bne.n	800aeca <ethernetif_input+0x6>
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800aee8:	6c23      	ldr	r3, [r4, #64]	; 0x40
  len = heth.RxFrameInfos.length;
 800aeea:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800aeec:	9301      	str	r3, [sp, #4]
  if (len > 0)
 800aeee:	bb01      	cbnz	r1, 800af32 <ethernetif_input+0x6e>
  struct pbuf *p = NULL;
 800aef0:	2700      	movs	r7, #0
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800aef2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800aef4:	2200      	movs	r2, #0
 800aef6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800aef8:	4282      	cmp	r2, r0
 800aefa:	d14d      	bne.n	800af98 <ethernetif_input+0xd4>
    heth.RxFrameInfos.SegCount =0;  
 800aefc:	2300      	movs	r3, #0
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 800aefe:	f241 0214 	movw	r2, #4116	; 0x1014
    heth.RxFrameInfos.SegCount =0;  
 800af02:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 800af04:	6823      	ldr	r3, [r4, #0]
 800af06:	5899      	ldr	r1, [r3, r2]
 800af08:	0609      	lsls	r1, r1, #24
 800af0a:	d505      	bpl.n	800af18 <ethernetif_input+0x54>
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800af0c:	2180      	movs	r1, #128	; 0x80
 800af0e:	5099      	str	r1, [r3, r2]
    heth.Instance->DMARPDR = 0;
 800af10:	f241 0208 	movw	r2, #4104	; 0x1008
 800af14:	2100      	movs	r1, #0
 800af16:	5099      	str	r1, [r3, r2]
    {
      do
      {   
        p = low_level_input( netif );
        if   (p != NULL)
 800af18:	2f00      	cmp	r7, #0
 800af1a:	d0d6      	beq.n	800aeca <ethernetif_input+0x6>
        {
          if (netif->input( p, netif) != ERR_OK )
 800af1c:	f8da 3010 	ldr.w	r3, [sl, #16]
 800af20:	4651      	mov	r1, sl
 800af22:	4638      	mov	r0, r7
 800af24:	4798      	blx	r3
 800af26:	2800      	cmp	r0, #0
 800af28:	d0d7      	beq.n	800aeda <ethernetif_input+0x16>
          {
            pbuf_free(p);
 800af2a:	4638      	mov	r0, r7
 800af2c:	f7fd f8f3 	bl	8008116 <pbuf_free>
 800af30:	e7d3      	b.n	800aeda <ethernetif_input+0x16>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800af32:	2203      	movs	r2, #3
 800af34:	2004      	movs	r0, #4
 800af36:	f7fd f91e 	bl	8008176 <pbuf_alloc>
  if (p != NULL)
 800af3a:	4607      	mov	r7, r0
 800af3c:	2800      	cmp	r0, #0
 800af3e:	d0d7      	beq.n	800aef0 <ethernetif_input+0x2c>
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800af40:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
 800af44:	4680      	mov	r8, r0
      byteslefttocopy = q->len;
 800af46:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 800af4a:	462e      	mov	r6, r5
      payloadoffset = 0;
 800af4c:	f04f 0900 	mov.w	r9, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800af50:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800af54:	18b5      	adds	r5, r6, r2
 800af56:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800af5a:	429d      	cmp	r5, r3
 800af5c:	9b01      	ldr	r3, [sp, #4]
 800af5e:	eb03 0106 	add.w	r1, r3, r6
 800af62:	d808      	bhi.n	800af76 <ethernetif_input+0xb2>
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800af64:	4448      	add	r0, r9
 800af66:	f000 fe00 	bl	800bb6a <memcpy>
    for(q = p; q != NULL; q = q->next)
 800af6a:	f8d8 8000 	ldr.w	r8, [r8]
 800af6e:	f1b8 0f00 	cmp.w	r8, #0
 800af72:	d1e8      	bne.n	800af46 <ethernetif_input+0x82>
 800af74:	e7bd      	b.n	800aef2 <ethernetif_input+0x2e>
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800af76:	f5c6 66be 	rsb	r6, r6, #1520	; 0x5f0
 800af7a:	4448      	add	r0, r9
 800af7c:	3604      	adds	r6, #4
 800af7e:	4632      	mov	r2, r6
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800af80:	44b1      	add	r9, r6
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800af82:	f000 fdf2 	bl	800bb6a <memcpy>
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800af86:	f8db b00c 	ldr.w	fp, [fp, #12]
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800af8a:	f2a5 52f4 	subw	r2, r5, #1524	; 0x5f4
        bufferoffset = 0;
 800af8e:	2600      	movs	r6, #0
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800af90:	f8db 3008 	ldr.w	r3, [fp, #8]
 800af94:	9301      	str	r3, [sp, #4]
 800af96:	e7db      	b.n	800af50 <ethernetif_input+0x8c>
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800af98:	6819      	ldr	r1, [r3, #0]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800af9a:	3201      	adds	r2, #1
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800af9c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800afa0:	6019      	str	r1, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800afa2:	68db      	ldr	r3, [r3, #12]
 800afa4:	e7a8      	b.n	800aef8 <ethernetif_input+0x34>
 800afa6:	bf00      	nop
 800afa8:	20003fb0 	.word	0x20003fb0
 800afac:	20009018 	.word	0x20009018

0800afb0 <HAL_ETH_MspInit>:
  if(ethHandle->Instance==ETH)
 800afb0:	6802      	ldr	r2, [r0, #0]
 800afb2:	4b2d      	ldr	r3, [pc, #180]	; (800b068 <HAL_ETH_MspInit+0xb8>)
 800afb4:	429a      	cmp	r2, r3
{
 800afb6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800afb8:	b089      	sub	sp, #36	; 0x24
  if(ethHandle->Instance==ETH)
 800afba:	d152      	bne.n	800b062 <HAL_ETH_MspInit+0xb2>
    __HAL_RCC_ETH_CLK_ENABLE();
 800afbc:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800afc0:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800afc2:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800afc4:	2603      	movs	r6, #3
    __HAL_RCC_ETH_CLK_ENABLE();
 800afc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800afc8:	250b      	movs	r5, #11
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800afca:	a903      	add	r1, sp, #12
 800afcc:	4827      	ldr	r0, [pc, #156]	; (800b06c <HAL_ETH_MspInit+0xbc>)
    __HAL_RCC_ETH_CLK_ENABLE();
 800afce:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800afd2:	631a      	str	r2, [r3, #48]	; 0x30
 800afd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800afd6:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800afda:	9200      	str	r2, [sp, #0]
 800afdc:	9a00      	ldr	r2, [sp, #0]
 800afde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800afe0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800afe4:	631a      	str	r2, [r3, #48]	; 0x30
 800afe6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800afe8:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 800afec:	9201      	str	r2, [sp, #4]
 800afee:	9a01      	ldr	r2, [sp, #4]
 800aff0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aff2:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800aff6:	631a      	str	r2, [r3, #48]	; 0x30
 800aff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800affa:	9704      	str	r7, [sp, #16]
    __HAL_RCC_ETH_CLK_ENABLE();
 800affc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b000:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b002:	9606      	str	r6, [sp, #24]
    __HAL_RCC_ETH_CLK_ENABLE();
 800b004:	9302      	str	r3, [sp, #8]
 800b006:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800b008:	2332      	movs	r3, #50	; 0x32
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b00a:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800b00c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b00e:	f7f5 fd95 	bl	8000b3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800b012:	2386      	movs	r3, #134	; 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b014:	a903      	add	r1, sp, #12
 800b016:	4816      	ldr	r0, [pc, #88]	; (800b070 <HAL_ETH_MspInit+0xc0>)
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800b018:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b01a:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b01c:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b01e:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b020:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b022:	f7f5 fd8b 	bl	8000b3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800b026:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800b02a:	a903      	add	r1, sp, #12
 800b02c:	4811      	ldr	r0, [pc, #68]	; (800b074 <HAL_ETH_MspInit+0xc4>)
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800b02e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b030:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b032:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b034:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b036:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800b038:	f7f5 fd80 	bl	8000b3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800b03c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b040:	a903      	add	r1, sp, #12
 800b042:	480d      	ldr	r0, [pc, #52]	; (800b078 <HAL_ETH_MspInit+0xc8>)
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800b044:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b046:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b048:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b04a:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b04c:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b04e:	f7f5 fd75 	bl	8000b3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800b052:	203d      	movs	r0, #61	; 0x3d
 800b054:	4622      	mov	r2, r4
 800b056:	2105      	movs	r1, #5
 800b058:	f7f5 f964 	bl	8000324 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800b05c:	203d      	movs	r0, #61	; 0x3d
 800b05e:	f7f5 f999 	bl	8000394 <HAL_NVIC_EnableIRQ>
}
 800b062:	b009      	add	sp, #36	; 0x24
 800b064:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b066:	bf00      	nop
 800b068:	40028000 	.word	0x40028000
 800b06c:	40020800 	.word	0x40020800
 800b070:	40020000 	.word	0x40020000
 800b074:	40020400 	.word	0x40020400
 800b078:	40021800 	.word	0x40021800

0800b07c <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(s_xSemaphore);
 800b07c:	4b01      	ldr	r3, [pc, #4]	; (800b084 <HAL_ETH_RxCpltCallback+0x8>)
 800b07e:	6818      	ldr	r0, [r3, #0]
 800b080:	f7f9 b9d6 	b.w	8004430 <osSemaphoreRelease>
 800b084:	20003fb0 	.word	0x20003fb0

0800b088 <ethernetif_init>:
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800b088:	2373      	movs	r3, #115	; 0x73
  MACAddr[1] = 0x80;
 800b08a:	2180      	movs	r1, #128	; 0x80
  heth.Instance = ETH;
 800b08c:	4a43      	ldr	r2, [pc, #268]	; (800b19c <ethernetif_init+0x114>)
{
 800b08e:	b5f0      	push	{r4, r5, r6, r7, lr}
  netif->name[0] = IFNAME0;
 800b090:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  netif->name[1] = IFNAME1;
 800b094:	2374      	movs	r3, #116	; 0x74
{
 800b096:	b08b      	sub	sp, #44	; 0x2c
  heth.Instance = ETH;
 800b098:	4d41      	ldr	r5, [pc, #260]	; (800b1a0 <ethernetif_init+0x118>)
  netif->name[1] = IFNAME1;
 800b09a:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
{
 800b09e:	4604      	mov	r4, r0
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800b0a0:	4b40      	ldr	r3, [pc, #256]	; (800b1a4 <ethernetif_init+0x11c>)
  MACAddr[1] = 0x80;
 800b0a2:	f88d 100d 	strb.w	r1, [sp, #13]
  MACAddr[2] = 0xE1;
 800b0a6:	21e1      	movs	r1, #225	; 0xe1
  netif->output = etharp_output;
 800b0a8:	6143      	str	r3, [r0, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800b0aa:	4b3f      	ldr	r3, [pc, #252]	; (800b1a8 <ethernetif_init+0x120>)
  heth.Instance = ETH;
 800b0ac:	602a      	str	r2, [r5, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800b0ae:	2201      	movs	r2, #1
  netif->linkoutput = low_level_output;
 800b0b0:	6183      	str	r3, [r0, #24]
  uint32_t regvalue = 0;
 800b0b2:	2300      	movs	r3, #0
  MACAddr[2] = 0xE1;
 800b0b4:	f88d 100e 	strb.w	r1, [sp, #14]
  heth.Init.MACAddr = &MACAddr[0];
 800b0b8:	a903      	add	r1, sp, #12
  uint32_t regvalue = 0;
 800b0ba:	9301      	str	r3, [sp, #4]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 800b0bc:	4628      	mov	r0, r5
  MACAddr[0] = 0x00;
 800b0be:	f88d 300c 	strb.w	r3, [sp, #12]
  MACAddr[3] = 0x00;
 800b0c2:	f88d 300f 	strb.w	r3, [sp, #15]
  MACAddr[4] = 0x00;
 800b0c6:	f88d 3010 	strb.w	r3, [sp, #16]
  MACAddr[5] = 0x00;
 800b0ca:	f88d 3011 	strb.w	r3, [sp, #17]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800b0ce:	61eb      	str	r3, [r5, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800b0d0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800b0d4:	606a      	str	r2, [r5, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800b0d6:	822a      	strh	r2, [r5, #16]
  heth.Init.MACAddr = &MACAddr[0];
 800b0d8:	6169      	str	r1, [r5, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800b0da:	61aa      	str	r2, [r5, #24]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800b0dc:	622b      	str	r3, [r5, #32]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 800b0de:	f7f5 fbf5 	bl	80008cc <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 800b0e2:	b928      	cbnz	r0, 800b0f0 <ethernetif_init+0x68>
    netif->flags |= NETIF_FLAG_LINK_UP;
 800b0e4:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800b0e8:	f043 0304 	orr.w	r3, r3, #4
 800b0ec:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800b0f0:	2304      	movs	r3, #4
 800b0f2:	4a2e      	ldr	r2, [pc, #184]	; (800b1ac <ethernetif_init+0x124>)
 800b0f4:	492e      	ldr	r1, [pc, #184]	; (800b1b0 <ethernetif_init+0x128>)
  osSemaphoreDef(SEM);
 800b0f6:	2700      	movs	r7, #0
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800b0f8:	4829      	ldr	r0, [pc, #164]	; (800b1a0 <ethernetif_init+0x118>)
 800b0fa:	f7f5 fa0b 	bl	8000514 <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800b0fe:	2304      	movs	r3, #4
 800b100:	4a2c      	ldr	r2, [pc, #176]	; (800b1b4 <ethernetif_init+0x12c>)
 800b102:	492d      	ldr	r1, [pc, #180]	; (800b1b8 <ethernetif_init+0x130>)
 800b104:	4826      	ldr	r0, [pc, #152]	; (800b1a0 <ethernetif_init+0x118>)
 800b106:	f7f5 fa42 	bl	800058e <HAL_ETH_DMARxDescListInit>
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800b10a:	2306      	movs	r3, #6
  osSemaphoreDef(SEM);
 800b10c:	a80a      	add	r0, sp, #40	; 0x28
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 800b10e:	2101      	movs	r1, #1
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800b110:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800b114:	696b      	ldr	r3, [r5, #20]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800b116:	ad05      	add	r5, sp, #20
 800b118:	4e28      	ldr	r6, [pc, #160]	; (800b1bc <ethernetif_init+0x134>)
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800b11a:	781a      	ldrb	r2, [r3, #0]
 800b11c:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800b120:	785a      	ldrb	r2, [r3, #1]
 800b122:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800b126:	789a      	ldrb	r2, [r3, #2]
 800b128:	f884 202b 	strb.w	r2, [r4, #43]	; 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800b12c:	78da      	ldrb	r2, [r3, #3]
  osSemaphoreDef(SEM);
 800b12e:	f840 7d20 	str.w	r7, [r0, #-32]!
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800b132:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800b136:	791a      	ldrb	r2, [r3, #4]
 800b138:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800b13c:	795b      	ldrb	r3, [r3, #5]
 800b13e:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
  netif->mtu = 1500;
 800b142:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800b146:	84e3      	strh	r3, [r4, #38]	; 0x26
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800b148:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800b14c:	f043 030a 	orr.w	r3, r3, #10
 800b150:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 800b154:	f7f9 f930 	bl	80043b8 <osSemaphoreCreate>
 800b158:	4b19      	ldr	r3, [pc, #100]	; (800b1c0 <ethernetif_init+0x138>)
 800b15a:	6018      	str	r0, [r3, #0]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800b15c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800b15e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b160:	6833      	ldr	r3, [r6, #0]
  osThreadCreate (osThread(EthIf), netif);
 800b162:	4621      	mov	r1, r4
 800b164:	a805      	add	r0, sp, #20
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800b166:	602b      	str	r3, [r5, #0]
  osThreadCreate (osThread(EthIf), netif);
 800b168:	f7f9 f8db 	bl	8004322 <osThreadCreate>
  HAL_ETH_Start(&heth);
 800b16c:	480c      	ldr	r0, [pc, #48]	; (800b1a0 <ethernetif_init+0x118>)
 800b16e:	f7f5 fca7 	bl	8000ac0 <HAL_ETH_Start>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800b172:	aa01      	add	r2, sp, #4
 800b174:	210b      	movs	r1, #11
 800b176:	480a      	ldr	r0, [pc, #40]	; (800b1a0 <ethernetif_init+0x118>)
 800b178:	f7f5 fb37 	bl	80007ea <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800b17c:	9a01      	ldr	r2, [sp, #4]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800b17e:	210b      	movs	r1, #11
 800b180:	4807      	ldr	r0, [pc, #28]	; (800b1a0 <ethernetif_init+0x118>)
  regvalue |= (PHY_ISFR_INT4);
 800b182:	f042 020b 	orr.w	r2, r2, #11
 800b186:	9201      	str	r2, [sp, #4]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800b188:	f7f5 fb69 	bl	800085e <HAL_ETH_WritePHYRegister>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800b18c:	aa01      	add	r2, sp, #4
 800b18e:	210b      	movs	r1, #11
 800b190:	4803      	ldr	r0, [pc, #12]	; (800b1a0 <ethernetif_init+0x118>)
 800b192:	f7f5 fb2a 	bl	80007ea <HAL_ETH_ReadPHYRegister>

  /* initialize the hardware */
  low_level_init(netif);

  return ERR_OK;
}
 800b196:	4638      	mov	r0, r7
 800b198:	b00b      	add	sp, #44	; 0x2c
 800b19a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b19c:	40028000 	.word	0x40028000
 800b1a0:	20009018 	.word	0x20009018
 800b1a4:	08007081 	.word	0x08007081
 800b1a8:	0800ae25 	.word	0x0800ae25
 800b1ac:	20009060 	.word	0x20009060
 800b1b0:	20007748 	.word	0x20007748
 800b1b4:	200077c8 	.word	0x200077c8
 800b1b8:	20008f98 	.word	0x20008f98
 800b1bc:	0800ca28 	.word	0x0800ca28
 800b1c0:	20003fb0 	.word	0x20003fb0

0800b1c4 <sys_now>:
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
  return HAL_GetTick();
 800b1c4:	f7f5 b888 	b.w	80002d8 <HAL_GetTick>

0800b1c8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800b1c8:	b508      	push	{r3, lr}
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 800b1ca:	4903      	ldr	r1, [pc, #12]	; (800b1d8 <MX_FATFS_Init+0x10>)
 800b1cc:	4803      	ldr	r0, [pc, #12]	; (800b1dc <MX_FATFS_Init+0x14>)
 800b1ce:	f7f9 f899 	bl	8004304 <FATFS_LinkDriver>
 800b1d2:	4b03      	ldr	r3, [pc, #12]	; (800b1e0 <MX_FATFS_Init+0x18>)
 800b1d4:	7018      	strb	r0, [r3, #0]
 800b1d6:	bd08      	pop	{r3, pc}
 800b1d8:	2000a830 	.word	0x2000a830
 800b1dc:	0800cc04 	.word	0x0800cc04
 800b1e0:	2000ac98 	.word	0x2000ac98

0800b1e4 <MX_LWIP_Init>:
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800b1e4:	2100      	movs	r1, #0
{
 800b1e6:	b530      	push	{r4, r5, lr}
  tcpip_init( NULL, NULL );
 800b1e8:	4608      	mov	r0, r1
{
 800b1ea:	b085      	sub	sp, #20
  tcpip_init( NULL, NULL );
 800b1ec:	f7fa fd2e 	bl	8005c4c <tcpip_init>
  ipaddr.addr = 0;
  netmask.addr = 0;
  gw.addr = 0;

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800b1f0:	4d11      	ldr	r5, [pc, #68]	; (800b238 <MX_LWIP_Init+0x54>)
  ipaddr.addr = 0;
 800b1f2:	2000      	movs	r0, #0
  gw.addr = 0;
 800b1f4:	4b11      	ldr	r3, [pc, #68]	; (800b23c <MX_LWIP_Init+0x58>)
  ipaddr.addr = 0;
 800b1f6:	4912      	ldr	r1, [pc, #72]	; (800b240 <MX_LWIP_Init+0x5c>)
  netmask.addr = 0;
 800b1f8:	4a12      	ldr	r2, [pc, #72]	; (800b244 <MX_LWIP_Init+0x60>)
  gw.addr = 0;
 800b1fa:	6018      	str	r0, [r3, #0]
  ipaddr.addr = 0;
 800b1fc:	6008      	str	r0, [r1, #0]
  netmask.addr = 0;
 800b1fe:	6010      	str	r0, [r2, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800b200:	4c11      	ldr	r4, [pc, #68]	; (800b248 <MX_LWIP_Init+0x64>)
 800b202:	9502      	str	r5, [sp, #8]
 800b204:	4d11      	ldr	r5, [pc, #68]	; (800b24c <MX_LWIP_Init+0x68>)
 800b206:	e88d 0021 	stmia.w	sp, {r0, r5}
 800b20a:	4620      	mov	r0, r4
 800b20c:	f7fc fe98 	bl	8007f40 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800b210:	4620      	mov	r0, r4
 800b212:	f7fc febf 	bl	8007f94 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800b216:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800b21a:	4620      	mov	r0, r4
  if (netif_is_link_up(&gnetif))
 800b21c:	075b      	lsls	r3, r3, #29
 800b21e:	d507      	bpl.n	800b230 <MX_LWIP_Init+0x4c>
    netif_set_up(&gnetif);
 800b220:	f7fc febe 	bl	8007fa0 <netif_set_up>
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
  }

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800b224:	4808      	ldr	r0, [pc, #32]	; (800b248 <MX_LWIP_Init+0x64>)

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800b226:	b005      	add	sp, #20
 800b228:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  dhcp_start(&gnetif);
 800b22c:	f7fb bb3b 	b.w	80068a6 <dhcp_start>
    netif_set_down(&gnetif);
 800b230:	f7fc fec5 	bl	8007fbe <netif_set_down>
 800b234:	e7f6      	b.n	800b224 <MX_LWIP_Init+0x40>
 800b236:	bf00      	nop
 800b238:	08005be9 	.word	0x08005be9
 800b23c:	2000acd8 	.word	0x2000acd8
 800b240:	2000acd0 	.word	0x2000acd0
 800b244:	2000acd4 	.word	0x2000acd4
 800b248:	2000ac9c 	.word	0x2000ac9c
 800b24c:	0800b089 	.word	0x0800b089

0800b250 <StartDefaultTask>:
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800b250:	4d0a      	ldr	r5, [pc, #40]	; (800b27c <StartDefaultTask+0x2c>)
	printf("ABV");
 800b252:	4c0b      	ldr	r4, [pc, #44]	; (800b280 <StartDefaultTask+0x30>)
{
 800b254:	b508      	push	{r3, lr}
  MX_FATFS_Init();
 800b256:	f7ff ffb7 	bl	800b1c8 <MX_FATFS_Init>
  MX_LWIP_Init();
 800b25a:	f7ff ffc3 	bl	800b1e4 <MX_LWIP_Init>
  MX_USB_HOST_Init();
 800b25e:	f000 fa69 	bl	800b734 <MX_USB_HOST_Init>
    osDelay(1000);
 800b262:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b266:	f7f9 f874 	bl	8004352 <osDelay>
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800b26a:	4628      	mov	r0, r5
 800b26c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b270:	f7f5 fd53 	bl	8000d1a <HAL_GPIO_TogglePin>
	printf("ABV");
 800b274:	4620      	mov	r0, r4
 800b276:	f000 fd37 	bl	800bce8 <iprintf>
 800b27a:	e7f2      	b.n	800b262 <StartDefaultTask+0x12>
 800b27c:	40020400 	.word	0x40020400
 800b280:	0800cbc2 	.word	0x0800cbc2

0800b284 <SystemClock_Config>:
  __HAL_RCC_PWR_CLK_ENABLE();
 800b284:	4b2e      	ldr	r3, [pc, #184]	; (800b340 <SystemClock_Config+0xbc>)
 800b286:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b288:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
{
 800b28c:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800b28e:	641a      	str	r2, [r3, #64]	; 0x40
{
 800b290:	b0b4      	sub	sp, #208	; 0xd0
  __HAL_RCC_PWR_CLK_ENABLE();
 800b292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b294:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLM = 4;
 800b296:	2604      	movs	r6, #4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800b298:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 800b29a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b29e:	9300      	str	r3, [sp, #0]
 800b2a0:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800b2a2:	4b28      	ldr	r3, [pc, #160]	; (800b344 <SystemClock_Config+0xc0>)
 800b2a4:	681a      	ldr	r2, [r3, #0]
 800b2a6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800b2aa:	601a      	str	r2, [r3, #0]
 800b2ac:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b2ae:	940d      	str	r4, [sp, #52]	; 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800b2b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.PLL.PLLM = 4;
 800b2b4:	960f      	str	r6, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800b2b6:	9411      	str	r4, [sp, #68]	; 0x44
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800b2b8:	9301      	str	r3, [sp, #4]
 800b2ba:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800b2bc:	2301      	movs	r3, #1
 800b2be:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800b2c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b2c4:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800b2c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b2ca:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 216;
 800b2cc:	23d8      	movs	r3, #216	; 0xd8
 800b2ce:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800b2d0:	2309      	movs	r3, #9
 800b2d2:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800b2d4:	f7f6 f9a8 	bl	8001628 <HAL_RCC_OscConfig>
 800b2d8:	b100      	cbz	r0, 800b2dc <SystemClock_Config+0x58>
 800b2da:	e7fe      	b.n	800b2da <SystemClock_Config+0x56>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800b2dc:	f7f6 f96c 	bl	80015b8 <HAL_PWREx_EnableOverDrive>
 800b2e0:	b100      	cbz	r0, 800b2e4 <SystemClock_Config+0x60>
 800b2e2:	e7fe      	b.n	800b2e2 <SystemClock_Config+0x5e>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800b2e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800b2e8:	250f      	movs	r5, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b2ea:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800b2ec:	2107      	movs	r1, #7
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800b2ee:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800b2f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800b2f4:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800b2f6:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b2f8:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800b2fa:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800b2fc:	f7f6 fb52 	bl	80019a4 <HAL_RCC_ClockConfig>
 800b300:	b100      	cbz	r0, 800b304 <SystemClock_Config+0x80>
 800b302:	e7fe      	b.n	800b302 <SystemClock_Config+0x7e>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_CLK48;
 800b304:	4b10      	ldr	r3, [pc, #64]	; (800b348 <SystemClock_Config+0xc4>)
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800b306:	9025      	str	r0, [sp, #148]	; 0x94
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800b308:	9032      	str	r0, [sp, #200]	; 0xc8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b30a:	a813      	add	r0, sp, #76	; 0x4c
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_CLK48;
 800b30c:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b30e:	f7f6 fc1d 	bl	8001b4c <HAL_RCCEx_PeriphCLKConfig>
 800b312:	4604      	mov	r4, r0
 800b314:	b100      	cbz	r0, 800b318 <SystemClock_Config+0x94>
 800b316:	e7fe      	b.n	800b316 <SystemClock_Config+0x92>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800b318:	f7f6 fbd4 	bl	8001ac4 <HAL_RCC_GetHCLKFreq>
 800b31c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b320:	fbb0 f0f3 	udiv	r0, r0, r3
 800b324:	f7f5 f842 	bl	80003ac <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800b328:	4630      	mov	r0, r6
 800b32a:	f7f5 f855 	bl	80003d8 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800b32e:	4622      	mov	r2, r4
 800b330:	4629      	mov	r1, r5
 800b332:	f04f 30ff 	mov.w	r0, #4294967295
 800b336:	f7f4 fff5 	bl	8000324 <HAL_NVIC_SetPriority>
}
 800b33a:	b034      	add	sp, #208	; 0xd0
 800b33c:	bd70      	pop	{r4, r5, r6, pc}
 800b33e:	bf00      	nop
 800b340:	40023800 	.word	0x40023800
 800b344:	40007000 	.word	0x40007000
 800b348:	00200080 	.word	0x00200080

0800b34c <main>:
{
 800b34c:	b500      	push	{lr}
 800b34e:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b350:	2400      	movs	r4, #0
  HAL_Init();
 800b352:	f7f4 ffad 	bl	80002b0 <HAL_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b356:	2501      	movs	r5, #1
  SystemClock_Config();
 800b358:	f7ff ff94 	bl	800b284 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b35c:	4b4c      	ldr	r3, [pc, #304]	; (800b490 <main+0x144>)
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800b35e:	f244 0181 	movw	r1, #16513	; 0x4081
 800b362:	484c      	ldr	r0, [pc, #304]	; (800b494 <main+0x148>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b364:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b366:	f042 0204 	orr.w	r2, r2, #4
 800b36a:	631a      	str	r2, [r3, #48]	; 0x30
 800b36c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b36e:	f002 0204 	and.w	r2, r2, #4
 800b372:	9201      	str	r2, [sp, #4]
 800b374:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800b376:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b378:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b37c:	631a      	str	r2, [r3, #48]	; 0x30
 800b37e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b380:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800b384:	9202      	str	r2, [sp, #8]
 800b386:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800b388:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b38a:	f042 0201 	orr.w	r2, r2, #1
 800b38e:	631a      	str	r2, [r3, #48]	; 0x30
 800b390:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b392:	f002 0201 	and.w	r2, r2, #1
 800b396:	9203      	str	r2, [sp, #12]
 800b398:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800b39a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b39c:	f042 0202 	orr.w	r2, r2, #2
 800b3a0:	631a      	str	r2, [r3, #48]	; 0x30
 800b3a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b3a4:	f002 0202 	and.w	r2, r2, #2
 800b3a8:	9204      	str	r2, [sp, #16]
 800b3aa:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800b3ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b3ae:	f042 0208 	orr.w	r2, r2, #8
 800b3b2:	631a      	str	r2, [r3, #48]	; 0x30
 800b3b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b3b6:	f002 0208 	and.w	r2, r2, #8
 800b3ba:	9205      	str	r2, [sp, #20]
 800b3bc:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800b3be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b3c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b3c4:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800b3c6:	2200      	movs	r2, #0
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800b3c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3ce:	9306      	str	r3, [sp, #24]
 800b3d0:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800b3d2:	f7f5 fc9d 	bl	8000d10 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	2140      	movs	r1, #64	; 0x40
 800b3da:	482f      	ldr	r0, [pc, #188]	; (800b498 <main+0x14c>)
 800b3dc:	f7f5 fc98 	bl	8000d10 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800b3e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800b3e4:	a907      	add	r1, sp, #28
 800b3e6:	482d      	ldr	r0, [pc, #180]	; (800b49c <main+0x150>)
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800b3e8:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800b3ea:	4b2d      	ldr	r3, [pc, #180]	; (800b4a0 <main+0x154>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3ec:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800b3ee:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800b3f0:	f7f5 fba4 	bl	8000b3c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800b3f4:	f244 0381 	movw	r3, #16513	; 0x4081
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b3f8:	a907      	add	r1, sp, #28
 800b3fa:	4826      	ldr	r0, [pc, #152]	; (800b494 <main+0x148>)
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800b3fc:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b3fe:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b400:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b402:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b404:	f7f5 fb9a 	bl	8000b3c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800b408:	f44f 7340 	mov.w	r3, #768	; 0x300
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b40c:	a907      	add	r1, sp, #28
 800b40e:	4825      	ldr	r0, [pc, #148]	; (800b4a4 <main+0x158>)
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800b410:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b412:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b414:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b416:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b418:	2303      	movs	r3, #3
 800b41a:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800b41c:	2307      	movs	r3, #7
 800b41e:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b420:	f7f5 fb8c 	bl	8000b3c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800b424:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800b426:	a907      	add	r1, sp, #28
 800b428:	481b      	ldr	r0, [pc, #108]	; (800b498 <main+0x14c>)
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800b42a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b42c:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b42e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b430:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800b432:	f7f5 fb83 	bl	8000b3c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800b436:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800b438:	a907      	add	r1, sp, #28
 800b43a:	4817      	ldr	r0, [pc, #92]	; (800b498 <main+0x14c>)
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800b43c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b43e:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b440:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800b442:	f7f5 fb7b 	bl	8000b3c <HAL_GPIO_Init>
  huart2.Instance = USART2;
 800b446:	4818      	ldr	r0, [pc, #96]	; (800b4a8 <main+0x15c>)
  huart2.Init.WordLength = UART_WORDLENGTH_7B;
 800b448:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b44c:	4917      	ldr	r1, [pc, #92]	; (800b4ac <main+0x160>)
 800b44e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  huart2.Init.StopBits = UART_STOPBITS_1;
 800b452:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800b454:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b456:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800b458:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b45a:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800b45c:	6244      	str	r4, [r0, #36]	; 0x24
  huart2.Init.WordLength = UART_WORDLENGTH_7B;
 800b45e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 800b462:	230c      	movs	r3, #12
 800b464:	6143      	str	r3, [r0, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800b466:	f7f7 f930 	bl	80026ca <HAL_UART_Init>
 800b46a:	4606      	mov	r6, r0
 800b46c:	b100      	cbz	r0, 800b470 <main+0x124>
 800b46e:	e7fe      	b.n	800b46e <main+0x122>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800b470:	4d0f      	ldr	r5, [pc, #60]	; (800b4b0 <main+0x164>)
 800b472:	ac07      	add	r4, sp, #28
 800b474:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b476:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b478:	682b      	ldr	r3, [r5, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800b47a:	4631      	mov	r1, r6
 800b47c:	a807      	add	r0, sp, #28
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800b47e:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800b480:	f7f8 ff4f 	bl	8004322 <osThreadCreate>
 800b484:	4b0b      	ldr	r3, [pc, #44]	; (800b4b4 <main+0x168>)
 800b486:	6018      	str	r0, [r3, #0]
  osKernelStart();
 800b488:	f7f8 ff3f 	bl	800430a <osKernelStart>
 800b48c:	e7fe      	b.n	800b48c <main+0x140>
 800b48e:	bf00      	nop
 800b490:	40023800 	.word	0x40023800
 800b494:	40020400 	.word	0x40020400
 800b498:	40021800 	.word	0x40021800
 800b49c:	40020800 	.word	0x40020800
 800b4a0:	10110000 	.word	0x10110000
 800b4a4:	40020c00 	.word	0x40020c00
 800b4a8:	2000ace0 	.word	0x2000ace0
 800b4ac:	40004400 	.word	0x40004400
 800b4b0:	0800ca3c 	.word	0x0800ca3c
 800b4b4:	2000acdc 	.word	0x2000acdc

0800b4b8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
/* USER CODE BEGIN Callback 0 */

/* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800b4b8:	6802      	ldr	r2, [r0, #0]
 800b4ba:	4b03      	ldr	r3, [pc, #12]	; (800b4c8 <HAL_TIM_PeriodElapsedCallback+0x10>)
 800b4bc:	429a      	cmp	r2, r3
 800b4be:	d101      	bne.n	800b4c4 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 800b4c0:	f7f4 bf02 	b.w	80002c8 <HAL_IncTick>
 800b4c4:	4770      	bx	lr
 800b4c6:	bf00      	nop
 800b4c8:	40001000 	.word	0x40001000

0800b4cc <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 800b4cc:	e7fe      	b.n	800b4cc <_Error_Handler>

0800b4ce <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b4ce:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b4d0:	2003      	movs	r0, #3
 800b4d2:	f7f4 ff15 	bl	8000300 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	f06f 000b 	mvn.w	r0, #11
 800b4dc:	4611      	mov	r1, r2
 800b4de:	f7f4 ff21 	bl	8000324 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	f06f 000a 	mvn.w	r0, #10
 800b4e8:	4611      	mov	r1, r2
 800b4ea:	f7f4 ff1b 	bl	8000324 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	f06f 0009 	mvn.w	r0, #9
 800b4f4:	4611      	mov	r1, r2
 800b4f6:	f7f4 ff15 	bl	8000324 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	f06f 0004 	mvn.w	r0, #4
 800b500:	4611      	mov	r1, r2
 800b502:	f7f4 ff0f 	bl	8000324 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800b506:	2200      	movs	r2, #0
 800b508:	f06f 0003 	mvn.w	r0, #3
 800b50c:	4611      	mov	r1, r2
 800b50e:	f7f4 ff09 	bl	8000324 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800b512:	2200      	movs	r2, #0
 800b514:	210f      	movs	r1, #15
 800b516:	f06f 0001 	mvn.w	r0, #1
 800b51a:	f7f4 ff03 	bl	8000324 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800b51e:	2200      	movs	r2, #0
 800b520:	210f      	movs	r1, #15
 800b522:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b526:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800b52a:	f7f4 befb 	b.w	8000324 <HAL_NVIC_SetPriority>
	...

0800b530 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 800b530:	6802      	ldr	r2, [r0, #0]
 800b532:	4b15      	ldr	r3, [pc, #84]	; (800b588 <HAL_UART_MspInit+0x58>)
 800b534:	429a      	cmp	r2, r3
{
 800b536:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b538:	b087      	sub	sp, #28
  if(huart->Instance==USART2)
 800b53a:	d122      	bne.n	800b582 <HAL_UART_MspInit+0x52>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800b53c:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
    /**USART2 GPIO Configuration    
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b540:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b542:	2601      	movs	r6, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b544:	2503      	movs	r5, #3
    __HAL_RCC_USART2_CLK_ENABLE();
 800b546:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800b548:	2407      	movs	r4, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b54a:	a901      	add	r1, sp, #4
 800b54c:	480f      	ldr	r0, [pc, #60]	; (800b58c <HAL_UART_MspInit+0x5c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800b54e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800b552:	641a      	str	r2, [r3, #64]	; 0x40
 800b554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b556:	9702      	str	r7, [sp, #8]
    __HAL_RCC_USART2_CLK_ENABLE();
 800b558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b55c:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b55e:	9504      	str	r5, [sp, #16]
    __HAL_RCC_USART2_CLK_ENABLE();
 800b560:	9300      	str	r3, [sp, #0]
 800b562:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800b564:	2308      	movs	r3, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800b566:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800b568:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b56a:	f7f5 fae7 	bl	8000b3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800b56e:	2320      	movs	r3, #32
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b570:	a901      	add	r1, sp, #4
 800b572:	4807      	ldr	r0, [pc, #28]	; (800b590 <HAL_UART_MspInit+0x60>)
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800b574:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b576:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b578:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b57a:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800b57c:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b57e:	f7f5 fadd 	bl	8000b3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800b582:	b007      	add	sp, #28
 800b584:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b586:	bf00      	nop
 800b588:	40004400 	.word	0x40004400
 800b58c:	40020000 	.word	0x40020000
 800b590:	40020c00 	.word	0x40020c00

0800b594 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b594:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800b596:	4601      	mov	r1, r0
{
 800b598:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800b59a:	2200      	movs	r2, #0
 800b59c:	2036      	movs	r0, #54	; 0x36
 800b59e:	f7f4 fec1 	bl	8000324 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800b5a2:	2036      	movs	r0, #54	; 0x36
 800b5a4:	f7f4 fef6 	bl	8000394 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800b5a8:	4b14      	ldr	r3, [pc, #80]	; (800b5fc <HAL_InitTick+0x68>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800b5aa:	a901      	add	r1, sp, #4
 800b5ac:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 800b5ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800b5b0:	4c13      	ldr	r4, [pc, #76]	; (800b600 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 800b5b2:	f042 0210 	orr.w	r2, r2, #16
 800b5b6:	641a      	str	r2, [r3, #64]	; 0x40
 800b5b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5ba:	f003 0310 	and.w	r3, r3, #16
 800b5be:	9302      	str	r3, [sp, #8]
 800b5c0:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800b5c2:	f7f6 faa5 	bl	8001b10 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800b5c6:	f7f6 fa83 	bl	8001ad0 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 800b5ca:	4b0e      	ldr	r3, [pc, #56]	; (800b604 <HAL_InitTick+0x70>)
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800b5cc:	0040      	lsls	r0, r0, #1
  htim6.Instance = TIM6;
 800b5ce:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800b5d0:	f240 33e7 	movw	r3, #999	; 0x3e7
 800b5d4:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800b5d6:	4b0c      	ldr	r3, [pc, #48]	; (800b608 <HAL_InitTick+0x74>)
 800b5d8:	fbb0 f0f3 	udiv	r0, r0, r3
 800b5dc:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
 800b5de:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 800b5e0:	6060      	str	r0, [r4, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800b5e2:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 800b5e4:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b5e6:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800b5e8:	f7f6 fe62 	bl	80022b0 <HAL_TIM_Base_Init>
 800b5ec:	b920      	cbnz	r0, 800b5f8 <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800b5ee:	4620      	mov	r0, r4
 800b5f0:	f7f6 fd37 	bl	8002062 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 800b5f4:	b008      	add	sp, #32
 800b5f6:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 800b5f8:	2001      	movs	r0, #1
 800b5fa:	e7fb      	b.n	800b5f4 <HAL_InitTick+0x60>
 800b5fc:	40023800 	.word	0x40023800
 800b600:	2000ad50 	.word	0x2000ad50
 800b604:	40001000 	.word	0x40001000
 800b608:	000f4240 	.word	0x000f4240

0800b60c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 800b60c:	f7f8 bf9c 	b.w	8004548 <osSystickHandler>

0800b610 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800b610:	4801      	ldr	r0, [pc, #4]	; (800b618 <TIM6_DAC_IRQHandler+0x8>)
 800b612:	f7f6 bd35 	b.w	8002080 <HAL_TIM_IRQHandler>
 800b616:	bf00      	nop
 800b618:	2000ad50 	.word	0x2000ad50

0800b61c <ETH_IRQHandler>:
void ETH_IRQHandler(void)
{
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800b61c:	4801      	ldr	r0, [pc, #4]	; (800b624 <ETH_IRQHandler+0x8>)
 800b61e:	f7f5 b8ac 	b.w	800077a <HAL_ETH_IRQHandler>
 800b622:	bf00      	nop
 800b624:	20009018 	.word	0x20009018

0800b628 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800b628:	4801      	ldr	r0, [pc, #4]	; (800b630 <OTG_FS_IRQHandler+0x8>)
 800b62a:	f7f5 bc79 	b.w	8000f20 <HAL_HCD_IRQHandler>
 800b62e:	bf00      	nop
 800b630:	2000b160 	.word	0x2000b160

0800b634 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end,*min_stack_ptr;

	if (heap_end == 0)
 800b634:	4b0b      	ldr	r3, [pc, #44]	; (800b664 <_sbrk+0x30>)
{
 800b636:	4602      	mov	r2, r0
	if (heap_end == 0)
 800b638:	6819      	ldr	r1, [r3, #0]
 800b63a:	b909      	cbnz	r1, 800b640 <_sbrk+0xc>
		heap_end = &end;
 800b63c:	490a      	ldr	r1, [pc, #40]	; (800b668 <_sbrk+0x34>)
 800b63e:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;

	/* Use the NVIC offset register to locate the main stack pointer. */
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 800b640:	490a      	ldr	r1, [pc, #40]	; (800b66c <_sbrk+0x38>)
	prev_heap_end = heap_end;
 800b642:	6818      	ldr	r0, [r3, #0]
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 800b644:	6809      	ldr	r1, [r1, #0]
	/* Locate the STACK bottom address */
	min_stack_ptr -= MAX_STACK_SIZE;

	if (heap_end + incr > min_stack_ptr)
 800b646:	4402      	add	r2, r0
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 800b648:	6809      	ldr	r1, [r1, #0]
	min_stack_ptr -= MAX_STACK_SIZE;
 800b64a:	f5a1 5100 	sub.w	r1, r1, #8192	; 0x2000
	if (heap_end + incr > min_stack_ptr)
 800b64e:	428a      	cmp	r2, r1
	{
		errno = ENOMEM;
 800b650:	bf83      	ittte	hi
 800b652:	220c      	movhi	r2, #12
 800b654:	4b06      	ldrhi	r3, [pc, #24]	; (800b670 <_sbrk+0x3c>)
		return (caddr_t) -1;
 800b656:	f04f 30ff 	movhi.w	r0, #4294967295
	}

	heap_end += incr;
 800b65a:	601a      	strls	r2, [r3, #0]
		errno = ENOMEM;
 800b65c:	bf88      	it	hi
 800b65e:	601a      	strhi	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 800b660:	4770      	bx	lr
 800b662:	bf00      	nop
 800b664:	20003fb4 	.word	0x20003fb4
 800b668:	2000b3f8 	.word	0x2000b3f8
 800b66c:	e000ed08 	.word	0xe000ed08
 800b670:	20007740 	.word	0x20007740

0800b674 <_write>:
	_kill(status, -1);
	while (1) {}
}

int _write(int file, char *ptr, int len)
{
 800b674:	b570      	push	{r4, r5, r6, lr}
 800b676:	460e      	mov	r6, r1
 800b678:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b67a:	460c      	mov	r4, r1
 800b67c:	1ba3      	subs	r3, r4, r6
 800b67e:	429d      	cmp	r5, r3
 800b680:	dc01      	bgt.n	800b686 <_write+0x12>
	{
	   __io_putchar( *ptr++ );
	}
	return len;
}
 800b682:	4628      	mov	r0, r5
 800b684:	bd70      	pop	{r4, r5, r6, pc}
	   __io_putchar( *ptr++ );
 800b686:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b68a:	f3af 8000 	nop.w
 800b68e:	e7f5      	b.n	800b67c <_write+0x8>

0800b690 <_close>:

int _close(int file)
{
	return -1;
}
 800b690:	f04f 30ff 	mov.w	r0, #4294967295
 800b694:	4770      	bx	lr

0800b696 <_fstat>:

int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800b696:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 800b69a:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 800b69c:	604b      	str	r3, [r1, #4]
}
 800b69e:	4770      	bx	lr

0800b6a0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800b6a0:	2001      	movs	r0, #1
 800b6a2:	4770      	bx	lr

0800b6a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800b6a4:	2000      	movs	r0, #0
 800b6a6:	4770      	bx	lr

0800b6a8 <_read>:

int _read(int file, char *ptr, int len)
{
 800b6a8:	b570      	push	{r4, r5, r6, lr}
 800b6aa:	460e      	mov	r6, r1
 800b6ac:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b6ae:	460c      	mov	r4, r1
 800b6b0:	1ba3      	subs	r3, r4, r6
 800b6b2:	429d      	cmp	r5, r3
 800b6b4:	dc01      	bgt.n	800b6ba <_read+0x12>
	{
	  *ptr++ = __io_getchar();
	}

   return len;
}
 800b6b6:	4628      	mov	r0, r5
 800b6b8:	bd70      	pop	{r4, r5, r6, pc}
	  *ptr++ = __io_getchar();
 800b6ba:	f3af 8000 	nop.w
 800b6be:	f804 0b01 	strb.w	r0, [r4], #1
 800b6c2:	e7f5      	b.n	800b6b0 <_read+0x8>

0800b6c4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b6c4:	490f      	ldr	r1, [pc, #60]	; (800b704 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800b6c6:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b6c8:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800b6cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b6d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 800b6d4:	4b0c      	ldr	r3, [pc, #48]	; (800b708 <SystemInit+0x44>)
 800b6d6:	681a      	ldr	r2, [r3, #0]
 800b6d8:	f042 0201 	orr.w	r2, r2, #1
 800b6dc:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800b6de:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800b6e0:	681a      	ldr	r2, [r3, #0]
 800b6e2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800b6e6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b6ea:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800b6ec:	4a07      	ldr	r2, [pc, #28]	; (800b70c <SystemInit+0x48>)
 800b6ee:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800b6f0:	681a      	ldr	r2, [r3, #0]
 800b6f2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b6f6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800b6f8:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b6fa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b6fe:	608b      	str	r3, [r1, #8]
 800b700:	4770      	bx	lr
 800b702:	bf00      	nop
 800b704:	e000ed00 	.word	0xe000ed00
 800b708:	40023800 	.word	0x40023800
 800b70c:	24003010 	.word	0x24003010

0800b710 <USBH_UserProcess>:
*/ 
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{

  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b710:	2904      	cmp	r1, #4
 800b712:	d00a      	beq.n	800b72a <USBH_UserProcess+0x1a>
 800b714:	2905      	cmp	r1, #5
 800b716:	d004      	beq.n	800b722 <USBH_UserProcess+0x12>
 800b718:	2902      	cmp	r1, #2
 800b71a:	d105      	bne.n	800b728 <USBH_UserProcess+0x18>
  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
  break;
    
  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b71c:	4b04      	ldr	r3, [pc, #16]	; (800b730 <USBH_UserProcess+0x20>)
 800b71e:	7019      	strb	r1, [r3, #0]
  break;
 800b720:	4770      	bx	lr
  Appli_state = APPLICATION_DISCONNECT;
 800b722:	2203      	movs	r2, #3

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b724:	4b02      	ldr	r3, [pc, #8]	; (800b730 <USBH_UserProcess+0x20>)
 800b726:	701a      	strb	r2, [r3, #0]
 800b728:	4770      	bx	lr
 800b72a:	2201      	movs	r2, #1
 800b72c:	e7fa      	b.n	800b724 <USBH_UserProcess+0x14>
 800b72e:	bf00      	nop
 800b730:	20003fb8 	.word	0x20003fb8

0800b734 <MX_USB_HOST_Init>:
{
 800b734:	b510      	push	{r4, lr}
  USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS);
 800b736:	4c07      	ldr	r4, [pc, #28]	; (800b754 <MX_USB_HOST_Init+0x20>)
 800b738:	2201      	movs	r2, #1
 800b73a:	4907      	ldr	r1, [pc, #28]	; (800b758 <MX_USB_HOST_Init+0x24>)
 800b73c:	4620      	mov	r0, r4
 800b73e:	f7f8 f8d9 	bl	80038f4 <USBH_Init>
  USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS);
 800b742:	4620      	mov	r0, r4
 800b744:	4905      	ldr	r1, [pc, #20]	; (800b75c <MX_USB_HOST_Init+0x28>)
 800b746:	f7f8 f909 	bl	800395c <USBH_RegisterClass>
  USBH_Start(&hUsbHostFS);
 800b74a:	4620      	mov	r0, r4
}
 800b74c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBH_Start(&hUsbHostFS);
 800b750:	f7f8 b936 	b.w	80039c0 <USBH_Start>
 800b754:	2000ad90 	.word	0x2000ad90
 800b758:	0800b711 	.word	0x0800b711
 800b75c:	20000000 	.word	0x20000000

0800b760 <HAL_HCD_MspInit>:
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcdHandle->Instance==USB_OTG_FS)
 800b760:	6803      	ldr	r3, [r0, #0]
 800b762:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 800b766:	b510      	push	{r4, lr}
 800b768:	b088      	sub	sp, #32
  if(hcdHandle->Instance==USB_OTG_FS)
 800b76a:	d132      	bne.n	800b7d2 <HAL_HCD_MspInit+0x72>
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800b76c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b770:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b772:	a903      	add	r1, sp, #12
 800b774:	4818      	ldr	r0, [pc, #96]	; (800b7d8 <HAL_HCD_MspInit+0x78>)
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800b776:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b778:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b77a:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b77c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b77e:	2303      	movs	r3, #3
 800b780:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b782:	230a      	movs	r3, #10
 800b784:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b786:	f7f5 f9d9 	bl	8000b3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800b78a:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800b78e:	a903      	add	r1, sp, #12
 800b790:	4811      	ldr	r0, [pc, #68]	; (800b7d8 <HAL_HCD_MspInit+0x78>)
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800b792:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b794:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b796:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800b798:	f7f5 f9d0 	bl	8000b3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b79c:	4b0f      	ldr	r3, [pc, #60]	; (800b7dc <HAL_HCD_MspInit+0x7c>)

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800b79e:	2043      	movs	r0, #67	; 0x43
 800b7a0:	2105      	movs	r1, #5
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b7a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b7a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b7a8:	635a      	str	r2, [r3, #52]	; 0x34
 800b7aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b7ac:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800b7b0:	9201      	str	r2, [sp, #4]
 800b7b2:	9a01      	ldr	r2, [sp, #4]
 800b7b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b7b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b7ba:	645a      	str	r2, [r3, #68]	; 0x44
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800b7bc:	4622      	mov	r2, r4
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b7be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b7c4:	9302      	str	r3, [sp, #8]
 800b7c6:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800b7c8:	f7f4 fdac 	bl	8000324 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b7cc:	2043      	movs	r0, #67	; 0x43
 800b7ce:	f7f4 fde1 	bl	8000394 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b7d2:	b008      	add	sp, #32
 800b7d4:	bd10      	pop	{r4, pc}
 800b7d6:	bf00      	nop
 800b7d8:	40020000 	.word	0x40020000
 800b7dc:	40023800 	.word	0x40023800

0800b7e0 <HAL_HCD_SOF_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_IncTimer (hhcd->pData);
 800b7e0:	f8d0 0294 	ldr.w	r0, [r0, #660]	; 0x294
 800b7e4:	f7f8 ba57 	b.w	8003c96 <USBH_LL_IncTimer>

0800b7e8 <HAL_HCD_Connect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Connect(hhcd->pData);
 800b7e8:	f8d0 0294 	ldr.w	r0, [r0, #660]	; 0x294
 800b7ec:	f7f8 ba61 	b.w	8003cb2 <USBH_LL_Connect>

0800b7f0 <HAL_HCD_Disconnect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Disconnect(hhcd->pData);
 800b7f0:	f8d0 0294 	ldr.w	r0, [r0, #660]	; 0x294
 800b7f4:	f7f8 ba77 	b.w	8003ce6 <USBH_LL_Disconnect>

0800b7f8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)   
  USBH_LL_NotifyURBChange(hhcd->pData);
 800b7f8:	f8d0 0294 	ldr.w	r0, [r0, #660]	; 0x294
 800b7fc:	f7f8 ba95 	b.w	8003d2a <USBH_LL_NotifyURBChange>

0800b800 <USBH_LL_Init>:
  *         Initialize the Low Level portion of the Host driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_Init (USBH_HandleTypeDef *phost)
{
 800b800:	b510      	push	{r4, lr}
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b802:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
{
 800b806:	4604      	mov	r4, r0
  if (phost->id == HOST_FS) {
 800b808:	2b01      	cmp	r3, #1
 800b80a:	d11e      	bne.n	800b84a <USBH_LL_Init+0x4a>
  /* Link The driver to the stack */
  hhcd_USB_OTG_FS.pData = phost;
 800b80c:	4810      	ldr	r0, [pc, #64]	; (800b850 <USBH_LL_Init+0x50>)
  phost->pData = &hhcd_USB_OTG_FS;

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b80e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b812:	2202      	movs	r2, #2
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b814:	6003      	str	r3, [r0, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b816:	2308      	movs	r3, #8
  phost->pData = &hhcd_USB_OTG_FS;
 800b818:	f8c4 03c0 	str.w	r0, [r4, #960]	; 0x3c0
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b81c:	6083      	str	r3, [r0, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b81e:	2303      	movs	r3, #3
  hhcd_USB_OTG_FS.pData = phost;
 800b820:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b824:	60c3      	str	r3, [r0, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b826:	2300      	movs	r3, #0
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b828:	6182      	str	r2, [r0, #24]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b82a:	6103      	str	r3, [r0, #16]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b82c:	61c3      	str	r3, [r0, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b82e:	f7f5 fabb 	bl	8000da8 <HAL_HCD_Init>
 800b832:	b118      	cbz	r0, 800b83c <USBH_LL_Init+0x3c>
  {
    _Error_Handler(__FILE__, __LINE__);
 800b834:	21c4      	movs	r1, #196	; 0xc4
 800b836:	4807      	ldr	r0, [pc, #28]	; (800b854 <USBH_LL_Init+0x54>)
 800b838:	f7ff fe48 	bl	800b4cc <_Error_Handler>
  }

  USBH_LL_SetTimer (phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b83c:	4804      	ldr	r0, [pc, #16]	; (800b850 <USBH_LL_Init+0x50>)
 800b83e:	f7f5 feb5 	bl	80015ac <HAL_HCD_GetCurrentFrame>
 800b842:	4601      	mov	r1, r0
 800b844:	4620      	mov	r0, r4
 800b846:	f7f8 fa23 	bl	8003c90 <USBH_LL_SetTimer>
  }
  return USBH_OK;
}
 800b84a:	2000      	movs	r0, #0
 800b84c:	bd10      	pop	{r4, pc}
 800b84e:	bf00      	nop
 800b850:	2000b160 	.word	0x2000b160
 800b854:	0800cbf1 	.word	0x0800cbf1

0800b858 <USBH_LL_Start>:
  *         Start the Low Level portion of the Host driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b858:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;
 
  hal_status = HAL_HCD_Start(phost->pData);
 800b85a:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 800b85e:	f7f5 fe6f 	bl	8001540 <HAL_HCD_Start>
 800b862:	2803      	cmp	r0, #3
 800b864:	bf9a      	itte	ls
 800b866:	4b02      	ldrls	r3, [pc, #8]	; (800b870 <USBH_LL_Start+0x18>)
 800b868:	5c18      	ldrbls	r0, [r3, r0]
 800b86a:	2002      	movhi	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status; 
}
 800b86c:	bd08      	pop	{r3, pc}
 800b86e:	bf00      	nop
 800b870:	0800cbed 	.word	0x0800cbed

0800b874 <USBH_LL_Stop>:
  *         Stop the Low Level portion of the Host driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_Stop (USBH_HandleTypeDef *phost)
{
 800b874:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;
 
  hal_status = HAL_HCD_Stop(phost->pData);
 800b876:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 800b87a:	f7f5 fe77 	bl	800156c <HAL_HCD_Stop>
 800b87e:	2803      	cmp	r0, #3
 800b880:	bf9a      	itte	ls
 800b882:	4b02      	ldrls	r3, [pc, #8]	; (800b88c <USBH_LL_Stop+0x18>)
 800b884:	5c18      	ldrbls	r0, [r3, r0]
 800b886:	2002      	movhi	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;  
}
 800b888:	bd08      	pop	{r3, pc}
 800b88a:	bf00      	nop
 800b88c:	0800cbed 	.word	0x0800cbed

0800b890 <USBH_LL_GetSpeed>:
  *         Return the USB Host Speed from the Low Level Driver.
  * @param  phost: Host handle
  * @retval USBH Speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed  (USBH_HandleTypeDef *phost)
{
 800b890:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
    
  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b892:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 800b896:	f7f5 fe8c 	bl	80015b2 <HAL_HCD_GetCurrentSpeed>
 800b89a:	2802      	cmp	r0, #2
 800b89c:	bf9a      	itte	ls
 800b89e:	4b02      	ldrls	r3, [pc, #8]	; (800b8a8 <USBH_LL_GetSpeed+0x18>)
 800b8a0:	5c18      	ldrbls	r0, [r3, r0]
 800b8a2:	2001      	movhi	r0, #1
  default:  
   speed = USBH_SPEED_FULL;    
    break;  
  }
  return  speed;
}
 800b8a4:	bd08      	pop	{r3, pc}
 800b8a6:	bf00      	nop
 800b8a8:	0800cbea 	.word	0x0800cbea

0800b8ac <USBH_LL_ResetPort>:
  *         Reset the Host Port of the Low Level Driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_ResetPort (USBH_HandleTypeDef *phost) 
{
 800b8ac:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;
 
  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b8ae:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 800b8b2:	f7f5 fe6d 	bl	8001590 <HAL_HCD_ResetPort>
 800b8b6:	2803      	cmp	r0, #3
 800b8b8:	bf9a      	itte	ls
 800b8ba:	4b02      	ldrls	r3, [pc, #8]	; (800b8c4 <USBH_LL_ResetPort+0x18>)
 800b8bc:	5c18      	ldrbls	r0, [r3, r0]
 800b8be:	2002      	movhi	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;  
}
 800b8c0:	bd08      	pop	{r3, pc}
 800b8c2:	bf00      	nop
 800b8c4:	0800cbed 	.word	0x0800cbed

0800b8c8 <USBH_LL_GetLastXferSize>:
  * @param  pipe: Pipe index   
  * @retval Packet Size
  */
uint32_t USBH_LL_GetLastXferSize  (USBH_HandleTypeDef *phost, uint8_t pipe)  
{
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b8c8:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 800b8cc:	f7f5 be69 	b.w	80015a2 <HAL_HCD_HC_GetXferCount>

0800b8d0 <USBH_LL_OpenPipe>:
                                      uint8_t epnum,                                      
                                      uint8_t dev_address,
                                      uint8_t speed,
                                      uint8_t ep_type,
                                      uint16_t mps)
{
 800b8d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;
 
  hal_status = HAL_HCD_HC_Init(phost->pData,
 800b8d2:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 800b8d6:	9402      	str	r4, [sp, #8]
 800b8d8:	f89d 401c 	ldrb.w	r4, [sp, #28]
 800b8dc:	9401      	str	r4, [sp, #4]
 800b8de:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800b8e2:	9400      	str	r4, [sp, #0]
 800b8e4:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 800b8e8:	f7f5 fa1b 	bl	8000d22 <HAL_HCD_HC_Init>
 800b8ec:	2803      	cmp	r0, #3
 800b8ee:	bf96      	itet	ls
 800b8f0:	4b02      	ldrls	r3, [pc, #8]	; (800b8fc <USBH_LL_OpenPipe+0x2c>)
 800b8f2:	2002      	movhi	r0, #2
 800b8f4:	5c18      	ldrbls	r0, [r3, r0]
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status; 
}
 800b8f6:	b004      	add	sp, #16
 800b8f8:	bd10      	pop	{r4, pc}
 800b8fa:	bf00      	nop
 800b8fc:	0800cbed 	.word	0x0800cbed

0800b900 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe_num: Pipe index               
  * @retval USBH Status
  */
USBH_StatusTypeDef   USBH_LL_ClosePipe   (USBH_HandleTypeDef *phost, uint8_t pipe)   
{
 800b900:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;
 
  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b902:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 800b906:	f7f5 fa3d 	bl	8000d84 <HAL_HCD_HC_Halt>
 800b90a:	2803      	cmp	r0, #3
 800b90c:	bf9a      	itte	ls
 800b90e:	4b02      	ldrls	r3, [pc, #8]	; (800b918 <USBH_LL_ClosePipe+0x18>)
 800b910:	5c18      	ldrbls	r0, [r3, r0]
 800b912:	2002      	movhi	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;  
}
 800b914:	bd08      	pop	{r3, pc}
 800b916:	bf00      	nop
 800b918:	0800cbed 	.word	0x0800cbed

0800b91c <USBH_LL_SubmitURB>:
                                            uint8_t ep_type,  
                                            uint8_t token, 
                                            uint8_t* pbuff, 
                                            uint16_t length,
                                            uint8_t do_ping ) 
{
 800b91c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;
 
  hal_status = HAL_HCD_HC_SubmitRequest (phost->pData,
 800b91e:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 800b922:	9403      	str	r4, [sp, #12]
 800b924:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 800b928:	9402      	str	r4, [sp, #8]
 800b92a:	9c07      	ldr	r4, [sp, #28]
 800b92c:	9401      	str	r4, [sp, #4]
 800b92e:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800b932:	9400      	str	r4, [sp, #0]
 800b934:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 800b938:	f7f5 fa72 	bl	8000e20 <HAL_HCD_HC_SubmitRequest>
 800b93c:	2803      	cmp	r0, #3
 800b93e:	bf96      	itet	ls
 800b940:	4b02      	ldrls	r3, [pc, #8]	; (800b94c <USBH_LL_SubmitURB+0x30>)
 800b942:	2002      	movhi	r0, #2
 800b944:	5c18      	ldrbls	r0, [r3, r0]
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;  
}
 800b946:	b004      	add	sp, #16
 800b948:	bd10      	pop	{r4, pc}
 800b94a:	bf00      	nop
 800b94c:	0800cbed 	.word	0x0800cbed

0800b950 <USBH_LL_GetURBState>:
  *            @arg URB_ERROR  
  *            @arg URB_STALL      
  */
USBH_URBStateTypeDef  USBH_LL_GetURBState (USBH_HandleTypeDef *phost, uint8_t pipe) 
{
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b950:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 800b954:	f7f5 be1f 	b.w	8001596 <HAL_HCD_HC_GetURBState>

0800b958 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active 
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef  USBH_LL_DriverVBUS (USBH_HandleTypeDef *phost, uint8_t state)
{ 
 800b958:	b508      	push	{r3, lr}
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */
   
      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */ 
    }
  }	
  HAL_Delay(200);
 800b95a:	20c8      	movs	r0, #200	; 0xc8
 800b95c:	f7f4 fcc2 	bl	80002e4 <HAL_Delay>
  return USBH_OK;  
}
 800b960:	2000      	movs	r0, #0
 800b962:	bd08      	pop	{r3, pc}

0800b964 <USBH_LL_SetToggle>:
USBH_StatusTypeDef   USBH_LL_SetToggle   (USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)   
{
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
  
  if(pHandle->hc[pipe].ep_is_in)
 800b964:	2328      	movs	r3, #40	; 0x28
  pHandle = phost->pData;
 800b966:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
  if(pHandle->hc[pipe].ep_is_in)
 800b96a:	fb03 0101 	mla	r1, r3, r1, r0
 800b96e:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 800b972:	b11b      	cbz	r3, 800b97c <USBH_LL_SetToggle+0x18>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b974:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
  {
    pHandle->hc[pipe].toggle_out = toggle;
  }
  
  return USBH_OK; 
}
 800b978:	2000      	movs	r0, #0
 800b97a:	4770      	bx	lr
    pHandle->hc[pipe].toggle_out = toggle;
 800b97c:	f881 2051 	strb.w	r2, [r1, #81]	; 0x51
 800b980:	e7fa      	b.n	800b978 <USBH_LL_SetToggle+0x14>

0800b982 <USBH_LL_GetToggle>:
{
  uint8_t toggle = 0;
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData; 
  
  if(pHandle->hc[pipe].ep_is_in)
 800b982:	2328      	movs	r3, #40	; 0x28
  pHandle = phost->pData; 
 800b984:	f8d0 23c0 	ldr.w	r2, [r0, #960]	; 0x3c0
  if(pHandle->hc[pipe].ep_is_in)
 800b988:	fb03 2101 	mla	r1, r3, r1, r2
 800b98c:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 800b990:	b113      	cbz	r3, 800b998 <USBH_LL_GetToggle+0x16>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800b992:	f891 0050 	ldrb.w	r0, [r1, #80]	; 0x50
 800b996:	4770      	bx	lr
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800b998:	f891 0051 	ldrb.w	r0, [r1, #81]	; 0x51
  }
  return toggle; 
}
 800b99c:	4770      	bx	lr

0800b99e <USBH_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void  USBH_Delay (uint32_t Delay)
{
  HAL_Delay(Delay);  
 800b99e:	f7f4 bca1 	b.w	80002e4 <HAL_Delay>

0800b9a2 <USBH_initialize>:
DSTATUS USBH_initialize(BYTE lun)
{
  /* CAUTION : USB Host library has to be initialized in the application */
  
  return RES_OK;
}
 800b9a2:	2000      	movs	r0, #0
 800b9a4:	4770      	bx	lr
	...

0800b9a8 <USBH_status>:
  */
DSTATUS USBH_status(BYTE lun)
{
  DRESULT res = RES_ERROR;
  
  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800b9a8:	4601      	mov	r1, r0
 800b9aa:	4804      	ldr	r0, [pc, #16]	; (800b9bc <USBH_status+0x14>)
{
 800b9ac:	b508      	push	{r3, lr}
  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800b9ae:	f7f7 fbf9 	bl	80031a4 <USBH_MSC_UnitIsReady>
  {
    res = RES_ERROR;
  }
  
  return res;
}
 800b9b2:	fab0 f080 	clz	r0, r0
 800b9b6:	0940      	lsrs	r0, r0, #5
 800b9b8:	bd08      	pop	{r3, pc}
 800b9ba:	bf00      	nop
 800b9bc:	2000ad90 	.word	0x2000ad90

0800b9c0 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b9c0:	b510      	push	{r4, lr}
 800b9c2:	b090      	sub	sp, #64	; 0x40
 800b9c4:	4604      	mov	r4, r0
  DRESULT res = RES_ERROR;
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800b9c6:	9300      	str	r3, [sp, #0]
 800b9c8:	460b      	mov	r3, r1
 800b9ca:	4601      	mov	r1, r0
 800b9cc:	480a      	ldr	r0, [pc, #40]	; (800b9f8 <USBH_read+0x38>)
 800b9ce:	f7f7 fc12 	bl	80031f6 <USBH_MSC_Read>
 800b9d2:	b168      	cbz	r0, 800b9f0 <USBH_read+0x30>
  {
    res = RES_OK;
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info); 
 800b9d4:	aa03      	add	r2, sp, #12
 800b9d6:	4621      	mov	r1, r4
 800b9d8:	4807      	ldr	r0, [pc, #28]	; (800b9f8 <USBH_read+0x38>)
 800b9da:	f7f7 fbf4 	bl	80031c6 <USBH_MSC_GetLUNInfo>
    
    switch (info.sense.asc)
 800b9de:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800b9e2:	2b28      	cmp	r3, #40	; 0x28
 800b9e4:	d006      	beq.n	800b9f4 <USBH_read+0x34>
 800b9e6:	2b3a      	cmp	r3, #58	; 0x3a
 800b9e8:	d004      	beq.n	800b9f4 <USBH_read+0x34>
 800b9ea:	2b04      	cmp	r3, #4
 800b9ec:	d002      	beq.n	800b9f4 <USBH_read+0x34>
      USBH_ErrLog ("USB Disk is not ready!");  
      res = RES_NOTRDY;
      break; 
      
    default:
      res = RES_ERROR;
 800b9ee:	2001      	movs	r0, #1
      break;
    }
  }
  
  return res;
}
 800b9f0:	b010      	add	sp, #64	; 0x40
 800b9f2:	bd10      	pop	{r4, pc}
      res = RES_NOTRDY;
 800b9f4:	2003      	movs	r0, #3
 800b9f6:	e7fb      	b.n	800b9f0 <USBH_read+0x30>
 800b9f8:	2000ad90 	.word	0x2000ad90

0800b9fc <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b9fc:	b510      	push	{r4, lr}
 800b9fe:	4614      	mov	r4, r2
 800ba00:	b08e      	sub	sp, #56	; 0x38
  DRESULT res = RES_ERROR;
  MSC_LUNTypeDef info;
  
  switch (cmd)
 800ba02:	2903      	cmp	r1, #3
 800ba04:	d803      	bhi.n	800ba0e <USBH_ioctl+0x12>
 800ba06:	e8df f001 	tbb	[pc, r1]
 800ba0a:	051a      	.short	0x051a
 800ba0c:	1010      	.short	0x1010
      res = RES_ERROR;
    }
    break;
    
  default:
    res = RES_PARERR;
 800ba0e:	2004      	movs	r0, #4
  }
  
  return res;
}
 800ba10:	b00e      	add	sp, #56	; 0x38
 800ba12:	bd10      	pop	{r4, pc}
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800ba14:	4601      	mov	r1, r0
 800ba16:	aa01      	add	r2, sp, #4
 800ba18:	480a      	ldr	r0, [pc, #40]	; (800ba44 <USBH_ioctl+0x48>)
 800ba1a:	f7f7 fbd4 	bl	80031c6 <USBH_MSC_GetLUNInfo>
 800ba1e:	b910      	cbnz	r0, 800ba26 <USBH_ioctl+0x2a>
      *(DWORD*)buff = info.capacity.block_nbr;
 800ba20:	9b02      	ldr	r3, [sp, #8]
      *(DWORD*)buff = info.capacity.block_size;
 800ba22:	6023      	str	r3, [r4, #0]
 800ba24:	e7f4      	b.n	800ba10 <USBH_ioctl+0x14>
      res = RES_ERROR;
 800ba26:	2001      	movs	r0, #1
 800ba28:	e7f2      	b.n	800ba10 <USBH_ioctl+0x14>
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800ba2a:	4601      	mov	r1, r0
 800ba2c:	aa01      	add	r2, sp, #4
 800ba2e:	4805      	ldr	r0, [pc, #20]	; (800ba44 <USBH_ioctl+0x48>)
 800ba30:	f7f7 fbc9 	bl	80031c6 <USBH_MSC_GetLUNInfo>
 800ba34:	2800      	cmp	r0, #0
 800ba36:	d1f6      	bne.n	800ba26 <USBH_ioctl+0x2a>
      *(DWORD*)buff = info.capacity.block_size;
 800ba38:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800ba3c:	e7f1      	b.n	800ba22 <USBH_ioctl+0x26>
    res = RES_OK;
 800ba3e:	2000      	movs	r0, #0
 800ba40:	e7e6      	b.n	800ba10 <USBH_ioctl+0x14>
 800ba42:	bf00      	nop
 800ba44:	2000ad90 	.word	0x2000ad90

0800ba48 <USBH_write>:
{
 800ba48:	b510      	push	{r4, lr}
 800ba4a:	b090      	sub	sp, #64	; 0x40
 800ba4c:	4604      	mov	r4, r0
  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800ba4e:	9300      	str	r3, [sp, #0]
 800ba50:	460b      	mov	r3, r1
 800ba52:	4601      	mov	r1, r0
 800ba54:	480d      	ldr	r0, [pc, #52]	; (800ba8c <USBH_write+0x44>)
 800ba56:	f7f7 fc11 	bl	800327c <USBH_MSC_Write>
 800ba5a:	b160      	cbz	r0, 800ba76 <USBH_write+0x2e>
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info); 
 800ba5c:	aa03      	add	r2, sp, #12
 800ba5e:	4621      	mov	r1, r4
 800ba60:	480a      	ldr	r0, [pc, #40]	; (800ba8c <USBH_write+0x44>)
 800ba62:	f7f7 fbb0 	bl	80031c6 <USBH_MSC_GetLUNInfo>
    switch (info.sense.asc)
 800ba66:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800ba6a:	2b27      	cmp	r3, #39	; 0x27
 800ba6c:	d00b      	beq.n	800ba86 <USBH_write+0x3e>
 800ba6e:	d804      	bhi.n	800ba7a <USBH_write+0x32>
 800ba70:	2b04      	cmp	r3, #4
 800ba72:	d106      	bne.n	800ba82 <USBH_write+0x3a>
      res = RES_NOTRDY;
 800ba74:	2003      	movs	r0, #3
}
 800ba76:	b010      	add	sp, #64	; 0x40
 800ba78:	bd10      	pop	{r4, pc}
    switch (info.sense.asc)
 800ba7a:	2b28      	cmp	r3, #40	; 0x28
 800ba7c:	d0fa      	beq.n	800ba74 <USBH_write+0x2c>
 800ba7e:	2b3a      	cmp	r3, #58	; 0x3a
 800ba80:	e7f7      	b.n	800ba72 <USBH_write+0x2a>
      res = RES_ERROR;
 800ba82:	2001      	movs	r0, #1
 800ba84:	e7f7      	b.n	800ba76 <USBH_write+0x2e>
      res = RES_WRPRT;
 800ba86:	2002      	movs	r0, #2
 800ba88:	e7f5      	b.n	800ba76 <USBH_write+0x2e>
 800ba8a:	bf00      	nop
 800ba8c:	2000ad90 	.word	0x2000ad90

0800ba90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800ba90:	f8df d034 	ldr.w	sp, [pc, #52]	; 800bac8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800ba94:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800ba96:	e003      	b.n	800baa0 <LoopCopyDataInit>

0800ba98 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800ba98:	4b0c      	ldr	r3, [pc, #48]	; (800bacc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800ba9a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800ba9c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800ba9e:	3104      	adds	r1, #4

0800baa0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800baa0:	480b      	ldr	r0, [pc, #44]	; (800bad0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800baa2:	4b0c      	ldr	r3, [pc, #48]	; (800bad4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800baa4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800baa6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800baa8:	d3f6      	bcc.n	800ba98 <CopyDataInit>
  ldr  r2, =_sbss
 800baaa:	4a0b      	ldr	r2, [pc, #44]	; (800bad8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800baac:	e002      	b.n	800bab4 <LoopFillZerobss>

0800baae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800baae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800bab0:	f842 3b04 	str.w	r3, [r2], #4

0800bab4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800bab4:	4b09      	ldr	r3, [pc, #36]	; (800badc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800bab6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800bab8:	d3f9      	bcc.n	800baae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800baba:	f7ff fe03 	bl	800b6c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800babe:	f000 f811 	bl	800bae4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800bac2:	f7ff fc43 	bl	800b34c <main>
  bx  lr    
 800bac6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800bac8:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800bacc:	0800ccb8 	.word	0x0800ccb8
  ldr  r0, =_sdata
 800bad0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800bad4:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 800bad8:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 800badc:	2000b3f8 	.word	0x2000b3f8

0800bae0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800bae0:	e7fe      	b.n	800bae0 <ADC_IRQHandler>
	...

0800bae4 <__libc_init_array>:
 800bae4:	b570      	push	{r4, r5, r6, lr}
 800bae6:	4e0d      	ldr	r6, [pc, #52]	; (800bb1c <__libc_init_array+0x38>)
 800bae8:	4c0d      	ldr	r4, [pc, #52]	; (800bb20 <__libc_init_array+0x3c>)
 800baea:	1ba4      	subs	r4, r4, r6
 800baec:	10a4      	asrs	r4, r4, #2
 800baee:	2500      	movs	r5, #0
 800baf0:	42a5      	cmp	r5, r4
 800baf2:	d109      	bne.n	800bb08 <__libc_init_array+0x24>
 800baf4:	4e0b      	ldr	r6, [pc, #44]	; (800bb24 <__libc_init_array+0x40>)
 800baf6:	4c0c      	ldr	r4, [pc, #48]	; (800bb28 <__libc_init_array+0x44>)
 800baf8:	f000 ff7c 	bl	800c9f4 <_init>
 800bafc:	1ba4      	subs	r4, r4, r6
 800bafe:	10a4      	asrs	r4, r4, #2
 800bb00:	2500      	movs	r5, #0
 800bb02:	42a5      	cmp	r5, r4
 800bb04:	d105      	bne.n	800bb12 <__libc_init_array+0x2e>
 800bb06:	bd70      	pop	{r4, r5, r6, pc}
 800bb08:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bb0c:	4798      	blx	r3
 800bb0e:	3501      	adds	r5, #1
 800bb10:	e7ee      	b.n	800baf0 <__libc_init_array+0xc>
 800bb12:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bb16:	4798      	blx	r3
 800bb18:	3501      	adds	r5, #1
 800bb1a:	e7f2      	b.n	800bb02 <__libc_init_array+0x1e>
 800bb1c:	0800ccb0 	.word	0x0800ccb0
 800bb20:	0800ccb0 	.word	0x0800ccb0
 800bb24:	0800ccb0 	.word	0x0800ccb0
 800bb28:	0800ccb4 	.word	0x0800ccb4

0800bb2c <malloc>:
 800bb2c:	4b02      	ldr	r3, [pc, #8]	; (800bb38 <malloc+0xc>)
 800bb2e:	4601      	mov	r1, r0
 800bb30:	6818      	ldr	r0, [r3, #0]
 800bb32:	f000 b87b 	b.w	800bc2c <_malloc_r>
 800bb36:	bf00      	nop
 800bb38:	20000030 	.word	0x20000030

0800bb3c <free>:
 800bb3c:	4b02      	ldr	r3, [pc, #8]	; (800bb48 <free+0xc>)
 800bb3e:	4601      	mov	r1, r0
 800bb40:	6818      	ldr	r0, [r3, #0]
 800bb42:	f000 b825 	b.w	800bb90 <_free_r>
 800bb46:	bf00      	nop
 800bb48:	20000030 	.word	0x20000030

0800bb4c <memcmp>:
 800bb4c:	b510      	push	{r4, lr}
 800bb4e:	3901      	subs	r1, #1
 800bb50:	4402      	add	r2, r0
 800bb52:	4290      	cmp	r0, r2
 800bb54:	d101      	bne.n	800bb5a <memcmp+0xe>
 800bb56:	2000      	movs	r0, #0
 800bb58:	bd10      	pop	{r4, pc}
 800bb5a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800bb5e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800bb62:	42a3      	cmp	r3, r4
 800bb64:	d0f5      	beq.n	800bb52 <memcmp+0x6>
 800bb66:	1b18      	subs	r0, r3, r4
 800bb68:	bd10      	pop	{r4, pc}

0800bb6a <memcpy>:
 800bb6a:	b510      	push	{r4, lr}
 800bb6c:	1e43      	subs	r3, r0, #1
 800bb6e:	440a      	add	r2, r1
 800bb70:	4291      	cmp	r1, r2
 800bb72:	d100      	bne.n	800bb76 <memcpy+0xc>
 800bb74:	bd10      	pop	{r4, pc}
 800bb76:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb7e:	e7f7      	b.n	800bb70 <memcpy+0x6>

0800bb80 <memset>:
 800bb80:	4402      	add	r2, r0
 800bb82:	4603      	mov	r3, r0
 800bb84:	4293      	cmp	r3, r2
 800bb86:	d100      	bne.n	800bb8a <memset+0xa>
 800bb88:	4770      	bx	lr
 800bb8a:	f803 1b01 	strb.w	r1, [r3], #1
 800bb8e:	e7f9      	b.n	800bb84 <memset+0x4>

0800bb90 <_free_r>:
 800bb90:	b538      	push	{r3, r4, r5, lr}
 800bb92:	4605      	mov	r5, r0
 800bb94:	2900      	cmp	r1, #0
 800bb96:	d045      	beq.n	800bc24 <_free_r+0x94>
 800bb98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb9c:	1f0c      	subs	r4, r1, #4
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	bfb8      	it	lt
 800bba2:	18e4      	addlt	r4, r4, r3
 800bba4:	f000 f9cc 	bl	800bf40 <__malloc_lock>
 800bba8:	4a1f      	ldr	r2, [pc, #124]	; (800bc28 <_free_r+0x98>)
 800bbaa:	6813      	ldr	r3, [r2, #0]
 800bbac:	4610      	mov	r0, r2
 800bbae:	b933      	cbnz	r3, 800bbbe <_free_r+0x2e>
 800bbb0:	6063      	str	r3, [r4, #4]
 800bbb2:	6014      	str	r4, [r2, #0]
 800bbb4:	4628      	mov	r0, r5
 800bbb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bbba:	f000 b9c2 	b.w	800bf42 <__malloc_unlock>
 800bbbe:	42a3      	cmp	r3, r4
 800bbc0:	d90c      	bls.n	800bbdc <_free_r+0x4c>
 800bbc2:	6821      	ldr	r1, [r4, #0]
 800bbc4:	1862      	adds	r2, r4, r1
 800bbc6:	4293      	cmp	r3, r2
 800bbc8:	bf04      	itt	eq
 800bbca:	681a      	ldreq	r2, [r3, #0]
 800bbcc:	685b      	ldreq	r3, [r3, #4]
 800bbce:	6063      	str	r3, [r4, #4]
 800bbd0:	bf04      	itt	eq
 800bbd2:	1852      	addeq	r2, r2, r1
 800bbd4:	6022      	streq	r2, [r4, #0]
 800bbd6:	6004      	str	r4, [r0, #0]
 800bbd8:	e7ec      	b.n	800bbb4 <_free_r+0x24>
 800bbda:	4613      	mov	r3, r2
 800bbdc:	685a      	ldr	r2, [r3, #4]
 800bbde:	b10a      	cbz	r2, 800bbe4 <_free_r+0x54>
 800bbe0:	42a2      	cmp	r2, r4
 800bbe2:	d9fa      	bls.n	800bbda <_free_r+0x4a>
 800bbe4:	6819      	ldr	r1, [r3, #0]
 800bbe6:	1858      	adds	r0, r3, r1
 800bbe8:	42a0      	cmp	r0, r4
 800bbea:	d10b      	bne.n	800bc04 <_free_r+0x74>
 800bbec:	6820      	ldr	r0, [r4, #0]
 800bbee:	4401      	add	r1, r0
 800bbf0:	1858      	adds	r0, r3, r1
 800bbf2:	4282      	cmp	r2, r0
 800bbf4:	6019      	str	r1, [r3, #0]
 800bbf6:	d1dd      	bne.n	800bbb4 <_free_r+0x24>
 800bbf8:	6810      	ldr	r0, [r2, #0]
 800bbfa:	6852      	ldr	r2, [r2, #4]
 800bbfc:	605a      	str	r2, [r3, #4]
 800bbfe:	4401      	add	r1, r0
 800bc00:	6019      	str	r1, [r3, #0]
 800bc02:	e7d7      	b.n	800bbb4 <_free_r+0x24>
 800bc04:	d902      	bls.n	800bc0c <_free_r+0x7c>
 800bc06:	230c      	movs	r3, #12
 800bc08:	602b      	str	r3, [r5, #0]
 800bc0a:	e7d3      	b.n	800bbb4 <_free_r+0x24>
 800bc0c:	6820      	ldr	r0, [r4, #0]
 800bc0e:	1821      	adds	r1, r4, r0
 800bc10:	428a      	cmp	r2, r1
 800bc12:	bf04      	itt	eq
 800bc14:	6811      	ldreq	r1, [r2, #0]
 800bc16:	6852      	ldreq	r2, [r2, #4]
 800bc18:	6062      	str	r2, [r4, #4]
 800bc1a:	bf04      	itt	eq
 800bc1c:	1809      	addeq	r1, r1, r0
 800bc1e:	6021      	streq	r1, [r4, #0]
 800bc20:	605c      	str	r4, [r3, #4]
 800bc22:	e7c7      	b.n	800bbb4 <_free_r+0x24>
 800bc24:	bd38      	pop	{r3, r4, r5, pc}
 800bc26:	bf00      	nop
 800bc28:	20003fbc 	.word	0x20003fbc

0800bc2c <_malloc_r>:
 800bc2c:	b570      	push	{r4, r5, r6, lr}
 800bc2e:	1ccd      	adds	r5, r1, #3
 800bc30:	f025 0503 	bic.w	r5, r5, #3
 800bc34:	3508      	adds	r5, #8
 800bc36:	2d0c      	cmp	r5, #12
 800bc38:	bf38      	it	cc
 800bc3a:	250c      	movcc	r5, #12
 800bc3c:	2d00      	cmp	r5, #0
 800bc3e:	4606      	mov	r6, r0
 800bc40:	db01      	blt.n	800bc46 <_malloc_r+0x1a>
 800bc42:	42a9      	cmp	r1, r5
 800bc44:	d903      	bls.n	800bc4e <_malloc_r+0x22>
 800bc46:	230c      	movs	r3, #12
 800bc48:	6033      	str	r3, [r6, #0]
 800bc4a:	2000      	movs	r0, #0
 800bc4c:	bd70      	pop	{r4, r5, r6, pc}
 800bc4e:	f000 f977 	bl	800bf40 <__malloc_lock>
 800bc52:	4a23      	ldr	r2, [pc, #140]	; (800bce0 <_malloc_r+0xb4>)
 800bc54:	6814      	ldr	r4, [r2, #0]
 800bc56:	4621      	mov	r1, r4
 800bc58:	b991      	cbnz	r1, 800bc80 <_malloc_r+0x54>
 800bc5a:	4c22      	ldr	r4, [pc, #136]	; (800bce4 <_malloc_r+0xb8>)
 800bc5c:	6823      	ldr	r3, [r4, #0]
 800bc5e:	b91b      	cbnz	r3, 800bc68 <_malloc_r+0x3c>
 800bc60:	4630      	mov	r0, r6
 800bc62:	f000 f893 	bl	800bd8c <_sbrk_r>
 800bc66:	6020      	str	r0, [r4, #0]
 800bc68:	4629      	mov	r1, r5
 800bc6a:	4630      	mov	r0, r6
 800bc6c:	f000 f88e 	bl	800bd8c <_sbrk_r>
 800bc70:	1c43      	adds	r3, r0, #1
 800bc72:	d126      	bne.n	800bcc2 <_malloc_r+0x96>
 800bc74:	230c      	movs	r3, #12
 800bc76:	6033      	str	r3, [r6, #0]
 800bc78:	4630      	mov	r0, r6
 800bc7a:	f000 f962 	bl	800bf42 <__malloc_unlock>
 800bc7e:	e7e4      	b.n	800bc4a <_malloc_r+0x1e>
 800bc80:	680b      	ldr	r3, [r1, #0]
 800bc82:	1b5b      	subs	r3, r3, r5
 800bc84:	d41a      	bmi.n	800bcbc <_malloc_r+0x90>
 800bc86:	2b0b      	cmp	r3, #11
 800bc88:	d90f      	bls.n	800bcaa <_malloc_r+0x7e>
 800bc8a:	600b      	str	r3, [r1, #0]
 800bc8c:	50cd      	str	r5, [r1, r3]
 800bc8e:	18cc      	adds	r4, r1, r3
 800bc90:	4630      	mov	r0, r6
 800bc92:	f000 f956 	bl	800bf42 <__malloc_unlock>
 800bc96:	f104 000b 	add.w	r0, r4, #11
 800bc9a:	1d23      	adds	r3, r4, #4
 800bc9c:	f020 0007 	bic.w	r0, r0, #7
 800bca0:	1ac3      	subs	r3, r0, r3
 800bca2:	d01b      	beq.n	800bcdc <_malloc_r+0xb0>
 800bca4:	425a      	negs	r2, r3
 800bca6:	50e2      	str	r2, [r4, r3]
 800bca8:	bd70      	pop	{r4, r5, r6, pc}
 800bcaa:	428c      	cmp	r4, r1
 800bcac:	bf0d      	iteet	eq
 800bcae:	6863      	ldreq	r3, [r4, #4]
 800bcb0:	684b      	ldrne	r3, [r1, #4]
 800bcb2:	6063      	strne	r3, [r4, #4]
 800bcb4:	6013      	streq	r3, [r2, #0]
 800bcb6:	bf18      	it	ne
 800bcb8:	460c      	movne	r4, r1
 800bcba:	e7e9      	b.n	800bc90 <_malloc_r+0x64>
 800bcbc:	460c      	mov	r4, r1
 800bcbe:	6849      	ldr	r1, [r1, #4]
 800bcc0:	e7ca      	b.n	800bc58 <_malloc_r+0x2c>
 800bcc2:	1cc4      	adds	r4, r0, #3
 800bcc4:	f024 0403 	bic.w	r4, r4, #3
 800bcc8:	42a0      	cmp	r0, r4
 800bcca:	d005      	beq.n	800bcd8 <_malloc_r+0xac>
 800bccc:	1a21      	subs	r1, r4, r0
 800bcce:	4630      	mov	r0, r6
 800bcd0:	f000 f85c 	bl	800bd8c <_sbrk_r>
 800bcd4:	3001      	adds	r0, #1
 800bcd6:	d0cd      	beq.n	800bc74 <_malloc_r+0x48>
 800bcd8:	6025      	str	r5, [r4, #0]
 800bcda:	e7d9      	b.n	800bc90 <_malloc_r+0x64>
 800bcdc:	bd70      	pop	{r4, r5, r6, pc}
 800bcde:	bf00      	nop
 800bce0:	20003fbc 	.word	0x20003fbc
 800bce4:	20003fc0 	.word	0x20003fc0

0800bce8 <iprintf>:
 800bce8:	b40f      	push	{r0, r1, r2, r3}
 800bcea:	4b0a      	ldr	r3, [pc, #40]	; (800bd14 <iprintf+0x2c>)
 800bcec:	b513      	push	{r0, r1, r4, lr}
 800bcee:	681c      	ldr	r4, [r3, #0]
 800bcf0:	b124      	cbz	r4, 800bcfc <iprintf+0x14>
 800bcf2:	69a3      	ldr	r3, [r4, #24]
 800bcf4:	b913      	cbnz	r3, 800bcfc <iprintf+0x14>
 800bcf6:	4620      	mov	r0, r4
 800bcf8:	f000 f898 	bl	800be2c <__sinit>
 800bcfc:	ab05      	add	r3, sp, #20
 800bcfe:	9a04      	ldr	r2, [sp, #16]
 800bd00:	68a1      	ldr	r1, [r4, #8]
 800bd02:	9301      	str	r3, [sp, #4]
 800bd04:	4620      	mov	r0, r4
 800bd06:	f000 f947 	bl	800bf98 <_vfiprintf_r>
 800bd0a:	b002      	add	sp, #8
 800bd0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd10:	b004      	add	sp, #16
 800bd12:	4770      	bx	lr
 800bd14:	20000030 	.word	0x20000030

0800bd18 <rand>:
 800bd18:	4b19      	ldr	r3, [pc, #100]	; (800bd80 <rand+0x68>)
 800bd1a:	b510      	push	{r4, lr}
 800bd1c:	681c      	ldr	r4, [r3, #0]
 800bd1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bd20:	b9d3      	cbnz	r3, 800bd58 <rand+0x40>
 800bd22:	2018      	movs	r0, #24
 800bd24:	f7ff ff02 	bl	800bb2c <malloc>
 800bd28:	f243 330e 	movw	r3, #13070	; 0x330e
 800bd2c:	63a0      	str	r0, [r4, #56]	; 0x38
 800bd2e:	8003      	strh	r3, [r0, #0]
 800bd30:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 800bd34:	8043      	strh	r3, [r0, #2]
 800bd36:	f241 2334 	movw	r3, #4660	; 0x1234
 800bd3a:	8083      	strh	r3, [r0, #4]
 800bd3c:	f24e 636d 	movw	r3, #58989	; 0xe66d
 800bd40:	80c3      	strh	r3, [r0, #6]
 800bd42:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 800bd46:	8103      	strh	r3, [r0, #8]
 800bd48:	2305      	movs	r3, #5
 800bd4a:	8143      	strh	r3, [r0, #10]
 800bd4c:	230b      	movs	r3, #11
 800bd4e:	8183      	strh	r3, [r0, #12]
 800bd50:	2201      	movs	r2, #1
 800bd52:	2300      	movs	r3, #0
 800bd54:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800bd58:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bd5a:	480a      	ldr	r0, [pc, #40]	; (800bd84 <rand+0x6c>)
 800bd5c:	690a      	ldr	r2, [r1, #16]
 800bd5e:	694b      	ldr	r3, [r1, #20]
 800bd60:	4c09      	ldr	r4, [pc, #36]	; (800bd88 <rand+0x70>)
 800bd62:	4350      	muls	r0, r2
 800bd64:	fb04 0003 	mla	r0, r4, r3, r0
 800bd68:	fba2 2304 	umull	r2, r3, r2, r4
 800bd6c:	3201      	adds	r2, #1
 800bd6e:	4403      	add	r3, r0
 800bd70:	f143 0300 	adc.w	r3, r3, #0
 800bd74:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800bd78:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800bd7c:	bd10      	pop	{r4, pc}
 800bd7e:	bf00      	nop
 800bd80:	20000030 	.word	0x20000030
 800bd84:	5851f42d 	.word	0x5851f42d
 800bd88:	4c957f2d 	.word	0x4c957f2d

0800bd8c <_sbrk_r>:
 800bd8c:	b538      	push	{r3, r4, r5, lr}
 800bd8e:	4c06      	ldr	r4, [pc, #24]	; (800bda8 <_sbrk_r+0x1c>)
 800bd90:	2300      	movs	r3, #0
 800bd92:	4605      	mov	r5, r0
 800bd94:	4608      	mov	r0, r1
 800bd96:	6023      	str	r3, [r4, #0]
 800bd98:	f7ff fc4c 	bl	800b634 <_sbrk>
 800bd9c:	1c43      	adds	r3, r0, #1
 800bd9e:	d102      	bne.n	800bda6 <_sbrk_r+0x1a>
 800bda0:	6823      	ldr	r3, [r4, #0]
 800bda2:	b103      	cbz	r3, 800bda6 <_sbrk_r+0x1a>
 800bda4:	602b      	str	r3, [r5, #0]
 800bda6:	bd38      	pop	{r3, r4, r5, pc}
 800bda8:	20007740 	.word	0x20007740

0800bdac <_cleanup_r>:
 800bdac:	4901      	ldr	r1, [pc, #4]	; (800bdb4 <_cleanup_r+0x8>)
 800bdae:	f000 b8a9 	b.w	800bf04 <_fwalk_reent>
 800bdb2:	bf00      	nop
 800bdb4:	0800c84d 	.word	0x0800c84d

0800bdb8 <std.isra.0>:
 800bdb8:	2300      	movs	r3, #0
 800bdba:	b510      	push	{r4, lr}
 800bdbc:	4604      	mov	r4, r0
 800bdbe:	6003      	str	r3, [r0, #0]
 800bdc0:	6043      	str	r3, [r0, #4]
 800bdc2:	6083      	str	r3, [r0, #8]
 800bdc4:	8181      	strh	r1, [r0, #12]
 800bdc6:	6643      	str	r3, [r0, #100]	; 0x64
 800bdc8:	81c2      	strh	r2, [r0, #14]
 800bdca:	6103      	str	r3, [r0, #16]
 800bdcc:	6143      	str	r3, [r0, #20]
 800bdce:	6183      	str	r3, [r0, #24]
 800bdd0:	4619      	mov	r1, r3
 800bdd2:	2208      	movs	r2, #8
 800bdd4:	305c      	adds	r0, #92	; 0x5c
 800bdd6:	f7ff fed3 	bl	800bb80 <memset>
 800bdda:	4b05      	ldr	r3, [pc, #20]	; (800bdf0 <std.isra.0+0x38>)
 800bddc:	6263      	str	r3, [r4, #36]	; 0x24
 800bdde:	4b05      	ldr	r3, [pc, #20]	; (800bdf4 <std.isra.0+0x3c>)
 800bde0:	62a3      	str	r3, [r4, #40]	; 0x28
 800bde2:	4b05      	ldr	r3, [pc, #20]	; (800bdf8 <std.isra.0+0x40>)
 800bde4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bde6:	4b05      	ldr	r3, [pc, #20]	; (800bdfc <std.isra.0+0x44>)
 800bde8:	6224      	str	r4, [r4, #32]
 800bdea:	6323      	str	r3, [r4, #48]	; 0x30
 800bdec:	bd10      	pop	{r4, pc}
 800bdee:	bf00      	nop
 800bdf0:	0800c4f1 	.word	0x0800c4f1
 800bdf4:	0800c513 	.word	0x0800c513
 800bdf8:	0800c54b 	.word	0x0800c54b
 800bdfc:	0800c56f 	.word	0x0800c56f

0800be00 <__sfmoreglue>:
 800be00:	b570      	push	{r4, r5, r6, lr}
 800be02:	1e4a      	subs	r2, r1, #1
 800be04:	2568      	movs	r5, #104	; 0x68
 800be06:	4355      	muls	r5, r2
 800be08:	460e      	mov	r6, r1
 800be0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800be0e:	f7ff ff0d 	bl	800bc2c <_malloc_r>
 800be12:	4604      	mov	r4, r0
 800be14:	b140      	cbz	r0, 800be28 <__sfmoreglue+0x28>
 800be16:	2100      	movs	r1, #0
 800be18:	e880 0042 	stmia.w	r0, {r1, r6}
 800be1c:	300c      	adds	r0, #12
 800be1e:	60a0      	str	r0, [r4, #8]
 800be20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800be24:	f7ff feac 	bl	800bb80 <memset>
 800be28:	4620      	mov	r0, r4
 800be2a:	bd70      	pop	{r4, r5, r6, pc}

0800be2c <__sinit>:
 800be2c:	6983      	ldr	r3, [r0, #24]
 800be2e:	b510      	push	{r4, lr}
 800be30:	4604      	mov	r4, r0
 800be32:	bb33      	cbnz	r3, 800be82 <__sinit+0x56>
 800be34:	6483      	str	r3, [r0, #72]	; 0x48
 800be36:	64c3      	str	r3, [r0, #76]	; 0x4c
 800be38:	6503      	str	r3, [r0, #80]	; 0x50
 800be3a:	4b12      	ldr	r3, [pc, #72]	; (800be84 <__sinit+0x58>)
 800be3c:	4a12      	ldr	r2, [pc, #72]	; (800be88 <__sinit+0x5c>)
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	6282      	str	r2, [r0, #40]	; 0x28
 800be42:	4298      	cmp	r0, r3
 800be44:	bf04      	itt	eq
 800be46:	2301      	moveq	r3, #1
 800be48:	6183      	streq	r3, [r0, #24]
 800be4a:	f000 f81f 	bl	800be8c <__sfp>
 800be4e:	6060      	str	r0, [r4, #4]
 800be50:	4620      	mov	r0, r4
 800be52:	f000 f81b 	bl	800be8c <__sfp>
 800be56:	60a0      	str	r0, [r4, #8]
 800be58:	4620      	mov	r0, r4
 800be5a:	f000 f817 	bl	800be8c <__sfp>
 800be5e:	2200      	movs	r2, #0
 800be60:	60e0      	str	r0, [r4, #12]
 800be62:	2104      	movs	r1, #4
 800be64:	6860      	ldr	r0, [r4, #4]
 800be66:	f7ff ffa7 	bl	800bdb8 <std.isra.0>
 800be6a:	2201      	movs	r2, #1
 800be6c:	2109      	movs	r1, #9
 800be6e:	68a0      	ldr	r0, [r4, #8]
 800be70:	f7ff ffa2 	bl	800bdb8 <std.isra.0>
 800be74:	2202      	movs	r2, #2
 800be76:	2112      	movs	r1, #18
 800be78:	68e0      	ldr	r0, [r4, #12]
 800be7a:	f7ff ff9d 	bl	800bdb8 <std.isra.0>
 800be7e:	2301      	movs	r3, #1
 800be80:	61a3      	str	r3, [r4, #24]
 800be82:	bd10      	pop	{r4, pc}
 800be84:	0800cc78 	.word	0x0800cc78
 800be88:	0800bdad 	.word	0x0800bdad

0800be8c <__sfp>:
 800be8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be8e:	4b1c      	ldr	r3, [pc, #112]	; (800bf00 <__sfp+0x74>)
 800be90:	681e      	ldr	r6, [r3, #0]
 800be92:	69b3      	ldr	r3, [r6, #24]
 800be94:	4607      	mov	r7, r0
 800be96:	b913      	cbnz	r3, 800be9e <__sfp+0x12>
 800be98:	4630      	mov	r0, r6
 800be9a:	f7ff ffc7 	bl	800be2c <__sinit>
 800be9e:	3648      	adds	r6, #72	; 0x48
 800bea0:	68b4      	ldr	r4, [r6, #8]
 800bea2:	6873      	ldr	r3, [r6, #4]
 800bea4:	3b01      	subs	r3, #1
 800bea6:	d503      	bpl.n	800beb0 <__sfp+0x24>
 800bea8:	6833      	ldr	r3, [r6, #0]
 800beaa:	b133      	cbz	r3, 800beba <__sfp+0x2e>
 800beac:	6836      	ldr	r6, [r6, #0]
 800beae:	e7f7      	b.n	800bea0 <__sfp+0x14>
 800beb0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800beb4:	b16d      	cbz	r5, 800bed2 <__sfp+0x46>
 800beb6:	3468      	adds	r4, #104	; 0x68
 800beb8:	e7f4      	b.n	800bea4 <__sfp+0x18>
 800beba:	2104      	movs	r1, #4
 800bebc:	4638      	mov	r0, r7
 800bebe:	f7ff ff9f 	bl	800be00 <__sfmoreglue>
 800bec2:	6030      	str	r0, [r6, #0]
 800bec4:	2800      	cmp	r0, #0
 800bec6:	d1f1      	bne.n	800beac <__sfp+0x20>
 800bec8:	230c      	movs	r3, #12
 800beca:	603b      	str	r3, [r7, #0]
 800becc:	4604      	mov	r4, r0
 800bece:	4620      	mov	r0, r4
 800bed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bed2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bed6:	81e3      	strh	r3, [r4, #14]
 800bed8:	2301      	movs	r3, #1
 800beda:	81a3      	strh	r3, [r4, #12]
 800bedc:	6665      	str	r5, [r4, #100]	; 0x64
 800bede:	6025      	str	r5, [r4, #0]
 800bee0:	60a5      	str	r5, [r4, #8]
 800bee2:	6065      	str	r5, [r4, #4]
 800bee4:	6125      	str	r5, [r4, #16]
 800bee6:	6165      	str	r5, [r4, #20]
 800bee8:	61a5      	str	r5, [r4, #24]
 800beea:	2208      	movs	r2, #8
 800beec:	4629      	mov	r1, r5
 800beee:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bef2:	f7ff fe45 	bl	800bb80 <memset>
 800bef6:	6365      	str	r5, [r4, #52]	; 0x34
 800bef8:	63a5      	str	r5, [r4, #56]	; 0x38
 800befa:	64a5      	str	r5, [r4, #72]	; 0x48
 800befc:	64e5      	str	r5, [r4, #76]	; 0x4c
 800befe:	e7e6      	b.n	800bece <__sfp+0x42>
 800bf00:	0800cc78 	.word	0x0800cc78

0800bf04 <_fwalk_reent>:
 800bf04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf08:	4680      	mov	r8, r0
 800bf0a:	4689      	mov	r9, r1
 800bf0c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bf10:	2600      	movs	r6, #0
 800bf12:	b914      	cbnz	r4, 800bf1a <_fwalk_reent+0x16>
 800bf14:	4630      	mov	r0, r6
 800bf16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf1a:	68a5      	ldr	r5, [r4, #8]
 800bf1c:	6867      	ldr	r7, [r4, #4]
 800bf1e:	3f01      	subs	r7, #1
 800bf20:	d501      	bpl.n	800bf26 <_fwalk_reent+0x22>
 800bf22:	6824      	ldr	r4, [r4, #0]
 800bf24:	e7f5      	b.n	800bf12 <_fwalk_reent+0xe>
 800bf26:	89ab      	ldrh	r3, [r5, #12]
 800bf28:	2b01      	cmp	r3, #1
 800bf2a:	d907      	bls.n	800bf3c <_fwalk_reent+0x38>
 800bf2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bf30:	3301      	adds	r3, #1
 800bf32:	d003      	beq.n	800bf3c <_fwalk_reent+0x38>
 800bf34:	4629      	mov	r1, r5
 800bf36:	4640      	mov	r0, r8
 800bf38:	47c8      	blx	r9
 800bf3a:	4306      	orrs	r6, r0
 800bf3c:	3568      	adds	r5, #104	; 0x68
 800bf3e:	e7ee      	b.n	800bf1e <_fwalk_reent+0x1a>

0800bf40 <__malloc_lock>:
 800bf40:	4770      	bx	lr

0800bf42 <__malloc_unlock>:
 800bf42:	4770      	bx	lr

0800bf44 <__sfputc_r>:
 800bf44:	6893      	ldr	r3, [r2, #8]
 800bf46:	3b01      	subs	r3, #1
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	b410      	push	{r4}
 800bf4c:	6093      	str	r3, [r2, #8]
 800bf4e:	da09      	bge.n	800bf64 <__sfputc_r+0x20>
 800bf50:	6994      	ldr	r4, [r2, #24]
 800bf52:	42a3      	cmp	r3, r4
 800bf54:	db02      	blt.n	800bf5c <__sfputc_r+0x18>
 800bf56:	b2cb      	uxtb	r3, r1
 800bf58:	2b0a      	cmp	r3, #10
 800bf5a:	d103      	bne.n	800bf64 <__sfputc_r+0x20>
 800bf5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf60:	f000 bb0a 	b.w	800c578 <__swbuf_r>
 800bf64:	6813      	ldr	r3, [r2, #0]
 800bf66:	1c58      	adds	r0, r3, #1
 800bf68:	6010      	str	r0, [r2, #0]
 800bf6a:	7019      	strb	r1, [r3, #0]
 800bf6c:	b2c8      	uxtb	r0, r1
 800bf6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf72:	4770      	bx	lr

0800bf74 <__sfputs_r>:
 800bf74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf76:	4606      	mov	r6, r0
 800bf78:	460f      	mov	r7, r1
 800bf7a:	4614      	mov	r4, r2
 800bf7c:	18d5      	adds	r5, r2, r3
 800bf7e:	42ac      	cmp	r4, r5
 800bf80:	d101      	bne.n	800bf86 <__sfputs_r+0x12>
 800bf82:	2000      	movs	r0, #0
 800bf84:	e007      	b.n	800bf96 <__sfputs_r+0x22>
 800bf86:	463a      	mov	r2, r7
 800bf88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf8c:	4630      	mov	r0, r6
 800bf8e:	f7ff ffd9 	bl	800bf44 <__sfputc_r>
 800bf92:	1c43      	adds	r3, r0, #1
 800bf94:	d1f3      	bne.n	800bf7e <__sfputs_r+0xa>
 800bf96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bf98 <_vfiprintf_r>:
 800bf98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf9c:	b09d      	sub	sp, #116	; 0x74
 800bf9e:	460c      	mov	r4, r1
 800bfa0:	4617      	mov	r7, r2
 800bfa2:	9303      	str	r3, [sp, #12]
 800bfa4:	4606      	mov	r6, r0
 800bfa6:	b118      	cbz	r0, 800bfb0 <_vfiprintf_r+0x18>
 800bfa8:	6983      	ldr	r3, [r0, #24]
 800bfaa:	b90b      	cbnz	r3, 800bfb0 <_vfiprintf_r+0x18>
 800bfac:	f7ff ff3e 	bl	800be2c <__sinit>
 800bfb0:	4b7c      	ldr	r3, [pc, #496]	; (800c1a4 <_vfiprintf_r+0x20c>)
 800bfb2:	429c      	cmp	r4, r3
 800bfb4:	d157      	bne.n	800c066 <_vfiprintf_r+0xce>
 800bfb6:	6874      	ldr	r4, [r6, #4]
 800bfb8:	89a3      	ldrh	r3, [r4, #12]
 800bfba:	0718      	lsls	r0, r3, #28
 800bfbc:	d55d      	bpl.n	800c07a <_vfiprintf_r+0xe2>
 800bfbe:	6923      	ldr	r3, [r4, #16]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d05a      	beq.n	800c07a <_vfiprintf_r+0xe2>
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	9309      	str	r3, [sp, #36]	; 0x24
 800bfc8:	2320      	movs	r3, #32
 800bfca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bfce:	2330      	movs	r3, #48	; 0x30
 800bfd0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bfd4:	f04f 0b01 	mov.w	fp, #1
 800bfd8:	46b8      	mov	r8, r7
 800bfda:	4645      	mov	r5, r8
 800bfdc:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d155      	bne.n	800c090 <_vfiprintf_r+0xf8>
 800bfe4:	ebb8 0a07 	subs.w	sl, r8, r7
 800bfe8:	d00b      	beq.n	800c002 <_vfiprintf_r+0x6a>
 800bfea:	4653      	mov	r3, sl
 800bfec:	463a      	mov	r2, r7
 800bfee:	4621      	mov	r1, r4
 800bff0:	4630      	mov	r0, r6
 800bff2:	f7ff ffbf 	bl	800bf74 <__sfputs_r>
 800bff6:	3001      	adds	r0, #1
 800bff8:	f000 80c4 	beq.w	800c184 <_vfiprintf_r+0x1ec>
 800bffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bffe:	4453      	add	r3, sl
 800c000:	9309      	str	r3, [sp, #36]	; 0x24
 800c002:	f898 3000 	ldrb.w	r3, [r8]
 800c006:	2b00      	cmp	r3, #0
 800c008:	f000 80bc 	beq.w	800c184 <_vfiprintf_r+0x1ec>
 800c00c:	2300      	movs	r3, #0
 800c00e:	f04f 32ff 	mov.w	r2, #4294967295
 800c012:	9304      	str	r3, [sp, #16]
 800c014:	9307      	str	r3, [sp, #28]
 800c016:	9205      	str	r2, [sp, #20]
 800c018:	9306      	str	r3, [sp, #24]
 800c01a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c01e:	931a      	str	r3, [sp, #104]	; 0x68
 800c020:	2205      	movs	r2, #5
 800c022:	7829      	ldrb	r1, [r5, #0]
 800c024:	4860      	ldr	r0, [pc, #384]	; (800c1a8 <_vfiprintf_r+0x210>)
 800c026:	f7f4 f8f3 	bl	8000210 <memchr>
 800c02a:	f105 0801 	add.w	r8, r5, #1
 800c02e:	9b04      	ldr	r3, [sp, #16]
 800c030:	2800      	cmp	r0, #0
 800c032:	d131      	bne.n	800c098 <_vfiprintf_r+0x100>
 800c034:	06d9      	lsls	r1, r3, #27
 800c036:	bf44      	itt	mi
 800c038:	2220      	movmi	r2, #32
 800c03a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c03e:	071a      	lsls	r2, r3, #28
 800c040:	bf44      	itt	mi
 800c042:	222b      	movmi	r2, #43	; 0x2b
 800c044:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c048:	782a      	ldrb	r2, [r5, #0]
 800c04a:	2a2a      	cmp	r2, #42	; 0x2a
 800c04c:	d02c      	beq.n	800c0a8 <_vfiprintf_r+0x110>
 800c04e:	9a07      	ldr	r2, [sp, #28]
 800c050:	2100      	movs	r1, #0
 800c052:	200a      	movs	r0, #10
 800c054:	46a8      	mov	r8, r5
 800c056:	3501      	adds	r5, #1
 800c058:	f898 3000 	ldrb.w	r3, [r8]
 800c05c:	3b30      	subs	r3, #48	; 0x30
 800c05e:	2b09      	cmp	r3, #9
 800c060:	d96d      	bls.n	800c13e <_vfiprintf_r+0x1a6>
 800c062:	b371      	cbz	r1, 800c0c2 <_vfiprintf_r+0x12a>
 800c064:	e026      	b.n	800c0b4 <_vfiprintf_r+0x11c>
 800c066:	4b51      	ldr	r3, [pc, #324]	; (800c1ac <_vfiprintf_r+0x214>)
 800c068:	429c      	cmp	r4, r3
 800c06a:	d101      	bne.n	800c070 <_vfiprintf_r+0xd8>
 800c06c:	68b4      	ldr	r4, [r6, #8]
 800c06e:	e7a3      	b.n	800bfb8 <_vfiprintf_r+0x20>
 800c070:	4b4f      	ldr	r3, [pc, #316]	; (800c1b0 <_vfiprintf_r+0x218>)
 800c072:	429c      	cmp	r4, r3
 800c074:	bf08      	it	eq
 800c076:	68f4      	ldreq	r4, [r6, #12]
 800c078:	e79e      	b.n	800bfb8 <_vfiprintf_r+0x20>
 800c07a:	4621      	mov	r1, r4
 800c07c:	4630      	mov	r0, r6
 800c07e:	f000 fadf 	bl	800c640 <__swsetup_r>
 800c082:	2800      	cmp	r0, #0
 800c084:	d09e      	beq.n	800bfc4 <_vfiprintf_r+0x2c>
 800c086:	f04f 30ff 	mov.w	r0, #4294967295
 800c08a:	b01d      	add	sp, #116	; 0x74
 800c08c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c090:	2b25      	cmp	r3, #37	; 0x25
 800c092:	d0a7      	beq.n	800bfe4 <_vfiprintf_r+0x4c>
 800c094:	46a8      	mov	r8, r5
 800c096:	e7a0      	b.n	800bfda <_vfiprintf_r+0x42>
 800c098:	4a43      	ldr	r2, [pc, #268]	; (800c1a8 <_vfiprintf_r+0x210>)
 800c09a:	1a80      	subs	r0, r0, r2
 800c09c:	fa0b f000 	lsl.w	r0, fp, r0
 800c0a0:	4318      	orrs	r0, r3
 800c0a2:	9004      	str	r0, [sp, #16]
 800c0a4:	4645      	mov	r5, r8
 800c0a6:	e7bb      	b.n	800c020 <_vfiprintf_r+0x88>
 800c0a8:	9a03      	ldr	r2, [sp, #12]
 800c0aa:	1d11      	adds	r1, r2, #4
 800c0ac:	6812      	ldr	r2, [r2, #0]
 800c0ae:	9103      	str	r1, [sp, #12]
 800c0b0:	2a00      	cmp	r2, #0
 800c0b2:	db01      	blt.n	800c0b8 <_vfiprintf_r+0x120>
 800c0b4:	9207      	str	r2, [sp, #28]
 800c0b6:	e004      	b.n	800c0c2 <_vfiprintf_r+0x12a>
 800c0b8:	4252      	negs	r2, r2
 800c0ba:	f043 0302 	orr.w	r3, r3, #2
 800c0be:	9207      	str	r2, [sp, #28]
 800c0c0:	9304      	str	r3, [sp, #16]
 800c0c2:	f898 3000 	ldrb.w	r3, [r8]
 800c0c6:	2b2e      	cmp	r3, #46	; 0x2e
 800c0c8:	d110      	bne.n	800c0ec <_vfiprintf_r+0x154>
 800c0ca:	f898 3001 	ldrb.w	r3, [r8, #1]
 800c0ce:	2b2a      	cmp	r3, #42	; 0x2a
 800c0d0:	f108 0101 	add.w	r1, r8, #1
 800c0d4:	d137      	bne.n	800c146 <_vfiprintf_r+0x1ae>
 800c0d6:	9b03      	ldr	r3, [sp, #12]
 800c0d8:	1d1a      	adds	r2, r3, #4
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	9203      	str	r2, [sp, #12]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	bfb8      	it	lt
 800c0e2:	f04f 33ff 	movlt.w	r3, #4294967295
 800c0e6:	f108 0802 	add.w	r8, r8, #2
 800c0ea:	9305      	str	r3, [sp, #20]
 800c0ec:	4d31      	ldr	r5, [pc, #196]	; (800c1b4 <_vfiprintf_r+0x21c>)
 800c0ee:	f898 1000 	ldrb.w	r1, [r8]
 800c0f2:	2203      	movs	r2, #3
 800c0f4:	4628      	mov	r0, r5
 800c0f6:	f7f4 f88b 	bl	8000210 <memchr>
 800c0fa:	b140      	cbz	r0, 800c10e <_vfiprintf_r+0x176>
 800c0fc:	2340      	movs	r3, #64	; 0x40
 800c0fe:	1b40      	subs	r0, r0, r5
 800c100:	fa03 f000 	lsl.w	r0, r3, r0
 800c104:	9b04      	ldr	r3, [sp, #16]
 800c106:	4303      	orrs	r3, r0
 800c108:	9304      	str	r3, [sp, #16]
 800c10a:	f108 0801 	add.w	r8, r8, #1
 800c10e:	f898 1000 	ldrb.w	r1, [r8]
 800c112:	4829      	ldr	r0, [pc, #164]	; (800c1b8 <_vfiprintf_r+0x220>)
 800c114:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c118:	2206      	movs	r2, #6
 800c11a:	f108 0701 	add.w	r7, r8, #1
 800c11e:	f7f4 f877 	bl	8000210 <memchr>
 800c122:	2800      	cmp	r0, #0
 800c124:	d034      	beq.n	800c190 <_vfiprintf_r+0x1f8>
 800c126:	4b25      	ldr	r3, [pc, #148]	; (800c1bc <_vfiprintf_r+0x224>)
 800c128:	bb03      	cbnz	r3, 800c16c <_vfiprintf_r+0x1d4>
 800c12a:	9b03      	ldr	r3, [sp, #12]
 800c12c:	3307      	adds	r3, #7
 800c12e:	f023 0307 	bic.w	r3, r3, #7
 800c132:	3308      	adds	r3, #8
 800c134:	9303      	str	r3, [sp, #12]
 800c136:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c138:	444b      	add	r3, r9
 800c13a:	9309      	str	r3, [sp, #36]	; 0x24
 800c13c:	e74c      	b.n	800bfd8 <_vfiprintf_r+0x40>
 800c13e:	fb00 3202 	mla	r2, r0, r2, r3
 800c142:	2101      	movs	r1, #1
 800c144:	e786      	b.n	800c054 <_vfiprintf_r+0xbc>
 800c146:	2300      	movs	r3, #0
 800c148:	9305      	str	r3, [sp, #20]
 800c14a:	4618      	mov	r0, r3
 800c14c:	250a      	movs	r5, #10
 800c14e:	4688      	mov	r8, r1
 800c150:	3101      	adds	r1, #1
 800c152:	f898 2000 	ldrb.w	r2, [r8]
 800c156:	3a30      	subs	r2, #48	; 0x30
 800c158:	2a09      	cmp	r2, #9
 800c15a:	d903      	bls.n	800c164 <_vfiprintf_r+0x1cc>
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d0c5      	beq.n	800c0ec <_vfiprintf_r+0x154>
 800c160:	9005      	str	r0, [sp, #20]
 800c162:	e7c3      	b.n	800c0ec <_vfiprintf_r+0x154>
 800c164:	fb05 2000 	mla	r0, r5, r0, r2
 800c168:	2301      	movs	r3, #1
 800c16a:	e7f0      	b.n	800c14e <_vfiprintf_r+0x1b6>
 800c16c:	ab03      	add	r3, sp, #12
 800c16e:	9300      	str	r3, [sp, #0]
 800c170:	4622      	mov	r2, r4
 800c172:	4b13      	ldr	r3, [pc, #76]	; (800c1c0 <_vfiprintf_r+0x228>)
 800c174:	a904      	add	r1, sp, #16
 800c176:	4630      	mov	r0, r6
 800c178:	f3af 8000 	nop.w
 800c17c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c180:	4681      	mov	r9, r0
 800c182:	d1d8      	bne.n	800c136 <_vfiprintf_r+0x19e>
 800c184:	89a3      	ldrh	r3, [r4, #12]
 800c186:	065b      	lsls	r3, r3, #25
 800c188:	f53f af7d 	bmi.w	800c086 <_vfiprintf_r+0xee>
 800c18c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c18e:	e77c      	b.n	800c08a <_vfiprintf_r+0xf2>
 800c190:	ab03      	add	r3, sp, #12
 800c192:	9300      	str	r3, [sp, #0]
 800c194:	4622      	mov	r2, r4
 800c196:	4b0a      	ldr	r3, [pc, #40]	; (800c1c0 <_vfiprintf_r+0x228>)
 800c198:	a904      	add	r1, sp, #16
 800c19a:	4630      	mov	r0, r6
 800c19c:	f000 f888 	bl	800c2b0 <_printf_i>
 800c1a0:	e7ec      	b.n	800c17c <_vfiprintf_r+0x1e4>
 800c1a2:	bf00      	nop
 800c1a4:	0800cc38 	.word	0x0800cc38
 800c1a8:	0800cc7c 	.word	0x0800cc7c
 800c1ac:	0800cc58 	.word	0x0800cc58
 800c1b0:	0800cc18 	.word	0x0800cc18
 800c1b4:	0800cc82 	.word	0x0800cc82
 800c1b8:	0800cc86 	.word	0x0800cc86
 800c1bc:	00000000 	.word	0x00000000
 800c1c0:	0800bf75 	.word	0x0800bf75

0800c1c4 <_printf_common>:
 800c1c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1c8:	4691      	mov	r9, r2
 800c1ca:	461f      	mov	r7, r3
 800c1cc:	688a      	ldr	r2, [r1, #8]
 800c1ce:	690b      	ldr	r3, [r1, #16]
 800c1d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c1d4:	4293      	cmp	r3, r2
 800c1d6:	bfb8      	it	lt
 800c1d8:	4613      	movlt	r3, r2
 800c1da:	f8c9 3000 	str.w	r3, [r9]
 800c1de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c1e2:	4606      	mov	r6, r0
 800c1e4:	460c      	mov	r4, r1
 800c1e6:	b112      	cbz	r2, 800c1ee <_printf_common+0x2a>
 800c1e8:	3301      	adds	r3, #1
 800c1ea:	f8c9 3000 	str.w	r3, [r9]
 800c1ee:	6823      	ldr	r3, [r4, #0]
 800c1f0:	0699      	lsls	r1, r3, #26
 800c1f2:	bf42      	ittt	mi
 800c1f4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c1f8:	3302      	addmi	r3, #2
 800c1fa:	f8c9 3000 	strmi.w	r3, [r9]
 800c1fe:	6825      	ldr	r5, [r4, #0]
 800c200:	f015 0506 	ands.w	r5, r5, #6
 800c204:	d107      	bne.n	800c216 <_printf_common+0x52>
 800c206:	f104 0a19 	add.w	sl, r4, #25
 800c20a:	68e3      	ldr	r3, [r4, #12]
 800c20c:	f8d9 2000 	ldr.w	r2, [r9]
 800c210:	1a9b      	subs	r3, r3, r2
 800c212:	429d      	cmp	r5, r3
 800c214:	db29      	blt.n	800c26a <_printf_common+0xa6>
 800c216:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c21a:	6822      	ldr	r2, [r4, #0]
 800c21c:	3300      	adds	r3, #0
 800c21e:	bf18      	it	ne
 800c220:	2301      	movne	r3, #1
 800c222:	0692      	lsls	r2, r2, #26
 800c224:	d42e      	bmi.n	800c284 <_printf_common+0xc0>
 800c226:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c22a:	4639      	mov	r1, r7
 800c22c:	4630      	mov	r0, r6
 800c22e:	47c0      	blx	r8
 800c230:	3001      	adds	r0, #1
 800c232:	d021      	beq.n	800c278 <_printf_common+0xb4>
 800c234:	6823      	ldr	r3, [r4, #0]
 800c236:	68e5      	ldr	r5, [r4, #12]
 800c238:	f8d9 2000 	ldr.w	r2, [r9]
 800c23c:	f003 0306 	and.w	r3, r3, #6
 800c240:	2b04      	cmp	r3, #4
 800c242:	bf08      	it	eq
 800c244:	1aad      	subeq	r5, r5, r2
 800c246:	68a3      	ldr	r3, [r4, #8]
 800c248:	6922      	ldr	r2, [r4, #16]
 800c24a:	bf0c      	ite	eq
 800c24c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c250:	2500      	movne	r5, #0
 800c252:	4293      	cmp	r3, r2
 800c254:	bfc4      	itt	gt
 800c256:	1a9b      	subgt	r3, r3, r2
 800c258:	18ed      	addgt	r5, r5, r3
 800c25a:	f04f 0900 	mov.w	r9, #0
 800c25e:	341a      	adds	r4, #26
 800c260:	454d      	cmp	r5, r9
 800c262:	d11b      	bne.n	800c29c <_printf_common+0xd8>
 800c264:	2000      	movs	r0, #0
 800c266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c26a:	2301      	movs	r3, #1
 800c26c:	4652      	mov	r2, sl
 800c26e:	4639      	mov	r1, r7
 800c270:	4630      	mov	r0, r6
 800c272:	47c0      	blx	r8
 800c274:	3001      	adds	r0, #1
 800c276:	d103      	bne.n	800c280 <_printf_common+0xbc>
 800c278:	f04f 30ff 	mov.w	r0, #4294967295
 800c27c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c280:	3501      	adds	r5, #1
 800c282:	e7c2      	b.n	800c20a <_printf_common+0x46>
 800c284:	18e1      	adds	r1, r4, r3
 800c286:	1c5a      	adds	r2, r3, #1
 800c288:	2030      	movs	r0, #48	; 0x30
 800c28a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c28e:	4422      	add	r2, r4
 800c290:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c294:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c298:	3302      	adds	r3, #2
 800c29a:	e7c4      	b.n	800c226 <_printf_common+0x62>
 800c29c:	2301      	movs	r3, #1
 800c29e:	4622      	mov	r2, r4
 800c2a0:	4639      	mov	r1, r7
 800c2a2:	4630      	mov	r0, r6
 800c2a4:	47c0      	blx	r8
 800c2a6:	3001      	adds	r0, #1
 800c2a8:	d0e6      	beq.n	800c278 <_printf_common+0xb4>
 800c2aa:	f109 0901 	add.w	r9, r9, #1
 800c2ae:	e7d7      	b.n	800c260 <_printf_common+0x9c>

0800c2b0 <_printf_i>:
 800c2b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c2b4:	4617      	mov	r7, r2
 800c2b6:	7e0a      	ldrb	r2, [r1, #24]
 800c2b8:	b085      	sub	sp, #20
 800c2ba:	2a6e      	cmp	r2, #110	; 0x6e
 800c2bc:	4698      	mov	r8, r3
 800c2be:	4606      	mov	r6, r0
 800c2c0:	460c      	mov	r4, r1
 800c2c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c2c4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800c2c8:	f000 80bc 	beq.w	800c444 <_printf_i+0x194>
 800c2cc:	d81a      	bhi.n	800c304 <_printf_i+0x54>
 800c2ce:	2a63      	cmp	r2, #99	; 0x63
 800c2d0:	d02e      	beq.n	800c330 <_printf_i+0x80>
 800c2d2:	d80a      	bhi.n	800c2ea <_printf_i+0x3a>
 800c2d4:	2a00      	cmp	r2, #0
 800c2d6:	f000 80c8 	beq.w	800c46a <_printf_i+0x1ba>
 800c2da:	2a58      	cmp	r2, #88	; 0x58
 800c2dc:	f000 808a 	beq.w	800c3f4 <_printf_i+0x144>
 800c2e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c2e4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800c2e8:	e02a      	b.n	800c340 <_printf_i+0x90>
 800c2ea:	2a64      	cmp	r2, #100	; 0x64
 800c2ec:	d001      	beq.n	800c2f2 <_printf_i+0x42>
 800c2ee:	2a69      	cmp	r2, #105	; 0x69
 800c2f0:	d1f6      	bne.n	800c2e0 <_printf_i+0x30>
 800c2f2:	6821      	ldr	r1, [r4, #0]
 800c2f4:	681a      	ldr	r2, [r3, #0]
 800c2f6:	f011 0f80 	tst.w	r1, #128	; 0x80
 800c2fa:	d023      	beq.n	800c344 <_printf_i+0x94>
 800c2fc:	1d11      	adds	r1, r2, #4
 800c2fe:	6019      	str	r1, [r3, #0]
 800c300:	6813      	ldr	r3, [r2, #0]
 800c302:	e027      	b.n	800c354 <_printf_i+0xa4>
 800c304:	2a73      	cmp	r2, #115	; 0x73
 800c306:	f000 80b4 	beq.w	800c472 <_printf_i+0x1c2>
 800c30a:	d808      	bhi.n	800c31e <_printf_i+0x6e>
 800c30c:	2a6f      	cmp	r2, #111	; 0x6f
 800c30e:	d02a      	beq.n	800c366 <_printf_i+0xb6>
 800c310:	2a70      	cmp	r2, #112	; 0x70
 800c312:	d1e5      	bne.n	800c2e0 <_printf_i+0x30>
 800c314:	680a      	ldr	r2, [r1, #0]
 800c316:	f042 0220 	orr.w	r2, r2, #32
 800c31a:	600a      	str	r2, [r1, #0]
 800c31c:	e003      	b.n	800c326 <_printf_i+0x76>
 800c31e:	2a75      	cmp	r2, #117	; 0x75
 800c320:	d021      	beq.n	800c366 <_printf_i+0xb6>
 800c322:	2a78      	cmp	r2, #120	; 0x78
 800c324:	d1dc      	bne.n	800c2e0 <_printf_i+0x30>
 800c326:	2278      	movs	r2, #120	; 0x78
 800c328:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800c32c:	496e      	ldr	r1, [pc, #440]	; (800c4e8 <_printf_i+0x238>)
 800c32e:	e064      	b.n	800c3fa <_printf_i+0x14a>
 800c330:	681a      	ldr	r2, [r3, #0]
 800c332:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800c336:	1d11      	adds	r1, r2, #4
 800c338:	6019      	str	r1, [r3, #0]
 800c33a:	6813      	ldr	r3, [r2, #0]
 800c33c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c340:	2301      	movs	r3, #1
 800c342:	e0a3      	b.n	800c48c <_printf_i+0x1dc>
 800c344:	f011 0f40 	tst.w	r1, #64	; 0x40
 800c348:	f102 0104 	add.w	r1, r2, #4
 800c34c:	6019      	str	r1, [r3, #0]
 800c34e:	d0d7      	beq.n	800c300 <_printf_i+0x50>
 800c350:	f9b2 3000 	ldrsh.w	r3, [r2]
 800c354:	2b00      	cmp	r3, #0
 800c356:	da03      	bge.n	800c360 <_printf_i+0xb0>
 800c358:	222d      	movs	r2, #45	; 0x2d
 800c35a:	425b      	negs	r3, r3
 800c35c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c360:	4962      	ldr	r1, [pc, #392]	; (800c4ec <_printf_i+0x23c>)
 800c362:	220a      	movs	r2, #10
 800c364:	e017      	b.n	800c396 <_printf_i+0xe6>
 800c366:	6820      	ldr	r0, [r4, #0]
 800c368:	6819      	ldr	r1, [r3, #0]
 800c36a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800c36e:	d003      	beq.n	800c378 <_printf_i+0xc8>
 800c370:	1d08      	adds	r0, r1, #4
 800c372:	6018      	str	r0, [r3, #0]
 800c374:	680b      	ldr	r3, [r1, #0]
 800c376:	e006      	b.n	800c386 <_printf_i+0xd6>
 800c378:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c37c:	f101 0004 	add.w	r0, r1, #4
 800c380:	6018      	str	r0, [r3, #0]
 800c382:	d0f7      	beq.n	800c374 <_printf_i+0xc4>
 800c384:	880b      	ldrh	r3, [r1, #0]
 800c386:	4959      	ldr	r1, [pc, #356]	; (800c4ec <_printf_i+0x23c>)
 800c388:	2a6f      	cmp	r2, #111	; 0x6f
 800c38a:	bf14      	ite	ne
 800c38c:	220a      	movne	r2, #10
 800c38e:	2208      	moveq	r2, #8
 800c390:	2000      	movs	r0, #0
 800c392:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800c396:	6865      	ldr	r5, [r4, #4]
 800c398:	60a5      	str	r5, [r4, #8]
 800c39a:	2d00      	cmp	r5, #0
 800c39c:	f2c0 809c 	blt.w	800c4d8 <_printf_i+0x228>
 800c3a0:	6820      	ldr	r0, [r4, #0]
 800c3a2:	f020 0004 	bic.w	r0, r0, #4
 800c3a6:	6020      	str	r0, [r4, #0]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d13f      	bne.n	800c42c <_printf_i+0x17c>
 800c3ac:	2d00      	cmp	r5, #0
 800c3ae:	f040 8095 	bne.w	800c4dc <_printf_i+0x22c>
 800c3b2:	4675      	mov	r5, lr
 800c3b4:	2a08      	cmp	r2, #8
 800c3b6:	d10b      	bne.n	800c3d0 <_printf_i+0x120>
 800c3b8:	6823      	ldr	r3, [r4, #0]
 800c3ba:	07da      	lsls	r2, r3, #31
 800c3bc:	d508      	bpl.n	800c3d0 <_printf_i+0x120>
 800c3be:	6923      	ldr	r3, [r4, #16]
 800c3c0:	6862      	ldr	r2, [r4, #4]
 800c3c2:	429a      	cmp	r2, r3
 800c3c4:	bfde      	ittt	le
 800c3c6:	2330      	movle	r3, #48	; 0x30
 800c3c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c3cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c3d0:	ebae 0305 	sub.w	r3, lr, r5
 800c3d4:	6123      	str	r3, [r4, #16]
 800c3d6:	f8cd 8000 	str.w	r8, [sp]
 800c3da:	463b      	mov	r3, r7
 800c3dc:	aa03      	add	r2, sp, #12
 800c3de:	4621      	mov	r1, r4
 800c3e0:	4630      	mov	r0, r6
 800c3e2:	f7ff feef 	bl	800c1c4 <_printf_common>
 800c3e6:	3001      	adds	r0, #1
 800c3e8:	d155      	bne.n	800c496 <_printf_i+0x1e6>
 800c3ea:	f04f 30ff 	mov.w	r0, #4294967295
 800c3ee:	b005      	add	sp, #20
 800c3f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c3f4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800c3f8:	493c      	ldr	r1, [pc, #240]	; (800c4ec <_printf_i+0x23c>)
 800c3fa:	6822      	ldr	r2, [r4, #0]
 800c3fc:	6818      	ldr	r0, [r3, #0]
 800c3fe:	f012 0f80 	tst.w	r2, #128	; 0x80
 800c402:	f100 0504 	add.w	r5, r0, #4
 800c406:	601d      	str	r5, [r3, #0]
 800c408:	d001      	beq.n	800c40e <_printf_i+0x15e>
 800c40a:	6803      	ldr	r3, [r0, #0]
 800c40c:	e002      	b.n	800c414 <_printf_i+0x164>
 800c40e:	0655      	lsls	r5, r2, #25
 800c410:	d5fb      	bpl.n	800c40a <_printf_i+0x15a>
 800c412:	8803      	ldrh	r3, [r0, #0]
 800c414:	07d0      	lsls	r0, r2, #31
 800c416:	bf44      	itt	mi
 800c418:	f042 0220 	orrmi.w	r2, r2, #32
 800c41c:	6022      	strmi	r2, [r4, #0]
 800c41e:	b91b      	cbnz	r3, 800c428 <_printf_i+0x178>
 800c420:	6822      	ldr	r2, [r4, #0]
 800c422:	f022 0220 	bic.w	r2, r2, #32
 800c426:	6022      	str	r2, [r4, #0]
 800c428:	2210      	movs	r2, #16
 800c42a:	e7b1      	b.n	800c390 <_printf_i+0xe0>
 800c42c:	4675      	mov	r5, lr
 800c42e:	fbb3 f0f2 	udiv	r0, r3, r2
 800c432:	fb02 3310 	mls	r3, r2, r0, r3
 800c436:	5ccb      	ldrb	r3, [r1, r3]
 800c438:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c43c:	4603      	mov	r3, r0
 800c43e:	2800      	cmp	r0, #0
 800c440:	d1f5      	bne.n	800c42e <_printf_i+0x17e>
 800c442:	e7b7      	b.n	800c3b4 <_printf_i+0x104>
 800c444:	6808      	ldr	r0, [r1, #0]
 800c446:	681a      	ldr	r2, [r3, #0]
 800c448:	6949      	ldr	r1, [r1, #20]
 800c44a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800c44e:	d004      	beq.n	800c45a <_printf_i+0x1aa>
 800c450:	1d10      	adds	r0, r2, #4
 800c452:	6018      	str	r0, [r3, #0]
 800c454:	6813      	ldr	r3, [r2, #0]
 800c456:	6019      	str	r1, [r3, #0]
 800c458:	e007      	b.n	800c46a <_printf_i+0x1ba>
 800c45a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c45e:	f102 0004 	add.w	r0, r2, #4
 800c462:	6018      	str	r0, [r3, #0]
 800c464:	6813      	ldr	r3, [r2, #0]
 800c466:	d0f6      	beq.n	800c456 <_printf_i+0x1a6>
 800c468:	8019      	strh	r1, [r3, #0]
 800c46a:	2300      	movs	r3, #0
 800c46c:	6123      	str	r3, [r4, #16]
 800c46e:	4675      	mov	r5, lr
 800c470:	e7b1      	b.n	800c3d6 <_printf_i+0x126>
 800c472:	681a      	ldr	r2, [r3, #0]
 800c474:	1d11      	adds	r1, r2, #4
 800c476:	6019      	str	r1, [r3, #0]
 800c478:	6815      	ldr	r5, [r2, #0]
 800c47a:	6862      	ldr	r2, [r4, #4]
 800c47c:	2100      	movs	r1, #0
 800c47e:	4628      	mov	r0, r5
 800c480:	f7f3 fec6 	bl	8000210 <memchr>
 800c484:	b108      	cbz	r0, 800c48a <_printf_i+0x1da>
 800c486:	1b40      	subs	r0, r0, r5
 800c488:	6060      	str	r0, [r4, #4]
 800c48a:	6863      	ldr	r3, [r4, #4]
 800c48c:	6123      	str	r3, [r4, #16]
 800c48e:	2300      	movs	r3, #0
 800c490:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c494:	e79f      	b.n	800c3d6 <_printf_i+0x126>
 800c496:	6923      	ldr	r3, [r4, #16]
 800c498:	462a      	mov	r2, r5
 800c49a:	4639      	mov	r1, r7
 800c49c:	4630      	mov	r0, r6
 800c49e:	47c0      	blx	r8
 800c4a0:	3001      	adds	r0, #1
 800c4a2:	d0a2      	beq.n	800c3ea <_printf_i+0x13a>
 800c4a4:	6823      	ldr	r3, [r4, #0]
 800c4a6:	079b      	lsls	r3, r3, #30
 800c4a8:	d507      	bpl.n	800c4ba <_printf_i+0x20a>
 800c4aa:	2500      	movs	r5, #0
 800c4ac:	f104 0919 	add.w	r9, r4, #25
 800c4b0:	68e3      	ldr	r3, [r4, #12]
 800c4b2:	9a03      	ldr	r2, [sp, #12]
 800c4b4:	1a9b      	subs	r3, r3, r2
 800c4b6:	429d      	cmp	r5, r3
 800c4b8:	db05      	blt.n	800c4c6 <_printf_i+0x216>
 800c4ba:	68e0      	ldr	r0, [r4, #12]
 800c4bc:	9b03      	ldr	r3, [sp, #12]
 800c4be:	4298      	cmp	r0, r3
 800c4c0:	bfb8      	it	lt
 800c4c2:	4618      	movlt	r0, r3
 800c4c4:	e793      	b.n	800c3ee <_printf_i+0x13e>
 800c4c6:	2301      	movs	r3, #1
 800c4c8:	464a      	mov	r2, r9
 800c4ca:	4639      	mov	r1, r7
 800c4cc:	4630      	mov	r0, r6
 800c4ce:	47c0      	blx	r8
 800c4d0:	3001      	adds	r0, #1
 800c4d2:	d08a      	beq.n	800c3ea <_printf_i+0x13a>
 800c4d4:	3501      	adds	r5, #1
 800c4d6:	e7eb      	b.n	800c4b0 <_printf_i+0x200>
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d1a7      	bne.n	800c42c <_printf_i+0x17c>
 800c4dc:	780b      	ldrb	r3, [r1, #0]
 800c4de:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c4e2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c4e6:	e765      	b.n	800c3b4 <_printf_i+0x104>
 800c4e8:	0800cc9e 	.word	0x0800cc9e
 800c4ec:	0800cc8d 	.word	0x0800cc8d

0800c4f0 <__sread>:
 800c4f0:	b510      	push	{r4, lr}
 800c4f2:	460c      	mov	r4, r1
 800c4f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4f8:	f000 fa48 	bl	800c98c <_read_r>
 800c4fc:	2800      	cmp	r0, #0
 800c4fe:	bfab      	itete	ge
 800c500:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c502:	89a3      	ldrhlt	r3, [r4, #12]
 800c504:	181b      	addge	r3, r3, r0
 800c506:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c50a:	bfac      	ite	ge
 800c50c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c50e:	81a3      	strhlt	r3, [r4, #12]
 800c510:	bd10      	pop	{r4, pc}

0800c512 <__swrite>:
 800c512:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c516:	461f      	mov	r7, r3
 800c518:	898b      	ldrh	r3, [r1, #12]
 800c51a:	05db      	lsls	r3, r3, #23
 800c51c:	4605      	mov	r5, r0
 800c51e:	460c      	mov	r4, r1
 800c520:	4616      	mov	r6, r2
 800c522:	d505      	bpl.n	800c530 <__swrite+0x1e>
 800c524:	2302      	movs	r3, #2
 800c526:	2200      	movs	r2, #0
 800c528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c52c:	f000 f9b8 	bl	800c8a0 <_lseek_r>
 800c530:	89a3      	ldrh	r3, [r4, #12]
 800c532:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c536:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c53a:	81a3      	strh	r3, [r4, #12]
 800c53c:	4632      	mov	r2, r6
 800c53e:	463b      	mov	r3, r7
 800c540:	4628      	mov	r0, r5
 800c542:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c546:	f000 b869 	b.w	800c61c <_write_r>

0800c54a <__sseek>:
 800c54a:	b510      	push	{r4, lr}
 800c54c:	460c      	mov	r4, r1
 800c54e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c552:	f000 f9a5 	bl	800c8a0 <_lseek_r>
 800c556:	1c43      	adds	r3, r0, #1
 800c558:	89a3      	ldrh	r3, [r4, #12]
 800c55a:	bf15      	itete	ne
 800c55c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c55e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c562:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c566:	81a3      	strheq	r3, [r4, #12]
 800c568:	bf18      	it	ne
 800c56a:	81a3      	strhne	r3, [r4, #12]
 800c56c:	bd10      	pop	{r4, pc}

0800c56e <__sclose>:
 800c56e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c572:	f000 b8d3 	b.w	800c71c <_close_r>
	...

0800c578 <__swbuf_r>:
 800c578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c57a:	460e      	mov	r6, r1
 800c57c:	4614      	mov	r4, r2
 800c57e:	4605      	mov	r5, r0
 800c580:	b118      	cbz	r0, 800c58a <__swbuf_r+0x12>
 800c582:	6983      	ldr	r3, [r0, #24]
 800c584:	b90b      	cbnz	r3, 800c58a <__swbuf_r+0x12>
 800c586:	f7ff fc51 	bl	800be2c <__sinit>
 800c58a:	4b21      	ldr	r3, [pc, #132]	; (800c610 <__swbuf_r+0x98>)
 800c58c:	429c      	cmp	r4, r3
 800c58e:	d12a      	bne.n	800c5e6 <__swbuf_r+0x6e>
 800c590:	686c      	ldr	r4, [r5, #4]
 800c592:	69a3      	ldr	r3, [r4, #24]
 800c594:	60a3      	str	r3, [r4, #8]
 800c596:	89a3      	ldrh	r3, [r4, #12]
 800c598:	071a      	lsls	r2, r3, #28
 800c59a:	d52e      	bpl.n	800c5fa <__swbuf_r+0x82>
 800c59c:	6923      	ldr	r3, [r4, #16]
 800c59e:	b363      	cbz	r3, 800c5fa <__swbuf_r+0x82>
 800c5a0:	6923      	ldr	r3, [r4, #16]
 800c5a2:	6820      	ldr	r0, [r4, #0]
 800c5a4:	1ac0      	subs	r0, r0, r3
 800c5a6:	6963      	ldr	r3, [r4, #20]
 800c5a8:	b2f6      	uxtb	r6, r6
 800c5aa:	4298      	cmp	r0, r3
 800c5ac:	4637      	mov	r7, r6
 800c5ae:	db04      	blt.n	800c5ba <__swbuf_r+0x42>
 800c5b0:	4621      	mov	r1, r4
 800c5b2:	4628      	mov	r0, r5
 800c5b4:	f000 f94a 	bl	800c84c <_fflush_r>
 800c5b8:	bb28      	cbnz	r0, 800c606 <__swbuf_r+0x8e>
 800c5ba:	68a3      	ldr	r3, [r4, #8]
 800c5bc:	3b01      	subs	r3, #1
 800c5be:	60a3      	str	r3, [r4, #8]
 800c5c0:	6823      	ldr	r3, [r4, #0]
 800c5c2:	1c5a      	adds	r2, r3, #1
 800c5c4:	6022      	str	r2, [r4, #0]
 800c5c6:	701e      	strb	r6, [r3, #0]
 800c5c8:	6963      	ldr	r3, [r4, #20]
 800c5ca:	3001      	adds	r0, #1
 800c5cc:	4298      	cmp	r0, r3
 800c5ce:	d004      	beq.n	800c5da <__swbuf_r+0x62>
 800c5d0:	89a3      	ldrh	r3, [r4, #12]
 800c5d2:	07db      	lsls	r3, r3, #31
 800c5d4:	d519      	bpl.n	800c60a <__swbuf_r+0x92>
 800c5d6:	2e0a      	cmp	r6, #10
 800c5d8:	d117      	bne.n	800c60a <__swbuf_r+0x92>
 800c5da:	4621      	mov	r1, r4
 800c5dc:	4628      	mov	r0, r5
 800c5de:	f000 f935 	bl	800c84c <_fflush_r>
 800c5e2:	b190      	cbz	r0, 800c60a <__swbuf_r+0x92>
 800c5e4:	e00f      	b.n	800c606 <__swbuf_r+0x8e>
 800c5e6:	4b0b      	ldr	r3, [pc, #44]	; (800c614 <__swbuf_r+0x9c>)
 800c5e8:	429c      	cmp	r4, r3
 800c5ea:	d101      	bne.n	800c5f0 <__swbuf_r+0x78>
 800c5ec:	68ac      	ldr	r4, [r5, #8]
 800c5ee:	e7d0      	b.n	800c592 <__swbuf_r+0x1a>
 800c5f0:	4b09      	ldr	r3, [pc, #36]	; (800c618 <__swbuf_r+0xa0>)
 800c5f2:	429c      	cmp	r4, r3
 800c5f4:	bf08      	it	eq
 800c5f6:	68ec      	ldreq	r4, [r5, #12]
 800c5f8:	e7cb      	b.n	800c592 <__swbuf_r+0x1a>
 800c5fa:	4621      	mov	r1, r4
 800c5fc:	4628      	mov	r0, r5
 800c5fe:	f000 f81f 	bl	800c640 <__swsetup_r>
 800c602:	2800      	cmp	r0, #0
 800c604:	d0cc      	beq.n	800c5a0 <__swbuf_r+0x28>
 800c606:	f04f 37ff 	mov.w	r7, #4294967295
 800c60a:	4638      	mov	r0, r7
 800c60c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c60e:	bf00      	nop
 800c610:	0800cc38 	.word	0x0800cc38
 800c614:	0800cc58 	.word	0x0800cc58
 800c618:	0800cc18 	.word	0x0800cc18

0800c61c <_write_r>:
 800c61c:	b538      	push	{r3, r4, r5, lr}
 800c61e:	4c07      	ldr	r4, [pc, #28]	; (800c63c <_write_r+0x20>)
 800c620:	4605      	mov	r5, r0
 800c622:	4608      	mov	r0, r1
 800c624:	4611      	mov	r1, r2
 800c626:	2200      	movs	r2, #0
 800c628:	6022      	str	r2, [r4, #0]
 800c62a:	461a      	mov	r2, r3
 800c62c:	f7ff f822 	bl	800b674 <_write>
 800c630:	1c43      	adds	r3, r0, #1
 800c632:	d102      	bne.n	800c63a <_write_r+0x1e>
 800c634:	6823      	ldr	r3, [r4, #0]
 800c636:	b103      	cbz	r3, 800c63a <_write_r+0x1e>
 800c638:	602b      	str	r3, [r5, #0]
 800c63a:	bd38      	pop	{r3, r4, r5, pc}
 800c63c:	20007740 	.word	0x20007740

0800c640 <__swsetup_r>:
 800c640:	4b32      	ldr	r3, [pc, #200]	; (800c70c <__swsetup_r+0xcc>)
 800c642:	b570      	push	{r4, r5, r6, lr}
 800c644:	681d      	ldr	r5, [r3, #0]
 800c646:	4606      	mov	r6, r0
 800c648:	460c      	mov	r4, r1
 800c64a:	b125      	cbz	r5, 800c656 <__swsetup_r+0x16>
 800c64c:	69ab      	ldr	r3, [r5, #24]
 800c64e:	b913      	cbnz	r3, 800c656 <__swsetup_r+0x16>
 800c650:	4628      	mov	r0, r5
 800c652:	f7ff fbeb 	bl	800be2c <__sinit>
 800c656:	4b2e      	ldr	r3, [pc, #184]	; (800c710 <__swsetup_r+0xd0>)
 800c658:	429c      	cmp	r4, r3
 800c65a:	d10f      	bne.n	800c67c <__swsetup_r+0x3c>
 800c65c:	686c      	ldr	r4, [r5, #4]
 800c65e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c662:	b29a      	uxth	r2, r3
 800c664:	0715      	lsls	r5, r2, #28
 800c666:	d42c      	bmi.n	800c6c2 <__swsetup_r+0x82>
 800c668:	06d0      	lsls	r0, r2, #27
 800c66a:	d411      	bmi.n	800c690 <__swsetup_r+0x50>
 800c66c:	2209      	movs	r2, #9
 800c66e:	6032      	str	r2, [r6, #0]
 800c670:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c674:	81a3      	strh	r3, [r4, #12]
 800c676:	f04f 30ff 	mov.w	r0, #4294967295
 800c67a:	bd70      	pop	{r4, r5, r6, pc}
 800c67c:	4b25      	ldr	r3, [pc, #148]	; (800c714 <__swsetup_r+0xd4>)
 800c67e:	429c      	cmp	r4, r3
 800c680:	d101      	bne.n	800c686 <__swsetup_r+0x46>
 800c682:	68ac      	ldr	r4, [r5, #8]
 800c684:	e7eb      	b.n	800c65e <__swsetup_r+0x1e>
 800c686:	4b24      	ldr	r3, [pc, #144]	; (800c718 <__swsetup_r+0xd8>)
 800c688:	429c      	cmp	r4, r3
 800c68a:	bf08      	it	eq
 800c68c:	68ec      	ldreq	r4, [r5, #12]
 800c68e:	e7e6      	b.n	800c65e <__swsetup_r+0x1e>
 800c690:	0751      	lsls	r1, r2, #29
 800c692:	d512      	bpl.n	800c6ba <__swsetup_r+0x7a>
 800c694:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c696:	b141      	cbz	r1, 800c6aa <__swsetup_r+0x6a>
 800c698:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c69c:	4299      	cmp	r1, r3
 800c69e:	d002      	beq.n	800c6a6 <__swsetup_r+0x66>
 800c6a0:	4630      	mov	r0, r6
 800c6a2:	f7ff fa75 	bl	800bb90 <_free_r>
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	6363      	str	r3, [r4, #52]	; 0x34
 800c6aa:	89a3      	ldrh	r3, [r4, #12]
 800c6ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c6b0:	81a3      	strh	r3, [r4, #12]
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	6063      	str	r3, [r4, #4]
 800c6b6:	6923      	ldr	r3, [r4, #16]
 800c6b8:	6023      	str	r3, [r4, #0]
 800c6ba:	89a3      	ldrh	r3, [r4, #12]
 800c6bc:	f043 0308 	orr.w	r3, r3, #8
 800c6c0:	81a3      	strh	r3, [r4, #12]
 800c6c2:	6923      	ldr	r3, [r4, #16]
 800c6c4:	b94b      	cbnz	r3, 800c6da <__swsetup_r+0x9a>
 800c6c6:	89a3      	ldrh	r3, [r4, #12]
 800c6c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c6cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c6d0:	d003      	beq.n	800c6da <__swsetup_r+0x9a>
 800c6d2:	4621      	mov	r1, r4
 800c6d4:	4630      	mov	r0, r6
 800c6d6:	f000 f919 	bl	800c90c <__smakebuf_r>
 800c6da:	89a2      	ldrh	r2, [r4, #12]
 800c6dc:	f012 0301 	ands.w	r3, r2, #1
 800c6e0:	d00c      	beq.n	800c6fc <__swsetup_r+0xbc>
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	60a3      	str	r3, [r4, #8]
 800c6e6:	6963      	ldr	r3, [r4, #20]
 800c6e8:	425b      	negs	r3, r3
 800c6ea:	61a3      	str	r3, [r4, #24]
 800c6ec:	6923      	ldr	r3, [r4, #16]
 800c6ee:	b953      	cbnz	r3, 800c706 <__swsetup_r+0xc6>
 800c6f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c6f4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800c6f8:	d1ba      	bne.n	800c670 <__swsetup_r+0x30>
 800c6fa:	bd70      	pop	{r4, r5, r6, pc}
 800c6fc:	0792      	lsls	r2, r2, #30
 800c6fe:	bf58      	it	pl
 800c700:	6963      	ldrpl	r3, [r4, #20]
 800c702:	60a3      	str	r3, [r4, #8]
 800c704:	e7f2      	b.n	800c6ec <__swsetup_r+0xac>
 800c706:	2000      	movs	r0, #0
 800c708:	e7f7      	b.n	800c6fa <__swsetup_r+0xba>
 800c70a:	bf00      	nop
 800c70c:	20000030 	.word	0x20000030
 800c710:	0800cc38 	.word	0x0800cc38
 800c714:	0800cc58 	.word	0x0800cc58
 800c718:	0800cc18 	.word	0x0800cc18

0800c71c <_close_r>:
 800c71c:	b538      	push	{r3, r4, r5, lr}
 800c71e:	4c06      	ldr	r4, [pc, #24]	; (800c738 <_close_r+0x1c>)
 800c720:	2300      	movs	r3, #0
 800c722:	4605      	mov	r5, r0
 800c724:	4608      	mov	r0, r1
 800c726:	6023      	str	r3, [r4, #0]
 800c728:	f7fe ffb2 	bl	800b690 <_close>
 800c72c:	1c43      	adds	r3, r0, #1
 800c72e:	d102      	bne.n	800c736 <_close_r+0x1a>
 800c730:	6823      	ldr	r3, [r4, #0]
 800c732:	b103      	cbz	r3, 800c736 <_close_r+0x1a>
 800c734:	602b      	str	r3, [r5, #0]
 800c736:	bd38      	pop	{r3, r4, r5, pc}
 800c738:	20007740 	.word	0x20007740

0800c73c <__sflush_r>:
 800c73c:	898a      	ldrh	r2, [r1, #12]
 800c73e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c742:	4605      	mov	r5, r0
 800c744:	0710      	lsls	r0, r2, #28
 800c746:	460c      	mov	r4, r1
 800c748:	d45a      	bmi.n	800c800 <__sflush_r+0xc4>
 800c74a:	684b      	ldr	r3, [r1, #4]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	dc05      	bgt.n	800c75c <__sflush_r+0x20>
 800c750:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c752:	2b00      	cmp	r3, #0
 800c754:	dc02      	bgt.n	800c75c <__sflush_r+0x20>
 800c756:	2000      	movs	r0, #0
 800c758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c75c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c75e:	2e00      	cmp	r6, #0
 800c760:	d0f9      	beq.n	800c756 <__sflush_r+0x1a>
 800c762:	2300      	movs	r3, #0
 800c764:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c768:	682f      	ldr	r7, [r5, #0]
 800c76a:	602b      	str	r3, [r5, #0]
 800c76c:	d033      	beq.n	800c7d6 <__sflush_r+0x9a>
 800c76e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c770:	89a3      	ldrh	r3, [r4, #12]
 800c772:	075a      	lsls	r2, r3, #29
 800c774:	d505      	bpl.n	800c782 <__sflush_r+0x46>
 800c776:	6863      	ldr	r3, [r4, #4]
 800c778:	1ac0      	subs	r0, r0, r3
 800c77a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c77c:	b10b      	cbz	r3, 800c782 <__sflush_r+0x46>
 800c77e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c780:	1ac0      	subs	r0, r0, r3
 800c782:	2300      	movs	r3, #0
 800c784:	4602      	mov	r2, r0
 800c786:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c788:	6a21      	ldr	r1, [r4, #32]
 800c78a:	4628      	mov	r0, r5
 800c78c:	47b0      	blx	r6
 800c78e:	1c43      	adds	r3, r0, #1
 800c790:	89a3      	ldrh	r3, [r4, #12]
 800c792:	d106      	bne.n	800c7a2 <__sflush_r+0x66>
 800c794:	6829      	ldr	r1, [r5, #0]
 800c796:	291d      	cmp	r1, #29
 800c798:	d84b      	bhi.n	800c832 <__sflush_r+0xf6>
 800c79a:	4a2b      	ldr	r2, [pc, #172]	; (800c848 <__sflush_r+0x10c>)
 800c79c:	40ca      	lsrs	r2, r1
 800c79e:	07d6      	lsls	r6, r2, #31
 800c7a0:	d547      	bpl.n	800c832 <__sflush_r+0xf6>
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	6062      	str	r2, [r4, #4]
 800c7a6:	04d9      	lsls	r1, r3, #19
 800c7a8:	6922      	ldr	r2, [r4, #16]
 800c7aa:	6022      	str	r2, [r4, #0]
 800c7ac:	d504      	bpl.n	800c7b8 <__sflush_r+0x7c>
 800c7ae:	1c42      	adds	r2, r0, #1
 800c7b0:	d101      	bne.n	800c7b6 <__sflush_r+0x7a>
 800c7b2:	682b      	ldr	r3, [r5, #0]
 800c7b4:	b903      	cbnz	r3, 800c7b8 <__sflush_r+0x7c>
 800c7b6:	6560      	str	r0, [r4, #84]	; 0x54
 800c7b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c7ba:	602f      	str	r7, [r5, #0]
 800c7bc:	2900      	cmp	r1, #0
 800c7be:	d0ca      	beq.n	800c756 <__sflush_r+0x1a>
 800c7c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c7c4:	4299      	cmp	r1, r3
 800c7c6:	d002      	beq.n	800c7ce <__sflush_r+0x92>
 800c7c8:	4628      	mov	r0, r5
 800c7ca:	f7ff f9e1 	bl	800bb90 <_free_r>
 800c7ce:	2000      	movs	r0, #0
 800c7d0:	6360      	str	r0, [r4, #52]	; 0x34
 800c7d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7d6:	6a21      	ldr	r1, [r4, #32]
 800c7d8:	2301      	movs	r3, #1
 800c7da:	4628      	mov	r0, r5
 800c7dc:	47b0      	blx	r6
 800c7de:	1c41      	adds	r1, r0, #1
 800c7e0:	d1c6      	bne.n	800c770 <__sflush_r+0x34>
 800c7e2:	682b      	ldr	r3, [r5, #0]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d0c3      	beq.n	800c770 <__sflush_r+0x34>
 800c7e8:	2b1d      	cmp	r3, #29
 800c7ea:	d001      	beq.n	800c7f0 <__sflush_r+0xb4>
 800c7ec:	2b16      	cmp	r3, #22
 800c7ee:	d101      	bne.n	800c7f4 <__sflush_r+0xb8>
 800c7f0:	602f      	str	r7, [r5, #0]
 800c7f2:	e7b0      	b.n	800c756 <__sflush_r+0x1a>
 800c7f4:	89a3      	ldrh	r3, [r4, #12]
 800c7f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7fa:	81a3      	strh	r3, [r4, #12]
 800c7fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c800:	690f      	ldr	r7, [r1, #16]
 800c802:	2f00      	cmp	r7, #0
 800c804:	d0a7      	beq.n	800c756 <__sflush_r+0x1a>
 800c806:	0793      	lsls	r3, r2, #30
 800c808:	680e      	ldr	r6, [r1, #0]
 800c80a:	bf08      	it	eq
 800c80c:	694b      	ldreq	r3, [r1, #20]
 800c80e:	600f      	str	r7, [r1, #0]
 800c810:	bf18      	it	ne
 800c812:	2300      	movne	r3, #0
 800c814:	eba6 0807 	sub.w	r8, r6, r7
 800c818:	608b      	str	r3, [r1, #8]
 800c81a:	f1b8 0f00 	cmp.w	r8, #0
 800c81e:	dd9a      	ble.n	800c756 <__sflush_r+0x1a>
 800c820:	4643      	mov	r3, r8
 800c822:	463a      	mov	r2, r7
 800c824:	6a21      	ldr	r1, [r4, #32]
 800c826:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c828:	4628      	mov	r0, r5
 800c82a:	47b0      	blx	r6
 800c82c:	2800      	cmp	r0, #0
 800c82e:	dc07      	bgt.n	800c840 <__sflush_r+0x104>
 800c830:	89a3      	ldrh	r3, [r4, #12]
 800c832:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c836:	81a3      	strh	r3, [r4, #12]
 800c838:	f04f 30ff 	mov.w	r0, #4294967295
 800c83c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c840:	4407      	add	r7, r0
 800c842:	eba8 0800 	sub.w	r8, r8, r0
 800c846:	e7e8      	b.n	800c81a <__sflush_r+0xde>
 800c848:	20400001 	.word	0x20400001

0800c84c <_fflush_r>:
 800c84c:	b538      	push	{r3, r4, r5, lr}
 800c84e:	690b      	ldr	r3, [r1, #16]
 800c850:	4605      	mov	r5, r0
 800c852:	460c      	mov	r4, r1
 800c854:	b1db      	cbz	r3, 800c88e <_fflush_r+0x42>
 800c856:	b118      	cbz	r0, 800c860 <_fflush_r+0x14>
 800c858:	6983      	ldr	r3, [r0, #24]
 800c85a:	b90b      	cbnz	r3, 800c860 <_fflush_r+0x14>
 800c85c:	f7ff fae6 	bl	800be2c <__sinit>
 800c860:	4b0c      	ldr	r3, [pc, #48]	; (800c894 <_fflush_r+0x48>)
 800c862:	429c      	cmp	r4, r3
 800c864:	d109      	bne.n	800c87a <_fflush_r+0x2e>
 800c866:	686c      	ldr	r4, [r5, #4]
 800c868:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c86c:	b17b      	cbz	r3, 800c88e <_fflush_r+0x42>
 800c86e:	4621      	mov	r1, r4
 800c870:	4628      	mov	r0, r5
 800c872:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c876:	f7ff bf61 	b.w	800c73c <__sflush_r>
 800c87a:	4b07      	ldr	r3, [pc, #28]	; (800c898 <_fflush_r+0x4c>)
 800c87c:	429c      	cmp	r4, r3
 800c87e:	d101      	bne.n	800c884 <_fflush_r+0x38>
 800c880:	68ac      	ldr	r4, [r5, #8]
 800c882:	e7f1      	b.n	800c868 <_fflush_r+0x1c>
 800c884:	4b05      	ldr	r3, [pc, #20]	; (800c89c <_fflush_r+0x50>)
 800c886:	429c      	cmp	r4, r3
 800c888:	bf08      	it	eq
 800c88a:	68ec      	ldreq	r4, [r5, #12]
 800c88c:	e7ec      	b.n	800c868 <_fflush_r+0x1c>
 800c88e:	2000      	movs	r0, #0
 800c890:	bd38      	pop	{r3, r4, r5, pc}
 800c892:	bf00      	nop
 800c894:	0800cc38 	.word	0x0800cc38
 800c898:	0800cc58 	.word	0x0800cc58
 800c89c:	0800cc18 	.word	0x0800cc18

0800c8a0 <_lseek_r>:
 800c8a0:	b538      	push	{r3, r4, r5, lr}
 800c8a2:	4c07      	ldr	r4, [pc, #28]	; (800c8c0 <_lseek_r+0x20>)
 800c8a4:	4605      	mov	r5, r0
 800c8a6:	4608      	mov	r0, r1
 800c8a8:	4611      	mov	r1, r2
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	6022      	str	r2, [r4, #0]
 800c8ae:	461a      	mov	r2, r3
 800c8b0:	f7fe fef8 	bl	800b6a4 <_lseek>
 800c8b4:	1c43      	adds	r3, r0, #1
 800c8b6:	d102      	bne.n	800c8be <_lseek_r+0x1e>
 800c8b8:	6823      	ldr	r3, [r4, #0]
 800c8ba:	b103      	cbz	r3, 800c8be <_lseek_r+0x1e>
 800c8bc:	602b      	str	r3, [r5, #0]
 800c8be:	bd38      	pop	{r3, r4, r5, pc}
 800c8c0:	20007740 	.word	0x20007740

0800c8c4 <__swhatbuf_r>:
 800c8c4:	b570      	push	{r4, r5, r6, lr}
 800c8c6:	460e      	mov	r6, r1
 800c8c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8cc:	2900      	cmp	r1, #0
 800c8ce:	b090      	sub	sp, #64	; 0x40
 800c8d0:	4614      	mov	r4, r2
 800c8d2:	461d      	mov	r5, r3
 800c8d4:	da07      	bge.n	800c8e6 <__swhatbuf_r+0x22>
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	602b      	str	r3, [r5, #0]
 800c8da:	89b3      	ldrh	r3, [r6, #12]
 800c8dc:	061a      	lsls	r2, r3, #24
 800c8de:	d410      	bmi.n	800c902 <__swhatbuf_r+0x3e>
 800c8e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c8e4:	e00e      	b.n	800c904 <__swhatbuf_r+0x40>
 800c8e6:	aa01      	add	r2, sp, #4
 800c8e8:	f000 f862 	bl	800c9b0 <_fstat_r>
 800c8ec:	2800      	cmp	r0, #0
 800c8ee:	dbf2      	blt.n	800c8d6 <__swhatbuf_r+0x12>
 800c8f0:	9a02      	ldr	r2, [sp, #8]
 800c8f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c8f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c8fa:	425a      	negs	r2, r3
 800c8fc:	415a      	adcs	r2, r3
 800c8fe:	602a      	str	r2, [r5, #0]
 800c900:	e7ee      	b.n	800c8e0 <__swhatbuf_r+0x1c>
 800c902:	2340      	movs	r3, #64	; 0x40
 800c904:	2000      	movs	r0, #0
 800c906:	6023      	str	r3, [r4, #0]
 800c908:	b010      	add	sp, #64	; 0x40
 800c90a:	bd70      	pop	{r4, r5, r6, pc}

0800c90c <__smakebuf_r>:
 800c90c:	898b      	ldrh	r3, [r1, #12]
 800c90e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c910:	079d      	lsls	r5, r3, #30
 800c912:	4606      	mov	r6, r0
 800c914:	460c      	mov	r4, r1
 800c916:	d507      	bpl.n	800c928 <__smakebuf_r+0x1c>
 800c918:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c91c:	6023      	str	r3, [r4, #0]
 800c91e:	6123      	str	r3, [r4, #16]
 800c920:	2301      	movs	r3, #1
 800c922:	6163      	str	r3, [r4, #20]
 800c924:	b002      	add	sp, #8
 800c926:	bd70      	pop	{r4, r5, r6, pc}
 800c928:	ab01      	add	r3, sp, #4
 800c92a:	466a      	mov	r2, sp
 800c92c:	f7ff ffca 	bl	800c8c4 <__swhatbuf_r>
 800c930:	9900      	ldr	r1, [sp, #0]
 800c932:	4605      	mov	r5, r0
 800c934:	4630      	mov	r0, r6
 800c936:	f7ff f979 	bl	800bc2c <_malloc_r>
 800c93a:	b948      	cbnz	r0, 800c950 <__smakebuf_r+0x44>
 800c93c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c940:	059a      	lsls	r2, r3, #22
 800c942:	d4ef      	bmi.n	800c924 <__smakebuf_r+0x18>
 800c944:	f023 0303 	bic.w	r3, r3, #3
 800c948:	f043 0302 	orr.w	r3, r3, #2
 800c94c:	81a3      	strh	r3, [r4, #12]
 800c94e:	e7e3      	b.n	800c918 <__smakebuf_r+0xc>
 800c950:	4b0d      	ldr	r3, [pc, #52]	; (800c988 <__smakebuf_r+0x7c>)
 800c952:	62b3      	str	r3, [r6, #40]	; 0x28
 800c954:	89a3      	ldrh	r3, [r4, #12]
 800c956:	6020      	str	r0, [r4, #0]
 800c958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c95c:	81a3      	strh	r3, [r4, #12]
 800c95e:	9b00      	ldr	r3, [sp, #0]
 800c960:	6163      	str	r3, [r4, #20]
 800c962:	9b01      	ldr	r3, [sp, #4]
 800c964:	6120      	str	r0, [r4, #16]
 800c966:	b15b      	cbz	r3, 800c980 <__smakebuf_r+0x74>
 800c968:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c96c:	4630      	mov	r0, r6
 800c96e:	f000 f831 	bl	800c9d4 <_isatty_r>
 800c972:	b128      	cbz	r0, 800c980 <__smakebuf_r+0x74>
 800c974:	89a3      	ldrh	r3, [r4, #12]
 800c976:	f023 0303 	bic.w	r3, r3, #3
 800c97a:	f043 0301 	orr.w	r3, r3, #1
 800c97e:	81a3      	strh	r3, [r4, #12]
 800c980:	89a3      	ldrh	r3, [r4, #12]
 800c982:	431d      	orrs	r5, r3
 800c984:	81a5      	strh	r5, [r4, #12]
 800c986:	e7cd      	b.n	800c924 <__smakebuf_r+0x18>
 800c988:	0800bdad 	.word	0x0800bdad

0800c98c <_read_r>:
 800c98c:	b538      	push	{r3, r4, r5, lr}
 800c98e:	4c07      	ldr	r4, [pc, #28]	; (800c9ac <_read_r+0x20>)
 800c990:	4605      	mov	r5, r0
 800c992:	4608      	mov	r0, r1
 800c994:	4611      	mov	r1, r2
 800c996:	2200      	movs	r2, #0
 800c998:	6022      	str	r2, [r4, #0]
 800c99a:	461a      	mov	r2, r3
 800c99c:	f7fe fe84 	bl	800b6a8 <_read>
 800c9a0:	1c43      	adds	r3, r0, #1
 800c9a2:	d102      	bne.n	800c9aa <_read_r+0x1e>
 800c9a4:	6823      	ldr	r3, [r4, #0]
 800c9a6:	b103      	cbz	r3, 800c9aa <_read_r+0x1e>
 800c9a8:	602b      	str	r3, [r5, #0]
 800c9aa:	bd38      	pop	{r3, r4, r5, pc}
 800c9ac:	20007740 	.word	0x20007740

0800c9b0 <_fstat_r>:
 800c9b0:	b538      	push	{r3, r4, r5, lr}
 800c9b2:	4c07      	ldr	r4, [pc, #28]	; (800c9d0 <_fstat_r+0x20>)
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	4605      	mov	r5, r0
 800c9b8:	4608      	mov	r0, r1
 800c9ba:	4611      	mov	r1, r2
 800c9bc:	6023      	str	r3, [r4, #0]
 800c9be:	f7fe fe6a 	bl	800b696 <_fstat>
 800c9c2:	1c43      	adds	r3, r0, #1
 800c9c4:	d102      	bne.n	800c9cc <_fstat_r+0x1c>
 800c9c6:	6823      	ldr	r3, [r4, #0]
 800c9c8:	b103      	cbz	r3, 800c9cc <_fstat_r+0x1c>
 800c9ca:	602b      	str	r3, [r5, #0]
 800c9cc:	bd38      	pop	{r3, r4, r5, pc}
 800c9ce:	bf00      	nop
 800c9d0:	20007740 	.word	0x20007740

0800c9d4 <_isatty_r>:
 800c9d4:	b538      	push	{r3, r4, r5, lr}
 800c9d6:	4c06      	ldr	r4, [pc, #24]	; (800c9f0 <_isatty_r+0x1c>)
 800c9d8:	2300      	movs	r3, #0
 800c9da:	4605      	mov	r5, r0
 800c9dc:	4608      	mov	r0, r1
 800c9de:	6023      	str	r3, [r4, #0]
 800c9e0:	f7fe fe5e 	bl	800b6a0 <_isatty>
 800c9e4:	1c43      	adds	r3, r0, #1
 800c9e6:	d102      	bne.n	800c9ee <_isatty_r+0x1a>
 800c9e8:	6823      	ldr	r3, [r4, #0]
 800c9ea:	b103      	cbz	r3, 800c9ee <_isatty_r+0x1a>
 800c9ec:	602b      	str	r3, [r5, #0]
 800c9ee:	bd38      	pop	{r3, r4, r5, pc}
 800c9f0:	20007740 	.word	0x20007740

0800c9f4 <_init>:
 800c9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9f6:	bf00      	nop
 800c9f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9fa:	bc08      	pop	{r3}
 800c9fc:	469e      	mov	lr, r3
 800c9fe:	4770      	bx	lr

0800ca00 <_fini>:
 800ca00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca02:	bf00      	nop
 800ca04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca06:	bc08      	pop	{r3}
 800ca08:	469e      	mov	lr, r3
 800ca0a:	4770      	bx	lr
